{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"AWS Prototyping SDK (PDK) The PDK contains a set of useful CDK and Projen constructs, vended in multiple languages. All stable constructs live in the following respective package: TS JAVA PYTHON aws-prototpying-sdk software.aws.awsprototypingsdk/aws-prototyping-sdk aws_prototyping_sdk For packages marked experimental , please refer to the usage instruction contained within the respective package documentation. API Reference Developer Guide","title":"AWS Prototyping SDK (PDK)"},{"location":"index.html#aws-prototyping-sdk-pdk","text":"The PDK contains a set of useful CDK and Projen constructs, vended in multiple languages. All stable constructs live in the following respective package: TS JAVA PYTHON aws-prototpying-sdk software.aws.awsprototypingsdk/aws-prototyping-sdk aws_prototyping_sdk For packages marked experimental , please refer to the usage instruction contained within the respective package documentation. API Reference Developer Guide","title":"AWS Prototyping SDK (PDK)"},{"location":"java/cloudscape-react-ts-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/cloudscape-react-ts-website Getting started To create a new Cloudscape React Typescript Project, there are a couple of options: Via Projen CLI npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>] Programmatically // Example automatically generated from non-compiling source. May contain errors. CloudscapeReactTsWebsiteProject . Builder . create () . defaultReleaseBranch ( \"mainline\" ) . name ( \"<name-of-package>\" ) . applicationName ( \"<name-of-app>\" ) . build (); Running your synthesized Application To run your synthesized application locally, run npx projen dev . Developer Notes To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: // Example automatically generated from non-compiling source. May contain errors. Object userIdentity = new UserIdentity ( this , \"UserIdentity\" ); StaticWebsite . Builder . create ( this , \"StaticWebsite\" ) . websiteContentPath ( \"<relative>/<path>/<to>/<built>/<website>\" ) . runtimeOptions ( Map . of ( \"jsonPayload\" , Map . of ( \"region\" , Stack . of ( this ). getRegion (), \"identityPoolId\" , userIdentity . getIdentityPool (). getIdentityPoolId (), \"userPoolId\" , userIdentity . getUserPool (). getUserPoolId (), \"userPoolWebClientId\" , userIdentity . getUserPoolClient (). getUserPoolClientId ()))) . build (); For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json API Reference Structs CloudscapeReactTsWebsiteProjectOptions Configuration options for the CloudscapeReactTsWebsiteProject. Initializer import software.aws.awsprototypingsdk.cloudscapereacttswebsite.CloudscapeReactTsWebsiteProjectOptions ; CloudscapeReactTsWebsiteProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .rewire(java.util.Map<java.lang.String, java.lang.Object>) // .applicationName(java.lang.String) // .publicDir(java.lang.String) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. rewire java.util.Map Rewire webpack configuration. applicationName java.lang.String Name of the application name. publicDir java.lang.String Public directory. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Author's Organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public java . util . List < ScopedPackagesOptions > getScopedPackagesOptions (); Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public java . lang . Number getMinMajorVersion (); Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < JobStep > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional public java . util . Map < java . lang . String , java . lang . Object > getRewire (); Type: java.util.Map Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired applicationName Optional public java . lang . String getApplicationName (); Type: java.lang.String Default: \"Sample App\" Name of the application name. publicDir Optional public java . lang . String getPublicDir (); Type: java.lang.String Default: \"public\" Public directory. Classes CloudscapeReactTsWebsiteProject Synthesizes a Cloudscape React Typescript Website Project. Initializers import software.aws.awsprototypingsdk.cloudscapereacttswebsite.CloudscapeReactTsWebsiteProject ; CloudscapeReactTsWebsiteProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .rewire(java.util.Map<java.lang.String, java.lang.Object>) // .applicationName(java.lang.String) // .publicDir(java.lang.String) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. rewire java.util.Map Rewire webpack configuration. applicationName java.lang.String Name of the application name. publicDir java.lang.String Public directory. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Author's Organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional Type: java.util.Map Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired applicationName Optional Type: java.lang.String Default: \"Sample App\" Name of the application name. publicDir Optional Type: java.lang.String Default: \"public\" Public directory. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this pacakge. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which source files reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. applicationName java.lang.String No description. publicDir java.lang.String No description. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this pacakge. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which source files reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig applicationName Required public java . lang . String getApplicationName (); Type: java.lang.String publicDir Required public java . lang . String getPublicDir (); Type: java.lang.String Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"java/cloudscape-react-ts-website/index.html#getting-started","text":"To create a new Cloudscape React Typescript Project, there are a couple of options:","title":"Getting started"},{"location":"java/cloudscape-react-ts-website/index.html#via-projen-cli","text":"npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>]","title":"Via Projen CLI"},{"location":"java/cloudscape-react-ts-website/index.html#programmatically","text":"// Example automatically generated from non-compiling source. May contain errors. CloudscapeReactTsWebsiteProject . Builder . create () . defaultReleaseBranch ( \"mainline\" ) . name ( \"<name-of-package>\" ) . applicationName ( \"<name-of-app>\" ) . build ();","title":"Programmatically"},{"location":"java/cloudscape-react-ts-website/index.html#running-your-synthesized-application","text":"To run your synthesized application locally, run npx projen dev .","title":"Running your synthesized Application"},{"location":"java/cloudscape-react-ts-website/index.html#developer-notes","text":"To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: // Example automatically generated from non-compiling source. May contain errors. Object userIdentity = new UserIdentity ( this , \"UserIdentity\" ); StaticWebsite . Builder . create ( this , \"StaticWebsite\" ) . websiteContentPath ( \"<relative>/<path>/<to>/<built>/<website>\" ) . runtimeOptions ( Map . of ( \"jsonPayload\" , Map . of ( \"region\" , Stack . of ( this ). getRegion (), \"identityPoolId\" , userIdentity . getIdentityPool (). getIdentityPoolId (), \"userPoolId\" , userIdentity . getUserPool (). getUserPoolId (), \"userPoolWebClientId\" , userIdentity . getUserPoolClient (). getUserPoolClientId ()))) . build (); For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json","title":"Developer Notes"},{"location":"java/cloudscape-react-ts-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/cloudscape-react-ts-website/index.html#structs","text":"","title":"Structs "},{"location":"java/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteprojectoptions","text":"Configuration options for the CloudscapeReactTsWebsiteProject.","title":"CloudscapeReactTsWebsiteProjectOptions "},{"location":"java/cloudscape-react-ts-website/index.html#classes","text":"","title":"Classes "},{"location":"java/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteproject","text":"Synthesizes a Cloudscape React Typescript Website Project.","title":"CloudscapeReactTsWebsiteProject "},{"location":"java/identity/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/identity This module by default deploys a configurable Identity Provider with a default Cognito User Pool. These resources can be used by your website to restrict access to only authenticated users if needed. All settings are configurable and the creation of these AuthN resources can be disabled if needed or configured to use custom AuthN providers i.e. Facebook, Google, etc. Below is a conceptual view of the default architecture this module creates: Cognito User Pool --------------------> Identity Pool |_ User Pool Client |_ Unauthenticated IAM Role |_ Authenticated IAM Role API Reference Constructs UserIdentity Creates an Identity Pool with sane defaults configured. Initializers import software.aws.awsprototypingsdk.identity.UserIdentity ; UserIdentity . Builder . create ( Construct scope , java . lang . String id ) // .identityPoolOptions(IdentityPoolProps) // .userPool(UserPool) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. identityPoolOptions software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPoolProps Configuration for the Identity Pool. userPool software.amazon.awscdk.services.cognito.UserPool User provided Cognito UserPool. scope Required Type: software.constructs.Construct id Required Type: java.lang.String identityPoolOptions Optional Type: software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPoolProps Configuration for the Identity Pool. userPool Optional Type: software.amazon.awscdk.services.cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.identity.UserIdentity ; UserIdentity . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. identityPool software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPool No description. userPool software.amazon.awscdk.services.cognito.UserPool No description. userPoolClient software.amazon.awscdk.services.cognito.UserPoolClient No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. identityPool Required public IdentityPool getIdentityPool (); Type: software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPool userPool Required public UserPool getUserPool (); Type: software.amazon.awscdk.services.cognito.UserPool userPoolClient Optional public UserPoolClient getUserPoolClient (); Type: software.amazon.awscdk.services.cognito.UserPoolClient Structs UserIdentityProps Properties which configures the Identity Pool. Initializer import software.aws.awsprototypingsdk.identity.UserIdentityProps ; UserIdentityProps . builder () // .identityPoolOptions(IdentityPoolProps) // .userPool(UserPool) . build (); Properties Name Type Description identityPoolOptions software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPoolProps Configuration for the Identity Pool. userPool software.amazon.awscdk.services.cognito.UserPool User provided Cognito UserPool. identityPoolOptions Optional public IdentityPoolProps getIdentityPoolOptions (); Type: software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPoolProps Configuration for the Identity Pool. userPool Optional public UserPool getUserPool (); Type: software.amazon.awscdk.services.cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool.","title":"Index"},{"location":"java/identity/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/identity/index.html#constructs","text":"","title":"Constructs "},{"location":"java/identity/index.html#useridentity","text":"Creates an Identity Pool with sane defaults configured.","title":"UserIdentity "},{"location":"java/identity/index.html#structs","text":"","title":"Structs "},{"location":"java/identity/index.html#useridentityprops","text":"Properties which configures the Identity Pool.","title":"UserIdentityProps "},{"location":"java/nx-monorepo/index.html","text":"The nx-monorepo package vends a NxMonorepoProject Projen construct that adds NX monorepo support and manages your yarn/npm/pnpm workspaces on your behalf. This construct enables polygot builds (and inter language build dependencies), build caching, dependency visualization and much, much more. The PDK itself uses the nx-monorepo project itself and is a good reference for seeing how a complex, polygot monorepo can be set up. To get started simply run the following command in an empty directory: npx projen new --from aws-prototyping-sdk nx-monorepo This will boostrap a new Projen monorepo and contain the following in the .projenrc.ts: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); project . synth (); To add new packages to the monorepo, you can simply add them as a child to the monorepo. To demonstrate, lets add a PDK Pipeline TS Project as a child as follows: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); project . synth (); Once added, run npx projen from the root directory. You will now notice a new TS package has been created under the packages/cicd path. Now let's add a python project to the monorepo and add an inter-language build dependency. import { nx_monorepo } from \"aws-prototyping-sdk\" ; import { PDKPipelineTsProject } from \"aws-prototyping-sdk/pipeline\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"test\" , }); const pipelineProject = new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); // Standard Projen projects also work here const pythonlib = new PythonProject ({ parent : project , outdir : \"packages/pythonlib\" , authorEmail : \"\" , authorName : \"\" , module Name : \"pythonlib\" , name : \"pythonlib\" , version : \"0.0.0\" }); // Pipeline project depends on pythonlib to build first project . addImplicitDependency ( pipelineProject , pythonlib ); project . synth (); Run npx projen from the root directory. You will now notice a new Python package has been created under packages/pythonlib. To visualize our dependency graph, run the following command from the root directory: npx nx graph . Now lets test building our project, from the root directory run npx nx run-many --target=build --all . As you can see, the pythonlib was built first followed by the cicd package. The NxMonorepoProject also manages your yarn/pnpm workspaces for you and synthesizes these into your package.json pnpm-workspace.yml respectively. For more information on NX commands, refer to this documentation . Homogenous Dependencies As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code. Typescript Since the NxMonorepoProject manages a yarn/npm/pnpm workspace, configuring dependencies between Typescript projects is as straightforward as referencing them in deps . Note that dependencies cannot be added in the same project synthesis ( npx projen ) as when projects are created. This means a two-pass approach is recommended, first to create your new projects, and then to add the dependencies. For example: First add your new projects: new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , }); Synthesise, then you can set up your dependency: const a = new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , // B depends on A deps : [ a . package . packageName ], }); Python The recommended way to configure dependencies between python projects within your monorepo is to use a single shared virtual environment. You can then install packages you wish to depend on into that environment using pip's Editable Installs . You will also need to add an implicit dependency to tell the monorepo the correct build order for your packages. For example: const sharedEnv : VenvOptions = { envdir : '../../.env' , }; const a = new PythonProject ({ parent : monorepo , outdir : 'packages/a' , module Name : 'a' , name : 'a' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , }); // Install A into the virtual env since it is consumed by B a . tasks . tryFind ( 'install' ) ! . exec ( 'pip install --editable .' ); const b = new PythonProject ({ parent : monorepo , outdir : 'packages/b' , module Name : 'b' , name : 'b' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , // B depends on A deps : [ a . module Name ], }); // Add the implicit dependency so that the monorepo will build A before B monorepo . addImplicitDependency ( b , a ); Java The recommended way to configure dependencies between java projects within your monorepo is to use shared maven repositories. The default java project build will already create a distributable in the correct format for a maven repository in its dist/java folder, so you can use this as a repository. For example: const a = new JavaProject ({ parent : monorepo , outdir : 'packages/a' , groupId : 'com.mycompany' , artifactId : 'a' , name : 'a' , version : '1.0.0' , }); const b = new JavaProject ({ parent : monorepo , outdir : 'packages/b' , groupId : 'com.mycompany' , artifactId : 'b' , name : 'b' , version : '1.0.0' , // Declare the dependency on A deps : [ ` ${ a . pom . groupId } / ${ a . pom . artifactId } @ ${ a . pom . version } ` ], }); // Add the repository b . pom . addRepository ({ url : 'file://../a/dist/java' , id : 'dependency-on-a' , }); // Add the implicit dependency to control build order monorepo . addImplicitDependency ( b , a ); API Reference Structs MonorepoUpgradeDepsOptions Configuration for Monorepo Upgrade Deps task. Initializer import software.aws.awsprototypingsdk.nxmonorepo.MonorepoUpgradeDepsOptions ; MonorepoUpgradeDepsOptions . builder () // .syncpackConfig(SyncpackConfig) // .taskName(java.lang.String) . build (); Properties Name Type Description syncpackConfig SyncpackConfig Syncpack configuration. taskName java.lang.String Name of the task to create. syncpackConfig Optional public SyncpackConfig getSyncpackConfig (); Type: SyncpackConfig Default: SyncpackConfig.DEFAULT_CONFIG Syncpack configuration. No merging is performed and as such a complete syncpackConfig is required if supplied. taskName Optional public java . lang . String getTaskName (); Type: java.lang.String Default: upgrade-deps Name of the task to create. NXConfig NX configurations. https://nx.dev/configuration/packagejson Initializer import software.aws.awsprototypingsdk.nxmonorepo.NXConfig ; NXConfig . builder () // .implicitDependencies(java.util.Map<java.lang.String, java.util.List<java.lang.String>>) // .nxCloudReadOnlyAccessToken(java.lang.String) // .nxIgnore(java.util.List<java.lang.String>) // .targetDependencies(java.util.Map<java.lang.String, java.util.List<TargetDependency>>) . build (); Properties Name Type Description implicitDependencies java.util.Map > Configuration for Implicit Dependnecies. nxCloudReadOnlyAccessToken java.lang.String Read only access token if enabling nx cloud. nxIgnore java.util.List List of patterns to include in the .nxignore file. targetDependencies java.util.Map<java.lang.String, java.util.List< TargetDependency >> Configuration for TargetDependencies. implicitDependencies Optional public java . util . Map < java . lang . String , java . util . List < java . lang . String >> getImplicitDependencies (); Type: java.util.Map > Configuration for Implicit Dependnecies. https://nx.dev/configuration/packagejson#implicitdependencies nxCloudReadOnlyAccessToken Optional public java . lang . String getNxCloudReadOnlyAccessToken (); Type: java.lang.String Read only access token if enabling nx cloud. nxIgnore Optional public java . util . List < java . lang . String > getNxIgnore (); Type: java.util.List List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore targetDependencies Optional public java . util . Map < java . lang . String , java . util . List < TargetDependency >> getTargetDependencies (); Type: java.util.Map<java.lang.String, java.util.List< TargetDependency >> Configuration for TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer import software.aws.awsprototypingsdk.nxmonorepo.NxMonorepoProjectOptions ; NxMonorepoProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .monorepoUpgradeDeps(java.lang.Boolean) // .monorepoUpgradeDepsOptions(MonorepoUpgradeDepsOptions) // .nxConfig(NXConfig) // .workspaceConfig(WorkspaceConfig) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. monorepoUpgradeDeps java.lang.Boolean Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nxConfig NXConfig Configuration for NX. workspaceConfig WorkspaceConfig Configuration for workspace. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Author's Organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public java . util . List < ScopedPackagesOptions > getScopedPackagesOptions (); Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public java . lang . Number getMinMajorVersion (); Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < JobStep > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepoUpgradeDeps Optional public java . lang . Boolean getMonorepoUpgradeDeps (); Type: java.lang.Boolean Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions Optional public MonorepoUpgradeDepsOptions getMonorepoUpgradeDepsOptions (); Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nxConfig Optional public NXConfig getNxConfig (); Type: NXConfig Configuration for NX. workspaceConfig Optional public WorkspaceConfig getWorkspaceConfig (); Type: WorkspaceConfig Configuration for workspace. ProjectTarget Project Target. Initializer import software.aws.awsprototypingsdk.nxmonorepo.ProjectTarget ; ProjectTarget . builder () . dependsOn ( java . util . List < TargetDependency > ) // .outputs(java.util.List<java.lang.String>) . build (); Properties Name Type Description dependsOn java.util.List< TargetDependency > List of Target Dependencies. outputs java.util.List List of outputs to cache, relative to the root of the monorepo. dependsOn Required public java . util . List < TargetDependency > getDependsOn (); Type: java.util.List< TargetDependency > List of Target Dependencies. outputs Optional public java . util . List < java . lang . String > getOutputs (); Type: java.util.List List of outputs to cache, relative to the root of the monorepo. note: must start with leading / SemverGroup Initializer import software.aws.awsprototypingsdk.nxmonorepo.SemverGroup ; SemverGroup . builder () . dependencies ( java . util . List < java . lang . String > ) . packages ( java . util . List < java . lang . String > ) . range ( java . lang . String ) // .dependencyTypes(java.util.List<java.lang.String>) . build (); Properties Name Type Description dependencies java.util.List the names of the dependencies (eg. packages java.util.List the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range java.lang.String the semver range which dependencies in this group should use. dependencyTypes java.util.List optionally only apply this group to dependencies of the provided types. dependencies Required public java . util . List < java . lang . String > getDependencies (); Type: java.util.List the names of the dependencies (eg. \"lodash\") which belong to this group packages Required public java . util . List < java . lang . String > getPackages (); Type: java.util.List the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range Required public java . lang . String getRange (); Type: java.lang.String the semver range which dependencies in this group should use. dependencyTypes Optional public java . util . List < java . lang . String > getDependencyTypes (); Type: java.util.List optionally only apply this group to dependencies of the provided types. SyncpackConfig Initializer import software.aws.awsprototypingsdk.nxmonorepo.SyncpackConfig ; SyncpackConfig . builder () . dependencyTypes ( java . util . List < java . lang . String > ) . dev ( java . lang . Boolean ) . filter ( java . lang . String ) . indent ( java . lang . String ) . overrides ( java . lang . Boolean ) . peer ( java . lang . Boolean ) . pnpmOverrides ( java . lang . Boolean ) . prod ( java . lang . Boolean ) . resolutions ( java . lang . Boolean ) . semverGroups ( java . util . List < SemverGroup > ) . semverRange ( java . lang . String ) . sortAz ( java . util . List < java . lang . String > ) . sortFirst ( java . util . List < java . lang . String > ) . source ( java . util . List < java . lang . String > ) . versionGroups ( java . util . List < VersionGroup > ) . workspace ( java . lang . Boolean ) . build (); Properties Name Type Description dependencyTypes java.util.List which dependency properties to search within. dev java.lang.Boolean whether to search within devDependencies. filter java.lang.String a string which will be passed to new RegExp() to match against package names that should be included. indent java.lang.String the character(s) to be used to indent your package.json files when writing to disk. overrides java.lang.Boolean whether to search within npm overrides. peer java.lang.Boolean whether to search within peerDependencies. pnpmOverrides java.lang.Boolean whether to search within pnpm overrides. prod java.lang.Boolean whether to search within dependencies. resolutions java.lang.Boolean whether to search within yarn resolutions. semverGroups java.util.List< SemverGroup > No description. semverRange java.lang.String defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sortAz java.util.List which fields within package.json files should be sorted alphabetically. sortFirst java.util.List which fields within package.json files should appear at the top, and in what order. source java.util.List glob patterns for package.json file locations. versionGroups java.util.List< VersionGroup > No description. workspace java.lang.Boolean whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. dependencyTypes Required public java . util . List < java . lang . String > getDependencyTypes (); Type: java.util.List which dependency properties to search within. dev Required public java . lang . Boolean getDev (); Type: java.lang.Boolean whether to search within devDependencies. filter Required public java . lang . String getFilter (); Type: java.lang.String a string which will be passed to new RegExp() to match against package names that should be included. indent Required public java . lang . String getIndent (); Type: java.lang.String the character(s) to be used to indent your package.json files when writing to disk. overrides Required public java . lang . Boolean getOverrides (); Type: java.lang.Boolean whether to search within npm overrides. peer Required public java . lang . Boolean getPeer (); Type: java.lang.Boolean whether to search within peerDependencies. pnpmOverrides Required public java . lang . Boolean getPnpmOverrides (); Type: java.lang.Boolean whether to search within pnpm overrides. prod Required public java . lang . Boolean getProd (); Type: java.lang.Boolean whether to search within dependencies. resolutions Required public java . lang . Boolean getResolutions (); Type: java.lang.Boolean whether to search within yarn resolutions. semverGroups Required public java . util . List < SemverGroup > getSemverGroups (); Type: java.util.List< SemverGroup > semverRange Required public java . lang . String getSemverRange (); Type: java.lang.String defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sortAz Required public java . util . List < java . lang . String > getSortAz (); Type: java.util.List which fields within package.json files should be sorted alphabetically. sortFirst Required public java . util . List < java . lang . String > getSortFirst (); Type: java.util.List which fields within package.json files should appear at the top, and in what order. source Required public java . util . List < java . lang . String > getSource (); Type: java.util.List glob patterns for package.json file locations. versionGroups Required public java . util . List < VersionGroup > getVersionGroups (); Type: java.util.List< VersionGroup > workspace Required public java . lang . Boolean getWorkspace (); Type: java.lang.Boolean whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. TargetDependency Represents an NX Target Dependency. Initializer import software.aws.awsprototypingsdk.nxmonorepo.TargetDependency ; TargetDependency . builder () . projects ( TargetDependencyProject ) . target ( java . lang . String ) . build (); Properties Name Type Description projects TargetDependencyProject Target dependencies. target java.lang.String Projen target i.e: build, test, etc. projects Required public TargetDependencyProject getProjects (); Type: TargetDependencyProject Target dependencies. target Required public java . lang . String getTarget (); Type: java.lang.String Projen target i.e: build, test, etc. VersionGroup Initializer import software.aws.awsprototypingsdk.nxmonorepo.VersionGroup ; VersionGroup . builder () . dependencies ( java . util . List < java . lang . String > ) . packages ( java . util . List < java . lang . String > ) // .dependencyTypes(java.util.List<java.lang.String>) // .isBanned(java.lang.Boolean) // .pinVersion(java.lang.String) . build (); Properties Name Type Description dependencies java.util.List the names of the dependencies (eg. packages java.util.List the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependencyTypes java.util.List optionally only apply this group to dependencies of the provided types. isBanned java.lang.Boolean optionally force all dependencies in this group to be removed. pinVersion java.lang.String optionally force all dependencies in this group to have this version. dependencies Required public java . util . List < java . lang . String > getDependencies (); Type: java.util.List the names of the dependencies (eg. \"lodash\") which belong to this group packages Required public java . util . List < java . lang . String > getPackages (); Type: java.util.List the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependencyTypes Optional public java . util . List < java . lang . String > getDependencyTypes (); Type: java.util.List optionally only apply this group to dependencies of the provided types. isBanned Optional public java . lang . Boolean getIsBanned (); Type: java.lang.Boolean optionally force all dependencies in this group to be removed. pinVersion Optional public java . lang . String getPinVersion (); Type: java.lang.String optionally force all dependencies in this group to have this version. WorkspaceConfig Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/ Initializer import software.aws.awsprototypingsdk.nxmonorepo.WorkspaceConfig ; WorkspaceConfig . builder () // .noHoist(java.util.List<java.lang.String>) . build (); Properties Name Type Description noHoist java.util.List List of package globs to exclude from hoisting in the workspace. noHoist Optional public java . util . List < java . lang . String > getNoHoist (); Type: java.util.List List of package globs to exclude from hoisting in the workspace. https://classic.yarnpkg.com/blog/2018/02/15/nohoist/ Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers import software.aws.awsprototypingsdk.nxmonorepo.NxMonorepoProject ; NxMonorepoProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .monorepoUpgradeDeps(java.lang.Boolean) // .monorepoUpgradeDepsOptions(MonorepoUpgradeDepsOptions) // .nxConfig(NXConfig) // .workspaceConfig(WorkspaceConfig) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. monorepoUpgradeDeps java.lang.Boolean Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nxConfig NXConfig Configuration for NX. workspaceConfig WorkspaceConfig Configuration for workspace. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Author's Organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepoUpgradeDeps Optional Type: java.lang.Boolean Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions Optional Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nxConfig Optional Type: NXConfig Configuration for NX. workspaceConfig Optional Type: WorkspaceConfig Configuration for workspace. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's. overrideProjectTargets Allow project specific target overrides. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. addImplicitDependency public void addImplicitDependency ( Project dependent , Project dependee ) Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: io.github.cdklabs.projen.Project project you want to have the dependency. dependee Required Type: io.github.cdklabs.projen.Project project you wish to depend on. overrideProjectTargets public void overrideProjectTargets ( Project project , java . util . Map < java . lang . String , ProjectTarget > targets ) Allow project specific target overrides. project Required Type: io.github.cdklabs.projen.Project targets Required Type: java.util.Map ProjectTarget\\ > Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this pacakge. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. subProjects java.util.List No description. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this pacakge. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig subProjects Required public java . util . List < Project > getSubProjects (); Type: java.util.List Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums TargetDependencyProject Supported enums for a TargetDependency. Members Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. SELF Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages. DEPENDENCIES Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"Index"},{"location":"java/nx-monorepo/index.html#homogenous-dependencies","text":"As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code.","title":"Homogenous Dependencies"},{"location":"java/nx-monorepo/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/nx-monorepo/index.html#structs","text":"","title":"Structs "},{"location":"java/nx-monorepo/index.html#monorepoupgradedepsoptions","text":"Configuration for Monorepo Upgrade Deps task.","title":"MonorepoUpgradeDepsOptions "},{"location":"java/nx-monorepo/index.html#nxconfig","text":"NX configurations. https://nx.dev/configuration/packagejson","title":"NXConfig "},{"location":"java/nx-monorepo/index.html#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"java/nx-monorepo/index.html#projecttarget","text":"Project Target.","title":"ProjectTarget "},{"location":"java/nx-monorepo/index.html#semvergroup","text":"","title":"SemverGroup "},{"location":"java/nx-monorepo/index.html#syncpackconfig","text":"","title":"SyncpackConfig "},{"location":"java/nx-monorepo/index.html#targetdependency","text":"Represents an NX Target Dependency.","title":"TargetDependency "},{"location":"java/nx-monorepo/index.html#versiongroup","text":"","title":"VersionGroup "},{"location":"java/nx-monorepo/index.html#workspaceconfig","text":"Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/","title":"WorkspaceConfig "},{"location":"java/nx-monorepo/index.html#classes","text":"","title":"Classes "},{"location":"java/nx-monorepo/index.html#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"java/nx-monorepo/index.html#enums","text":"","title":"Enums "},{"location":"java/nx-monorepo/index.html#targetdependencyproject","text":"Supported enums for a TargetDependency.","title":"TargetDependencyProject "},{"location":"java/open-api-gateway/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/open-api-gateway OpenAPI Gateway Define your APIs using OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given a lambda integration for every operation. The project will generate models and clients from your OpenAPI spec in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure a lambda integration is provided for every API integration. When you change your API specification, just run npx projen again to regenerate all of this! Project Typescript It's recommended that this project is used as part of an nx_monorepo project. You can still use this as a standalone project if you like (eg npx projen new --from @aws-prototyping-sdk/open-api-gateway open-api-gateway-ts ), however you will need to manage build order (ie building the generated client first, followed by the project). For usage in a monorepo: Create the project in your .projenrc: // Example automatically generated from non-compiling source. May contain errors. import software.aws.awsprototypingsdk.openapigateway.ClientLanguage ; import software.aws.awsprototypingsdk.openapigateway.DocumentationFormat ; import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayTsProject ; OpenApiGatewayTsProject . Builder . create () . parent ( myNxMonorepo ) . defaultReleaseBranch ( \"mainline\" ) . name ( \"my-api\" ) . outdir ( \"packages/api\" ) . clientLanguages ( List . of ( ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA )) . documentationFormats ( List . of ( DocumentationFormat . HTML2 , DocumentationFormat . PLANTUML , DocumentationFormat . MARKDOWN )) . build (); In the output directory ( outdir ), you'll find a few files to get you started. |_ src/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.ts - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayLambdaApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample-api.ts. |_ sample-api.ts - Example usage of the construct defined in api.ts. |_ sample-api.say-hello.ts - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client, including generated lambda handler wrappers |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation If you would prefer to not generate the sample code, you can pass sampleCode: false to OpenApiGatewayTsProject . To make changes to your api, simply update spec.yaml and run npx projen to synthesize all the typesafe client/server code! The SampleApi construct uses NodejsFunction to declare the example lambda, but you are free to change this! Python As well as typescript, you can choose to generate the cdk construct and sample handler in python. // Example automatically generated from non-compiling source. May contain errors. OpenApiGatewayPythonProject . Builder . create () . parent ( myNxMonorepo ) . outdir ( \"packages/myapi\" ) . name ( \"myapi\" ) . moduleName ( \"myapi\" ) . version ( \"1.0.0\" ) . authorName ( \"jack\" ) . authorEmail ( \"me@example.com\" ) . clientLanguages ( List . of ( ClientLanguage . getTYPESCRIPT (), ClientLanguage . getPYTHON (), ClientLanguage . getJAVA ())) . build (); You will need to set up a shared virtual environment and configure dependencies via the monorepo (see README.md for the nx-monorepo package). An example of a full .projenrc.ts might be: import software.aws.awsprototypingsdk.nxmonorepo.* ; import software.aws.awsprototypingsdk.openapigateway.ClientLanguage ; import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayPythonProject ; import io.github.cdklabs.projen.AwsCdkPythonApp.AwsCdkPythonApp ; NxMonorepoProject monorepo = NxMonorepoProject . Builder . create () . defaultReleaseBranch ( \"main\" ) . devDeps ( List . of ( \"aws-prototyping-sdk\" , \"@aws-prototyping-sdk/open-api-gateway\" )) . name ( \"open-api-test\" ) . build (); OpenApiGatewayPythonProject api = OpenApiGatewayPythonProject . Builder . create () . parent ( monorepo ) . outdir ( \"packages/myapi\" ) . name ( \"myapi\" ) . moduleName ( \"myapi\" ) . version ( \"1.0.0\" ) . authorName ( \"jack\" ) . authorEmail ( \"me@example.com\" ) . clientLanguages ( List . of ( ClientLanguage . TYPESCRIPT )) . venvOptions ( VenvOptions . builder () // Use a shared virtual env dir. // The generated python client will also use this virtual env dir . envdir ( \"../../.env\" ) . build ()) . build (); // Install into virtual env so it's available for the cdk app api . tasks . tryFind ( \"install\" ). exec ( \"pip install --editable .\" ); AwsCdkPythonApp app = AwsCdkPythonApp . Builder . create () . authorName ( \"jack\" ) . authorEmail ( \"me@example.com\" ) . cdkVersion ( \"2.1.0\" ) . moduleName ( \"myapp\" ) . name ( \"myapp\" ) . version ( \"1.0.0\" ) . parent ( monorepo ) . outdir ( \"packages/myapp\" ) . deps ( List . of ( api . getModuleName ())) . venvOptions ( VenvOptions . builder () . envdir ( \"../../.env\" ) . build ()) . build (); monorepo . addImplicitDependency ( app , api ); monorepo . synth (); You'll find the following directory structure in packages/myapi : |_ myapi/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.py - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayLambdaApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample_api.py. |_ sample_api.py - Example usage of the construct defined in api.py. |_ handlers/ |_ say_hello_handler_sample.py - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client, including generated lambda handler wrappers. |_ java/ - A generated java API client. For simplicity, the generated code deploys a lambda layer for the generated code and its dependencies. You may choose to define an entirely separate projen PythonProject for your lambda handlers should you wish to add more dependencies than just the generated code. OpenAPI Specification Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message Construct A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. // Example automatically generated from non-compiling source. May contain errors. import path.* ; import software.aws.awsprototypingsdk.openapigateway.Authorizers ; import software.amazon.awscdk.services.lambda.nodejs.NodejsFunction ; import software.constructs.Construct ; import api.Api ; /** * An example of how to wire lambda handler functions to the API */ public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"defaultAuthorizer\" , Authorizers . iam (), \"integrations\" , Map . of ( // Every operation defined in your API must have an integration defined! \"sayHello\" , Map . of ( \"function\" , new NodejsFunction ( scope , \"say-hello\" ))))); } } Authorizers The Api construct allows you to define one or more authorizers for securing your API. An integration will use the defaultAuthorizer unless an authorizer is specified at the integration level. The following authorizers are supported: Authorizers.none - No auth Authorizers.iam - AWS IAM (Signature Version 4) Authorizers.cognito - Cognito user pool Authorizers.custom - A custom authorizer Cognito Authorizer To use the Cognito authorizer, one or more user pools must be provided. You can optionally specify the scopes to check if using an access token. You can use the withScopes method to use the same authorizer but verify different scopes for individual integrations, for example: // Example automatically generated from non-compiling source. May contain errors. public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { Object cognitoAuthorizer = Authorizers . cognito ( Map . of ( \"authorizerId\" , \"myCognitoAuthorizer\" , \"userPools\" , List . of ( new UserPool ( scope , \"UserPool\" )))); super ( scope , id , Map . of ( \"defaultAuthorizer\" , cognitoAuthorizer , \"integrations\" , Map . of ( // Everyone in the user pool can call this operation: \"sayHello\" , Map . of ( \"function\" , new NodejsFunction ( scope , \"say-hello\" )), // Only users with the given scopes can call this operation \"myRestrictedOperation\" , Map . of ( \"function\" , new NodejsFunction ( scope , \"my-restricted-operation\" ), \"authorizer\" , cognitoAuthorizer . withScopes ( \"my-resource-server/my-scope\" ))))); } } For more information about scopes or identity and access tokens, please see the API Gateway documentation . Custom Authorizer Custom authorizers use lambda functions to handle authorizing requests. These can either be simple token-based authorizers, or more complex request-based authorizers. See the API Gateway documentation for more details. An example token-based authorizer (default): // Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( Map . of ( \"authorizerId\" , \"myTokenAuthorizer\" , \"function\" , new NodejsFunction ( scope , \"authorizer\" ))); An example request-based handler. By default the identitySource will be method.request.header.Authorization , however you can customise this as per the API Gateway documentation . // Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( Map . of ( \"authorizerId\" , \"myRequestAuthorizer\" , \"type\" , CustomAuthorizerType . getREQUEST (), \"identitySource\" , \"method.request.header.MyCustomHeader, method.request.querystring.myQueryString\" , \"function\" , new NodejsFunction ( scope , \"authorizer\" ))); Generated Client Typescript The typescript-fetch OpenAPI generator is used to generate OpenAPI clients for typescript. This requires an implementation of fetch to be passed to the client. In the browser one can pass the built in fetch, or in NodeJS you can use an implementation such as node-fetch . Example usage of the client in a website: // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.Configuration ; import my.api.typescript.client.DefaultApi ; Object client = new DefaultApi ( Configuration . Builder . create () . basePath ( \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) . fetchApi ( window . fetch . bind ( window )) . build ()); await client . sayHello ({ name : \"Jack\" }); Python The python-experimental OpenAPI generator is used to generate OpenAPI clients for python. Example usage: from my_api_python import ApiClient , Configuration from my_api_python.api.default_api import DefaultApi configuration = Configuration ( host = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) with ApiClient ( configuration ) as api_client : client = DefaultApi ( api_client ) client . say_hello ( query_params = { 'name' : \"name_example\" , }, ) You'll find details about how to use the python client in the README.md alongside your generated client. Lambda Handler Wrappers Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification. Typescript // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.sayHelloHandler ; Object handler = sayHelloHandler ( async ( input ) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ! ` , }, }; }); Python from myapi_python.api.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> ApiResponse [ HelloResponse , ApiError ]: return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Interceptors The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next(input, event, context) . Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next . Typescript In typescript, interceptors are passed as separate arguments to the generated handler wrapper, in the order in which they should be executed. // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.sayHelloHandler ; import my.api.typescript.client.LambdaRequestParameters ; import my.api.typescript.client.LambdaHandlerChain ; // Interceptor to wrap invocations in a try/catch, returning a 500 error for any unhandled exceptions. __function tryCatchInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( input : LambdaRequestParameters < RequestParameters , RequestArrayParameters , RequestBody > , event : any , context : any , chain : LambdaHandlerChain < RequestParameters , RequestArrayParameters , RequestBody , Response > , ): Promise < Response | OperationResponse < 500 , { errorMessage : string } >> => { try { return await chain . next ( input , event , context ); } catch ( e : any ) { return { statusCode : 500 , body : { errorMessage : e . message }}; } }; // tryCatchInterceptor is passed first, so it runs first and calls the second argument function (the request handler) via chain.next Object handler = sayHelloHandler ( tryCatchInterceptor , async ( input ) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ! ` , }, }; }); Another example interceptor might be to record request time metrics. The example below includes the full generic type signature for an interceptor: // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.LambdaRequestParameters ; import my.api.typescript.client.LambdaHandlerChain ; __function timingInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( input : LambdaRequestParameters < RequestParameters , RequestArrayParameters , RequestBody > , event : any , context : any , chain : LambdaHandlerChain < RequestParameters , RequestArrayParameters , RequestBody , Response > , ): Promise < Response > => { const start = Date . now (); const response = await chain . next ( input , event , context ); const end = Date . now (); console . log ( ` Took $ { end - start } ms ` ); return response ; }; Other Details Workspaces and OpenApiGatewayTsProject OpenApiGatewayTsProject can be used as part of a monorepo using YARN/NPM/PNPM workspaces. When used in a monorepo, a dependency is established between OpenApiGatewayTsProject and the generated typescript client, which is expected to be managed by the parent monorepo (ie both OpenApiGatewayTsProject and the generated typescript client are parented by the monorepo). During initial project synthesis, the dependency between OpenApiGatewayTsProject and the generated client is established via workspace configuration local to OpenApiGatewayTsProject , since the parent monorepo will not have updated to include the new packages in time for the initial \"install\". When the package manager is PNPM, this initial workspace is configured by creating a local pnpm-workspace.yaml file, and thus if you specify your own for an instance of OpenApiGatewayTsProject , synthesis will fail. It is most likely that you will not need to define this file locally in OpenApiGatewayTsProject since the monorepo copy should be used to manage all packages within the repo, however if managing this file at the OpenApiGatewayTsProject level is required, please use the pnpmWorkspace property of OpenApiGatewayTsProject . Customising Generated Client Projects By default, the generated clients are configured automatically, including project names. You can customise the generated client code using the <language>ProjectOptions properties when constructing your projen project. Python Shared Virtual Environment For adding dependencies between python projects within a monorepo you can use a single shared virtual environment, and install your python projects into that environment with pip install --editable . in the dependee. The generated python client will automatically do this if it detects it is within a monorepo. The following example shows how to configure the generated client to use a shared virtual environment: // Example automatically generated from non-compiling source. May contain errors. Object api = OpenApiGatewayTsProject . Builder . create () . parent ( monorepo ) . name ( \"api\" ) . outdir ( \"packages/api\" ) . defaultReleaseBranch ( \"main\" ) . clientLanguages ( List . of ( ClientLanguage . getPYTHON ())) . pythonClientOptions ( Map . of ( \"moduleName\" , \"my_api_python\" , \"name\" , \"my_api_python\" , \"authorName\" , \"jack\" , \"authorEmail\" , \"me@example.com\" , \"version\" , \"1.0.0\" , \"venvOptions\" , Map . of ( // Directory relative to the generated python client (in this case packages/api/generated/python) \"envdir\" , \"../../../../.env\" ))) . build (); PythonProject . Builder . create () . parent ( monorepo ) . outdir ( \"packages/my-python-lib\" ) . moduleName ( \"my_python_lib\" ) . name ( \"my_python_lib\" ) . authorName ( \"jack\" ) . authorEmail ( \"me@example.com\" ) . version ( \"1.0.0\" ) . venvOptions ( Map . of ( // Directory relative to the python lib (in this case packages/my-python-lib) \"envdir\" , \"../../.env\" )) // Generated client can be safely cast to a PythonProject . deps ( List . of ((( Object ) api . getGeneratedClients () [ ClientLanguage . getPYTHON () ] ). getModuleName ())) . build (); API Reference Constructs OpenApiGatewayLambdaApi A construct for creating an api gateway api based on the definition in the OpenAPI spec. Initializers import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayLambdaApi ; OpenApiGatewayLambdaApi . Builder . create ( Construct scope , java . lang . String id ) // .cloudWatchRole(java.lang.Boolean) // .deploy(java.lang.Boolean) // .deployOptions(StageOptions) // .description(java.lang.String) // .disableExecuteApiEndpoint(java.lang.Boolean) // .domainName(DomainNameOptions) // .endpointExportName(java.lang.String) // .endpointTypes(java.util.List<EndpointType>) // .failOnWarnings(java.lang.Boolean) // .parameters(java.util.Map<java.lang.String, java.lang.String>) // .policy(PolicyDocument) // .restApiName(java.lang.String) // .retainDeployments(java.lang.Boolean) . integrations ( java . util . Map < java . lang . String , OpenApiIntegration > ) . operationLookup ( java . util . Map < java . lang . String , MethodAndPath > ) // .corsOptions(CorsOptions) // .defaultAuthorizer(Authorizer) . spec ( java . lang . Object ) . specPath ( java . lang . String ) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. cloudWatchRole java.lang.Boolean Automatically configure an AWS CloudWatch role for API Gateway. deploy java.lang.Boolean Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deployOptions software.amazon.awscdk.services.apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description java.lang.String A description of the RestApi construct. disableExecuteApiEndpoint java.lang.Boolean Specifies whether clients can invoke the API using the default execute-api endpoint. domainName software.amazon.awscdk.services.apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpointExportName java.lang.String Export name for the CfnOutput containing the API endpoint. endpointTypes java.util.List A list of the endpoint types of the API. failOnWarnings java.lang.Boolean Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters java.util.Map Custom header parameters for the request. policy software.amazon.awscdk.services.iam.PolicyDocument A policy document that contains the permissions for this RestApi. restApiName java.lang.String A name for the API Gateway RestApi resource. retainDeployments java.lang.Boolean Retains old deployment resources when the API changes. integrations java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup java.util.Map MethodAndPath\\ > Details about each operation. corsOptions software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. spec java.lang.Object The parsed OpenAPI specification. specPath java.lang.String Path to the JSON open api spec. scope Required Type: software.constructs.Construct id Required Type: java.lang.String cloudWatchRole Optional Type: java.lang.Boolean Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional Type: java.lang.Boolean Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deployOptions Optional Type: software.amazon.awscdk.services.apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional Type: java.lang.String Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disableExecuteApiEndpoint Optional Type: java.lang.Boolean Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domainName Optional Type: software.amazon.awscdk.services.apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpointExportName Optional Type: java.lang.String Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpointTypes Optional Type: java.util.List Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. failOnWarnings Optional Type: java.lang.Boolean Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional Type: java.util.Map Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional Type: software.amazon.awscdk.services.iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. restApiName Optional Type: java.lang.String Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retainDeployments Optional Type: java.lang.Boolean Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required Type: java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup Required Type: java.util.Map MethodAndPath\\ > Details about each operation. corsOptions Optional Type: software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional Type: Authorizer The default authorizer to use for your api. When omitted, no authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required Type: java.lang.Object The parsed OpenAPI specification. specPath Required Type: java.lang.String Path to the JSON open api spec. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayLambdaApi ; OpenApiGatewayLambdaApi . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. api software.amazon.awscdk.services.apigateway.SpecRestApi No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. api Required public SpecRestApi getApi (); Type: software.amazon.awscdk.services.apigateway.SpecRestApi Structs AuthorizerProps Properties for an authorizer. Initializer import software.aws.awsprototypingsdk.openapigateway.AuthorizerProps ; AuthorizerProps . builder () . authorizationType ( AuthorizationType ) . authorizerId ( java . lang . String ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. CognitoAuthorizerProps Properties used to configure a cognito authorizer. Initializer import software.aws.awsprototypingsdk.openapigateway.CognitoAuthorizerProps ; CognitoAuthorizerProps . builder () . authorizerId ( java . lang . String ) . userPools ( java . util . List < IUserPool > ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Properties Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. userPools java.util.List The Cognito user pools associated with this authorizer. authorizationScopes java.util.List A list of authorization scopes configured on the method. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String Unique identifier for this authorizer. userPools Required public java . util . List < IUserPool > getUserPools (); Type: java.util.List The Cognito user pools associated with this authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes CustomAuthorizerProps Properties used to configure a custom authorizer. Initializer import software.aws.awsprototypingsdk.openapigateway.CustomAuthorizerProps ; CustomAuthorizerProps . builder () . authorizerId ( java . lang . String ) . function ( IFunction ) // .authorizerResultTtlInSeconds(java.lang.Number) // .identitySource(java.lang.String) // .type(CustomAuthorizerType) . build (); Properties Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. function software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds java.lang.Number The number of seconds during which the authorizer result is cached. identitySource java.lang.String The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String Unique identifier for this authorizer. function Required public IFunction getFunction (); Type: software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds Optional public java . lang . Number getAuthorizerResultTtlInSeconds (); Type: java.lang.Number Default: 300 The number of seconds during which the authorizer result is cached. identitySource Optional public java . lang . String getIdentitySource (); Type: java.lang.String Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional public CustomAuthorizerType getType (); Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type MethodAndPath Structure to contain an API operation's method and path. Initializer import software.aws.awsprototypingsdk.openapigateway.MethodAndPath ; MethodAndPath . builder () . method ( java . lang . String ) . path ( java . lang . String ) . build (); Properties Name Type Description method java.lang.String The http method of this operation. path java.lang.String The path of this operation in the api. method Required public java . lang . String getMethod (); Type: java.lang.String The http method of this operation. path Required public java . lang . String getPath (); Type: java.lang.String The path of this operation in the api. OpenApiGatewayLambdaApiProps Configuration for the OpenApiGatewayLambdaApi construct. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayLambdaApiProps ; OpenApiGatewayLambdaApiProps . builder () // .cloudWatchRole(java.lang.Boolean) // .deploy(java.lang.Boolean) // .deployOptions(StageOptions) // .description(java.lang.String) // .disableExecuteApiEndpoint(java.lang.Boolean) // .domainName(DomainNameOptions) // .endpointExportName(java.lang.String) // .endpointTypes(java.util.List<EndpointType>) // .failOnWarnings(java.lang.Boolean) // .parameters(java.util.Map<java.lang.String, java.lang.String>) // .policy(PolicyDocument) // .restApiName(java.lang.String) // .retainDeployments(java.lang.Boolean) . integrations ( java . util . Map < java . lang . String , OpenApiIntegration > ) . operationLookup ( java . util . Map < java . lang . String , MethodAndPath > ) // .corsOptions(CorsOptions) // .defaultAuthorizer(Authorizer) . spec ( java . lang . Object ) . specPath ( java . lang . String ) . build (); Properties Name Type Description cloudWatchRole java.lang.Boolean Automatically configure an AWS CloudWatch role for API Gateway. deploy java.lang.Boolean Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deployOptions software.amazon.awscdk.services.apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description java.lang.String A description of the RestApi construct. disableExecuteApiEndpoint java.lang.Boolean Specifies whether clients can invoke the API using the default execute-api endpoint. domainName software.amazon.awscdk.services.apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpointExportName java.lang.String Export name for the CfnOutput containing the API endpoint. endpointTypes java.util.List A list of the endpoint types of the API. failOnWarnings java.lang.Boolean Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters java.util.Map Custom header parameters for the request. policy software.amazon.awscdk.services.iam.PolicyDocument A policy document that contains the permissions for this RestApi. restApiName java.lang.String A name for the API Gateway RestApi resource. retainDeployments java.lang.Boolean Retains old deployment resources when the API changes. integrations java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup java.util.Map MethodAndPath\\ > Details about each operation. corsOptions software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. spec java.lang.Object The parsed OpenAPI specification. specPath java.lang.String Path to the JSON open api spec. cloudWatchRole Optional public java . lang . Boolean getCloudWatchRole (); Type: java.lang.Boolean Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional public java . lang . Boolean getDeploy (); Type: java.lang.Boolean Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deployOptions Optional public StageOptions getDeployOptions (); Type: software.amazon.awscdk.services.apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional public java . lang . String getDescription (); Type: java.lang.String Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disableExecuteApiEndpoint Optional public java . lang . Boolean getDisableExecuteApiEndpoint (); Type: java.lang.Boolean Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domainName Optional public DomainNameOptions getDomainName (); Type: software.amazon.awscdk.services.apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpointExportName Optional public java . lang . String getEndpointExportName (); Type: java.lang.String Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpointTypes Optional public java . util . List < EndpointType > getEndpointTypes (); Type: java.util.List Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. failOnWarnings Optional public java . lang . Boolean getFailOnWarnings (); Type: java.lang.Boolean Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional public java . util . Map < java . lang . String , java . lang . String > getParameters (); Type: java.util.Map Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional public PolicyDocument getPolicy (); Type: software.amazon.awscdk.services.iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. restApiName Optional public java . lang . String getRestApiName (); Type: java.lang.String Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retainDeployments Optional public java . lang . Boolean getRetainDeployments (); Type: java.lang.Boolean Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required public java . util . Map < java . lang . String , OpenApiIntegration > getIntegrations (); Type: java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup Required public java . util . Map < java . lang . String , MethodAndPath > getOperationLookup (); Type: java.util.Map MethodAndPath\\ > Details about each operation. corsOptions Optional public CorsOptions getCorsOptions (); Type: software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public Authorizer getDefaultAuthorizer (); Type: Authorizer The default authorizer to use for your api. When omitted, no authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required public java . lang . Object getSpec (); Type: java.lang.Object The parsed OpenAPI specification. specPath Required public java . lang . String getSpecPath (); Type: java.lang.String Path to the JSON open api spec. OpenApiGatewayProjectOptions Options common to all open api gateway projects. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayProjectOptions ; OpenApiGatewayProjectOptions . builder () . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .specFile(java.lang.String) // .typescriptClientOptions(TypeScriptProjectOptions) . build (); Properties Name Type Description clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. specFile Optional public java . lang . String getSpecFile (); Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. OpenApiGatewayPythonProjectOptions Configuration for the OpenApiGatewayPythonProject. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayPythonProjectOptions ; OpenApiGatewayPythonProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .specFile(java.lang.String) // .typescriptClientOptions(TypeScriptProjectOptions) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public java . lang . String getAuthorEmail (); Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public java . lang . String getAuthorName (); Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional public java . util . List < java . lang . String > getClassifiers (); Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public java . lang . String getDescription (); Type: java.lang.String A short description of the package. homepage Optional public java . lang . String getHomepage (); Type: java.lang.String A URL to the website of the project. license Optional public java . lang . String getLicense (); Type: java.lang.String License of this package as an SPDX identifier. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Package name. poetryOptions Optional public PoetryPyprojectOptionsWithoutDeps getPoetryOptions (); Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public java . util . Map < java . lang . String , java . lang . Object > getSetupConfig (); Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public java . lang . Boolean getPip (); Type: java.lang.Boolean Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional public java . lang . Boolean getPoetry (); Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public java . lang . Boolean getProjenrcPython (); Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public ProjenrcOptions getProjenrcPythonOptions (); Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public java . lang . Boolean getPytest (); Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional public PytestOptions getPytestOptions (); Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public java . lang . Boolean getSetuptools (); Type: java.lang.Boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional public java . lang . Boolean getVenv (); Type: java.lang.Boolean Default: true Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public VenvOptions getVenvOptions (); Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. specFile Optional public java . lang . String getSpecFile (); Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. OpenApiGatewayTsProjectOptions Configuration for the OpenApiGatewayTsProject. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayTsProjectOptions ; OpenApiGatewayTsProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .specFile(java.lang.String) // .typescriptClientOptions(TypeScriptProjectOptions) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Author's Organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public java . util . List < ScopedPackagesOptions > getScopedPackagesOptions (); Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public java . lang . Number getMinMajorVersion (); Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < JobStep > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. specFile Optional public java . lang . String getSpecFile (); Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. OpenApiIntegration Defines an integration for an individual API operation. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiIntegration ; OpenApiIntegration . builder () . function ( IFunction ) // .authorizer(Authorizer) . build (); Properties Name Type Description function software.amazon.awscdk.services.lambda.IFunction The lambda function to service the api operation. authorizer Authorizer The authorizer to use for this api operation (overrides the default). function Required public IFunction getFunction (); Type: software.amazon.awscdk.services.lambda.IFunction The lambda function to service the api operation. authorizer Optional public Authorizer getAuthorizer (); Type: Authorizer The authorizer to use for this api operation (overrides the default). OpenApiOptions Options required alongside an Open API specification to create API Gateway resources. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiOptions ; OpenApiOptions . builder () . integrations ( java . util . Map < java . lang . String , OpenApiIntegration > ) . operationLookup ( java . util . Map < java . lang . String , MethodAndPath > ) // .corsOptions(CorsOptions) // .defaultAuthorizer(Authorizer) . build (); Properties Name Type Description integrations java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup java.util.Map MethodAndPath\\ > Details about each operation. corsOptions software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. integrations Required public java . util . Map < java . lang . String , OpenApiIntegration > getIntegrations (); Type: java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup Required public java . util . Map < java . lang . String , MethodAndPath > getOperationLookup (); Type: java.util.Map MethodAndPath\\ > Details about each operation. corsOptions Optional public CorsOptions getCorsOptions (); Type: software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public Authorizer getDefaultAuthorizer (); Type: Authorizer The default authorizer to use for your api. When omitted, no authorizer is used. Authorizers specified at the integration level will override this for that operation. Classes Authorizer An authorizer for authorizing API requests. Initializers import software.aws.awsprototypingsdk.openapigateway.Authorizer ; Authorizer . Builder . create () . authorizationType ( AuthorizationType ) . authorizerId ( java . lang . String ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional Type: java.util.List Scopes for the authorizer, if any. Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. Authorizers Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct. Initializers import software.aws.awsprototypingsdk.openapigateway.Authorizers ; new Authorizers (); Name Type Description Static Functions Name Description cognito A Cognito User Pools authorizer. custom A custom authorizer. iam An IAM authorizer which uses AWS signature version 4 to authorize requests. none No authorizer. cognito import software.aws.awsprototypingsdk.openapigateway.Authorizers ; Authorizers . cognito ( CognitoAuthorizerProps props ) A Cognito User Pools authorizer. props Required Type: CognitoAuthorizerProps custom import software.aws.awsprototypingsdk.openapigateway.Authorizers ; Authorizers . custom ( CustomAuthorizerProps props ) A custom authorizer. props Required Type: CustomAuthorizerProps iam import software.aws.awsprototypingsdk.openapigateway.Authorizers ; Authorizers . iam () An IAM authorizer which uses AWS signature version 4 to authorize requests. none import software.aws.awsprototypingsdk.openapigateway.Authorizers ; Authorizers . none () No authorizer. CognitoAuthorizer An authorizer that uses Cognito identity or access tokens. Initializers import software.aws.awsprototypingsdk.openapigateway.CognitoAuthorizer ; CognitoAuthorizer . Builder . create () . authorizerId ( java . lang . String ) . userPools ( java . util . List < IUserPool > ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. userPools java.util.List The Cognito user pools associated with this authorizer. authorizationScopes java.util.List A list of authorization scopes configured on the method. authorizerId Required Type: java.lang.String Unique identifier for this authorizer. userPools Required Type: java.util.List The Cognito user pools associated with this authorizer. authorizationScopes Optional Type: java.util.List Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes Methods Name Description withScopes Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. withScopes public CognitoAuthorizer withScopes ( java . lang . String authorizationScopes ) Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes authorizationScopes Required Type: java.lang.String the scopes to apply. Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. userPools java.util.List The Cognito user pools associated with this authorizer. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. userPools Required public java . util . List < IUserPool > getUserPools (); Type: java.util.List The Cognito user pools associated with this authorizer. CustomAuthorizer An authorizer that uses a lambda function to authorize requests. Initializers import software.aws.awsprototypingsdk.openapigateway.CustomAuthorizer ; CustomAuthorizer . Builder . create () . authorizerId ( java . lang . String ) . function ( IFunction ) // .authorizerResultTtlInSeconds(java.lang.Number) // .identitySource(java.lang.String) // .type(CustomAuthorizerType) . build (); Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. function software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds java.lang.Number The number of seconds during which the authorizer result is cached. identitySource java.lang.String The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizerId Required Type: java.lang.String Unique identifier for this authorizer. function Required Type: software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds Optional Type: java.lang.Number Default: 300 The number of seconds during which the authorizer result is cached. identitySource Optional Type: java.lang.String Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizerResultTtlInSeconds java.lang.Number The number of seconds during which the authorizer result is cached. function software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. identitySource java.lang.String The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. authorizerResultTtlInSeconds Required public java . lang . Number getAuthorizerResultTtlInSeconds (); Type: java.lang.Number The number of seconds during which the authorizer result is cached. function Required public IFunction getFunction (); Type: software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. identitySource Required public java . lang . String getIdentitySource (); Type: java.lang.String The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Required public CustomAuthorizerType getType (); Type: CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IamAuthorizer An IAM authorizer. Initializers import software.aws.awsprototypingsdk.openapigateway.IamAuthorizer ; new IamAuthorizer (); Name Type Description Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. NoneAuthorizer No authorizer. Initializers import software.aws.awsprototypingsdk.openapigateway.NoneAuthorizer ; new NoneAuthorizer (); Name Type Description Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. OpenApiGatewayPythonProject Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayPythonProject ; OpenApiGatewayPythonProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .specFile(java.lang.String) // .typescriptClientOptions(TypeScriptProjectOptions) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: java.lang.String A short description of the package. homepage Optional Type: java.lang.String A URL to the website of the project. license Optional Type: java.lang.String License of this package as an SPDX identifier. packageName Optional Type: java.lang.String Package name. poetryOptions Optional Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: java.lang.Boolean Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs Optional Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: java.lang.Boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: java.lang.Boolean Default: true Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. clientLanguages Required Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional Type: java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir Optional Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. specFile Optional Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions Optional Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <module>@<semver> . addDevDependency public void addDevDependency ( java . lang . String spec ) Adds a dev dependency. spec Required Type: java.lang.String Format <module>@<semver> . Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. depsManager io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version java.lang.String Version of the package for distribution (should follow semver). packagingManager io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. pytest io.github.cdklabs.projen.python.Pytest Pytest component. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient io.github.cdklabs.projen.python.PythonProject A reference to the generated python client. specDir java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName java.lang.String The name of the spec file. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public IPythonDeps getDepsManager (); Type: io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager Required public IPythonEnv getEnvManager (); Type: io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public java . lang . String getVersion (); Type: java.lang.String Version of the package for distribution (should follow semver). packagingManager Optional public IPythonPackaging getPackagingManager (); Type: io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public Pytest getPytest (); Type: io.github.cdklabs.projen.python.Pytest Pytest component. apiSrcDir Required public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients Required public java . util . Map < java . lang . String , Project > getGeneratedClients (); Type: java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir Required public java . lang . String getGeneratedCodeDir (); Type: java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient Required public PythonProject getGeneratedPythonClient (); Type: io.github.cdklabs.projen.python.PythonProject A reference to the generated python client. specDir Required public java . lang . String getSpecDir (); Type: java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public java . lang . String getSpecFileName (); Type: java.lang.String The name of the spec file. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. OpenApiGatewayTsProject Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayTsProject ; OpenApiGatewayTsProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .specFile(java.lang.String) // .typescriptClientOptions(TypeScriptProjectOptions) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Author's Organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). clientLanguages Required Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional Type: java.util.List< DocumentationFormat > Formats to generate documentation in. generatedCodeDir Optional Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. specFile Optional Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions Optional Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this pacakge. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient io.github.cdklabs.projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName java.lang.String The name of the spec file. pnpmWorkspace io.github.cdklabs.projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this pacakge. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig apiSrcDir Required public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients Required public java . util . Map < java . lang . String , Project > getGeneratedClients (); Type: java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir Required public java . lang . String getGeneratedCodeDir (); Type: java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient Required public TypeScriptProject getGeneratedTypescriptClient (); Type: io.github.cdklabs.projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir Required public java . lang . String getSpecDir (); Type: java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public java . lang . String getSpecFileName (); Type: java.lang.String The name of the spec file. pnpmWorkspace Optional public YamlFile getPnpmWorkspace (); Type: io.github.cdklabs.projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums ClientLanguage Supported languages for client generation. Members Name Description TYPESCRIPT No description. PYTHON No description. JAVA No description. TYPESCRIPT PYTHON JAVA CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Members Name Description TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. DocumentationFormat Formats for documentation generation. Members Name Description HTML2 No description. MARKDOWN No description. PLANTUML No description. HTML2 MARKDOWN PLANTUML","title":"Index"},{"location":"java/open-api-gateway/index.html#openapi-gateway","text":"Define your APIs using OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given a lambda integration for every operation. The project will generate models and clients from your OpenAPI spec in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure a lambda integration is provided for every API integration. When you change your API specification, just run npx projen again to regenerate all of this!","title":"OpenAPI Gateway"},{"location":"java/open-api-gateway/index.html#project","text":"","title":"Project"},{"location":"java/open-api-gateway/index.html#openapi-specification","text":"Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message","title":"OpenAPI Specification"},{"location":"java/open-api-gateway/index.html#construct","text":"A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. // Example automatically generated from non-compiling source. May contain errors. import path.* ; import software.aws.awsprototypingsdk.openapigateway.Authorizers ; import software.amazon.awscdk.services.lambda.nodejs.NodejsFunction ; import software.constructs.Construct ; import api.Api ; /** * An example of how to wire lambda handler functions to the API */ public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"defaultAuthorizer\" , Authorizers . iam (), \"integrations\" , Map . of ( // Every operation defined in your API must have an integration defined! \"sayHello\" , Map . of ( \"function\" , new NodejsFunction ( scope , \"say-hello\" ))))); } }","title":"Construct"},{"location":"java/open-api-gateway/index.html#generated-client","text":"","title":"Generated Client"},{"location":"java/open-api-gateway/index.html#lambda-handler-wrappers","text":"Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification.","title":"Lambda Handler Wrappers"},{"location":"java/open-api-gateway/index.html#interceptors","text":"The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next(input, event, context) . Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next .","title":"Interceptors"},{"location":"java/open-api-gateway/index.html#other-details","text":"","title":"Other Details"},{"location":"java/open-api-gateway/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/open-api-gateway/index.html#constructs","text":"","title":"Constructs "},{"location":"java/open-api-gateway/index.html#openapigatewaylambdaapi","text":"A construct for creating an api gateway api based on the definition in the OpenAPI spec.","title":"OpenApiGatewayLambdaApi "},{"location":"java/open-api-gateway/index.html#structs","text":"","title":"Structs "},{"location":"java/open-api-gateway/index.html#authorizerprops","text":"Properties for an authorizer.","title":"AuthorizerProps "},{"location":"java/open-api-gateway/index.html#cognitoauthorizerprops","text":"Properties used to configure a cognito authorizer.","title":"CognitoAuthorizerProps "},{"location":"java/open-api-gateway/index.html#customauthorizerprops","text":"Properties used to configure a custom authorizer.","title":"CustomAuthorizerProps "},{"location":"java/open-api-gateway/index.html#methodandpath","text":"Structure to contain an API operation's method and path.","title":"MethodAndPath "},{"location":"java/open-api-gateway/index.html#openapigatewaylambdaapiprops","text":"Configuration for the OpenApiGatewayLambdaApi construct.","title":"OpenApiGatewayLambdaApiProps "},{"location":"java/open-api-gateway/index.html#openapigatewayprojectoptions","text":"Options common to all open api gateway projects.","title":"OpenApiGatewayProjectOptions "},{"location":"java/open-api-gateway/index.html#openapigatewaypythonprojectoptions","text":"Configuration for the OpenApiGatewayPythonProject.","title":"OpenApiGatewayPythonProjectOptions "},{"location":"java/open-api-gateway/index.html#openapigatewaytsprojectoptions","text":"Configuration for the OpenApiGatewayTsProject.","title":"OpenApiGatewayTsProjectOptions "},{"location":"java/open-api-gateway/index.html#openapiintegration","text":"Defines an integration for an individual API operation.","title":"OpenApiIntegration "},{"location":"java/open-api-gateway/index.html#openapioptions","text":"Options required alongside an Open API specification to create API Gateway resources.","title":"OpenApiOptions "},{"location":"java/open-api-gateway/index.html#classes","text":"","title":"Classes "},{"location":"java/open-api-gateway/index.html#authorizer","text":"An authorizer for authorizing API requests.","title":"Authorizer "},{"location":"java/open-api-gateway/index.html#authorizers_1","text":"Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct.","title":"Authorizers "},{"location":"java/open-api-gateway/index.html#cognitoauthorizer","text":"An authorizer that uses Cognito identity or access tokens.","title":"CognitoAuthorizer "},{"location":"java/open-api-gateway/index.html#customauthorizer","text":"An authorizer that uses a lambda function to authorize requests.","title":"CustomAuthorizer "},{"location":"java/open-api-gateway/index.html#iamauthorizer","text":"An IAM authorizer.","title":"IamAuthorizer "},{"location":"java/open-api-gateway/index.html#noneauthorizer","text":"No authorizer.","title":"NoneAuthorizer "},{"location":"java/open-api-gateway/index.html#openapigatewaypythonproject","text":"Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayPythonProject "},{"location":"java/open-api-gateway/index.html#openapigatewaytsproject","text":"Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayTsProject "},{"location":"java/open-api-gateway/index.html#enums","text":"","title":"Enums "},{"location":"java/open-api-gateway/index.html#clientlanguage","text":"Supported languages for client generation.","title":"ClientLanguage "},{"location":"java/open-api-gateway/index.html#customauthorizertype","text":"The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type","title":"CustomAuthorizerType "},{"location":"java/open-api-gateway/index.html#documentationformat","text":"Formats for documentation generation.","title":"DocumentationFormat "},{"location":"java/pdk-nag/index.html","text":"PDK Nag PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict API Reference Constructs PDKNagApp Initializers import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . Builder . create () // .analyticsReporting(java.lang.Boolean) // .autoSynth(java.lang.Boolean) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .outdir(java.lang.String) // .stackTraces(java.lang.Boolean) // .treeMetadata(java.lang.Boolean) // .failOnError(java.lang.Boolean) // .failOnWarning(java.lang.Boolean) . build (); Name Type Description analyticsReporting java.lang.Boolean Include runtime versioning information in the Stacks of this app. autoSynth java.lang.Boolean Automatically call synth() before the program exits. context java.util.Map Additional context values for the application. outdir java.lang.String The output directory into which to emit synthesized artifacts. stackTraces java.lang.Boolean Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata java.lang.Boolean Include construct tree metadata as part of the Cloud Assembly. failOnError java.lang.Boolean Determines whether any errors encountered should trigger a test failure. failOnWarning java.lang.Boolean Determines whether any warnings encountered should trigger a test failure. analyticsReporting Optional Type: java.lang.Boolean Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. autoSynth Optional Type: java.lang.Boolean Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional Type: java.util.Map Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . outdir Optional Type: java.lang.String Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. stackTraces Optional Type: java.lang.Boolean Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata Optional Type: java.lang.Boolean Default: true Include construct tree metadata as part of the Cloud Assembly. failOnError Optional Type: java.lang.Boolean Default: false Determines whether any errors encountered should trigger a test failure. failOnWarning Optional Type: java.lang.Boolean Default: false Determines whether any warnings encountered should trigger a test failure. Methods Name Description toString Returns a string representation of this construct. synth Synthesize this stage into a cloud assembly. addNagResult No description. nagResults Returns a list of NagResult. toString public java . lang . String toString () Returns a string representation of this construct. synth public CloudAssembly synth () public CloudAssembly synth ( StageSynthesisOptions options ) Synthesize this stage into a cloud assembly. Once an assembly has been synthesized, it cannot be modified. Subsequent calls will return the same assembly. options Optional Type: software.amazon.awscdk.StageSynthesisOptions addNagResult public void addNagResult ( NagResult result ) result Required Type: NagResult nagResults public java . util . List < NagResult > nagResults () Returns a list of NagResult. Note: app.synth() must be called before this to retrieve results. Static Functions Name Description isConstruct Checks if x is a construct. isStage Test whether the given construct is a stage. of Return the stage this construct is contained with, if available. isApp Checks if an object is an instance of the App class. isConstruct import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. isStage import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . isStage ( java . lang . Object x ) Test whether the given construct is a stage. x Required Type: java.lang.Object of import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . of ( IConstruct construct ) Return the stage this construct is contained with, if available. If called on a nested stage, returns its parent. construct Required Type: software.constructs.IConstruct isApp import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . isApp ( java . lang . Object obj ) Checks if an object is an instance of the App class. obj Required Type: java.lang.Object The object to evaluate. Properties Name Type Description node software.constructs.Node The tree node. artifactId java.lang.String Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. assetOutdir java.lang.String The cloud assembly asset output directory. outdir java.lang.String The cloud assembly output directory. stageName java.lang.String The name of the stage. account java.lang.String The default account for all resources defined within this stage. parentStage software.amazon.awscdk.Stage The parent stage or undefined if this is the app. region java.lang.String The default region for all resources defined within this stage. node Required public Node getNode (); Type: software.constructs.Node The tree node. artifactId Required public java . lang . String getArtifactId (); Type: java.lang.String Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. Derived from the construct path. assetOutdir Required public java . lang . String getAssetOutdir (); Type: java.lang.String The cloud assembly asset output directory. outdir Required public java . lang . String getOutdir (); Type: java.lang.String The cloud assembly output directory. stageName Required public java . lang . String getStageName (); Type: java.lang.String The name of the stage. Based on names of the parent stages separated by hypens. account Optional public java . lang . String getAccount (); Type: java.lang.String The default account for all resources defined within this stage. parentStage Optional public Stage getParentStage (); Type: software.amazon.awscdk.Stage The parent stage or undefined if this is the app. * region Optional public java . lang . String getRegion (); Type: java.lang.String The default region for all resources defined within this stage. Structs Message Message instance. Initializer import software.aws.awsprototypingsdk.pdknag.Message ; Message . builder () . messageDescription ( java . lang . String ) . messageType ( java . lang . String ) . build (); Properties Name Type Description messageDescription java.lang.String Message description. messageType java.lang.String Message type as returned from cdk-nag. messageDescription Required public java . lang . String getMessageDescription (); Type: java.lang.String Message description. messageType Required public java . lang . String getMessageType (); Type: java.lang.String Message type as returned from cdk-nag. NagResult Nag result. Initializer import software.aws.awsprototypingsdk.pdknag.NagResult ; NagResult . builder () . messages ( java . util . List < Message > ) . resource ( java . lang . String ) . build (); Properties Name Type Description messages java.util.List< Message > List of messages. resource java.lang.String Resource which triggered the message. messages Required public java . util . List < Message > getMessages (); Type: java.util.List< Message > List of messages. resource Required public java . lang . String getResource (); Type: java.lang.String Resource which triggered the message. PDKNagAppProps Initializer import software.aws.awsprototypingsdk.pdknag.PDKNagAppProps ; PDKNagAppProps . builder () // .analyticsReporting(java.lang.Boolean) // .autoSynth(java.lang.Boolean) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .outdir(java.lang.String) // .stackTraces(java.lang.Boolean) // .treeMetadata(java.lang.Boolean) // .failOnError(java.lang.Boolean) // .failOnWarning(java.lang.Boolean) . build (); Properties Name Type Description analyticsReporting java.lang.Boolean Include runtime versioning information in the Stacks of this app. autoSynth java.lang.Boolean Automatically call synth() before the program exits. context java.util.Map Additional context values for the application. outdir java.lang.String The output directory into which to emit synthesized artifacts. stackTraces java.lang.Boolean Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata java.lang.Boolean Include construct tree metadata as part of the Cloud Assembly. failOnError java.lang.Boolean Determines whether any errors encountered should trigger a test failure. failOnWarning java.lang.Boolean Determines whether any warnings encountered should trigger a test failure. analyticsReporting Optional public java . lang . Boolean getAnalyticsReporting (); Type: java.lang.Boolean Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. autoSynth Optional public java . lang . Boolean getAutoSynth (); Type: java.lang.Boolean Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. stackTraces Optional public java . lang . Boolean getStackTraces (); Type: java.lang.Boolean Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata Optional public java . lang . Boolean getTreeMetadata (); Type: java.lang.Boolean Default: true Include construct tree metadata as part of the Cloud Assembly. failOnError Optional public java . lang . Boolean getFailOnError (); Type: java.lang.Boolean Default: false Determines whether any errors encountered should trigger a test failure. failOnWarning Optional public java . lang . Boolean getFailOnWarning (); Type: java.lang.Boolean Default: false Determines whether any warnings encountered should trigger a test failure. Classes PDKNag Helper for create a Nag Enabled App. Initializers import software.aws.awsprototypingsdk.pdknag.PDKNag ; new PDKNag (); Name Type Description Static Functions Name Description addResourceSuppressionsByPathNoThrow Wrapper around NagSuppressions which does not throw. app Returns an instance of an App with Nag enabled. getStackAccountRegex Returns a stack account regex. getStackPartitionRegex Returns a stack partition regex. getStackPrefix Returns a prefix comprising of a delimited set of Stack Ids. getStackRegionRegex Returns a stack region regex. addResourceSuppressionsByPathNoThrow import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . addResourceSuppressionsByPathNoThrow ( Stack stack , java . lang . String path , java . util . List < NagPackSuppression > suppressions ), PDKNag . addResourceSuppressionsByPathNoThrow ( Stack stack , java . lang . String path , java . util . List < NagPackSuppression > suppressions , java . lang . Boolean applyToChildren ) Wrapper around NagSuppressions which does not throw. stack Required Type: software.amazon.awscdk.Stack stack instance. path Required Type: java.lang.String resource path. suppressions Required Type: java.util.List list of suppressions to apply. applyToChildren Optional Type: java.lang.Boolean whether to apply to children. app import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . app (), PDKNag . app ( PDKNagAppProps props ) Returns an instance of an App with Nag enabled. props Optional Type: PDKNagAppProps props to initialize the app with. getStackAccountRegex import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . getStackAccountRegex ( Stack stack ) Returns a stack account regex. stack Required Type: software.amazon.awscdk.Stack stack instance. getStackPartitionRegex import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . getStackPartitionRegex ( Stack stack ) Returns a stack partition regex. stack Required Type: software.amazon.awscdk.Stack stack instance. getStackPrefix import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . getStackPrefix ( Stack stack ) Returns a prefix comprising of a delimited set of Stack Ids. For example: StackA/NestedStackB/ stack Required Type: software.amazon.awscdk.Stack stack instance. getStackRegionRegex import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . getStackRegionRegex ( Stack stack ) Returns a stack region regex. stack Required Type: software.amazon.awscdk.Stack stack instance.","title":"Index"},{"location":"java/pdk-nag/index.html#pdk-nag","text":"PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict","title":"PDK Nag"},{"location":"java/pdk-nag/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/pdk-nag/index.html#constructs","text":"","title":"Constructs "},{"location":"java/pdk-nag/index.html#pdknagapp","text":"","title":"PDKNagApp "},{"location":"java/pdk-nag/index.html#structs","text":"","title":"Structs "},{"location":"java/pdk-nag/index.html#message","text":"Message instance.","title":"Message "},{"location":"java/pdk-nag/index.html#nagresult","text":"Nag result.","title":"NagResult "},{"location":"java/pdk-nag/index.html#pdknagappprops","text":"","title":"PDKNagAppProps "},{"location":"java/pdk-nag/index.html#classes","text":"","title":"Classes "},{"location":"java/pdk-nag/index.html#pdknag","text":"Helper for create a Nag Enabled App.","title":"PDKNag "},{"location":"java/pipeline/index.html","text":"The pipeline module vends an extension to CDK's CodePipeline construct, named PDKPipeline. It additionally creates a CodeCommit repository and by default is configured to build the project assumming nx-monorepo is being used (although this can be changed). A Sonarqube Scanner can also be configured to trigger a scan whenever the synth build job completes successfully. This Scanner is non-blocking and as such is not instrumented as part of the pipeline. The architecture for the PDKPipeline is as follows: CodeCommit repository -> CodePipeline |-> EventBridge Rule (On Build Succeded) -> CodeBuild (Sonar Scan) |-> Secret (sonarqube token) This module additionally vends multiple Projen Projects, one for each of the supported languages. These projects aim to bootstrap your project by providing sample code which uses the PDKPipeline construct. For example, in .projenrc.ts: new PDKPipelineTsProject ({ cdkVersion : \"2.1.0\" , defaultReleaseBranch : \"mainline\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-pipeline\" , }); This will generate a package in typescript containing CDK boilerplate for a pipeline stack (which instantiates PDKPipeline), sets up a Dev stage with an Application Stage containing an empty ApplicationStack (to be implemented). Once this package is synthesized, you can run npx projen and projen will synthesize your cloudformation. Alternatively, you can initialize a project using the cli (in an empty directory) for each of the supported languages as follows: # Typescript npx projen new --from aws-prototyping-sdk pdk-pipeline-ts # Python npx projen new --from aws-prototyping-sdk pdk-pipeline-py # Java npx projen new --from aws-prototyping-sdk pdk-pipeline-java CDK Nag In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 . API Reference Constructs PDKPipeline An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals. Initializers import software.aws.awsprototypingsdk.pipeline.PDKPipeline ; PDKPipeline . Builder . create ( Construct scope , java . lang . String id ) . synth ( IFileSetProducer ) // .assetPublishingCodeBuildDefaults(CodeBuildOptions) // .cliVersion(java.lang.String) // .codeBuildDefaults(CodeBuildOptions) // .codePipeline(Pipeline) // .crossAccountKeys(java.lang.Boolean) // .dockerCredentials(java.util.List<DockerCredential>) // .dockerEnabledForSelfMutation(java.lang.Boolean) // .dockerEnabledForSynth(java.lang.Boolean) // .pipelineName(java.lang.String) // .publishAssetsInParallel(java.lang.Boolean) // .reuseCrossRegionSupportStacks(java.lang.Boolean) // .role(IRole) // .selfMutation(java.lang.Boolean) // .selfMutationCodeBuildDefaults(CodeBuildOptions) // .synthCodeBuildDefaults(CodeBuildOptions) . primarySynthDirectory ( java . lang . String ) . repositoryName ( java . lang . String ) // .codeCommitRemovalPolicy(RemovalPolicy) // .defaultBranchName(java.lang.String) // .sonarCodeScannerConfig(SonarCodeScannerConfig) // .synthShellStepPartialProps(ShellStepProps) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion java.lang.String CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline software.amazon.awscdk.services.codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys java.lang.Boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials java.util.List A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation java.lang.Boolean Enable Docker for the self-mutate step. dockerEnabledForSynth java.lang.Boolean Enable Docker for the 'synth' step. pipelineName java.lang.String The name of the CodePipeline pipeline. publishAssetsInParallel java.lang.Boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks java.lang.Boolean Reuse the same cross region support stack for all pipelines in the App. role software.amazon.awscdk.services.iam.IRole The IAM role to be assumed by this Pipeline. selfMutation java.lang.Boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName java.lang.String Name of the CodeCommit repository to create. codeCommitRemovalPolicy software.amazon.awscdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName java.lang.String Branch to trigger the pipeline execution. sonarCodeScannerConfig SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. scope Required Type: software.constructs.Construct id Required Type: java.lang.String synth Required Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . assetPublishingCodeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion Optional Type: java.lang.String Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. codeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. codePipeline Optional Type: software.amazon.awscdk.services.codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] crossAccountKeys Optional Type: java.lang.Boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. dockerCredentials Optional Type: java.util.List Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. dockerEnabledForSelfMutation Optional Type: java.lang.Boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. dockerEnabledForSynth Optional Type: java.lang.Boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipelineName Optional Type: java.lang.String Default: Automatically generated The name of the CodePipeline pipeline. publishAssetsInParallel Optional Type: java.lang.Boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuseCrossRegionSupportStacks Optional Type: java.lang.Boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional Type: software.amazon.awscdk.services.iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. selfMutation Optional Type: java.lang.Boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . selfMutationCodeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory Required Type: java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName Required Type: java.lang.String Name of the CodeCommit repository to create. codeCommitRemovalPolicy Optional Type: software.amazon.awscdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName Optional Type: java.lang.String Default: mainline Branch to trigger the pipeline execution. sonarCodeScannerConfig Optional Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps Optional Type: software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. Methods Name Description toString Returns a string representation of this construct. addStage Deploy a single Stage by itself. addWave Add a Wave to the pipeline, for deploying multiple Stages in parallel. buildPipeline Send the current pipeline definition to the engine, and construct the pipeline. suppressCDKViolations No description. toString public java . lang . String toString () Returns a string representation of this construct. addStage public StageDeployment addStage ( Stage stage ) public StageDeployment addStage ( Stage stage , AddStageOpts options ) Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies. stage Required Type: software.amazon.awscdk.Stage options Optional Type: software.amazon.awscdk.pipelines.AddStageOpts addWave public Wave addWave ( java . lang . String id ) public Wave addWave ( java . lang . String id , WaveOptions options ) Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: declare const pipeline : pipelines.CodePipeline ; const wave = pipeline . addWave ( 'MyWave' ); wave . addStage ( new MyApplicationStage ( this , 'Stage1' )); wave . addStage ( new MyApplicationStage ( this , 'Stage2' )); id Required Type: java.lang.String options Optional Type: software.amazon.awscdk.pipelines.WaveOptions buildPipeline public void buildPipeline () Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method. suppressCDKViolations public void suppressCDKViolations () Static Functions Name Description isConstruct Checks if x is a construct. isPipeline Return whether the given object extends { @link PipelineBase}. isConstruct import software.aws.awsprototypingsdk.pipeline.PDKPipeline ; PDKPipeline . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. isPipeline import software.aws.awsprototypingsdk.pipeline.PDKPipeline ; PDKPipeline . isPipeline ( java . lang . Object x ) Return whether the given object extends { @link PipelineBase}. We do attribute detection since we can't reliably use 'instanceof'. x Required Type: java.lang.Object Properties Name Type Description node software.constructs.Node The tree node. cloudAssemblyFileSet software.amazon.awscdk.pipelines.FileSet The FileSet tha contains the cloud assembly. synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves java.util.List The waves in this pipeline. pipeline software.amazon.awscdk.services.codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. synthProject software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the Synth. codeRepository software.amazon.awscdk.services.codecommit.Repository No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. cloudAssemblyFileSet Required public FileSet getCloudAssemblyFileSet (); Type: software.amazon.awscdk.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step. synth Required public IFileSetProducer getSynth (); Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves Required public java . util . List < Wave > getWaves (); Type: java.util.List The waves in this pipeline. pipeline Required public Pipeline getPipeline (); Type: software.amazon.awscdk.services.codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built. synthProject Required public IProject getSynthProject (); Type: software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built. codeRepository Required public Repository getCodeRepository (); Type: software.amazon.awscdk.services.codecommit.Repository SonarCodeScanner Initializers import software.aws.awsprototypingsdk.pipeline.SonarCodeScanner ; SonarCodeScanner . Builder . create ( Construct scope , java . lang . String id ) . sonarqubeAuthorizedGroup ( java . lang . String ) . sonarqubeDefaultProfileOrGateName ( java . lang . String ) . sonarqubeEndpoint ( java . lang . String ) . sonarqubeProjectName ( java . lang . String ) // .cdkOutDir(java.lang.String) // .cfnNagIgnorePath(java.lang.String) // .excludeGlobsForScan(java.util.List<java.lang.String>) // .includeGlobsForScan(java.util.List<java.lang.String>) // .preArchiveCommands(java.util.List<java.lang.String>) // .sonarqubeSpecificProfileOrGateName(java.lang.String) // .sonarqubeTags(java.util.List<java.lang.String>) . artifactBucketArn ( java . lang . String ) . synthBuildArn ( java . lang . String ) // .artifactBucketKeyArn(java.lang.String) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. sonarqubeAuthorizedGroup java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName java.lang.String Default profile/gate name i.e: your org profile. sonarqubeEndpoint java.lang.String endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName java.lang.String Name of the project to create in Sonarqube. cdkOutDir java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan java.util.List glob patterns to include from sonar scan. preArchiveCommands java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName java.lang.String Specific profile/gate name i.e: language specific. sonarqubeTags java.util.List Tags to associate with this project. artifactBucketArn java.lang.String S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn java.lang.String ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn java.lang.String Artifact bucket key ARN used to encrypt the artifacts. scope Required Type: software.constructs.Construct id Required Type: java.lang.String sonarqubeAuthorizedGroup Required Type: java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required Type: java.lang.String Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required Type: java.lang.String endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required Type: java.lang.String Name of the project to create in Sonarqube. cdkOutDir Optional Type: java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath Optional Type: java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional Type: java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan Optional Type: java.util.List glob patterns to include from sonar scan. preArchiveCommands Optional Type: java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional Type: java.lang.String Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional Type: java.util.List Tags to associate with this project. artifactBucketArn Required Type: java.lang.String S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn Required Type: java.lang.String ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn Optional Type: java.lang.String Artifact bucket key ARN used to encrypt the artifacts. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.pipeline.SonarCodeScanner ; SonarCodeScanner . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. node Required public Node getNode (); Type: software.constructs.Node The tree node. Structs PDKPipelineJavaProjectOptions Configuration options for the PDKPipelineJavaProject. Initializer import software.aws.awsprototypingsdk.pipeline.PDKPipelineJavaProjectOptions ; PDKPipelineJavaProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . artifactId ( java . lang . String ) . groupId ( java . lang . String ) . version ( java . lang . String ) // .description(java.lang.String) // .packaging(java.lang.String) // .url(java.lang.String) // .compileOptions(MavenCompileOptions) // .deps(java.util.List<java.lang.String>) // .distdir(java.lang.String) // .junit(java.lang.Boolean) // .junitOptions(JunitOptions) // .packagingOptions(MavenPackagingOptions) // .projenrcJava(java.lang.Boolean) // .projenrcJavaOptions(ProjenrcOptions) // .testDeps(java.util.List<java.lang.String>) // .sample(java.lang.Boolean) // .sampleJavaPackage(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) . mainClass ( java . lang . String ) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. artifactId java.lang.String The artifactId is generally the name that the project is known by. groupId java.lang.String This is generally unique amongst an organization or a project. version java.lang.String This is the last piece of the naming puzzle. description java.lang.String Description of a project is always good. packaging java.lang.String Project packaging format. url java.lang.String The URL, like the name, is not required. compileOptions io.github.cdklabs.projen.java.MavenCompileOptions Compile options. deps java.util.List List of runtime dependencies for this project. distdir java.lang.String Final artifact output directory. junit java.lang.Boolean Include junit tests. junitOptions io.github.cdklabs.projen.java.JunitOptions junit options. packagingOptions io.github.cdklabs.projen.java.MavenPackagingOptions Packaging options. projenrcJava java.lang.Boolean Use projenrc in java. projenrcJavaOptions io.github.cdklabs.projen.java.ProjenrcOptions Options related to projenrc in java. testDeps java.util.List List of test dependencies for this project. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage java.lang.String The java package to use for the code sample. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. mainClass java.lang.String The name of the Java class with the static main() method. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required public java . lang . String getArtifactId (); Type: java.lang.String Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required public java . lang . String getGroupId (); Type: java.lang.String Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional public java . lang . String getDescription (); Type: java.lang.String Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional public java . lang . String getPackaging (); Type: java.lang.String Default: \"jar\" Project packaging format. url Optional public java . lang . String getUrl (); Type: java.lang.String Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional public MavenCompileOptions getCompileOptions (); Type: io.github.cdklabs.projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional public java . lang . String getDistdir (); Type: java.lang.String Default: \"dist/java\" Final artifact output directory. junit Optional public java . lang . Boolean getJunit (); Type: java.lang.Boolean Default: true Include junit tests. junitOptions Optional public JunitOptions getJunitOptions (); Type: io.github.cdklabs.projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional public MavenPackagingOptions getPackagingOptions (); Type: io.github.cdklabs.projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional public java . lang . Boolean getProjenrcJava (); Type: java.lang.Boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional public ProjenrcOptions getProjenrcJavaOptions (); Type: io.github.cdklabs.projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional public java . util . List < java . lang . String > getTestDeps (); Type: java.util.List Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional public java . lang . String getSampleJavaPackage (); Type: java.lang.String Default: \"org.acme\" The java package to use for the code sample. buildCommand Optional public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. mainClass Required public java . lang . String getMainClass (); Type: java.lang.String Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. PDKPipelineProps Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained. Initializer import software.aws.awsprototypingsdk.pipeline.PDKPipelineProps ; PDKPipelineProps . builder () . synth ( IFileSetProducer ) // .assetPublishingCodeBuildDefaults(CodeBuildOptions) // .cliVersion(java.lang.String) // .codeBuildDefaults(CodeBuildOptions) // .codePipeline(Pipeline) // .crossAccountKeys(java.lang.Boolean) // .dockerCredentials(java.util.List<DockerCredential>) // .dockerEnabledForSelfMutation(java.lang.Boolean) // .dockerEnabledForSynth(java.lang.Boolean) // .pipelineName(java.lang.String) // .publishAssetsInParallel(java.lang.Boolean) // .reuseCrossRegionSupportStacks(java.lang.Boolean) // .role(IRole) // .selfMutation(java.lang.Boolean) // .selfMutationCodeBuildDefaults(CodeBuildOptions) // .synthCodeBuildDefaults(CodeBuildOptions) . primarySynthDirectory ( java . lang . String ) . repositoryName ( java . lang . String ) // .codeCommitRemovalPolicy(RemovalPolicy) // .defaultBranchName(java.lang.String) // .sonarCodeScannerConfig(SonarCodeScannerConfig) // .synthShellStepPartialProps(ShellStepProps) . build (); Properties Name Type Description synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion java.lang.String CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline software.amazon.awscdk.services.codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys java.lang.Boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials java.util.List A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation java.lang.Boolean Enable Docker for the self-mutate step. dockerEnabledForSynth java.lang.Boolean Enable Docker for the 'synth' step. pipelineName java.lang.String The name of the CodePipeline pipeline. publishAssetsInParallel java.lang.Boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks java.lang.Boolean Reuse the same cross region support stack for all pipelines in the App. role software.amazon.awscdk.services.iam.IRole The IAM role to be assumed by this Pipeline. selfMutation java.lang.Boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName java.lang.String Name of the CodeCommit repository to create. codeCommitRemovalPolicy software.amazon.awscdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName java.lang.String Branch to trigger the pipeline execution. sonarCodeScannerConfig SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. synth Required public IFileSetProducer getSynth (); Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . assetPublishingCodeBuildDefaults Optional public CodeBuildOptions getAssetPublishingCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion Optional public java . lang . String getCliVersion (); Type: java.lang.String Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. codeBuildDefaults Optional public CodeBuildOptions getCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. codePipeline Optional public Pipeline getCodePipeline (); Type: software.amazon.awscdk.services.codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] crossAccountKeys Optional public java . lang . Boolean getCrossAccountKeys (); Type: java.lang.Boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. dockerCredentials Optional public java . util . List < DockerCredential > getDockerCredentials (); Type: java.util.List Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. dockerEnabledForSelfMutation Optional public java . lang . Boolean getDockerEnabledForSelfMutation (); Type: java.lang.Boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. dockerEnabledForSynth Optional public java . lang . Boolean getDockerEnabledForSynth (); Type: java.lang.Boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipelineName Optional public java . lang . String getPipelineName (); Type: java.lang.String Default: Automatically generated The name of the CodePipeline pipeline. publishAssetsInParallel Optional public java . lang . Boolean getPublishAssetsInParallel (); Type: java.lang.Boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuseCrossRegionSupportStacks Optional public java . lang . Boolean getReuseCrossRegionSupportStacks (); Type: java.lang.Boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional public IRole getRole (); Type: software.amazon.awscdk.services.iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. selfMutation Optional public java . lang . Boolean getSelfMutation (); Type: java.lang.Boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . selfMutationCodeBuildDefaults Optional public CodeBuildOptions getSelfMutationCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults Optional public CodeBuildOptions getSynthCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory Required public java . lang . String getPrimarySynthDirectory (); Type: java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName Required public java . lang . String getRepositoryName (); Type: java.lang.String Name of the CodeCommit repository to create. codeCommitRemovalPolicy Optional public RemovalPolicy getCodeCommitRemovalPolicy (); Type: software.amazon.awscdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName Optional public java . lang . String getDefaultBranchName (); Type: java.lang.String Default: mainline Branch to trigger the pipeline execution. sonarCodeScannerConfig Optional public SonarCodeScannerConfig getSonarCodeScannerConfig (); Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps Optional public ShellStepProps getSynthShellStepPartialProps (); Type: software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. PDKPipelinePyProjectOptions Configuration options for the PDKPipelinePyProject. Initializer import software.aws.awsprototypingsdk.pipeline.PDKPipelinePyProjectOptions ; PDKPipelinePyProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .testdir(java.lang.String) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir java.lang.String Python sources directory. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public java . lang . String getAuthorEmail (); Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public java . lang . String getAuthorName (); Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional public java . util . List < java . lang . String > getClassifiers (); Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public java . lang . String getDescription (); Type: java.lang.String A short description of the package. homepage Optional public java . lang . String getHomepage (); Type: java.lang.String A URL to the website of the project. license Optional public java . lang . String getLicense (); Type: java.lang.String License of this package as an SPDX identifier. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Package name. poetryOptions Optional public PoetryPyprojectOptionsWithoutDeps getPoetryOptions (); Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public java . util . Map < java . lang . String , java . lang . Object > getSetupConfig (); Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public java . lang . Boolean getPip (); Type: java.lang.Boolean Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional public java . lang . Boolean getPoetry (); Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public java . lang . Boolean getProjenrcPython (); Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public ProjenrcOptions getProjenrcPythonOptions (); Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public java . lang . Boolean getPytest (); Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional public PytestOptions getPytestOptions (); Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public java . lang . Boolean getSetuptools (); Type: java.lang.Boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional public java . lang . Boolean getVenv (); Type: java.lang.Boolean Default: true Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public VenvOptions getVenvOptions (); Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. buildCommand Optional public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public java . lang . String getAppEntrypoint (); Type: java.lang.String Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"tests\" Python sources directory. PDKPipelineTsProjectOptions Configuration options for the PDKPipelineTsProject. Initializer import software.aws.awsprototypingsdk.pipeline.PDKPipelineTsProjectOptions ; PDKPipelineTsProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .edgeLambdaAutoDiscover(java.lang.Boolean) // .integrationTestAutoDiscover(java.lang.Boolean) // .lambdaAutoDiscover(java.lang.Boolean) // .lambdaExtensionAutoDiscover(java.lang.Boolean) // .lambdaOptions(LambdaFunctionCommonOptions) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover java.lang.Boolean Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover java.lang.Boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Author's Organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public java . util . List < ScopedPackagesOptions > getScopedPackagesOptions (); Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public java . lang . Number getMinMajorVersion (); Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < JobStep > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). buildCommand Optional public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public java . lang . String getAppEntrypoint (); Type: java.lang.String Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover Optional public java . lang . Boolean getEdgeLambdaAutoDiscover (); Type: java.lang.Boolean Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover Optional public java . lang . Boolean getIntegrationTestAutoDiscover (); Type: java.lang.Boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover Optional public java . lang . Boolean getLambdaAutoDiscover (); Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover Optional public java . lang . Boolean getLambdaExtensionAutoDiscover (); Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions Optional public LambdaFunctionCommonOptions getLambdaOptions (); Type: io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. SonarCodeScannerConfig Initializer import software.aws.awsprototypingsdk.pipeline.SonarCodeScannerConfig ; SonarCodeScannerConfig . builder () . sonarqubeAuthorizedGroup ( java . lang . String ) . sonarqubeDefaultProfileOrGateName ( java . lang . String ) . sonarqubeEndpoint ( java . lang . String ) . sonarqubeProjectName ( java . lang . String ) // .cdkOutDir(java.lang.String) // .cfnNagIgnorePath(java.lang.String) // .excludeGlobsForScan(java.util.List<java.lang.String>) // .includeGlobsForScan(java.util.List<java.lang.String>) // .preArchiveCommands(java.util.List<java.lang.String>) // .sonarqubeSpecificProfileOrGateName(java.lang.String) // .sonarqubeTags(java.util.List<java.lang.String>) . build (); Properties Name Type Description sonarqubeAuthorizedGroup java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName java.lang.String Default profile/gate name i.e: your org profile. sonarqubeEndpoint java.lang.String endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName java.lang.String Name of the project to create in Sonarqube. cdkOutDir java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan java.util.List glob patterns to include from sonar scan. preArchiveCommands java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName java.lang.String Specific profile/gate name i.e: language specific. sonarqubeTags java.util.List Tags to associate with this project. sonarqubeAuthorizedGroup Required public java . lang . String getSonarqubeAuthorizedGroup (); Type: java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required public java . lang . String getSonarqubeDefaultProfileOrGateName (); Type: java.lang.String Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required public java . lang . String getSonarqubeEndpoint (); Type: java.lang.String endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required public java . lang . String getSonarqubeProjectName (); Type: java.lang.String Name of the project to create in Sonarqube. cdkOutDir Optional public java . lang . String getCdkOutDir (); Type: java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath Optional public java . lang . String getCfnNagIgnorePath (); Type: java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional public java . util . List < java . lang . String > getExcludeGlobsForScan (); Type: java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan Optional public java . util . List < java . lang . String > getIncludeGlobsForScan (); Type: java.util.List glob patterns to include from sonar scan. preArchiveCommands Optional public java . util . List < java . lang . String > getPreArchiveCommands (); Type: java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional public java . lang . String getSonarqubeSpecificProfileOrGateName (); Type: java.lang.String Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional public java . util . List < java . lang . String > getSonarqubeTags (); Type: java.util.List Tags to associate with this project. SonarCodeScannerProps SonarCodeScanners properties. Initializer import software.aws.awsprototypingsdk.pipeline.SonarCodeScannerProps ; SonarCodeScannerProps . builder () . sonarqubeAuthorizedGroup ( java . lang . String ) . sonarqubeDefaultProfileOrGateName ( java . lang . String ) . sonarqubeEndpoint ( java . lang . String ) . sonarqubeProjectName ( java . lang . String ) // .cdkOutDir(java.lang.String) // .cfnNagIgnorePath(java.lang.String) // .excludeGlobsForScan(java.util.List<java.lang.String>) // .includeGlobsForScan(java.util.List<java.lang.String>) // .preArchiveCommands(java.util.List<java.lang.String>) // .sonarqubeSpecificProfileOrGateName(java.lang.String) // .sonarqubeTags(java.util.List<java.lang.String>) . artifactBucketArn ( java . lang . String ) . synthBuildArn ( java . lang . String ) // .artifactBucketKeyArn(java.lang.String) . build (); Properties Name Type Description sonarqubeAuthorizedGroup java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName java.lang.String Default profile/gate name i.e: your org profile. sonarqubeEndpoint java.lang.String endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName java.lang.String Name of the project to create in Sonarqube. cdkOutDir java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan java.util.List glob patterns to include from sonar scan. preArchiveCommands java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName java.lang.String Specific profile/gate name i.e: language specific. sonarqubeTags java.util.List Tags to associate with this project. artifactBucketArn java.lang.String S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn java.lang.String ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn java.lang.String Artifact bucket key ARN used to encrypt the artifacts. sonarqubeAuthorizedGroup Required public java . lang . String getSonarqubeAuthorizedGroup (); Type: java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required public java . lang . String getSonarqubeDefaultProfileOrGateName (); Type: java.lang.String Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required public java . lang . String getSonarqubeEndpoint (); Type: java.lang.String endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required public java . lang . String getSonarqubeProjectName (); Type: java.lang.String Name of the project to create in Sonarqube. cdkOutDir Optional public java . lang . String getCdkOutDir (); Type: java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath Optional public java . lang . String getCfnNagIgnorePath (); Type: java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional public java . util . List < java . lang . String > getExcludeGlobsForScan (); Type: java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan Optional public java . util . List < java . lang . String > getIncludeGlobsForScan (); Type: java.util.List glob patterns to include from sonar scan. preArchiveCommands Optional public java . util . List < java . lang . String > getPreArchiveCommands (); Type: java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional public java . lang . String getSonarqubeSpecificProfileOrGateName (); Type: java.lang.String Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional public java . util . List < java . lang . String > getSonarqubeTags (); Type: java.util.List Tags to associate with this project. artifactBucketArn Required public java . lang . String getArtifactBucketArn (); Type: java.lang.String S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn Required public java . lang . String getSynthBuildArn (); Type: java.lang.String ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn Optional public java . lang . String getArtifactBucketKeyArn (); Type: java.lang.String Artifact bucket key ARN used to encrypt the artifacts. Classes PDKPipelineJavaProject Synthesizes a Java Project with a CI/CD pipeline. Initializers import software.aws.awsprototypingsdk.pipeline.PDKPipelineJavaProject ; PDKPipelineJavaProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . artifactId ( java . lang . String ) . groupId ( java . lang . String ) . version ( java . lang . String ) // .description(java.lang.String) // .packaging(java.lang.String) // .url(java.lang.String) // .compileOptions(MavenCompileOptions) // .deps(java.util.List<java.lang.String>) // .distdir(java.lang.String) // .junit(java.lang.Boolean) // .junitOptions(JunitOptions) // .packagingOptions(MavenPackagingOptions) // .projenrcJava(java.lang.Boolean) // .projenrcJavaOptions(ProjenrcOptions) // .testDeps(java.util.List<java.lang.String>) // .sample(java.lang.Boolean) // .sampleJavaPackage(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) . mainClass ( java . lang . String ) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. artifactId java.lang.String The artifactId is generally the name that the project is known by. groupId java.lang.String This is generally unique amongst an organization or a project. version java.lang.String This is the last piece of the naming puzzle. description java.lang.String Description of a project is always good. packaging java.lang.String Project packaging format. url java.lang.String The URL, like the name, is not required. compileOptions io.github.cdklabs.projen.java.MavenCompileOptions Compile options. deps java.util.List List of runtime dependencies for this project. distdir java.lang.String Final artifact output directory. junit java.lang.Boolean Include junit tests. junitOptions io.github.cdklabs.projen.java.JunitOptions junit options. packagingOptions io.github.cdklabs.projen.java.MavenPackagingOptions Packaging options. projenrcJava java.lang.Boolean Use projenrc in java. projenrcJavaOptions io.github.cdklabs.projen.java.ProjenrcOptions Options related to projenrc in java. testDeps java.util.List List of test dependencies for this project. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage java.lang.String The java package to use for the code sample. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. mainClass java.lang.String The name of the Java class with the static main() method. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required Type: java.lang.String Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required Type: java.lang.String Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required Type: java.lang.String Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional Type: java.lang.String Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional Type: java.lang.String Default: \"jar\" Project packaging format. url Optional Type: java.lang.String Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional Type: io.github.cdklabs.projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional Type: java.lang.String Default: \"dist/java\" Final artifact output directory. junit Optional Type: java.lang.Boolean Default: true Include junit tests. junitOptions Optional Type: io.github.cdklabs.projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional Type: io.github.cdklabs.projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional Type: java.lang.Boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional Type: io.github.cdklabs.projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional Type: java.util.List Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional Type: java.lang.String Default: \"org.acme\" The java package to use for the code sample. buildCommand Optional Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. mainClass Required Type: java.lang.String Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addPlugin Adds a build plugin to the pom. addTestDependency Adds a test dependency. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <groupId>/<artifactId>@<semver> . addPlugin public Dependency addPlugin ( java . lang . String spec ) public Dependency addPlugin ( java . lang . String spec , PluginOptions options ) Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: java.lang.String dependency spec ( group/artifact@version ). options Optional Type: io.github.cdklabs.projen.java.PluginOptions plugin options. addTestDependency public void addTestDependency ( java . lang . String spec ) Adds a test dependency. spec Required Type: java.lang.String Format <groupId>/<artifactId>@<semver> . ~~ addCdkDependency ~~ public void addCdkDependency ( java . lang . String modules ) Adds an AWS CDK module dependencies. modules Required Type: java.lang.String The list of modules to depend on (e.g. \"software.amazon.awscdk/aws-lambda\", \"software.amazon.awscdk/aws-iam\", etc). Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. compile io.github.cdklabs.projen.java.MavenCompile Compile component. distdir java.lang.String Maven artifact output directory. packaging io.github.cdklabs.projen.java.MavenPackaging Packaging component. pom io.github.cdklabs.projen.java.Pom API for managing pom.xml . junit io.github.cdklabs.projen.java.Junit JUnit component. projenrc io.github.cdklabs.projen.java.Projenrc Projenrc component. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig The cdk.json file. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks CDK tasks. mainClass java.lang.String The full name of the main class of the java app (package.Class). mainClassName java.lang.String The name of the Java class with the static main() method. mainPackage java.lang.String The name of the Java package that includes the main class. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required public MavenCompile getCompile (); Type: io.github.cdklabs.projen.java.MavenCompile Compile component. distdir Required public java . lang . String getDistdir (); Type: java.lang.String Maven artifact output directory. packaging Required public MavenPackaging getPackaging (); Type: io.github.cdklabs.projen.java.MavenPackaging Packaging component. pom Required public Pom getPom (); Type: io.github.cdklabs.projen.java.Pom API for managing pom.xml . junit Optional public Junit getJunit (); Type: io.github.cdklabs.projen.java.Junit JUnit component. projenrc Optional public Projenrc getProjenrc (); Type: io.github.cdklabs.projen.java.Projenrc Projenrc component. cdkConfig Required public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig The cdk.json file. cdkDeps Required public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdkTasks Required public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks CDK tasks. mainClass Required public java . lang . String getMainClass (); Type: java.lang.String The full name of the main class of the java app (package.Class). mainClassName Required public java . lang . String getMainClassName (); Type: java.lang.String The name of the Java class with the static main() method. mainPackage Required public java . lang . String getMainPackage (); Type: java.lang.String The name of the Java package that includes the main class. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelinePyProject Synthesizes a Python Project with a CI/CD pipeline. Initializers import software.aws.awsprototypingsdk.pipeline.PDKPipelinePyProject ; PDKPipelinePyProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .testdir(java.lang.String) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir java.lang.String Python sources directory. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: java.lang.String A short description of the package. homepage Optional Type: java.lang.String A URL to the website of the project. license Optional Type: java.lang.String License of this package as an SPDX identifier. packageName Optional Type: java.lang.String Package name. poetryOptions Optional Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: java.lang.Boolean Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs Optional Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: java.lang.Boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: java.lang.Boolean Default: true Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. buildCommand Optional Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional Type: java.lang.String Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional Type: java.lang.String Default: \"tests\" Python sources directory. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <module>@<semver> . addDevDependency public void addDevDependency ( java . lang . String spec ) Adds a dev dependency. spec Required Type: java.lang.String Format <module>@<semver> . Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. depsManager io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version java.lang.String Version of the package for distribution (should follow semver). packagingManager io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. pytest io.github.cdklabs.projen.python.Pytest Pytest component. appEntrypoint java.lang.String The CDK app entrypoint. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps No description. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion java.lang.String The CDK version this app is using. testdir java.lang.String The directory in which the python tests reside. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public IPythonDeps getDepsManager (); Type: io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager Required public IPythonEnv getEnvManager (); Type: io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public java . lang . String getVersion (); Type: java.lang.String Version of the package for distribution (should follow semver). packagingManager Optional public IPythonPackaging getPackagingManager (); Type: io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public Pytest getPytest (); Type: io.github.cdklabs.projen.python.Pytest Pytest component. appEntrypoint Required public java . lang . String getAppEntrypoint (); Type: java.lang.String The CDK app entrypoint. cdkConfig Required public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps cdkTasks Required public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String The CDK version this app is using. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which the python tests reside. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelineTsProject Synthesizes a Typescript Project with a CI/CD pipeline. Initializers import software.aws.awsprototypingsdk.pipeline.PDKPipelineTsProject ; PDKPipelineTsProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .edgeLambdaAutoDiscover(java.lang.Boolean) // .integrationTestAutoDiscover(java.lang.Boolean) // .lambdaAutoDiscover(java.lang.Boolean) // .lambdaExtensionAutoDiscover(java.lang.Boolean) // .lambdaOptions(LambdaFunctionCommonOptions) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover java.lang.Boolean Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover java.lang.Boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Author's Organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). buildCommand Optional Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional Type: java.lang.String Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions Optional Type: io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. addCdkDependency public void addCdkDependency ( java . lang . String modules ) Adds an AWS CDK module dependencies. modules Required Type: java.lang.String The list of modules to depend on. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this pacakge. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. appEntrypoint java.lang.String The CDK app entrypoint. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps No description. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion java.lang.String The CDK version this app is using. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this pacakge. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig appEntrypoint Required public java . lang . String getAppEntrypoint (); Type: java.lang.String The CDK app entrypoint. cdkConfig Required public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps cdkTasks Required public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String The CDK version this app is using. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"java/pipeline/index.html#cdk-nag","text":"In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 .","title":"CDK Nag"},{"location":"java/pipeline/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/pipeline/index.html#constructs","text":"","title":"Constructs "},{"location":"java/pipeline/index.html#pdkpipeline","text":"An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals.","title":"PDKPipeline "},{"location":"java/pipeline/index.html#sonarcodescanner","text":"","title":"SonarCodeScanner "},{"location":"java/pipeline/index.html#structs","text":"","title":"Structs "},{"location":"java/pipeline/index.html#pdkpipelinejavaprojectoptions","text":"Configuration options for the PDKPipelineJavaProject.","title":"PDKPipelineJavaProjectOptions "},{"location":"java/pipeline/index.html#pdkpipelineprops","text":"Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained.","title":"PDKPipelineProps "},{"location":"java/pipeline/index.html#pdkpipelinepyprojectoptions","text":"Configuration options for the PDKPipelinePyProject.","title":"PDKPipelinePyProjectOptions "},{"location":"java/pipeline/index.html#pdkpipelinetsprojectoptions","text":"Configuration options for the PDKPipelineTsProject.","title":"PDKPipelineTsProjectOptions "},{"location":"java/pipeline/index.html#sonarcodescannerconfig","text":"","title":"SonarCodeScannerConfig "},{"location":"java/pipeline/index.html#sonarcodescannerprops","text":"SonarCodeScanners properties.","title":"SonarCodeScannerProps "},{"location":"java/pipeline/index.html#classes","text":"","title":"Classes "},{"location":"java/pipeline/index.html#pdkpipelinejavaproject","text":"Synthesizes a Java Project with a CI/CD pipeline.","title":"PDKPipelineJavaProject "},{"location":"java/pipeline/index.html#pdkpipelinepyproject","text":"Synthesizes a Python Project with a CI/CD pipeline.","title":"PDKPipelinePyProject "},{"location":"java/pipeline/index.html#pdkpipelinetsproject","text":"Synthesizes a Typescript Project with a CI/CD pipeline.","title":"PDKPipelineTsProject "},{"location":"java/static-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/static-website The static-website module is able to deploy your pre-packaged static website content into an S3 Bucket, fronted by Cloudfront. This module uses an Origin Access Identity to ensure your Bucket can only be accessed via Cloudfront and is configured to only allow HTTPS requests by default. Custom runtime configurations can also be specified which will emit a runtime-config.json file along with your website content. Typically this includes resource Arns, Id's etc which may need to be referenced from your website. This package uses sane defaults and at a minimum only requires the path to your website assets. Below is a conceptual view of the default architecture this module creates: Cloudfront Distribution (HTTPS only) -> S3 Bucket (Private via OAI) |_ WAF V2 ACL |_ index.html (+ other website files and assets) |_ runtime-config.json A typical use case is to create a static website with AuthN. To accomplish this, we can leverage the UserIdentity to create the User Pool (Cognito by default) and Identity Pool. We can then pipe the respective pool id's as runtimeOptions into the StaticWebsite. After the website is deployed, these values can be interrogated from the runtime-config.json deployed alongside the website in order to perform authentication within the app using something like the Amplify Auth API . // Example automatically generated from non-compiling source. May contain errors. Object userIdentity = new UserIdentity ( this , \"UserIdentity\" ); StaticWebsite . Builder . create ( this , \"StaticWebsite\" ) . websiteContentPath ( \"<relative>/<path>/<to>/<built>/<website>\" ) . runtimeOptions ( Map . of ( \"jsonPayload\" , Map . of ( \"region\" , Stack . of ( this ). getRegion (), \"identityPoolId\" , userIdentity . getIdentityPool (). getIdentityPoolId (), \"userPoolId\" , userIdentity . getUserPool (). getUserPoolId (), \"userPoolWebClientId\" , userIdentity . getUserPoolClient (). getUserPoolClientId ()))) . build (); API Reference Constructs CloudfrontWebAcl This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack. Initializers import software.aws.awsprototypingsdk.staticwebsite.CloudfrontWebAcl ; CloudfrontWebAcl . Builder . create ( Construct scope , java . lang . String id ) // .cidrAllowList(CidrAllowList) // .managedRules(java.util.List<ManagedRule>) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. cidrAllowList CidrAllowList List of cidr ranges to allow. managedRules java.util.List< ManagedRule > List of managed rules to apply to the web acl. scope Required Type: software.constructs.Construct id Required Type: java.lang.String cidrAllowList Optional Type: CidrAllowList Default: undefined List of cidr ranges to allow. managedRules Optional Type: java.util.List< ManagedRule > Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.staticwebsite.CloudfrontWebAcl ; CloudfrontWebAcl . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. webAclArn java.lang.String No description. webAclId java.lang.String No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. webAclArn Required public java . lang . String getWebAclArn (); Type: java.lang.String webAclId Required public java . lang . String getWebAclId (); Type: java.lang.String StaticWebsite Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10. Initializers import software.aws.awsprototypingsdk.staticwebsite.StaticWebsite ; StaticWebsite . Builder . create ( Construct scope , java . lang . String id ) . websiteContentPath ( java . lang . String ) // .defaultWebsiteBucketEncryption(BucketEncryption) // .defaultWebsiteBucketEncryptionKey(Key) // .distributionProps(DistributionProps) // .runtimeOptions(RuntimeOptions) // .webAclProps(CloudFrontWebAclProps) // .websiteBucket(IBucket) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. websiteContentPath java.lang.String Path to the directory containing the static website files and assets. defaultWebsiteBucketEncryption software.amazon.awscdk.services.s3.BucketEncryption Bucket encryption to use for the default bucket. defaultWebsiteBucketEncryptionKey software.amazon.awscdk.services.kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distributionProps software.amazon.awscdk.services.cloudfront.DistributionProps Custom distribution properties. runtimeOptions RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps CloudFrontWebAclProps Limited configuration settings for the generated webAcl. websiteBucket software.amazon.awscdk.services.s3.IBucket Predefined bucket to deploy the website into. scope Required Type: software.constructs.Construct id Required Type: java.lang.String websiteContentPath Required Type: java.lang.String Path to the directory containing the static website files and assets. This directory must contain an index.html file. defaultWebsiteBucketEncryption Optional Type: software.amazon.awscdk.services.s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } defaultWebsiteBucketEncryptionKey Optional Type: software.amazon.awscdk.services.kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distributionProps Optional Type: software.amazon.awscdk.services.cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtimeOptions Optional Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps Optional Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. websiteBucket Optional Type: software.amazon.awscdk.services.s3.IBucket Predefined bucket to deploy the website into. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.staticwebsite.StaticWebsite ; StaticWebsite . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. bucketDeployment software.amazon.awscdk.services.s3.deployment.BucketDeployment No description. cloudFrontDistribution software.amazon.awscdk.services.cloudfront.Distribution No description. websiteBucket software.amazon.awscdk.services.s3.IBucket No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. bucketDeployment Required public BucketDeployment getBucketDeployment (); Type: software.amazon.awscdk.services.s3.deployment.BucketDeployment cloudFrontDistribution Required public Distribution getCloudFrontDistribution (); Type: software.amazon.awscdk.services.cloudfront.Distribution websiteBucket Required public IBucket getWebsiteBucket (); Type: software.amazon.awscdk.services.s3.IBucket Structs CidrAllowList Representation of a CIDR range. Initializer import software.aws.awsprototypingsdk.staticwebsite.CidrAllowList ; CidrAllowList . builder () . cidrRanges ( java . util . List < java . lang . String > ) . cidrType ( java . lang . String ) . build (); Properties Name Type Description cidrRanges java.util.List Specify an IPv4 address by using CIDR notation. cidrType java.lang.String Type of CIDR range. cidrRanges Required public java . util . List < java . lang . String > getCidrRanges (); Type: java.util.List Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidrType Required public java . lang . String getCidrType (); Type: java.lang.String Type of CIDR range. CloudFrontWebAclProps Properties to configure the web acl. Initializer import software.aws.awsprototypingsdk.staticwebsite.CloudFrontWebAclProps ; CloudFrontWebAclProps . builder () // .cidrAllowList(CidrAllowList) // .managedRules(java.util.List<ManagedRule>) . build (); Properties Name Type Description cidrAllowList CidrAllowList List of cidr ranges to allow. managedRules java.util.List< ManagedRule > List of managed rules to apply to the web acl. cidrAllowList Optional public CidrAllowList getCidrAllowList (); Type: CidrAllowList Default: undefined List of cidr ranges to allow. managedRules Optional public java . util . List < ManagedRule > getManagedRules (); Type: java.util.List< ManagedRule > Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. ManagedRule Represents a WAF V2 managed rule. Initializer import software.aws.awsprototypingsdk.staticwebsite.ManagedRule ; ManagedRule . builder () . name ( java . lang . String ) . vendor ( java . lang . String ) . build (); Properties Name Type Description name java.lang.String The name of the managed rule group. vendor java.lang.String The name of the managed rule group vendor. name Required public java . lang . String getName (); Type: java.lang.String The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required public java . lang . String getVendor (); Type: java.lang.String The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. RuntimeOptions Dynamic configuration which gets resolved only during deployment. Example // Example automatically generated from non-compiling source. May contain errors. // Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any // and all resolved values. Map < String , Map < String , Object >> runtimeConfig = Map . of ( \"jsonPayload\" , Map . of ( \"bucketArn\" , s3Bucket . getBucketArn ())); StaticWebsite . Builder . create ( scope , \"StaticWebsite\" ). websiteContentPath ( \"path/to/website\" ). runtimeConfig ( runtimeConfig ). build (); Initializer import software.aws.awsprototypingsdk.staticwebsite.RuntimeOptions ; RuntimeOptions . builder () . jsonPayload ( java . lang . Object ) // .jsonFileName(java.lang.String) . build (); Properties Name Type Description jsonPayload java.lang.Object Arbitrary JSON payload containing runtime values to deploy. jsonFileName java.lang.String File name to store runtime configuration (jsonPayload). jsonPayload Required public java . lang . Object getJsonPayload (); Type: java.lang.Object Arbitrary JSON payload containing runtime values to deploy. Typically this contains resourceArns, etc which are only known at deploy time. Example // Example automatically generated from non-compiling source. May contain errors. { userPoolId : some . userPool . userPoolId , someResourceArnsome . getResource (). getArn (); } jsonFileName Optional public java . lang . String getJsonFileName (); Type: java.lang.String Default: \"runtime-config.json\" File name to store runtime configuration (jsonPayload). Must follow pattern: '*.json' StaticWebsiteProps Properties for configuring the StaticWebsite. Initializer import software.aws.awsprototypingsdk.staticwebsite.StaticWebsiteProps ; StaticWebsiteProps . builder () . websiteContentPath ( java . lang . String ) // .defaultWebsiteBucketEncryption(BucketEncryption) // .defaultWebsiteBucketEncryptionKey(Key) // .distributionProps(DistributionProps) // .runtimeOptions(RuntimeOptions) // .webAclProps(CloudFrontWebAclProps) // .websiteBucket(IBucket) . build (); Properties Name Type Description websiteContentPath java.lang.String Path to the directory containing the static website files and assets. defaultWebsiteBucketEncryption software.amazon.awscdk.services.s3.BucketEncryption Bucket encryption to use for the default bucket. defaultWebsiteBucketEncryptionKey software.amazon.awscdk.services.kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distributionProps software.amazon.awscdk.services.cloudfront.DistributionProps Custom distribution properties. runtimeOptions RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps CloudFrontWebAclProps Limited configuration settings for the generated webAcl. websiteBucket software.amazon.awscdk.services.s3.IBucket Predefined bucket to deploy the website into. websiteContentPath Required public java . lang . String getWebsiteContentPath (); Type: java.lang.String Path to the directory containing the static website files and assets. This directory must contain an index.html file. defaultWebsiteBucketEncryption Optional public BucketEncryption getDefaultWebsiteBucketEncryption (); Type: software.amazon.awscdk.services.s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } defaultWebsiteBucketEncryptionKey Optional public Key getDefaultWebsiteBucketEncryptionKey (); Type: software.amazon.awscdk.services.kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distributionProps Optional public DistributionProps getDistributionProps (); Type: software.amazon.awscdk.services.cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtimeOptions Optional public RuntimeOptions getRuntimeOptions (); Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps Optional public CloudFrontWebAclProps getWebAclProps (); Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. websiteBucket Optional public IBucket getWebsiteBucket (); Type: software.amazon.awscdk.services.s3.IBucket Predefined bucket to deploy the website into. Classes StaticWebsiteOrigin Implements: software.amazon.awscdk.services.cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy. Initializers import software.aws.awsprototypingsdk.staticwebsite.StaticWebsiteOrigin ; new StaticWebsiteOrigin (); Name Type Description Methods Name Description bind The method called when a given Origin is added (for the first time) to a Distribution. bind public OriginBindConfig bind ( Construct _scope , OriginBindOptions _options ) The method called when a given Origin is added (for the first time) to a Distribution. _scope Required Type: software.constructs.Construct _options Required Type: software.amazon.awscdk.services.cloudfront.OriginBindOptions","title":"Index"},{"location":"java/static-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/static-website/index.html#constructs","text":"","title":"Constructs "},{"location":"java/static-website/index.html#cloudfrontwebacl","text":"This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack.","title":"CloudfrontWebAcl "},{"location":"java/static-website/index.html#staticwebsite","text":"Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10.","title":"StaticWebsite "},{"location":"java/static-website/index.html#structs","text":"","title":"Structs "},{"location":"java/static-website/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"java/static-website/index.html#cloudfrontwebaclprops","text":"Properties to configure the web acl.","title":"CloudFrontWebAclProps "},{"location":"java/static-website/index.html#managedrule","text":"Represents a WAF V2 managed rule.","title":"ManagedRule "},{"location":"java/static-website/index.html#runtimeoptions","text":"Dynamic configuration which gets resolved only during deployment. Example // Example automatically generated from non-compiling source. May contain errors. // Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any // and all resolved values. Map < String , Map < String , Object >> runtimeConfig = Map . of ( \"jsonPayload\" , Map . of ( \"bucketArn\" , s3Bucket . getBucketArn ())); StaticWebsite . Builder . create ( scope , \"StaticWebsite\" ). websiteContentPath ( \"path/to/website\" ). runtimeConfig ( runtimeConfig ). build ();","title":"RuntimeOptions "},{"location":"java/static-website/index.html#staticwebsiteprops","text":"Properties for configuring the StaticWebsite.","title":"StaticWebsiteProps "},{"location":"java/static-website/index.html#classes","text":"","title":"Classes "},{"location":"java/static-website/index.html#staticwebsiteorigin","text":"Implements: software.amazon.awscdk.services.cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy.","title":"StaticWebsiteOrigin "},{"location":"python/cloudscape-react-ts-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.cloudscape_react_ts_website Getting started To create a new Cloudscape React Typescript Project, there are a couple of options: Via Projen CLI npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>] Programmatically # Example automatically generated from non-compiling source. May contain errors. CloudscapeReactTsWebsiteProject ( default_release_branch = \"mainline\" , name = \"<name-of-package>\" , application_name = \"<name-of-app>\" ) Running your synthesized Application To run your synthesized application locally, run npx projen dev . Developer Notes To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: # Example automatically generated from non-compiling source. May contain errors. user_identity = UserIdentity ( self , \"UserIdentity\" ) StaticWebsite ( self , \"StaticWebsite\" , website_content_path = \"<relative>/<path>/<to>/<built>/<website>\" , runtime_options = { \"json_payload\" : { \"region\" : Stack . of ( self ) . region , \"identity_pool_id\" : user_identity . identity_pool . identity_pool_id , \"user_pool_id\" : user_identity . user_pool . user_pool_id , \"user_pool_web_client_id\" : user_identity . user_pool_client . user_pool_client_id } } ) For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json API Reference Structs CloudscapeReactTsWebsiteProjectOptions Configuration options for the CloudscapeReactTsWebsiteProject. Initializer import aws_prototyping_sdk.cloudscape_react_ts_website aws_prototyping_sdk . cloudscape_react_ts_website . CloudscapeReactTsWebsiteProjectOptions ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , rewire : typing . Mapping [ typing . Any ] = None , application_name : str = None , public_dir : str = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. rewire typing.Mapping[typing.Any] Rewire webpack configuration. application_name str Name of the application name. public_dir str Public directory. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Author's Organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional scoped_packages_options : typing . List [ ScopedPackagesOptions ] Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional min_major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional rewire : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired application_name Optional application_name : str Type: str Default: \"Sample App\" Name of the application name. public_dir Optional public_dir : str Type: str Default: \"public\" Public directory. Classes CloudscapeReactTsWebsiteProject Synthesizes a Cloudscape React Typescript Website Project. Initializers import aws_prototyping_sdk.cloudscape_react_ts_website aws_prototyping_sdk . cloudscape_react_ts_website . CloudscapeReactTsWebsiteProject ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , rewire : typing . Mapping [ typing . Any ] = None , application_name : str = None , public_dir : str = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. rewire typing.Mapping[typing.Any] Rewire webpack configuration. application_name str Name of the application name. public_dir str Public directory. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Author's Organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional Type: typing.Mapping[typing.Any] Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired application_name Optional Type: str Default: \"Sample App\" Name of the application name. public_dir Optional Type: str Default: \"public\" Public directory. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which source files reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. application_name str No description. public_dir str No description. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this pacakge. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which source files reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig application_name Required application_name : str Type: str public_dir Required public_dir : str Type: str Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"python/cloudscape-react-ts-website/index.html#getting-started","text":"To create a new Cloudscape React Typescript Project, there are a couple of options:","title":"Getting started"},{"location":"python/cloudscape-react-ts-website/index.html#via-projen-cli","text":"npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>]","title":"Via Projen CLI"},{"location":"python/cloudscape-react-ts-website/index.html#programmatically","text":"# Example automatically generated from non-compiling source. May contain errors. CloudscapeReactTsWebsiteProject ( default_release_branch = \"mainline\" , name = \"<name-of-package>\" , application_name = \"<name-of-app>\" )","title":"Programmatically"},{"location":"python/cloudscape-react-ts-website/index.html#running-your-synthesized-application","text":"To run your synthesized application locally, run npx projen dev .","title":"Running your synthesized Application"},{"location":"python/cloudscape-react-ts-website/index.html#developer-notes","text":"To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: # Example automatically generated from non-compiling source. May contain errors. user_identity = UserIdentity ( self , \"UserIdentity\" ) StaticWebsite ( self , \"StaticWebsite\" , website_content_path = \"<relative>/<path>/<to>/<built>/<website>\" , runtime_options = { \"json_payload\" : { \"region\" : Stack . of ( self ) . region , \"identity_pool_id\" : user_identity . identity_pool . identity_pool_id , \"user_pool_id\" : user_identity . user_pool . user_pool_id , \"user_pool_web_client_id\" : user_identity . user_pool_client . user_pool_client_id } } ) For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json","title":"Developer Notes"},{"location":"python/cloudscape-react-ts-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/cloudscape-react-ts-website/index.html#structs","text":"","title":"Structs "},{"location":"python/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteprojectoptions","text":"Configuration options for the CloudscapeReactTsWebsiteProject.","title":"CloudscapeReactTsWebsiteProjectOptions "},{"location":"python/cloudscape-react-ts-website/index.html#classes","text":"","title":"Classes "},{"location":"python/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteproject","text":"Synthesizes a Cloudscape React Typescript Website Project.","title":"CloudscapeReactTsWebsiteProject "},{"location":"python/identity/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.identity This module by default deploys a configurable Identity Provider with a default Cognito User Pool. These resources can be used by your website to restrict access to only authenticated users if needed. All settings are configurable and the creation of these AuthN resources can be disabled if needed or configured to use custom AuthN providers i.e. Facebook, Google, etc. Below is a conceptual view of the default architecture this module creates: Cognito User Pool --------------------> Identity Pool |_ User Pool Client |_ Unauthenticated IAM Role |_ Authenticated IAM Role API Reference Constructs UserIdentity Creates an Identity Pool with sane defaults configured. Initializers import aws_prototyping_sdk.identity aws_prototyping_sdk . identity . UserIdentity ( scope : Construct , id : str , identity_pool_options : IdentityPoolProps = None , user_pool : UserPool = None ) Name Type Description scope constructs.Construct No description. id str No description. identity_pool_options aws_cdk.aws_cognito_identitypool_alpha.IdentityPoolProps Configuration for the Identity Pool. user_pool aws_cdk.aws_cognito.UserPool User provided Cognito UserPool. scope Required Type: constructs.Construct id Required Type: str identity_pool_options Optional Type: aws_cdk.aws_cognito_identitypool_alpha.IdentityPoolProps Configuration for the Identity Pool. user_pool Optional Type: aws_cdk.aws_cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct import aws_prototyping_sdk.identity aws_prototyping_sdk . identity . UserIdentity . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. identity_pool aws_cdk.aws_cognito_identitypool_alpha.IdentityPool No description. user_pool aws_cdk.aws_cognito.UserPool No description. user_pool_client aws_cdk.aws_cognito.UserPoolClient No description. node Required node : Node Type: constructs.Node The tree node. identity_pool Required identity_pool : IdentityPool Type: aws_cdk.aws_cognito_identitypool_alpha.IdentityPool user_pool Required user_pool : UserPool Type: aws_cdk.aws_cognito.UserPool user_pool_client Optional user_pool_client : UserPoolClient Type: aws_cdk.aws_cognito.UserPoolClient Structs UserIdentityProps Properties which configures the Identity Pool. Initializer import aws_prototyping_sdk.identity aws_prototyping_sdk . identity . UserIdentityProps ( identity_pool_options : IdentityPoolProps = None , user_pool : UserPool = None ) Properties Name Type Description identity_pool_options aws_cdk.aws_cognito_identitypool_alpha.IdentityPoolProps Configuration for the Identity Pool. user_pool aws_cdk.aws_cognito.UserPool User provided Cognito UserPool. identity_pool_options Optional identity_pool_options : IdentityPoolProps Type: aws_cdk.aws_cognito_identitypool_alpha.IdentityPoolProps Configuration for the Identity Pool. user_pool Optional user_pool : UserPool Type: aws_cdk.aws_cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool.","title":"Index"},{"location":"python/identity/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/identity/index.html#constructs","text":"","title":"Constructs "},{"location":"python/identity/index.html#useridentity","text":"Creates an Identity Pool with sane defaults configured.","title":"UserIdentity "},{"location":"python/identity/index.html#structs","text":"","title":"Structs "},{"location":"python/identity/index.html#useridentityprops","text":"Properties which configures the Identity Pool.","title":"UserIdentityProps "},{"location":"python/nx-monorepo/index.html","text":"The nx-monorepo package vends a NxMonorepoProject Projen construct that adds NX monorepo support and manages your yarn/npm/pnpm workspaces on your behalf. This construct enables polygot builds (and inter language build dependencies), build caching, dependency visualization and much, much more. The PDK itself uses the nx-monorepo project itself and is a good reference for seeing how a complex, polygot monorepo can be set up. To get started simply run the following command in an empty directory: npx projen new --from aws-prototyping-sdk nx-monorepo This will boostrap a new Projen monorepo and contain the following in the .projenrc.ts: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); project . synth (); To add new packages to the monorepo, you can simply add them as a child to the monorepo. To demonstrate, lets add a PDK Pipeline TS Project as a child as follows: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); project . synth (); Once added, run npx projen from the root directory. You will now notice a new TS package has been created under the packages/cicd path. Now let's add a python project to the monorepo and add an inter-language build dependency. import { nx_monorepo } from \"aws-prototyping-sdk\" ; import { PDKPipelineTsProject } from \"aws-prototyping-sdk/pipeline\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"test\" , }); const pipelineProject = new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); // Standard Projen projects also work here const pythonlib = new PythonProject ({ parent : project , outdir : \"packages/pythonlib\" , authorEmail : \"\" , authorName : \"\" , module Name : \"pythonlib\" , name : \"pythonlib\" , version : \"0.0.0\" }); // Pipeline project depends on pythonlib to build first project . addImplicitDependency ( pipelineProject , pythonlib ); project . synth (); Run npx projen from the root directory. You will now notice a new Python package has been created under packages/pythonlib. To visualize our dependency graph, run the following command from the root directory: npx nx graph . Now lets test building our project, from the root directory run npx nx run-many --target=build --all . As you can see, the pythonlib was built first followed by the cicd package. The NxMonorepoProject also manages your yarn/pnpm workspaces for you and synthesizes these into your package.json pnpm-workspace.yml respectively. For more information on NX commands, refer to this documentation . Homogenous Dependencies As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code. Typescript Since the NxMonorepoProject manages a yarn/npm/pnpm workspace, configuring dependencies between Typescript projects is as straightforward as referencing them in deps . Note that dependencies cannot be added in the same project synthesis ( npx projen ) as when projects are created. This means a two-pass approach is recommended, first to create your new projects, and then to add the dependencies. For example: First add your new projects: new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , }); Synthesise, then you can set up your dependency: const a = new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , // B depends on A deps : [ a . package . packageName ], }); Python The recommended way to configure dependencies between python projects within your monorepo is to use a single shared virtual environment. You can then install packages you wish to depend on into that environment using pip's Editable Installs . You will also need to add an implicit dependency to tell the monorepo the correct build order for your packages. For example: const sharedEnv : VenvOptions = { envdir : '../../.env' , }; const a = new PythonProject ({ parent : monorepo , outdir : 'packages/a' , module Name : 'a' , name : 'a' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , }); // Install A into the virtual env since it is consumed by B a . tasks . tryFind ( 'install' ) ! . exec ( 'pip install --editable .' ); const b = new PythonProject ({ parent : monorepo , outdir : 'packages/b' , module Name : 'b' , name : 'b' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , // B depends on A deps : [ a . module Name ], }); // Add the implicit dependency so that the monorepo will build A before B monorepo . addImplicitDependency ( b , a ); Java The recommended way to configure dependencies between java projects within your monorepo is to use shared maven repositories. The default java project build will already create a distributable in the correct format for a maven repository in its dist/java folder, so you can use this as a repository. For example: const a = new JavaProject ({ parent : monorepo , outdir : 'packages/a' , groupId : 'com.mycompany' , artifactId : 'a' , name : 'a' , version : '1.0.0' , }); const b = new JavaProject ({ parent : monorepo , outdir : 'packages/b' , groupId : 'com.mycompany' , artifactId : 'b' , name : 'b' , version : '1.0.0' , // Declare the dependency on A deps : [ ` ${ a . pom . groupId } / ${ a . pom . artifactId } @ ${ a . pom . version } ` ], }); // Add the repository b . pom . addRepository ({ url : 'file://../a/dist/java' , id : 'dependency-on-a' , }); // Add the implicit dependency to control build order monorepo . addImplicitDependency ( b , a ); API Reference Structs MonorepoUpgradeDepsOptions Configuration for Monorepo Upgrade Deps task. Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . MonorepoUpgradeDepsOptions ( syncpack_config : SyncpackConfig = None , task_name : str = None ) Properties Name Type Description syncpack_config SyncpackConfig Syncpack configuration. task_name str Name of the task to create. syncpack_config Optional syncpack_config : SyncpackConfig Type: SyncpackConfig Default: SyncpackConfig.DEFAULT_CONFIG Syncpack configuration. No merging is performed and as such a complete syncpackConfig is required if supplied. task_name Optional task_name : str Type: str Default: upgrade-deps Name of the task to create. NXConfig NX configurations. https://nx.dev/configuration/packagejson Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . NXConfig ( implicit_dependencies : typing . Mapping [ typing . List [ str ]] = None , nx_cloud_read_only_access_token : str = None , nx_ignore : typing . List [ str ] = None , target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] = None ) Properties Name Type Description implicit_dependencies typing.Mapping[typing.List[str]] Configuration for Implicit Dependnecies. nx_cloud_read_only_access_token str Read only access token if enabling nx cloud. nx_ignore typing.List[str] List of patterns to include in the .nxignore file. target_dependencies typing.Mapping[typing.List[ TargetDependency ]] Configuration for TargetDependencies. implicit_dependencies Optional implicit_dependencies : typing . Mapping [ typing . List [ str ]] Type: typing.Mapping[typing.List[str]] Configuration for Implicit Dependnecies. https://nx.dev/configuration/packagejson#implicitdependencies nx_cloud_read_only_access_token Optional nx_cloud_read_only_access_token : str Type: str Read only access token if enabling nx cloud. nx_ignore Optional nx_ignore : typing . List [ str ] Type: typing.List[str] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore target_dependencies Optional target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] Type: typing.Mapping[typing.List[ TargetDependency ]] Configuration for TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . NxMonorepoProjectOptions ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , monorepo_upgrade_deps : bool = None , monorepo_upgrade_deps_options : MonorepoUpgradeDepsOptions = None , nx_config : NXConfig = None , workspace_config : WorkspaceConfig = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. monorepo_upgrade_deps bool Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepo_upgrade_deps_options MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nx_config NXConfig Configuration for NX. workspace_config WorkspaceConfig Configuration for workspace. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Author's Organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional scoped_packages_options : typing . List [ ScopedPackagesOptions ] Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional min_major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepo_upgrade_deps Optional monorepo_upgrade_deps : bool Type: bool Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepo_upgrade_deps_options Optional monorepo_upgrade_deps_options : MonorepoUpgradeDepsOptions Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nx_config Optional nx_config : NXConfig Type: NXConfig Configuration for NX. workspace_config Optional workspace_config : WorkspaceConfig Type: WorkspaceConfig Configuration for workspace. ProjectTarget Project Target. Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . ProjectTarget ( depends_on : typing . List [ TargetDependency ], outputs : typing . List [ str ] = None ) Properties Name Type Description depends_on typing.List[ TargetDependency ] List of Target Dependencies. outputs typing.List[str] List of outputs to cache, relative to the root of the monorepo. depends_on Required depends_on : typing . List [ TargetDependency ] Type: typing.List[ TargetDependency ] List of Target Dependencies. outputs Optional outputs : typing . List [ str ] Type: typing.List[str] List of outputs to cache, relative to the root of the monorepo. note: must start with leading / SemverGroup Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . SemverGroup ( dependencies : typing . List [ str ], packages : typing . List [ str ], range : str , dependency_types : typing . List [ str ] = None ) Properties Name Type Description dependencies typing.List[str] the names of the dependencies (eg. packages typing.List[str] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range str the semver range which dependencies in this group should use. dependency_types typing.List[str] optionally only apply this group to dependencies of the provided types. dependencies Required dependencies : typing . List [ str ] Type: typing.List[str] the names of the dependencies (eg. \"lodash\") which belong to this group packages Required packages : typing . List [ str ] Type: typing.List[str] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range Required range : str Type: str the semver range which dependencies in this group should use. dependency_types Optional dependency_types : typing . List [ str ] Type: typing.List[str] optionally only apply this group to dependencies of the provided types. SyncpackConfig Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . SyncpackConfig ( dependency_types : typing . List [ str ], dev : bool , filter : str , indent : str , overrides : bool , peer : bool , pnpm_overrides : bool , prod : bool , resolutions : bool , semver_groups : typing . List [ SemverGroup ], semver_range : str , sort_az : typing . List [ str ], sort_first : typing . List [ str ], source : typing . List [ str ], version_groups : typing . List [ VersionGroup ], workspace : bool ) Properties Name Type Description dependency_types typing.List[str] which dependency properties to search within. dev bool whether to search within devDependencies. filter str a string which will be passed to new RegExp() to match against package names that should be included. indent str the character(s) to be used to indent your package.json files when writing to disk. overrides bool whether to search within npm overrides. peer bool whether to search within peerDependencies. pnpm_overrides bool whether to search within pnpm overrides. prod bool whether to search within dependencies. resolutions bool whether to search within yarn resolutions. semver_groups typing.List[ SemverGroup ] No description. semver_range str defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sort_az typing.List[str] which fields within package.json files should be sorted alphabetically. sort_first typing.List[str] which fields within package.json files should appear at the top, and in what order. source typing.List[str] glob patterns for package.json file locations. version_groups typing.List[ VersionGroup ] No description. workspace bool whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. dependency_types Required dependency_types : typing . List [ str ] Type: typing.List[str] which dependency properties to search within. dev Required dev : bool Type: bool whether to search within devDependencies. filter Required filter : str Type: str a string which will be passed to new RegExp() to match against package names that should be included. indent Required indent : str Type: str the character(s) to be used to indent your package.json files when writing to disk. overrides Required overrides : bool Type: bool whether to search within npm overrides. peer Required peer : bool Type: bool whether to search within peerDependencies. pnpm_overrides Required pnpm_overrides : bool Type: bool whether to search within pnpm overrides. prod Required prod : bool Type: bool whether to search within dependencies. resolutions Required resolutions : bool Type: bool whether to search within yarn resolutions. semver_groups Required semver_groups : typing . List [ SemverGroup ] Type: typing.List[ SemverGroup ] semver_range Required semver_range : str Type: str defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sort_az Required sort_az : typing . List [ str ] Type: typing.List[str] which fields within package.json files should be sorted alphabetically. sort_first Required sort_first : typing . List [ str ] Type: typing.List[str] which fields within package.json files should appear at the top, and in what order. source Required source : typing . List [ str ] Type: typing.List[str] glob patterns for package.json file locations. version_groups Required version_groups : typing . List [ VersionGroup ] Type: typing.List[ VersionGroup ] workspace Required workspace : bool Type: bool whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. TargetDependency Represents an NX Target Dependency. Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . TargetDependency ( projects : TargetDependencyProject , target : str ) Properties Name Type Description projects TargetDependencyProject Target dependencies. target str Projen target i.e: build, test, etc. projects Required projects : TargetDependencyProject Type: TargetDependencyProject Target dependencies. target Required target : str Type: str Projen target i.e: build, test, etc. VersionGroup Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . VersionGroup ( dependencies : typing . List [ str ], packages : typing . List [ str ], dependency_types : typing . List [ str ] = None , is_banned : bool = None , pin_version : str = None ) Properties Name Type Description dependencies typing.List[str] the names of the dependencies (eg. packages typing.List[str] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependency_types typing.List[str] optionally only apply this group to dependencies of the provided types. is_banned bool optionally force all dependencies in this group to be removed. pin_version str optionally force all dependencies in this group to have this version. dependencies Required dependencies : typing . List [ str ] Type: typing.List[str] the names of the dependencies (eg. \"lodash\") which belong to this group packages Required packages : typing . List [ str ] Type: typing.List[str] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependency_types Optional dependency_types : typing . List [ str ] Type: typing.List[str] optionally only apply this group to dependencies of the provided types. is_banned Optional is_banned : bool Type: bool optionally force all dependencies in this group to be removed. pin_version Optional pin_version : str Type: str optionally force all dependencies in this group to have this version. WorkspaceConfig Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/ Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . WorkspaceConfig ( no_hoist : typing . List [ str ] = None ) Properties Name Type Description no_hoist typing.List[str] List of package globs to exclude from hoisting in the workspace. no_hoist Optional no_hoist : typing . List [ str ] Type: typing.List[str] List of package globs to exclude from hoisting in the workspace. https://classic.yarnpkg.com/blog/2018/02/15/nohoist/ Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers from aws_prototyping_sdk import nx_monorepo nx_monorepo . NxMonorepoProject ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , monorepo_upgrade_deps : bool = None , monorepo_upgrade_deps_options : MonorepoUpgradeDepsOptions = None , nx_config : NXConfig = None , workspace_config : WorkspaceConfig = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. monorepo_upgrade_deps bool Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepo_upgrade_deps_options MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nx_config NXConfig Configuration for NX. workspace_config WorkspaceConfig Configuration for workspace. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Author's Organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepo_upgrade_deps Optional Type: bool Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepo_upgrade_deps_options Optional Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nx_config Optional Type: NXConfig Configuration for NX. workspace_config Optional Type: WorkspaceConfig Configuration for workspace. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_implicit_dependency Create an implicit dependency between two Project's. override_project_targets Allow project specific target overrides. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. add_implicit_dependency def add_implicit_dependency ( dependent : Project , dependee : Project ) -> None Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: projen.Project project you want to have the dependency. dependee Required Type: projen.Project project you wish to depend on. override_project_targets def override_project_targets ( project : Project , targets : typing . Mapping [ ProjectTarget ] ) -> None Allow project specific target overrides. project Required Type: projen.Project targets Required Type: typing.Mapping[ ProjectTarget ] Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. sub_projects typing.List[projen.Project] No description. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this pacakge. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig sub_projects Required sub_projects : typing . List [ Project ] Type: typing.List[projen.Project] Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums TargetDependencyProject Supported enums for a TargetDependency. Members Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. SELF Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages. DEPENDENCIES Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"Index"},{"location":"python/nx-monorepo/index.html#homogenous-dependencies","text":"As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code.","title":"Homogenous Dependencies"},{"location":"python/nx-monorepo/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/nx-monorepo/index.html#structs","text":"","title":"Structs "},{"location":"python/nx-monorepo/index.html#monorepoupgradedepsoptions","text":"Configuration for Monorepo Upgrade Deps task.","title":"MonorepoUpgradeDepsOptions "},{"location":"python/nx-monorepo/index.html#nxconfig","text":"NX configurations. https://nx.dev/configuration/packagejson","title":"NXConfig "},{"location":"python/nx-monorepo/index.html#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"python/nx-monorepo/index.html#projecttarget","text":"Project Target.","title":"ProjectTarget "},{"location":"python/nx-monorepo/index.html#semvergroup","text":"","title":"SemverGroup "},{"location":"python/nx-monorepo/index.html#syncpackconfig","text":"","title":"SyncpackConfig "},{"location":"python/nx-monorepo/index.html#targetdependency","text":"Represents an NX Target Dependency.","title":"TargetDependency "},{"location":"python/nx-monorepo/index.html#versiongroup","text":"","title":"VersionGroup "},{"location":"python/nx-monorepo/index.html#workspaceconfig","text":"Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/","title":"WorkspaceConfig "},{"location":"python/nx-monorepo/index.html#classes","text":"","title":"Classes "},{"location":"python/nx-monorepo/index.html#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"python/nx-monorepo/index.html#enums","text":"","title":"Enums "},{"location":"python/nx-monorepo/index.html#targetdependencyproject","text":"Supported enums for a TargetDependency.","title":"TargetDependencyProject "},{"location":"python/open-api-gateway/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.open_api_gateway OpenAPI Gateway Define your APIs using OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given a lambda integration for every operation. The project will generate models and clients from your OpenAPI spec in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure a lambda integration is provided for every API integration. When you change your API specification, just run npx projen again to regenerate all of this! Project Typescript It's recommended that this project is used as part of an nx_monorepo project. You can still use this as a standalone project if you like (eg npx projen new --from @aws-prototyping-sdk/open-api-gateway open-api-gateway-ts ), however you will need to manage build order (ie building the generated client first, followed by the project). For usage in a monorepo: Create the project in your .projenrc: # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.open_api_gateway import ClientLanguage , DocumentationFormat , OpenApiGatewayTsProject OpenApiGatewayTsProject ( parent = my_nx_monorepo , default_release_branch = \"mainline\" , name = \"my-api\" , outdir = \"packages/api\" , client_languages = [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ], documentation_formats = [ DocumentationFormat . HTML2 , DocumentationFormat . PLANTUML , DocumentationFormat . MARKDOWN ] ) In the output directory ( outdir ), you'll find a few files to get you started. |_ src/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.ts - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayLambdaApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample-api.ts. |_ sample-api.ts - Example usage of the construct defined in api.ts. |_ sample-api.say-hello.ts - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client, including generated lambda handler wrappers |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation If you would prefer to not generate the sample code, you can pass sampleCode: false to OpenApiGatewayTsProject . To make changes to your api, simply update spec.yaml and run npx projen to synthesize all the typesafe client/server code! The SampleApi construct uses NodejsFunction to declare the example lambda, but you are free to change this! Python As well as typescript, you can choose to generate the cdk construct and sample handler in python. # Example automatically generated from non-compiling source. May contain errors. OpenApiGatewayPythonProject ( parent = my_nx_monorepo , outdir = \"packages/myapi\" , name = \"myapi\" , module_name = \"myapi\" , version = \"1.0.0\" , author_name = \"jack\" , author_email = \"me@example.com\" , client_languages = [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ] ) You will need to set up a shared virtual environment and configure dependencies via the monorepo (see README.md for the nx-monorepo package). An example of a full .projenrc.ts might be: from projen.VenvOptions import VenvOptions , VenvOptions from aws_prototyping_sdk import nx_monorepo from aws_prototyping_sdk.open_api_gateway import ClientLanguage , OpenApiGatewayPythonProject from projen.awscdk import AwsCdkPythonApp monorepo = nx_monorepo . NxMonorepoProject ( default_release_branch = \"main\" , dev_deps = [ \"aws-prototyping-sdk\" , \"@aws-prototyping-sdk/open-api-gateway\" ], name = \"open-api-test\" ) api = OpenApiGatewayPythonProject ( parent = monorepo , outdir = \"packages/myapi\" , name = \"myapi\" , module_name = \"myapi\" , version = \"1.0.0\" , author_name = \"jack\" , author_email = \"me@example.com\" , client_languages = [ ClientLanguage . TYPESCRIPT ], venv_options = VenvOptions ( # Use a shared virtual env dir. # The generated python client will also use this virtual env dir envdir = \"../../.env\" ) ) # Install into virtual env so it's available for the cdk app api . tasks . try_find ( \"install\" ) . exec ( \"pip install --editable .\" ) app = AwsCdkPythonApp ( author_name = \"jack\" , author_email = \"me@example.com\" , cdk_version = \"2.1.0\" , module_name = \"myapp\" , name = \"myapp\" , version = \"1.0.0\" , parent = monorepo , outdir = \"packages/myapp\" , deps = [ api . module_name ], venv_options = VenvOptions ( envdir = \"../../.env\" ) ) monorepo . add_implicit_dependency ( app , api ) monorepo . synth () You'll find the following directory structure in packages/myapi : |_ myapi/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.py - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayLambdaApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample_api.py. |_ sample_api.py - Example usage of the construct defined in api.py. |_ handlers/ |_ say_hello_handler_sample.py - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client, including generated lambda handler wrappers. |_ java/ - A generated java API client. For simplicity, the generated code deploys a lambda layer for the generated code and its dependencies. You may choose to define an entirely separate projen PythonProject for your lambda handlers should you wish to add more dependencies than just the generated code. OpenAPI Specification Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message Construct A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. # Example automatically generated from non-compiling source. May contain errors. import path as path from aws_prototyping_sdk.open_api_gateway import Authorizers from aws_cdk.aws_lambda_nodejs import NodejsFunction from constructs import Construct from ..api import Api # # An example of how to wire lambda handler functions to the API # class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , default_authorizer = Authorizers . iam (), integrations = { # Every operation defined in your API must have an integration defined! \"say_hello\" : { \"function\" : NodejsFunction ( scope , \"say-hello\" ) } } ) Authorizers The Api construct allows you to define one or more authorizers for securing your API. An integration will use the defaultAuthorizer unless an authorizer is specified at the integration level. The following authorizers are supported: Authorizers.none - No auth Authorizers.iam - AWS IAM (Signature Version 4) Authorizers.cognito - Cognito user pool Authorizers.custom - A custom authorizer Cognito Authorizer To use the Cognito authorizer, one or more user pools must be provided. You can optionally specify the scopes to check if using an access token. You can use the withScopes method to use the same authorizer but verify different scopes for individual integrations, for example: # Example automatically generated from non-compiling source. May contain errors. class SampleApi ( Api ): def __init__ ( self , scope , id ): cognito_authorizer = Authorizers . cognito ( authorizer_id = \"myCognitoAuthorizer\" , user_pools = [ UserPool ( scope , \"UserPool\" )] ) super () . __init__ ( scope , id , default_authorizer = cognito_authorizer , integrations = { # Everyone in the user pool can call this operation: \"say_hello\" : { \"function\" : NodejsFunction ( scope , \"say-hello\" ) }, # Only users with the given scopes can call this operation \"my_restricted_operation\" : { \"function\" : NodejsFunction ( scope , \"my-restricted-operation\" ), \"authorizer\" : cognito_authorizer . with_scopes ( \"my-resource-server/my-scope\" ) } } ) For more information about scopes or identity and access tokens, please see the API Gateway documentation . Custom Authorizer Custom authorizers use lambda functions to handle authorizing requests. These can either be simple token-based authorizers, or more complex request-based authorizers. See the API Gateway documentation for more details. An example token-based authorizer (default): # Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( authorizer_id = \"myTokenAuthorizer\" , function = NodejsFunction ( scope , \"authorizer\" ) ) An example request-based handler. By default the identitySource will be method.request.header.Authorization , however you can customise this as per the API Gateway documentation . # Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( authorizer_id = \"myRequestAuthorizer\" , type = CustomAuthorizerType . REQUEST , identity_source = \"method.request.header.MyCustomHeader, method.request.querystring.myQueryString\" , function = NodejsFunction ( scope , \"authorizer\" ) ) Generated Client Typescript The typescript-fetch OpenAPI generator is used to generate OpenAPI clients for typescript. This requires an implementation of fetch to be passed to the client. In the browser one can pass the built in fetch, or in NodeJS you can use an implementation such as node-fetch . Example usage of the client in a website: # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import Configuration , DefaultApi client = DefaultApi ( Configuration ( base_path = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" , fetch_api = window . fetch . bind ( window ) )) await client . sayHello ({ name : \"Jack\" }) Python The python-experimental OpenAPI generator is used to generate OpenAPI clients for python. Example usage: from my_api_python import ApiClient , Configuration from my_api_python.api.default_api import DefaultApi configuration = Configuration ( host = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) with ApiClient ( configuration ) as api_client : client = DefaultApi ( api_client ) client . say_hello ( query_params = { 'name' : \"name_example\" , }, ) You'll find details about how to use the python client in the README.md alongside your generated client. Lambda Handler Wrappers Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification. Typescript # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import say_hello_handler handler = say_hello_handler ( async ( input ) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } !` , }, }; }) Python from myapi_python.api.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> ApiResponse [ HelloResponse , ApiError ]: return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Interceptors The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next(input, event, context) . Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next . Typescript In typescript, interceptors are passed as separate arguments to the generated handler wrapper, in the order in which they should be executed. # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import say_hello_handler , LambdaRequestParameters , LambdaHandlerChain # Interceptor to wrap invocations in a try/catch, returning a 500 error for any unhandled exceptions. try_catch_interceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( input : LambdaRequestParameters < RequestParameters , RequestArrayParameters , RequestBody > , event : any , context : any , chain : LambdaHandlerChain < RequestParameters , RequestArrayParameters , RequestBody , Response > , ): Promise < Response | OperationResponse < 500 , { errorMessage : string } >> => { try { return await chain . next ( input , event , context ); } catch ( e : any ) { return { statusCode : 500 , body : { errorMessage : e . message }}; } } # tryCatchInterceptor is passed first, so it runs first and calls the second argument function (the request handler) via chain.next handler = say_hello_handler ( try_catch_interceptor , async ( input ) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } !` , }, }; }) Another example interceptor might be to record request time metrics. The example below includes the full generic type signature for an interceptor: # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import LambdaRequestParameters , LambdaHandlerChain timing_interceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( input : LambdaRequestParameters < RequestParameters , RequestArrayParameters , RequestBody > , event : any , context : any , chain : LambdaHandlerChain < RequestParameters , RequestArrayParameters , RequestBody , Response > , ): Promise < Response > => { const start = Date . now (); const response = await chain . next ( input , event , context ); const end = Date . now (); console . log ( ` Took $ { end - start } ms ` ); return response ; } Other Details Workspaces and OpenApiGatewayTsProject OpenApiGatewayTsProject can be used as part of a monorepo using YARN/NPM/PNPM workspaces. When used in a monorepo, a dependency is established between OpenApiGatewayTsProject and the generated typescript client, which is expected to be managed by the parent monorepo (ie both OpenApiGatewayTsProject and the generated typescript client are parented by the monorepo). During initial project synthesis, the dependency between OpenApiGatewayTsProject and the generated client is established via workspace configuration local to OpenApiGatewayTsProject , since the parent monorepo will not have updated to include the new packages in time for the initial \"install\". When the package manager is PNPM, this initial workspace is configured by creating a local pnpm-workspace.yaml file, and thus if you specify your own for an instance of OpenApiGatewayTsProject , synthesis will fail. It is most likely that you will not need to define this file locally in OpenApiGatewayTsProject since the monorepo copy should be used to manage all packages within the repo, however if managing this file at the OpenApiGatewayTsProject level is required, please use the pnpmWorkspace property of OpenApiGatewayTsProject . Customising Generated Client Projects By default, the generated clients are configured automatically, including project names. You can customise the generated client code using the <language>ProjectOptions properties when constructing your projen project. Python Shared Virtual Environment For adding dependencies between python projects within a monorepo you can use a single shared virtual environment, and install your python projects into that environment with pip install --editable . in the dependee. The generated python client will automatically do this if it detects it is within a monorepo. The following example shows how to configure the generated client to use a shared virtual environment: # Example automatically generated from non-compiling source. May contain errors. api = OpenApiGatewayTsProject ( parent = monorepo , name = \"api\" , outdir = \"packages/api\" , default_release_branch = \"main\" , client_languages = [ ClientLanguage . PYTHON ], python_client_options = { \"module_name\" : \"my_api_python\" , \"name\" : \"my_api_python\" , \"author_name\" : \"jack\" , \"author_email\" : \"me@example.com\" , \"version\" : \"1.0.0\" , \"venv_options\" : { # Directory relative to the generated python client (in this case packages/api/generated/python) \"envdir\" : \"../../../../.env\" } } ) PythonProject ( parent = monorepo , outdir = \"packages/my-python-lib\" , module_name = \"my_python_lib\" , name = \"my_python_lib\" , author_name = \"jack\" , author_email = \"me@example.com\" , version = \"1.0.0\" , venv_options = { # Directory relative to the python lib (in this case packages/my-python-lib) \"envdir\" : \"../../.env\" }, # Generated client can be safely cast to a PythonProject deps = [( api . generated_clients [ ClientLanguage . PYTHON ]) . module_name ] ) API Reference Constructs OpenApiGatewayLambdaApi A construct for creating an api gateway api based on the definition in the OpenAPI spec. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayLambdaApi ( scope : Construct , id : str , cloud_watch_role : bool = None , deploy : bool = None , deploy_options : StageOptions = None , description : str = None , disable_execute_api_endpoint : bool = None , domain_name : DomainNameOptions = None , endpoint_export_name : str = None , endpoint_types : typing . List [ EndpointType ] = None , fail_on_warnings : bool = None , parameters : typing . Mapping [ str ] = None , policy : PolicyDocument = None , rest_api_name : str = None , retain_deployments : bool = None , integrations : typing . Mapping [ OpenApiIntegration ], operation_lookup : typing . Mapping [ MethodAndPath ], cors_options : CorsOptions = None , default_authorizer : Authorizer = None , spec : typing . Any , spec_path : str ) Name Type Description scope constructs.Construct No description. id str No description. cloud_watch_role bool Automatically configure an AWS CloudWatch role for API Gateway. deploy bool Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deploy_options aws_cdk.aws_apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description str A description of the RestApi construct. disable_execute_api_endpoint bool Specifies whether clients can invoke the API using the default execute-api endpoint. domain_name aws_cdk.aws_apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpoint_export_name str Export name for the CfnOutput containing the API endpoint. endpoint_types typing.List[aws_cdk.aws_apigateway.EndpointType] A list of the endpoint types of the API. fail_on_warnings bool Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters typing.Mapping[str] Custom header parameters for the request. policy aws_cdk.aws_iam.PolicyDocument A policy document that contains the permissions for this RestApi. rest_api_name str A name for the API Gateway RestApi resource. retain_deployments bool Retains old deployment resources when the API changes. integrations typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup typing.Mapping[ MethodAndPath ] Details about each operation. cors_options aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Authorizer The default authorizer to use for your api. spec typing.Any The parsed OpenAPI specification. spec_path str Path to the JSON open api spec. scope Required Type: constructs.Construct id Required Type: str cloud_watch_role Optional Type: bool Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional Type: bool Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deploy_options Optional Type: aws_cdk.aws_apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional Type: str Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disable_execute_api_endpoint Optional Type: bool Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domain_name Optional Type: aws_cdk.aws_apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpoint_export_name Optional Type: str Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpoint_types Optional Type: typing.List[aws_cdk.aws_apigateway.EndpointType] Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. fail_on_warnings Optional Type: bool Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional Type: typing.Mapping[str] Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional Type: aws_cdk.aws_iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. rest_api_name Optional Type: str Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retain_deployments Optional Type: bool Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required Type: typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup Required Type: typing.Mapping[ MethodAndPath ] Details about each operation. cors_options Optional Type: aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Optional Type: Authorizer The default authorizer to use for your api. When omitted, no authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required Type: typing.Any The parsed OpenAPI specification. spec_path Required Type: str Path to the JSON open api spec. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayLambdaApi . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. api aws_cdk.aws_apigateway.SpecRestApi No description. node Required node : Node Type: constructs.Node The tree node. api Required api : SpecRestApi Type: aws_cdk.aws_apigateway.SpecRestApi Structs AuthorizerProps Properties for an authorizer. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . AuthorizerProps ( authorization_type : AuthorizationType , authorizer_id : str , authorization_scopes : typing . List [ str ] = None ) Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. CognitoAuthorizerProps Properties used to configure a cognito authorizer. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CognitoAuthorizerProps ( authorizer_id : str , user_pools : typing . List [ IUserPool ], authorization_scopes : typing . List [ str ] = None ) Properties Name Type Description authorizer_id str Unique identifier for this authorizer. user_pools typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes typing.List[str] A list of authorization scopes configured on the method. authorizer_id Required authorizer_id : str Type: str Unique identifier for this authorizer. user_pools Required user_pools : typing . List [ IUserPool ] Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes CustomAuthorizerProps Properties used to configure a custom authorizer. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CustomAuthorizerProps ( authorizer_id : str , function : IFunction , authorizer_result_ttl_in_seconds : typing . Union [ int , float ] = None , identity_source : str = None , type : CustomAuthorizerType = None ) Properties Name Type Description authorizer_id str Unique identifier for this authorizer. function aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds typing.Union[int, float] The number of seconds during which the authorizer result is cached. identity_source str The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizer_id Required authorizer_id : str Type: str Unique identifier for this authorizer. function Required function : IFunction Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds Optional authorizer_result_ttl_in_seconds : typing . Union [ int , float ] Type: typing.Union[int, float] Default: 300 The number of seconds during which the authorizer result is cached. identity_source Optional identity_source : str Type: str Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional type : CustomAuthorizerType Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type MethodAndPath Structure to contain an API operation's method and path. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . MethodAndPath ( method : str , path : str ) Properties Name Type Description method str The http method of this operation. path str The path of this operation in the api. method Required method : str Type: str The http method of this operation. path Required path : str Type: str The path of this operation in the api. OpenApiGatewayLambdaApiProps Configuration for the OpenApiGatewayLambdaApi construct. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayLambdaApiProps ( cloud_watch_role : bool = None , deploy : bool = None , deploy_options : StageOptions = None , description : str = None , disable_execute_api_endpoint : bool = None , domain_name : DomainNameOptions = None , endpoint_export_name : str = None , endpoint_types : typing . List [ EndpointType ] = None , fail_on_warnings : bool = None , parameters : typing . Mapping [ str ] = None , policy : PolicyDocument = None , rest_api_name : str = None , retain_deployments : bool = None , integrations : typing . Mapping [ OpenApiIntegration ], operation_lookup : typing . Mapping [ MethodAndPath ], cors_options : CorsOptions = None , default_authorizer : Authorizer = None , spec : typing . Any , spec_path : str ) Properties Name Type Description cloud_watch_role bool Automatically configure an AWS CloudWatch role for API Gateway. deploy bool Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deploy_options aws_cdk.aws_apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description str A description of the RestApi construct. disable_execute_api_endpoint bool Specifies whether clients can invoke the API using the default execute-api endpoint. domain_name aws_cdk.aws_apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpoint_export_name str Export name for the CfnOutput containing the API endpoint. endpoint_types typing.List[aws_cdk.aws_apigateway.EndpointType] A list of the endpoint types of the API. fail_on_warnings bool Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters typing.Mapping[str] Custom header parameters for the request. policy aws_cdk.aws_iam.PolicyDocument A policy document that contains the permissions for this RestApi. rest_api_name str A name for the API Gateway RestApi resource. retain_deployments bool Retains old deployment resources when the API changes. integrations typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup typing.Mapping[ MethodAndPath ] Details about each operation. cors_options aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Authorizer The default authorizer to use for your api. spec typing.Any The parsed OpenAPI specification. spec_path str Path to the JSON open api spec. cloud_watch_role Optional cloud_watch_role : bool Type: bool Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional deploy : bool Type: bool Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deploy_options Optional deploy_options : StageOptions Type: aws_cdk.aws_apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional description : str Type: str Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disable_execute_api_endpoint Optional disable_execute_api_endpoint : bool Type: bool Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domain_name Optional domain_name : DomainNameOptions Type: aws_cdk.aws_apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpoint_export_name Optional endpoint_export_name : str Type: str Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpoint_types Optional endpoint_types : typing . List [ EndpointType ] Type: typing.List[aws_cdk.aws_apigateway.EndpointType] Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. fail_on_warnings Optional fail_on_warnings : bool Type: bool Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional parameters : typing . Mapping [ str ] Type: typing.Mapping[str] Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional policy : PolicyDocument Type: aws_cdk.aws_iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. rest_api_name Optional rest_api_name : str Type: str Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retain_deployments Optional retain_deployments : bool Type: bool Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required integrations : typing . Mapping [ OpenApiIntegration ] Type: typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup Required operation_lookup : typing . Mapping [ MethodAndPath ] Type: typing.Mapping[ MethodAndPath ] Details about each operation. cors_options Optional cors_options : CorsOptions Type: aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Optional default_authorizer : Authorizer Type: Authorizer The default authorizer to use for your api. When omitted, no authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required spec : typing . Any Type: typing.Any The parsed OpenAPI specification. spec_path Required spec_path : str Type: str Path to the JSON open api spec. OpenApiGatewayProjectOptions Options common to all open api gateway projects. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayProjectOptions ( client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , spec_file : str = None , typescript_client_options : TypeScriptProjectOptions = None ) Properties Name Type Description client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. spec_file Optional spec_file : str Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. OpenApiGatewayPythonProjectOptions Configuration for the OpenApiGatewayPythonProject. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayPythonProjectOptions ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , spec_file : str = None , typescript_client_options : TypeScriptProjectOptions = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required author_email : str Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required author_name : str Type: str Default: $GIT_USER_NAME Author's name. version Required version : str Type: str Default: \"0.1.0\" Version of the package. classifiers Optional classifiers : typing . List [ str ] Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional description : str Type: str A short description of the package. homepage Optional homepage : str Type: str A URL to the website of the project. license Optional license : str Type: str License of this package as an SPDX identifier. package_name Optional package_name : str Type: str Package name. poetry_options Optional poetry_options : PoetryPyprojectOptionsWithoutDeps Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional setup_config : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required module_name : str Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional pip : bool Type: bool Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional poetry : bool Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js Optional projenrc_js : bool Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional projenrc_python : bool Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional projenrc_python_options : ProjenrcOptions Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional pytest : bool Type: bool Default: true Include pytest tests. pytest_options Optional pytest_options : PytestOptions Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional setuptools : bool Type: bool Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional venv : bool Type: bool Default: true Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional venv_options : VenvOptions Type: projen.python.VenvOptions Default: defaults Venv options. client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. spec_file Optional spec_file : str Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. OpenApiGatewayTsProjectOptions Configuration for the OpenApiGatewayTsProject. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayTsProjectOptions ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , spec_file : str = None , typescript_client_options : TypeScriptProjectOptions = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Author's Organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional scoped_packages_options : typing . List [ ScopedPackagesOptions ] Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional min_major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. spec_file Optional spec_file : str Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. OpenApiIntegration Defines an integration for an individual API operation. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiIntegration ( function : IFunction , authorizer : Authorizer = None ) Properties Name Type Description function aws_cdk.aws_lambda.IFunction The lambda function to service the api operation. authorizer Authorizer The authorizer to use for this api operation (overrides the default). function Required function : IFunction Type: aws_cdk.aws_lambda.IFunction The lambda function to service the api operation. authorizer Optional authorizer : Authorizer Type: Authorizer The authorizer to use for this api operation (overrides the default). OpenApiOptions Options required alongside an Open API specification to create API Gateway resources. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiOptions ( integrations : typing . Mapping [ OpenApiIntegration ], operation_lookup : typing . Mapping [ MethodAndPath ], cors_options : CorsOptions = None , default_authorizer : Authorizer = None ) Properties Name Type Description integrations typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup typing.Mapping[ MethodAndPath ] Details about each operation. cors_options aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Authorizer The default authorizer to use for your api. integrations Required integrations : typing . Mapping [ OpenApiIntegration ] Type: typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup Required operation_lookup : typing . Mapping [ MethodAndPath ] Type: typing.Mapping[ MethodAndPath ] Details about each operation. cors_options Optional cors_options : CorsOptions Type: aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Optional default_authorizer : Authorizer Type: Authorizer The default authorizer to use for your api. When omitted, no authorizer is used. Authorizers specified at the integration level will override this for that operation. Classes Authorizer An authorizer for authorizing API requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizer ( authorization_type : AuthorizationType , authorizer_id : str , authorization_scopes : typing . List [ str ] = None ) Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required Type: str The unique identifier for the authorizer. authorization_scopes Optional Type: typing.List[str] Scopes for the authorizer, if any. Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. Authorizers Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers () Name Type Description Static Functions Name Description cognito A Cognito User Pools authorizer. custom A custom authorizer. iam An IAM authorizer which uses AWS signature version 4 to authorize requests. none No authorizer. cognito import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers . cognito ( authorizer_id : str , user_pools : typing . List [ IUserPool ], authorization_scopes : typing . List [ str ] = None ) A Cognito User Pools authorizer. authorizer_id Required Type: str Unique identifier for this authorizer. user_pools Required Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes Optional Type: typing.List[str] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes custom import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers . custom ( authorizer_id : str , function : IFunction , authorizer_result_ttl_in_seconds : typing . Union [ int , float ] = None , identity_source : str = None , type : CustomAuthorizerType = None ) A custom authorizer. authorizer_id Required Type: str Unique identifier for this authorizer. function Required Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds Optional Type: typing.Union[int, float] Default: 300 The number of seconds during which the authorizer result is cached. identity_source Optional Type: str Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type iam import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers . iam () An IAM authorizer which uses AWS signature version 4 to authorize requests. none import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers . none () No authorizer. CognitoAuthorizer An authorizer that uses Cognito identity or access tokens. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CognitoAuthorizer ( authorizer_id : str , user_pools : typing . List [ IUserPool ], authorization_scopes : typing . List [ str ] = None ) Name Type Description authorizer_id str Unique identifier for this authorizer. user_pools typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes typing.List[str] A list of authorization scopes configured on the method. authorizer_id Required Type: str Unique identifier for this authorizer. user_pools Required Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes Optional Type: typing.List[str] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes Methods Name Description with_scopes Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. with_scopes def with_scopes ( authorization_scopes : str ) -> CognitoAuthorizer Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes authorization_scopes Required Type: str the scopes to apply. Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. user_pools typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. user_pools Required user_pools : typing . List [ IUserPool ] Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. CustomAuthorizer An authorizer that uses a lambda function to authorize requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CustomAuthorizer ( authorizer_id : str , function : IFunction , authorizer_result_ttl_in_seconds : typing . Union [ int , float ] = None , identity_source : str = None , type : CustomAuthorizerType = None ) Name Type Description authorizer_id str Unique identifier for this authorizer. function aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds typing.Union[int, float] The number of seconds during which the authorizer result is cached. identity_source str The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizer_id Required Type: str Unique identifier for this authorizer. function Required Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds Optional Type: typing.Union[int, float] Default: 300 The number of seconds during which the authorizer result is cached. identity_source Optional Type: str Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorizer_result_ttl_in_seconds typing.Union[int, float] The number of seconds during which the authorizer result is cached. function aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. identity_source str The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. authorizer_result_ttl_in_seconds Required authorizer_result_ttl_in_seconds : typing . Union [ int , float ] Type: typing.Union[int, float] The number of seconds during which the authorizer result is cached. function Required function : IFunction Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. identity_source Required identity_source : str Type: str The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Required type : CustomAuthorizerType Type: CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IamAuthorizer An IAM authorizer. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . IamAuthorizer () Name Type Description Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. NoneAuthorizer No authorizer. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . NoneAuthorizer () Name Type Description Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. OpenApiGatewayPythonProject Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayPythonProject ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , spec_file : str = None , typescript_client_options : TypeScriptProjectOptions = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required Type: str Default: $GIT_USER_NAME Author's name. version Required Type: str Default: \"0.1.0\" Version of the package. classifiers Optional Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: str A short description of the package. homepage Optional Type: str A URL to the website of the project. license Optional Type: str License of this package as an SPDX identifier. package_name Optional Type: str Package name. poetry_options Optional Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: bool Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js Optional Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: bool Default: true Include pytest tests. pytest_options Optional Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: bool Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: bool Default: true Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional Type: projen.python.VenvOptions Default: defaults Venv options. client_languages Required Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir Optional Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. spec_file Optional Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options Optional Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_dependency Adds a runtime dependency. add_dev_dependency Adds a dev dependency. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <module>@<semver> . add_dev_dependency def add_dev_dependency ( spec : str ) -> None Adds a dev dependency. spec Required Type: str Format <module>@<semver> . Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. deps_manager projen.python.IPythonDeps API for managing dependencies. env_manager projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name str Python module name (the project name, with any hyphens or periods replaced with underscores). version str Version of the package for distribution (should follow semver). packaging_manager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. generated_python_client projen.python.PythonProject A reference to the generated python client. spec_dir str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name str The name of the spec file. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. deps_manager Required deps_manager : IPythonDeps Type: projen.python.IPythonDeps API for managing dependencies. env_manager Required env_manager : IPythonEnv Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name Required module_name : str Type: str Python module name (the project name, with any hyphens or periods replaced with underscores). version Required version : str Type: str Version of the package for distribution (should follow semver). packaging_manager Optional packaging_manager : IPythonPackaging Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional pytest : Pytest Type: projen.python.Pytest Pytest component. api_src_dir Required api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients Required generated_clients : typing . Mapping [ Project ] Type: typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir Required generated_code_dir : str Type: str The directory in which generated client code will be generated, relative to the outdir of this project. generated_python_client Required generated_python_client : PythonProject Type: projen.python.PythonProject A reference to the generated python client. spec_dir Required spec_dir : str Type: str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name Required spec_file_name : str Type: str The name of the spec file. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. OpenApiGatewayTsProject Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayTsProject ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , spec_file : str = None , typescript_client_options : TypeScriptProjectOptions = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Author's Organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). client_languages Required Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. generated_code_dir Optional Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. spec_file Optional Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescript_client_options Optional Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. generated_typescript_client projen.typescript.TypeScriptProject A reference to the generated typescript client. spec_dir str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name str The name of the spec file. pnpm_workspace projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this pacakge. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig api_src_dir Required api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients Required generated_clients : typing . Mapping [ Project ] Type: typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir Required generated_code_dir : str Type: str The directory in which generated client code will be generated, relative to the outdir of this project. generated_typescript_client Required generated_typescript_client : TypeScriptProject Type: projen.typescript.TypeScriptProject A reference to the generated typescript client. spec_dir Required spec_dir : str Type: str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name Required spec_file_name : str Type: str The name of the spec file. pnpm_workspace Optional pnpm_workspace : YamlFile Type: projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums ClientLanguage Supported languages for client generation. Members Name Description TYPESCRIPT No description. PYTHON No description. JAVA No description. TYPESCRIPT PYTHON JAVA CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Members Name Description TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. DocumentationFormat Formats for documentation generation. Members Name Description HTML2 No description. MARKDOWN No description. PLANTUML No description. HTML2 MARKDOWN PLANTUML","title":"Index"},{"location":"python/open-api-gateway/index.html#openapi-gateway","text":"Define your APIs using OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given a lambda integration for every operation. The project will generate models and clients from your OpenAPI spec in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure a lambda integration is provided for every API integration. When you change your API specification, just run npx projen again to regenerate all of this!","title":"OpenAPI Gateway"},{"location":"python/open-api-gateway/index.html#project","text":"","title":"Project"},{"location":"python/open-api-gateway/index.html#openapi-specification","text":"Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message","title":"OpenAPI Specification"},{"location":"python/open-api-gateway/index.html#construct","text":"A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. # Example automatically generated from non-compiling source. May contain errors. import path as path from aws_prototyping_sdk.open_api_gateway import Authorizers from aws_cdk.aws_lambda_nodejs import NodejsFunction from constructs import Construct from ..api import Api # # An example of how to wire lambda handler functions to the API # class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , default_authorizer = Authorizers . iam (), integrations = { # Every operation defined in your API must have an integration defined! \"say_hello\" : { \"function\" : NodejsFunction ( scope , \"say-hello\" ) } } )","title":"Construct"},{"location":"python/open-api-gateway/index.html#generated-client","text":"","title":"Generated Client"},{"location":"python/open-api-gateway/index.html#lambda-handler-wrappers","text":"Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification.","title":"Lambda Handler Wrappers"},{"location":"python/open-api-gateway/index.html#interceptors","text":"The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next(input, event, context) . Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next .","title":"Interceptors"},{"location":"python/open-api-gateway/index.html#other-details","text":"","title":"Other Details"},{"location":"python/open-api-gateway/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/open-api-gateway/index.html#constructs","text":"","title":"Constructs "},{"location":"python/open-api-gateway/index.html#openapigatewaylambdaapi","text":"A construct for creating an api gateway api based on the definition in the OpenAPI spec.","title":"OpenApiGatewayLambdaApi "},{"location":"python/open-api-gateway/index.html#structs","text":"","title":"Structs "},{"location":"python/open-api-gateway/index.html#authorizerprops","text":"Properties for an authorizer.","title":"AuthorizerProps "},{"location":"python/open-api-gateway/index.html#cognitoauthorizerprops","text":"Properties used to configure a cognito authorizer.","title":"CognitoAuthorizerProps "},{"location":"python/open-api-gateway/index.html#customauthorizerprops","text":"Properties used to configure a custom authorizer.","title":"CustomAuthorizerProps "},{"location":"python/open-api-gateway/index.html#methodandpath","text":"Structure to contain an API operation's method and path.","title":"MethodAndPath "},{"location":"python/open-api-gateway/index.html#openapigatewaylambdaapiprops","text":"Configuration for the OpenApiGatewayLambdaApi construct.","title":"OpenApiGatewayLambdaApiProps "},{"location":"python/open-api-gateway/index.html#openapigatewayprojectoptions","text":"Options common to all open api gateway projects.","title":"OpenApiGatewayProjectOptions "},{"location":"python/open-api-gateway/index.html#openapigatewaypythonprojectoptions","text":"Configuration for the OpenApiGatewayPythonProject.","title":"OpenApiGatewayPythonProjectOptions "},{"location":"python/open-api-gateway/index.html#openapigatewaytsprojectoptions","text":"Configuration for the OpenApiGatewayTsProject.","title":"OpenApiGatewayTsProjectOptions "},{"location":"python/open-api-gateway/index.html#openapiintegration","text":"Defines an integration for an individual API operation.","title":"OpenApiIntegration "},{"location":"python/open-api-gateway/index.html#openapioptions","text":"Options required alongside an Open API specification to create API Gateway resources.","title":"OpenApiOptions "},{"location":"python/open-api-gateway/index.html#classes","text":"","title":"Classes "},{"location":"python/open-api-gateway/index.html#authorizer","text":"An authorizer for authorizing API requests.","title":"Authorizer "},{"location":"python/open-api-gateway/index.html#authorizers_1","text":"Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct.","title":"Authorizers "},{"location":"python/open-api-gateway/index.html#cognitoauthorizer","text":"An authorizer that uses Cognito identity or access tokens.","title":"CognitoAuthorizer "},{"location":"python/open-api-gateway/index.html#customauthorizer","text":"An authorizer that uses a lambda function to authorize requests.","title":"CustomAuthorizer "},{"location":"python/open-api-gateway/index.html#iamauthorizer","text":"An IAM authorizer.","title":"IamAuthorizer "},{"location":"python/open-api-gateway/index.html#noneauthorizer","text":"No authorizer.","title":"NoneAuthorizer "},{"location":"python/open-api-gateway/index.html#openapigatewaypythonproject","text":"Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayPythonProject "},{"location":"python/open-api-gateway/index.html#openapigatewaytsproject","text":"Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayTsProject "},{"location":"python/open-api-gateway/index.html#enums","text":"","title":"Enums "},{"location":"python/open-api-gateway/index.html#clientlanguage","text":"Supported languages for client generation.","title":"ClientLanguage "},{"location":"python/open-api-gateway/index.html#customauthorizertype","text":"The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type","title":"CustomAuthorizerType "},{"location":"python/open-api-gateway/index.html#documentationformat","text":"Formats for documentation generation.","title":"DocumentationFormat "},{"location":"python/pdk-nag/index.html","text":"PDK Nag PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict API Reference Constructs PDKNagApp Initializers from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp ( analytics_reporting : bool = None , auto_synth : bool = None , context : typing . Mapping [ typing . Any ] = None , outdir : str = None , stack_traces : bool = None , tree_metadata : bool = None , fail_on_error : bool = None , fail_on_warning : bool = None ) Name Type Description analytics_reporting bool Include runtime versioning information in the Stacks of this app. auto_synth bool Automatically call synth() before the program exits. context typing.Mapping[typing.Any] Additional context values for the application. outdir str The output directory into which to emit synthesized artifacts. stack_traces bool Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata bool Include construct tree metadata as part of the Cloud Assembly. fail_on_error bool Determines whether any errors encountered should trigger a test failure. fail_on_warning bool Determines whether any warnings encountered should trigger a test failure. analytics_reporting Optional Type: bool Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. auto_synth Optional Type: bool Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . outdir Optional Type: str Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. stack_traces Optional Type: bool Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata Optional Type: bool Default: true Include construct tree metadata as part of the Cloud Assembly. fail_on_error Optional Type: bool Default: false Determines whether any errors encountered should trigger a test failure. fail_on_warning Optional Type: bool Default: false Determines whether any warnings encountered should trigger a test failure. Methods Name Description to_string Returns a string representation of this construct. synth Synthesize this stage into a cloud assembly. add_nag_result No description. nag_results Returns a list of NagResult. to_string def to_string () -> str Returns a string representation of this construct. synth def synth ( force : bool = None , skip_validation : bool = None , validate_on_synthesis : bool = None ) -> CloudAssembly Synthesize this stage into a cloud assembly. Once an assembly has been synthesized, it cannot be modified. Subsequent calls will return the same assembly. force Optional Type: bool Default: false Force a re-synth, even if the stage has already been synthesized. This is used by tests to allow for incremental verification of the output. Do not use in production. skip_validation Optional Type: bool Default: false Should we skip construct validation. validate_on_synthesis Optional Type: bool Default: false Whether the stack should be validated after synthesis to check for error metadata. add_nag_result def add_nag_result ( messages : typing . List [ Message ], resource : str ) -> None messages Required Type: typing.List[ Message ] List of messages. resource Required Type: str Resource which triggered the message. nag_results def nag_results () -> typing . List [ NagResult ] Returns a list of NagResult. Note: app.synth() must be called before this to retrieve results. Static Functions Name Description is_construct Checks if x is a construct. is_stage Test whether the given construct is a stage. of Return the stage this construct is contained with, if available. is_app Checks if an object is an instance of the App class. is_construct from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. is_stage from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp . is_stage ( x : typing . Any ) Test whether the given construct is a stage. x Required Type: typing.Any of from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp . of ( construct : IConstruct ) Return the stage this construct is contained with, if available. If called on a nested stage, returns its parent. construct Required Type: constructs.IConstruct is_app from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp . is_app ( obj : typing . Any ) Checks if an object is an instance of the App class. obj Required Type: typing.Any The object to evaluate. Properties Name Type Description node constructs.Node The tree node. artifact_id str Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. asset_outdir str The cloud assembly asset output directory. outdir str The cloud assembly output directory. stage_name str The name of the stage. account str The default account for all resources defined within this stage. parent_stage aws_cdk.Stage The parent stage or undefined if this is the app. region str The default region for all resources defined within this stage. node Required node : Node Type: constructs.Node The tree node. artifact_id Required artifact_id : str Type: str Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. Derived from the construct path. asset_outdir Required asset_outdir : str Type: str The cloud assembly asset output directory. outdir Required outdir : str Type: str The cloud assembly output directory. stage_name Required stage_name : str Type: str The name of the stage. Based on names of the parent stages separated by hypens. account Optional account : str Type: str The default account for all resources defined within this stage. parent_stage Optional parent_stage : Stage Type: aws_cdk.Stage The parent stage or undefined if this is the app. * region Optional region : str Type: str The default region for all resources defined within this stage. Structs Message Message instance. Initializer from aws_prototyping_sdk import pdk_nag pdk_nag . Message ( message_description : str , message_type : str ) Properties Name Type Description message_description str Message description. message_type str Message type as returned from cdk-nag. message_description Required message_description : str Type: str Message description. message_type Required message_type : str Type: str Message type as returned from cdk-nag. NagResult Nag result. Initializer from aws_prototyping_sdk import pdk_nag pdk_nag . NagResult ( messages : typing . List [ Message ], resource : str ) Properties Name Type Description messages typing.List[ Message ] List of messages. resource str Resource which triggered the message. messages Required messages : typing . List [ Message ] Type: typing.List[ Message ] List of messages. resource Required resource : str Type: str Resource which triggered the message. PDKNagAppProps Initializer from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagAppProps ( analytics_reporting : bool = None , auto_synth : bool = None , context : typing . Mapping [ typing . Any ] = None , outdir : str = None , stack_traces : bool = None , tree_metadata : bool = None , fail_on_error : bool = None , fail_on_warning : bool = None ) Properties Name Type Description analytics_reporting bool Include runtime versioning information in the Stacks of this app. auto_synth bool Automatically call synth() before the program exits. context typing.Mapping[typing.Any] Additional context values for the application. outdir str The output directory into which to emit synthesized artifacts. stack_traces bool Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata bool Include construct tree metadata as part of the Cloud Assembly. fail_on_error bool Determines whether any errors encountered should trigger a test failure. fail_on_warning bool Determines whether any warnings encountered should trigger a test failure. analytics_reporting Optional analytics_reporting : bool Type: bool Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. auto_synth Optional auto_synth : bool Type: bool Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . outdir Optional outdir : str Type: str Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. stack_traces Optional stack_traces : bool Type: bool Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata Optional tree_metadata : bool Type: bool Default: true Include construct tree metadata as part of the Cloud Assembly. fail_on_error Optional fail_on_error : bool Type: bool Default: false Determines whether any errors encountered should trigger a test failure. fail_on_warning Optional fail_on_warning : bool Type: bool Default: false Determines whether any warnings encountered should trigger a test failure. Classes PDKNag Helper for create a Nag Enabled App. Initializers from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag () Name Type Description Static Functions Name Description add_resource_suppressions_by_path_no_throw Wrapper around NagSuppressions which does not throw. app Returns an instance of an App with Nag enabled. get_stack_account_regex Returns a stack account regex. get_stack_partition_regex Returns a stack partition regex. get_stack_prefix Returns a prefix comprising of a delimited set of Stack Ids. get_stack_region_regex Returns a stack region regex. add_resource_suppressions_by_path_no_throw from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . add_resource_suppressions_by_path_no_throw ( stack : Stack , path : str , suppressions : typing . List [ NagPackSuppression ], apply_to_children : bool = None ) Wrapper around NagSuppressions which does not throw. stack Required Type: aws_cdk.Stack stack instance. path Required Type: str resource path. suppressions Required Type: typing.List[cdk_nag.NagPackSuppression] list of suppressions to apply. apply_to_children Optional Type: bool whether to apply to children. app from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . app ( analytics_reporting : bool = None , auto_synth : bool = None , context : typing . Mapping [ typing . Any ] = None , outdir : str = None , stack_traces : bool = None , tree_metadata : bool = None , fail_on_error : bool = None , fail_on_warning : bool = None ) Returns an instance of an App with Nag enabled. analytics_reporting Optional Type: bool Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. auto_synth Optional Type: bool Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . outdir Optional Type: str Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. stack_traces Optional Type: bool Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata Optional Type: bool Default: true Include construct tree metadata as part of the Cloud Assembly. fail_on_error Optional Type: bool Default: false Determines whether any errors encountered should trigger a test failure. fail_on_warning Optional Type: bool Default: false Determines whether any warnings encountered should trigger a test failure. get_stack_account_regex from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . get_stack_account_regex ( stack : Stack ) Returns a stack account regex. stack Required Type: aws_cdk.Stack stack instance. get_stack_partition_regex from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . get_stack_partition_regex ( stack : Stack ) Returns a stack partition regex. stack Required Type: aws_cdk.Stack stack instance. get_stack_prefix from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . get_stack_prefix ( stack : Stack ) Returns a prefix comprising of a delimited set of Stack Ids. For example: StackA/NestedStackB/ stack Required Type: aws_cdk.Stack stack instance. get_stack_region_regex from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . get_stack_region_regex ( stack : Stack ) Returns a stack region regex. stack Required Type: aws_cdk.Stack stack instance.","title":"Index"},{"location":"python/pdk-nag/index.html#pdk-nag","text":"PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict","title":"PDK Nag"},{"location":"python/pdk-nag/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/pdk-nag/index.html#constructs","text":"","title":"Constructs "},{"location":"python/pdk-nag/index.html#pdknagapp","text":"","title":"PDKNagApp "},{"location":"python/pdk-nag/index.html#structs","text":"","title":"Structs "},{"location":"python/pdk-nag/index.html#message","text":"Message instance.","title":"Message "},{"location":"python/pdk-nag/index.html#nagresult","text":"Nag result.","title":"NagResult "},{"location":"python/pdk-nag/index.html#pdknagappprops","text":"","title":"PDKNagAppProps "},{"location":"python/pdk-nag/index.html#classes","text":"","title":"Classes "},{"location":"python/pdk-nag/index.html#pdknag","text":"Helper for create a Nag Enabled App.","title":"PDKNag "},{"location":"python/pipeline/index.html","text":"The pipeline module vends an extension to CDK's CodePipeline construct, named PDKPipeline. It additionally creates a CodeCommit repository and by default is configured to build the project assumming nx-monorepo is being used (although this can be changed). A Sonarqube Scanner can also be configured to trigger a scan whenever the synth build job completes successfully. This Scanner is non-blocking and as such is not instrumented as part of the pipeline. The architecture for the PDKPipeline is as follows: CodeCommit repository -> CodePipeline |-> EventBridge Rule (On Build Succeded) -> CodeBuild (Sonar Scan) |-> Secret (sonarqube token) This module additionally vends multiple Projen Projects, one for each of the supported languages. These projects aim to bootstrap your project by providing sample code which uses the PDKPipeline construct. For example, in .projenrc.ts: new PDKPipelineTsProject ({ cdkVersion : \"2.1.0\" , defaultReleaseBranch : \"mainline\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-pipeline\" , }); This will generate a package in typescript containing CDK boilerplate for a pipeline stack (which instantiates PDKPipeline), sets up a Dev stage with an Application Stage containing an empty ApplicationStack (to be implemented). Once this package is synthesized, you can run npx projen and projen will synthesize your cloudformation. Alternatively, you can initialize a project using the cli (in an empty directory) for each of the supported languages as follows: # Typescript npx projen new --from aws-prototyping-sdk pdk-pipeline-ts # Python npx projen new --from aws-prototyping-sdk pdk-pipeline-py # Java npx projen new --from aws-prototyping-sdk pdk-pipeline-java CDK Nag In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 . API Reference Constructs PDKPipeline An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals. Initializers from aws_prototyping_sdk import pipeline pipeline . PDKPipeline ( scope : Construct , id : str , synth : IFileSetProducer , asset_publishing_code_build_defaults : CodeBuildOptions = None , cli_version : str = None , code_build_defaults : CodeBuildOptions = None , code_pipeline : Pipeline = None , cross_account_keys : bool = None , docker_credentials : typing . List [ DockerCredential ] = None , docker_enabled_for_self_mutation : bool = None , docker_enabled_for_synth : bool = None , pipeline_name : str = None , publish_assets_in_parallel : bool = None , reuse_cross_region_support_stacks : bool = None , role : IRole = None , self_mutation : bool = None , self_mutation_code_build_defaults : CodeBuildOptions = None , synth_code_build_defaults : CodeBuildOptions = None , primary_synth_directory : str , repository_name : str , code_commit_removal_policy : RemovalPolicy = None , default_branch_name : str = None , sonar_code_scanner_config : SonarCodeScannerConfig = None , synth_shell_step_partial_props : ShellStepProps = None ) Name Type Description scope constructs.Construct No description. id str No description. synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. asset_publishing_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cli_version str CDK CLI version to use in self-mutation and asset publishing steps. code_build_defaults aws_cdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. code_pipeline aws_cdk.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. cross_account_keys bool Create KMS keys for the artifact buckets, allowing cross-account deployments. docker_credentials typing.List[aws_cdk.pipelines.DockerCredential] A list of credentials used to authenticate to Docker registries. docker_enabled_for_self_mutation bool Enable Docker for the self-mutate step. docker_enabled_for_synth bool Enable Docker for the 'synth' step. pipeline_name str The name of the CodePipeline pipeline. publish_assets_in_parallel bool Publish assets in multiple CodeBuild projects. reuse_cross_region_support_stacks bool Reuse the same cross region support stack for all pipelines in the App. role aws_cdk.aws_iam.IRole The IAM role to be assumed by this Pipeline. self_mutation bool Whether the pipeline will update itself. self_mutation_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name str Name of the CodeCommit repository to create. code_commit_removal_policy aws_cdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. default_branch_name str Branch to trigger the pipeline execution. sonar_code_scanner_config SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synth_shell_step_partial_props aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. scope Required Type: constructs.Construct id Required Type: str synth Required Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . asset_publishing_code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cli_version Optional Type: str Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. code_pipeline Optional Type: aws_cdk.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] cross_account_keys Optional Type: bool Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. docker_credentials Optional Type: typing.List[aws_cdk.pipelines.DockerCredential] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. docker_enabled_for_self_mutation Optional Type: bool Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. docker_enabled_for_synth Optional Type: bool Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipeline_name Optional Type: str Default: Automatically generated The name of the CodePipeline pipeline. publish_assets_in_parallel Optional Type: bool Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuse_cross_region_support_stacks Optional Type: bool Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional Type: aws_cdk.aws_iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. self_mutation Optional Type: bool Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . self_mutation_code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory Required Type: str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name Required Type: str Name of the CodeCommit repository to create. code_commit_removal_policy Optional Type: aws_cdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. default_branch_name Optional Type: str Default: mainline Branch to trigger the pipeline execution. sonar_code_scanner_config Optional Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synth_shell_step_partial_props Optional Type: aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. Methods Name Description to_string Returns a string representation of this construct. add_stage Deploy a single Stage by itself. add_wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. build_pipeline Send the current pipeline definition to the engine, and construct the pipeline. suppress_cdk_violations No description. to_string def to_string () -> str Returns a string representation of this construct. add_stage def add_stage ( stage : Stage , post : typing . List [ Step ] = None , pre : typing . List [ Step ] = None , stack_steps : typing . List [ StackSteps ] = None ) -> StageDeployment Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies. stage Required Type: aws_cdk.Stage post Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run after all of the stacks in the stage. pre Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run before any of the stacks in the stage. stack_steps Optional Type: typing.List[aws_cdk.pipelines.StackSteps] Default: No additional instructions Instructions for stack level steps. add_wave def add_wave ( id : str , post : typing . List [ Step ] = None , pre : typing . List [ Step ] = None ) -> Wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: declare const pipeline : pipelines.CodePipeline ; const wave = pipeline . addWave ( 'MyWave' ); wave . addStage ( new MyApplicationStage ( this , 'Stage1' )); wave . addStage ( new MyApplicationStage ( this , 'Stage2' )); id Required Type: str post Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run after all of the stages in the wave. pre Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run before any of the stages in the wave. build_pipeline def build_pipeline () -> None Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method. suppress_cdk_violations def suppress_cdk_violations () -> None Static Functions Name Description is_construct Checks if x is a construct. is_pipeline Return whether the given object extends { @link PipelineBase}. is_construct from aws_prototyping_sdk import pipeline pipeline . PDKPipeline . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. is_pipeline from aws_prototyping_sdk import pipeline pipeline . PDKPipeline . is_pipeline ( x : typing . Any ) Return whether the given object extends { @link PipelineBase}. We do attribute detection since we can't reliably use 'instanceof'. x Required Type: typing.Any Properties Name Type Description node constructs.Node The tree node. cloud_assembly_file_set aws_cdk.pipelines.FileSet The FileSet tha contains the cloud assembly. synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves typing.List[aws_cdk.pipelines.Wave] The waves in this pipeline. pipeline aws_cdk.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. synth_project aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the Synth. code_repository aws_cdk.aws_codecommit.Repository No description. node Required node : Node Type: constructs.Node The tree node. cloud_assembly_file_set Required cloud_assembly_file_set : FileSet Type: aws_cdk.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step. synth Required synth : IFileSetProducer Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves Required waves : typing . List [ Wave ] Type: typing.List[aws_cdk.pipelines.Wave] The waves in this pipeline. pipeline Required pipeline : Pipeline Type: aws_cdk.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built. synth_project Required synth_project : IProject Type: aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built. code_repository Required code_repository : Repository Type: aws_cdk.aws_codecommit.Repository SonarCodeScanner Initializers from aws_prototyping_sdk import pipeline pipeline . SonarCodeScanner ( scope : Construct , id : str , sonarqube_authorized_group : str , sonarqube_default_profile_or_gate_name : str , sonarqube_endpoint : str , sonarqube_project_name : str , cdk_out_dir : str = None , cfn_nag_ignore_path : str = None , exclude_globs_for_scan : typing . List [ str ] = None , include_globs_for_scan : typing . List [ str ] = None , pre_archive_commands : typing . List [ str ] = None , sonarqube_specific_profile_or_gate_name : str = None , sonarqube_tags : typing . List [ str ] = None , artifact_bucket_arn : str , synth_build_arn : str , artifact_bucket_key_arn : str = None ) Name Type Description scope constructs.Construct No description. id str No description. sonarqube_authorized_group str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name str Default profile/gate name i.e: your org profile. sonarqube_endpoint str endpoint of the sonarqube instance i.e: https:// . sonarqube_project_name str Name of the project to create in Sonarqube. cdk_out_dir str directory containing the synthesized cdk resources. cfn_nag_ignore_path str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan typing.List[str] glob patterns to include from sonar scan. pre_archive_commands typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name str Specific profile/gate name i.e: language specific. sonarqube_tags typing.List[str] Tags to associate with this project. artifact_bucket_arn str S3 bucket ARN containing the built artifacts from the synth build. synth_build_arn str ARN for the CodeBuild task responsible for executing the synth command. artifact_bucket_key_arn str Artifact bucket key ARN used to encrypt the artifacts. scope Required Type: constructs.Construct id Required Type: str sonarqube_authorized_group Required Type: str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name Required Type: str Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqube_endpoint Required Type: str endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqube_project_name Required Type: str Name of the project to create in Sonarqube. cdk_out_dir Optional Type: str directory containing the synthesized cdk resources. cfn_nag_ignore_path Optional Type: str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan Optional Type: typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan Optional Type: typing.List[str] glob patterns to include from sonar scan. pre_archive_commands Optional Type: typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name Optional Type: str Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqube_tags Optional Type: typing.List[str] Tags to associate with this project. artifact_bucket_arn Required Type: str S3 bucket ARN containing the built artifacts from the synth build. synth_build_arn Required Type: str ARN for the CodeBuild task responsible for executing the synth command. artifact_bucket_key_arn Optional Type: str Artifact bucket key ARN used to encrypt the artifacts. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct from aws_prototyping_sdk import pipeline pipeline . SonarCodeScanner . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. node Required node : Node Type: constructs.Node The tree node. Structs PDKPipelineJavaProjectOptions Configuration options for the PDKPipelineJavaProject. Initializer from aws_prototyping_sdk import pipeline pipeline . PDKPipelineJavaProjectOptions ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , artifact_id : str , group_id : str , version : str , description : str = None , packaging : str = None , url : str = None , compile_options : MavenCompileOptions = None , deps : typing . List [ str ] = None , distdir : str = None , junit : bool = None , junit_options : JunitOptions = None , packaging_options : MavenPackagingOptions = None , projenrc_java : bool = None , projenrc_java_options : ProjenrcOptions = None , test_deps : typing . List [ str ] = None , sample : bool = None , sample_java_package : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , main_class : str ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. artifact_id str The artifactId is generally the name that the project is known by. group_id str This is generally unique amongst an organization or a project. version str This is the last piece of the naming puzzle. description str Description of a project is always good. packaging str Project packaging format. url str The URL, like the name, is not required. compile_options projen.java.MavenCompileOptions Compile options. deps typing.List[str] List of runtime dependencies for this project. distdir str Final artifact output directory. junit bool Include junit tests. junit_options projen.java.JunitOptions junit options. packaging_options projen.java.MavenPackagingOptions Packaging options. projenrc_java bool Use projenrc in java. projenrc_java_options projen.java.ProjenrcOptions Options related to projenrc in java. test_deps typing.List[str] List of test dependencies for this project. sample bool Include sample code and test if the relevant directories don't exist. sample_java_package str The java package to use for the code sample. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. main_class str The name of the Java class with the static main() method. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifact_id Required artifact_id : str Type: str Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. group_id Required group_id : str Type: str Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required version : str Type: str Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional description : str Type: str Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional packaging : str Type: str Default: \"jar\" Project packaging format. url Optional url : str Type: str Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compile_options Optional compile_options : MavenCompileOptions Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional distdir : str Type: str Default: \"dist/java\" Final artifact output directory. junit Optional junit : bool Type: bool Default: true Include junit tests. junit_options Optional junit_options : JunitOptions Type: projen.java.JunitOptions Default: defaults junit options. packaging_options Optional packaging_options : MavenPackagingOptions Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrc_java Optional projenrc_java : bool Type: bool Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrc_java_options Optional projenrc_java_options : ProjenrcOptions Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. test_deps Optional test_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. sample_java_package Optional sample_java_package : str Type: str Default: \"org.acme\" The java package to use for the code sample. build_command Optional build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional cdkout : str Type: str Default: \"cdk.out\" cdk.out directory. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. main_class Required main_class : str Type: str Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. PDKPipelineProps Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained. Initializer from aws_prototyping_sdk import pipeline pipeline . PDKPipelineProps ( synth : IFileSetProducer , asset_publishing_code_build_defaults : CodeBuildOptions = None , cli_version : str = None , code_build_defaults : CodeBuildOptions = None , code_pipeline : Pipeline = None , cross_account_keys : bool = None , docker_credentials : typing . List [ DockerCredential ] = None , docker_enabled_for_self_mutation : bool = None , docker_enabled_for_synth : bool = None , pipeline_name : str = None , publish_assets_in_parallel : bool = None , reuse_cross_region_support_stacks : bool = None , role : IRole = None , self_mutation : bool = None , self_mutation_code_build_defaults : CodeBuildOptions = None , synth_code_build_defaults : CodeBuildOptions = None , primary_synth_directory : str , repository_name : str , code_commit_removal_policy : RemovalPolicy = None , default_branch_name : str = None , sonar_code_scanner_config : SonarCodeScannerConfig = None , synth_shell_step_partial_props : ShellStepProps = None ) Properties Name Type Description synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. asset_publishing_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cli_version str CDK CLI version to use in self-mutation and asset publishing steps. code_build_defaults aws_cdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. code_pipeline aws_cdk.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. cross_account_keys bool Create KMS keys for the artifact buckets, allowing cross-account deployments. docker_credentials typing.List[aws_cdk.pipelines.DockerCredential] A list of credentials used to authenticate to Docker registries. docker_enabled_for_self_mutation bool Enable Docker for the self-mutate step. docker_enabled_for_synth bool Enable Docker for the 'synth' step. pipeline_name str The name of the CodePipeline pipeline. publish_assets_in_parallel bool Publish assets in multiple CodeBuild projects. reuse_cross_region_support_stacks bool Reuse the same cross region support stack for all pipelines in the App. role aws_cdk.aws_iam.IRole The IAM role to be assumed by this Pipeline. self_mutation bool Whether the pipeline will update itself. self_mutation_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name str Name of the CodeCommit repository to create. code_commit_removal_policy aws_cdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. default_branch_name str Branch to trigger the pipeline execution. sonar_code_scanner_config SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synth_shell_step_partial_props aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. synth Required synth : IFileSetProducer Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . asset_publishing_code_build_defaults Optional asset_publishing_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cli_version Optional cli_version : str Type: str Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. code_build_defaults Optional code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. code_pipeline Optional code_pipeline : Pipeline Type: aws_cdk.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] cross_account_keys Optional cross_account_keys : bool Type: bool Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. docker_credentials Optional docker_credentials : typing . List [ DockerCredential ] Type: typing.List[aws_cdk.pipelines.DockerCredential] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. docker_enabled_for_self_mutation Optional docker_enabled_for_self_mutation : bool Type: bool Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. docker_enabled_for_synth Optional docker_enabled_for_synth : bool Type: bool Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipeline_name Optional pipeline_name : str Type: str Default: Automatically generated The name of the CodePipeline pipeline. publish_assets_in_parallel Optional publish_assets_in_parallel : bool Type: bool Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuse_cross_region_support_stacks Optional reuse_cross_region_support_stacks : bool Type: bool Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional role : IRole Type: aws_cdk.aws_iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. self_mutation Optional self_mutation : bool Type: bool Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . self_mutation_code_build_defaults Optional self_mutation_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults Optional synth_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory Required primary_synth_directory : str Type: str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name Required repository_name : str Type: str Name of the CodeCommit repository to create. code_commit_removal_policy Optional code_commit_removal_policy : RemovalPolicy Type: aws_cdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. default_branch_name Optional default_branch_name : str Type: str Default: mainline Branch to trigger the pipeline execution. sonar_code_scanner_config Optional sonar_code_scanner_config : SonarCodeScannerConfig Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synth_shell_step_partial_props Optional synth_shell_step_partial_props : ShellStepProps Type: aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. PDKPipelinePyProjectOptions Configuration options for the PDKPipelinePyProject. Initializer from aws_prototyping_sdk import pipeline pipeline . PDKPipelinePyProjectOptions ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , testdir : str = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir str Python sources directory. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required author_email : str Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required author_name : str Type: str Default: $GIT_USER_NAME Author's name. version Required version : str Type: str Default: \"0.1.0\" Version of the package. classifiers Optional classifiers : typing . List [ str ] Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional description : str Type: str A short description of the package. homepage Optional homepage : str Type: str A URL to the website of the project. license Optional license : str Type: str License of this package as an SPDX identifier. package_name Optional package_name : str Type: str Package name. poetry_options Optional poetry_options : PoetryPyprojectOptionsWithoutDeps Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional setup_config : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required module_name : str Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional pip : bool Type: bool Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional poetry : bool Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js Optional projenrc_js : bool Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional projenrc_python : bool Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional projenrc_python_options : ProjenrcOptions Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional pytest : bool Type: bool Default: true Include pytest tests. pytest_options Optional pytest_options : PytestOptions Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional setuptools : bool Type: bool Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional venv : bool Type: bool Default: true Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional venv_options : VenvOptions Type: projen.python.VenvOptions Default: defaults Venv options. build_command Optional build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional cdkout : str Type: str Default: \"cdk.out\" cdk.out directory. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional app_entrypoint : str Type: str Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional testdir : str Type: str Default: \"tests\" Python sources directory. PDKPipelineTsProjectOptions Configuration options for the PDKPipelineTsProject. Initializer from aws_prototyping_sdk import pipeline pipeline . PDKPipelineTsProjectOptions ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , edge_lambda_auto_discover : bool = None , integration_test_auto_discover : bool = None , lambda_auto_discover : bool = None , lambda_extension_auto_discover : bool = None , lambda_options : LambdaFunctionCommonOptions = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edge_lambda_auto_discover bool Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integration_test_auto_discover bool Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover bool Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_extension_auto_discover bool Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Author's Organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional scoped_packages_options : typing . List [ ScopedPackagesOptions ] Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional min_major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). build_command Optional build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional cdkout : str Type: str Default: \"cdk.out\" cdk.out directory. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional app_entrypoint : str Type: str Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edge_lambda_auto_discover Optional edge_lambda_auto_discover : bool Type: bool Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integration_test_auto_discover Optional integration_test_auto_discover : bool Type: bool Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover Optional lambda_auto_discover : bool Type: bool Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_extension_auto_discover Optional lambda_extension_auto_discover : bool Type: bool Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options Optional lambda_options : LambdaFunctionCommonOptions Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. SonarCodeScannerConfig Initializer from aws_prototyping_sdk import pipeline pipeline . SonarCodeScannerConfig ( sonarqube_authorized_group : str , sonarqube_default_profile_or_gate_name : str , sonarqube_endpoint : str , sonarqube_project_name : str , cdk_out_dir : str = None , cfn_nag_ignore_path : str = None , exclude_globs_for_scan : typing . List [ str ] = None , include_globs_for_scan : typing . List [ str ] = None , pre_archive_commands : typing . List [ str ] = None , sonarqube_specific_profile_or_gate_name : str = None , sonarqube_tags : typing . List [ str ] = None ) Properties Name Type Description sonarqube_authorized_group str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name str Default profile/gate name i.e: your org profile. sonarqube_endpoint str endpoint of the sonarqube instance i.e: https:// . sonarqube_project_name str Name of the project to create in Sonarqube. cdk_out_dir str directory containing the synthesized cdk resources. cfn_nag_ignore_path str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan typing.List[str] glob patterns to include from sonar scan. pre_archive_commands typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name str Specific profile/gate name i.e: language specific. sonarqube_tags typing.List[str] Tags to associate with this project. sonarqube_authorized_group Required sonarqube_authorized_group : str Type: str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name Required sonarqube_default_profile_or_gate_name : str Type: str Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqube_endpoint Required sonarqube_endpoint : str Type: str endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqube_project_name Required sonarqube_project_name : str Type: str Name of the project to create in Sonarqube. cdk_out_dir Optional cdk_out_dir : str Type: str directory containing the synthesized cdk resources. cfn_nag_ignore_path Optional cfn_nag_ignore_path : str Type: str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan Optional exclude_globs_for_scan : typing . List [ str ] Type: typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan Optional include_globs_for_scan : typing . List [ str ] Type: typing.List[str] glob patterns to include from sonar scan. pre_archive_commands Optional pre_archive_commands : typing . List [ str ] Type: typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name Optional sonarqube_specific_profile_or_gate_name : str Type: str Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqube_tags Optional sonarqube_tags : typing . List [ str ] Type: typing.List[str] Tags to associate with this project. SonarCodeScannerProps SonarCodeScanners properties. Initializer from aws_prototyping_sdk import pipeline pipeline . SonarCodeScannerProps ( sonarqube_authorized_group : str , sonarqube_default_profile_or_gate_name : str , sonarqube_endpoint : str , sonarqube_project_name : str , cdk_out_dir : str = None , cfn_nag_ignore_path : str = None , exclude_globs_for_scan : typing . List [ str ] = None , include_globs_for_scan : typing . List [ str ] = None , pre_archive_commands : typing . List [ str ] = None , sonarqube_specific_profile_or_gate_name : str = None , sonarqube_tags : typing . List [ str ] = None , artifact_bucket_arn : str , synth_build_arn : str , artifact_bucket_key_arn : str = None ) Properties Name Type Description sonarqube_authorized_group str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name str Default profile/gate name i.e: your org profile. sonarqube_endpoint str endpoint of the sonarqube instance i.e: https:// . sonarqube_project_name str Name of the project to create in Sonarqube. cdk_out_dir str directory containing the synthesized cdk resources. cfn_nag_ignore_path str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan typing.List[str] glob patterns to include from sonar scan. pre_archive_commands typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name str Specific profile/gate name i.e: language specific. sonarqube_tags typing.List[str] Tags to associate with this project. artifact_bucket_arn str S3 bucket ARN containing the built artifacts from the synth build. synth_build_arn str ARN for the CodeBuild task responsible for executing the synth command. artifact_bucket_key_arn str Artifact bucket key ARN used to encrypt the artifacts. sonarqube_authorized_group Required sonarqube_authorized_group : str Type: str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name Required sonarqube_default_profile_or_gate_name : str Type: str Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqube_endpoint Required sonarqube_endpoint : str Type: str endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqube_project_name Required sonarqube_project_name : str Type: str Name of the project to create in Sonarqube. cdk_out_dir Optional cdk_out_dir : str Type: str directory containing the synthesized cdk resources. cfn_nag_ignore_path Optional cfn_nag_ignore_path : str Type: str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan Optional exclude_globs_for_scan : typing . List [ str ] Type: typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan Optional include_globs_for_scan : typing . List [ str ] Type: typing.List[str] glob patterns to include from sonar scan. pre_archive_commands Optional pre_archive_commands : typing . List [ str ] Type: typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name Optional sonarqube_specific_profile_or_gate_name : str Type: str Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqube_tags Optional sonarqube_tags : typing . List [ str ] Type: typing.List[str] Tags to associate with this project. artifact_bucket_arn Required artifact_bucket_arn : str Type: str S3 bucket ARN containing the built artifacts from the synth build. synth_build_arn Required synth_build_arn : str Type: str ARN for the CodeBuild task responsible for executing the synth command. artifact_bucket_key_arn Optional artifact_bucket_key_arn : str Type: str Artifact bucket key ARN used to encrypt the artifacts. Classes PDKPipelineJavaProject Synthesizes a Java Project with a CI/CD pipeline. Initializers from aws_prototyping_sdk import pipeline pipeline . PDKPipelineJavaProject ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , artifact_id : str , group_id : str , version : str , description : str = None , packaging : str = None , url : str = None , compile_options : MavenCompileOptions = None , deps : typing . List [ str ] = None , distdir : str = None , junit : bool = None , junit_options : JunitOptions = None , packaging_options : MavenPackagingOptions = None , projenrc_java : bool = None , projenrc_java_options : ProjenrcOptions = None , test_deps : typing . List [ str ] = None , sample : bool = None , sample_java_package : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , main_class : str ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. artifact_id str The artifactId is generally the name that the project is known by. group_id str This is generally unique amongst an organization or a project. version str This is the last piece of the naming puzzle. description str Description of a project is always good. packaging str Project packaging format. url str The URL, like the name, is not required. compile_options projen.java.MavenCompileOptions Compile options. deps typing.List[str] List of runtime dependencies for this project. distdir str Final artifact output directory. junit bool Include junit tests. junit_options projen.java.JunitOptions junit options. packaging_options projen.java.MavenPackagingOptions Packaging options. projenrc_java bool Use projenrc in java. projenrc_java_options projen.java.ProjenrcOptions Options related to projenrc in java. test_deps typing.List[str] List of test dependencies for this project. sample bool Include sample code and test if the relevant directories don't exist. sample_java_package str The java package to use for the code sample. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. main_class str The name of the Java class with the static main() method. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifact_id Required Type: str Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. group_id Required Type: str Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required Type: str Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional Type: str Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional Type: str Default: \"jar\" Project packaging format. url Optional Type: str Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compile_options Optional Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional Type: str Default: \"dist/java\" Final artifact output directory. junit Optional Type: bool Default: true Include junit tests. junit_options Optional Type: projen.java.JunitOptions Default: defaults junit options. packaging_options Optional Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrc_java Optional Type: bool Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrc_java_options Optional Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. test_deps Optional Type: typing.List[str] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. sample_java_package Optional Type: str Default: \"org.acme\" The java package to use for the code sample. build_command Optional Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: str Default: \"cdk.out\" cdk.out directory. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. main_class Required Type: str Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_dependency Adds a runtime dependency. add_plugin Adds a build plugin to the pom. add_test_dependency Adds a test dependency. add_cdk_dependency Adds an AWS CDK module dependencies. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <groupId>/<artifactId>@<semver> . add_plugin def add_plugin ( spec : str , configuration : typing . Mapping [ typing . Any ] = None , dependencies : typing . List [ str ] = None , executions : typing . List [ PluginExecution ] = None ) -> Dependency Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: str dependency spec ( group/artifact@version ). configuration Optional Type: typing.Mapping[typing.Any] Default: {} Plugin key/value configuration. dependencies Optional Type: typing.List[str] Default: [] You could configure the dependencies for the plugin. Dependencies are in <groupId>/<artifactId>@<semver> format. executions Optional Type: typing.List[projen.java.PluginExecution] Default: [] Plugin executions. add_test_dependency def add_test_dependency ( spec : str ) -> None Adds a test dependency. spec Required Type: str Format <groupId>/<artifactId>@<semver> . ~~ add_cdk_dependency ~~ def add_cdk_dependency ( modules : str ) -> None Adds an AWS CDK module dependencies. modules Required Type: str The list of modules to depend on (e.g. \"software.amazon.awscdk/aws-lambda\", \"software.amazon.awscdk/aws-iam\", etc). Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. compile projen.java.MavenCompile Compile component. distdir str Maven artifact output directory. packaging projen.java.MavenPackaging Packaging component. pom projen.java.Pom API for managing pom.xml . junit projen.java.Junit JUnit component. projenrc projen.java.Projenrc Projenrc component. cdk_config projen.awscdk.CdkConfig The cdk.json file. cdk_deps projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdk_tasks projen.awscdk.CdkTasks CDK tasks. main_class str The full name of the main class of the java app (package.Class). main_class_name str The name of the Java class with the static main() method. main_package str The name of the Java package that includes the main class. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required compile : MavenCompile Type: projen.java.MavenCompile Compile component. distdir Required distdir : str Type: str Maven artifact output directory. packaging Required packaging : MavenPackaging Type: projen.java.MavenPackaging Packaging component. pom Required pom : Pom Type: projen.java.Pom API for managing pom.xml . junit Optional junit : Junit Type: projen.java.Junit JUnit component. projenrc Optional projenrc : Projenrc Type: projen.java.Projenrc Projenrc component. cdk_config Required cdk_config : CdkConfig Type: projen.awscdk.CdkConfig The cdk.json file. cdk_deps Required cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdk_tasks Required cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks CDK tasks. main_class Required main_class : str Type: str The full name of the main class of the java app (package.Class). main_class_name Required main_class_name : str Type: str The name of the Java class with the static main() method. main_package Required main_package : str Type: str The name of the Java package that includes the main class. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelinePyProject Synthesizes a Python Project with a CI/CD pipeline. Initializers from aws_prototyping_sdk import pipeline pipeline . PDKPipelinePyProject ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , testdir : str = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir str Python sources directory. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required Type: str Default: $GIT_USER_NAME Author's name. version Required Type: str Default: \"0.1.0\" Version of the package. classifiers Optional Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: str A short description of the package. homepage Optional Type: str A URL to the website of the project. license Optional Type: str License of this package as an SPDX identifier. package_name Optional Type: str Package name. poetry_options Optional Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: bool Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js Optional Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: bool Default: true Include pytest tests. pytest_options Optional Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: bool Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: bool Default: true Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional Type: projen.python.VenvOptions Default: defaults Venv options. build_command Optional Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: str Default: \"cdk.out\" cdk.out directory. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional Type: str Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional Type: str Default: \"tests\" Python sources directory. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_dependency Adds a runtime dependency. add_dev_dependency Adds a dev dependency. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <module>@<semver> . add_dev_dependency def add_dev_dependency ( spec : str ) -> None Adds a dev dependency. spec Required Type: str Format <module>@<semver> . Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. deps_manager projen.python.IPythonDeps API for managing dependencies. env_manager projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name str Python module name (the project name, with any hyphens or periods replaced with underscores). version str Version of the package for distribution (should follow semver). packaging_manager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. app_entrypoint str The CDK app entrypoint. cdk_config projen.awscdk.CdkConfig cdk.json configuration. cdk_deps projen.awscdk.AwsCdkDeps No description. cdk_tasks projen.awscdk.CdkTasks Common CDK tasks. cdk_version str The CDK version this app is using. testdir str The directory in which the python tests reside. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. deps_manager Required deps_manager : IPythonDeps Type: projen.python.IPythonDeps API for managing dependencies. env_manager Required env_manager : IPythonEnv Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name Required module_name : str Type: str Python module name (the project name, with any hyphens or periods replaced with underscores). version Required version : str Type: str Version of the package for distribution (should follow semver). packaging_manager Optional packaging_manager : IPythonPackaging Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional pytest : Pytest Type: projen.python.Pytest Pytest component. app_entrypoint Required app_entrypoint : str Type: str The CDK app entrypoint. cdk_config Required cdk_config : CdkConfig Type: projen.awscdk.CdkConfig cdk.json configuration. cdk_deps Required cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps cdk_tasks Required cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks Common CDK tasks. cdk_version Required cdk_version : str Type: str The CDK version this app is using. testdir Required testdir : str Type: str The directory in which the python tests reside. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelineTsProject Synthesizes a Typescript Project with a CI/CD pipeline. Initializers from aws_prototyping_sdk import pipeline pipeline . PDKPipelineTsProject ( name : str , commit_generated : bool = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , edge_lambda_auto_discover : bool = None , integration_test_auto_discover : bool = None , lambda_auto_discover : bool = None , lambda_extension_auto_discover : bool = None , lambda_options : LambdaFunctionCommonOptions = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edge_lambda_auto_discover bool Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integration_test_auto_discover bool Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover bool Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_extension_auto_discover bool Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Author's Organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). build_command Optional Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: str Default: \"cdk.out\" cdk.out directory. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional Type: str Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edge_lambda_auto_discover Optional Type: bool Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integration_test_auto_discover Optional Type: bool Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover Optional Type: bool Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_extension_auto_discover Optional Type: bool Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options Optional Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_cdk_dependency Adds an AWS CDK module dependencies. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. add_cdk_dependency def add_cdk_dependency ( modules : str ) -> None Adds an AWS CDK module dependencies. modules Required Type: str The list of modules to depend on. Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. app_entrypoint str The CDK app entrypoint. cdk_config projen.awscdk.CdkConfig cdk.json configuration. cdk_deps projen.awscdk.AwsCdkDeps No description. cdk_tasks projen.awscdk.CdkTasks Common CDK tasks. cdk_version str The CDK version this app is using. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this pacakge. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig app_entrypoint Required app_entrypoint : str Type: str The CDK app entrypoint. cdk_config Required cdk_config : CdkConfig Type: projen.awscdk.CdkConfig cdk.json configuration. cdk_deps Required cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps cdk_tasks Required cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks Common CDK tasks. cdk_version Required cdk_version : str Type: str The CDK version this app is using. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"python/pipeline/index.html#cdk-nag","text":"In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 .","title":"CDK Nag"},{"location":"python/pipeline/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/pipeline/index.html#constructs","text":"","title":"Constructs "},{"location":"python/pipeline/index.html#pdkpipeline","text":"An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals.","title":"PDKPipeline "},{"location":"python/pipeline/index.html#sonarcodescanner","text":"","title":"SonarCodeScanner "},{"location":"python/pipeline/index.html#structs","text":"","title":"Structs "},{"location":"python/pipeline/index.html#pdkpipelinejavaprojectoptions","text":"Configuration options for the PDKPipelineJavaProject.","title":"PDKPipelineJavaProjectOptions "},{"location":"python/pipeline/index.html#pdkpipelineprops","text":"Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained.","title":"PDKPipelineProps "},{"location":"python/pipeline/index.html#pdkpipelinepyprojectoptions","text":"Configuration options for the PDKPipelinePyProject.","title":"PDKPipelinePyProjectOptions "},{"location":"python/pipeline/index.html#pdkpipelinetsprojectoptions","text":"Configuration options for the PDKPipelineTsProject.","title":"PDKPipelineTsProjectOptions "},{"location":"python/pipeline/index.html#sonarcodescannerconfig","text":"","title":"SonarCodeScannerConfig "},{"location":"python/pipeline/index.html#sonarcodescannerprops","text":"SonarCodeScanners properties.","title":"SonarCodeScannerProps "},{"location":"python/pipeline/index.html#classes","text":"","title":"Classes "},{"location":"python/pipeline/index.html#pdkpipelinejavaproject","text":"Synthesizes a Java Project with a CI/CD pipeline.","title":"PDKPipelineJavaProject "},{"location":"python/pipeline/index.html#pdkpipelinepyproject","text":"Synthesizes a Python Project with a CI/CD pipeline.","title":"PDKPipelinePyProject "},{"location":"python/pipeline/index.html#pdkpipelinetsproject","text":"Synthesizes a Typescript Project with a CI/CD pipeline.","title":"PDKPipelineTsProject "},{"location":"python/static-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.static_website The static-website module is able to deploy your pre-packaged static website content into an S3 Bucket, fronted by Cloudfront. This module uses an Origin Access Identity to ensure your Bucket can only be accessed via Cloudfront and is configured to only allow HTTPS requests by default. Custom runtime configurations can also be specified which will emit a runtime-config.json file along with your website content. Typically this includes resource Arns, Id's etc which may need to be referenced from your website. This package uses sane defaults and at a minimum only requires the path to your website assets. Below is a conceptual view of the default architecture this module creates: Cloudfront Distribution (HTTPS only) -> S3 Bucket (Private via OAI) |_ WAF V2 ACL |_ index.html (+ other website files and assets) |_ runtime-config.json A typical use case is to create a static website with AuthN. To accomplish this, we can leverage the UserIdentity to create the User Pool (Cognito by default) and Identity Pool. We can then pipe the respective pool id's as runtimeOptions into the StaticWebsite. After the website is deployed, these values can be interrogated from the runtime-config.json deployed alongside the website in order to perform authentication within the app using something like the Amplify Auth API . # Example automatically generated from non-compiling source. May contain errors. user_identity = UserIdentity ( self , \"UserIdentity\" ) StaticWebsite ( self , \"StaticWebsite\" , website_content_path = \"<relative>/<path>/<to>/<built>/<website>\" , runtime_options = { \"json_payload\" : { \"region\" : Stack . of ( self ) . region , \"identity_pool_id\" : user_identity . identity_pool . identity_pool_id , \"user_pool_id\" : user_identity . user_pool . user_pool_id , \"user_pool_web_client_id\" : user_identity . user_pool_client . user_pool_client_id } } ) API Reference Constructs CloudfrontWebAcl This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack. Initializers import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . CloudfrontWebAcl ( scope : Construct , id : str , cidr_allow_list : CidrAllowList = None , managed_rules : typing . List [ ManagedRule ] = None ) Name Type Description scope constructs.Construct No description. id str No description. cidr_allow_list CidrAllowList List of cidr ranges to allow. managed_rules typing.List[ ManagedRule ] List of managed rules to apply to the web acl. scope Required Type: constructs.Construct id Required Type: str cidr_allow_list Optional Type: CidrAllowList Default: undefined List of cidr ranges to allow. managed_rules Optional Type: typing.List[ ManagedRule ] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . CloudfrontWebAcl . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. web_acl_arn str No description. web_acl_id str No description. node Required node : Node Type: constructs.Node The tree node. web_acl_arn Required web_acl_arn : str Type: str web_acl_id Required web_acl_id : str Type: str StaticWebsite Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10. Initializers import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . StaticWebsite ( scope : Construct , id : str , website_content_path : str , default_website_bucket_encryption : BucketEncryption = None , default_website_bucket_encryption_key : Key = None , distribution_props : DistributionProps = None , runtime_options : RuntimeOptions = None , web_acl_props : CloudFrontWebAclProps = None , website_bucket : IBucket = None ) Name Type Description scope constructs.Construct No description. id str No description. website_content_path str Path to the directory containing the static website files and assets. default_website_bucket_encryption aws_cdk.aws_s3.BucketEncryption Bucket encryption to use for the default bucket. default_website_bucket_encryption_key aws_cdk.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distribution_props aws_cdk.aws_cloudfront.DistributionProps Custom distribution properties. runtime_options RuntimeOptions Dynamic configuration which gets resolved only during deployment. web_acl_props CloudFrontWebAclProps Limited configuration settings for the generated webAcl. website_bucket aws_cdk.aws_s3.IBucket Predefined bucket to deploy the website into. scope Required Type: constructs.Construct id Required Type: str website_content_path Required Type: str Path to the directory containing the static website files and assets. This directory must contain an index.html file. default_website_bucket_encryption Optional Type: aws_cdk.aws_s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } default_website_bucket_encryption_key Optional Type: aws_cdk.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distribution_props Optional Type: aws_cdk.aws_cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtime_options Optional Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. web_acl_props Optional Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. website_bucket Optional Type: aws_cdk.aws_s3.IBucket Predefined bucket to deploy the website into. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . StaticWebsite . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. bucket_deployment aws_cdk.aws_s3_deployment.BucketDeployment No description. cloud_front_distribution aws_cdk.aws_cloudfront.Distribution No description. website_bucket aws_cdk.aws_s3.IBucket No description. node Required node : Node Type: constructs.Node The tree node. bucket_deployment Required bucket_deployment : BucketDeployment Type: aws_cdk.aws_s3_deployment.BucketDeployment cloud_front_distribution Required cloud_front_distribution : Distribution Type: aws_cdk.aws_cloudfront.Distribution website_bucket Required website_bucket : IBucket Type: aws_cdk.aws_s3.IBucket Structs CidrAllowList Representation of a CIDR range. Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . CidrAllowList ( cidr_ranges : typing . List [ str ], cidr_type : str ) Properties Name Type Description cidr_ranges typing.List[str] Specify an IPv4 address by using CIDR notation. cidr_type str Type of CIDR range. cidr_ranges Required cidr_ranges : typing . List [ str ] Type: typing.List[str] Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidr_type Required cidr_type : str Type: str Type of CIDR range. CloudFrontWebAclProps Properties to configure the web acl. Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . CloudFrontWebAclProps ( cidr_allow_list : CidrAllowList = None , managed_rules : typing . List [ ManagedRule ] = None ) Properties Name Type Description cidr_allow_list CidrAllowList List of cidr ranges to allow. managed_rules typing.List[ ManagedRule ] List of managed rules to apply to the web acl. cidr_allow_list Optional cidr_allow_list : CidrAllowList Type: CidrAllowList Default: undefined List of cidr ranges to allow. managed_rules Optional managed_rules : typing . List [ ManagedRule ] Type: typing.List[ ManagedRule ] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. ManagedRule Represents a WAF V2 managed rule. Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . ManagedRule ( name : str , vendor : str ) Properties Name Type Description name str The name of the managed rule group. vendor str The name of the managed rule group vendor. name Required name : str Type: str The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required vendor : str Type: str The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. RuntimeOptions Dynamic configuration which gets resolved only during deployment. Example # Example automatically generated from non-compiling source. May contain errors. # Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any # and all resolved values. runtime_config = { \"json_payload\" : { \"bucket_arn\" : s3_bucket . bucket_arn }} StaticWebsite ( scope , \"StaticWebsite\" , website_content_path = \"path/to/website\" , runtime_config = runtime_config ) Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . RuntimeOptions ( json_payload : typing . Any , json_file_name : str = None ) Properties Name Type Description json_payload typing.Any Arbitrary JSON payload containing runtime values to deploy. json_file_name str File name to store runtime configuration (jsonPayload). json_payload Required json_payload : typing . Any Type: typing.Any Arbitrary JSON payload containing runtime values to deploy. Typically this contains resourceArns, etc which are only known at deploy time. Example # Example automatically generated from non-compiling source. May contain errors. userPoolId : some . userPool . userPoolId , someResourceArnsome . resource . Arn json_file_name Optional json_file_name : str Type: str Default: \"runtime-config.json\" File name to store runtime configuration (jsonPayload). Must follow pattern: '*.json' StaticWebsiteProps Properties for configuring the StaticWebsite. Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . StaticWebsiteProps ( website_content_path : str , default_website_bucket_encryption : BucketEncryption = None , default_website_bucket_encryption_key : Key = None , distribution_props : DistributionProps = None , runtime_options : RuntimeOptions = None , web_acl_props : CloudFrontWebAclProps = None , website_bucket : IBucket = None ) Properties Name Type Description website_content_path str Path to the directory containing the static website files and assets. default_website_bucket_encryption aws_cdk.aws_s3.BucketEncryption Bucket encryption to use for the default bucket. default_website_bucket_encryption_key aws_cdk.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distribution_props aws_cdk.aws_cloudfront.DistributionProps Custom distribution properties. runtime_options RuntimeOptions Dynamic configuration which gets resolved only during deployment. web_acl_props CloudFrontWebAclProps Limited configuration settings for the generated webAcl. website_bucket aws_cdk.aws_s3.IBucket Predefined bucket to deploy the website into. website_content_path Required website_content_path : str Type: str Path to the directory containing the static website files and assets. This directory must contain an index.html file. default_website_bucket_encryption Optional default_website_bucket_encryption : BucketEncryption Type: aws_cdk.aws_s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } default_website_bucket_encryption_key Optional default_website_bucket_encryption_key : Key Type: aws_cdk.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distribution_props Optional distribution_props : DistributionProps Type: aws_cdk.aws_cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtime_options Optional runtime_options : RuntimeOptions Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. web_acl_props Optional web_acl_props : CloudFrontWebAclProps Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. website_bucket Optional website_bucket : IBucket Type: aws_cdk.aws_s3.IBucket Predefined bucket to deploy the website into. Classes StaticWebsiteOrigin Implements: aws_cdk.aws_cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy. Initializers import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . StaticWebsiteOrigin () Name Type Description Methods Name Description bind The method called when a given Origin is added (for the first time) to a Distribution. bind def bind ( _scope : Construct , origin_id : str ) -> OriginBindConfig The method called when a given Origin is added (for the first time) to a Distribution. _scope Required Type: constructs.Construct origin_id Required Type: str The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.","title":"Index"},{"location":"python/static-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/static-website/index.html#constructs","text":"","title":"Constructs "},{"location":"python/static-website/index.html#cloudfrontwebacl","text":"This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack.","title":"CloudfrontWebAcl "},{"location":"python/static-website/index.html#staticwebsite","text":"Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10.","title":"StaticWebsite "},{"location":"python/static-website/index.html#structs","text":"","title":"Structs "},{"location":"python/static-website/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"python/static-website/index.html#cloudfrontwebaclprops","text":"Properties to configure the web acl.","title":"CloudFrontWebAclProps "},{"location":"python/static-website/index.html#managedrule","text":"Represents a WAF V2 managed rule.","title":"ManagedRule "},{"location":"python/static-website/index.html#runtimeoptions","text":"Dynamic configuration which gets resolved only during deployment. Example # Example automatically generated from non-compiling source. May contain errors. # Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any # and all resolved values. runtime_config = { \"json_payload\" : { \"bucket_arn\" : s3_bucket . bucket_arn }} StaticWebsite ( scope , \"StaticWebsite\" , website_content_path = \"path/to/website\" , runtime_config = runtime_config )","title":"RuntimeOptions "},{"location":"python/static-website/index.html#staticwebsiteprops","text":"Properties for configuring the StaticWebsite.","title":"StaticWebsiteProps "},{"location":"python/static-website/index.html#classes","text":"","title":"Classes "},{"location":"python/static-website/index.html#staticwebsiteorigin","text":"Implements: aws_cdk.aws_cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy.","title":"StaticWebsiteOrigin "},{"location":"typescript/cloudscape-react-ts-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/cloudscape-react-ts-website Getting started To create a new Cloudscape React Typescript Project, there are a couple of options: Via Projen CLI npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>] Programmatically new CloudscapeReactTsWebsiteProject ({ defaultReleaseBranch : \"mainline\" , name : \"<name-of-package>\" , applicationName : \"<name-of-app>\" , }); Running your synthesized Application To run your synthesized application locally, run npx projen dev . Developer Notes To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: const userIdentity = new UserIdentity ( this , 'UserIdentity' ); new StaticWebsite ( this , 'StaticWebsite' , { websiteContentPath : '<relative>/<path>/<to>/<built>/<website>' , runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : userIdentity.identityPool.identityPoolId , userPoolId : userIdentity.userPool?.userPoolId , userPoolWebClientId : userIdentity.userPoolClient?.userPoolClientId , } }, }); For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json API Reference Structs CloudscapeReactTsWebsiteProjectOptions Configuration options for the CloudscapeReactTsWebsiteProject. Initializer import { CloudscapeReactTsWebsiteProjectOptions } from '@aws-prototyping-sdk/cloudscape-react-ts-website' const cloudscapeReactTsWebsiteProjectOptions : CloudscapeReactTsWebsiteProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions projen.javascript.ScopedPackagesOptions[] Options for privately hosted scoped packages. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. minMajorVersion number Minimal Major version to release. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps projen.github.workflows.JobStep[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. rewire {[ key: string ]: any} Rewire webpack configuration. applicationName string Name of the application name. publicDir string Public directory. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Author's Organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public readonly scopedPackagesOptions : ScopedPackagesOptions []; Type: projen.javascript.ScopedPackagesOptions[] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public readonly minMajorVersion : number ; Type: number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional public readonly rewire : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired applicationName Optional public readonly applicationName : string ; Type: string Default: \"Sample App\" Name of the application name. publicDir Optional public readonly publicDir : string ; Type: string Default: \"public\" Public directory. Classes CloudscapeReactTsWebsiteProject Synthesizes a Cloudscape React Typescript Website Project. Initializers import { CloudscapeReactTsWebsiteProject } from '@aws-prototyping-sdk/cloudscape-react-ts-website' new CloudscapeReactTsWebsiteProject ( options : CloudscapeReactTsWebsiteProjectOptions ) Name Type Description options CloudscapeReactTsWebsiteProjectOptions No description. options Required Type: CloudscapeReactTsWebsiteProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which source files reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. applicationName string No description. publicDir string No description. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which source files reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig applicationName Required public readonly applicationName : string ; Type: string publicDir Required public readonly publicDir : string ; Type: string Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"typescript/cloudscape-react-ts-website/index.html#getting-started","text":"To create a new Cloudscape React Typescript Project, there are a couple of options:","title":"Getting started"},{"location":"typescript/cloudscape-react-ts-website/index.html#via-projen-cli","text":"npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>]","title":"Via Projen CLI"},{"location":"typescript/cloudscape-react-ts-website/index.html#programmatically","text":"new CloudscapeReactTsWebsiteProject ({ defaultReleaseBranch : \"mainline\" , name : \"<name-of-package>\" , applicationName : \"<name-of-app>\" , });","title":"Programmatically"},{"location":"typescript/cloudscape-react-ts-website/index.html#running-your-synthesized-application","text":"To run your synthesized application locally, run npx projen dev .","title":"Running your synthesized Application"},{"location":"typescript/cloudscape-react-ts-website/index.html#developer-notes","text":"To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: const userIdentity = new UserIdentity ( this , 'UserIdentity' ); new StaticWebsite ( this , 'StaticWebsite' , { websiteContentPath : '<relative>/<path>/<to>/<built>/<website>' , runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : userIdentity.identityPool.identityPoolId , userPoolId : userIdentity.userPool?.userPoolId , userPoolWebClientId : userIdentity.userPoolClient?.userPoolClientId , } }, }); For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json","title":"Developer Notes"},{"location":"typescript/cloudscape-react-ts-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/cloudscape-react-ts-website/index.html#structs","text":"","title":"Structs "},{"location":"typescript/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteprojectoptions","text":"Configuration options for the CloudscapeReactTsWebsiteProject.","title":"CloudscapeReactTsWebsiteProjectOptions "},{"location":"typescript/cloudscape-react-ts-website/index.html#classes","text":"","title":"Classes "},{"location":"typescript/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteproject","text":"Synthesizes a Cloudscape React Typescript Website Project.","title":"CloudscapeReactTsWebsiteProject "},{"location":"typescript/identity/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/identity This module by default deploys a configurable Identity Provider with a default Cognito User Pool. These resources can be used by your website to restrict access to only authenticated users if needed. All settings are configurable and the creation of these AuthN resources can be disabled if needed or configured to use custom AuthN providers i.e. Facebook, Google, etc. Below is a conceptual view of the default architecture this module creates: Cognito User Pool --------------------> Identity Pool |_ User Pool Client |_ Unauthenticated IAM Role |_ Authenticated IAM Role API Reference Constructs UserIdentity Creates an Identity Pool with sane defaults configured. Initializers import { UserIdentity } from '@aws-prototyping-sdk/identity' new UserIdentity ( scope : Construct , id : string , props? : UserIdentityProps ) Name Type Description scope constructs.Construct No description. id string No description. props UserIdentityProps No description. scope Required Type: constructs.Construct id Required Type: string props Optional Type: UserIdentityProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { UserIdentity } from '@aws-prototyping-sdk/identity' UserIdentity . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. identityPool aws-cdk/aws-cognito-identitypool-alpha.IdentityPool No description. userPool aws-cdk-lib.aws_cognito.UserPool No description. userPoolClient aws-cdk-lib.aws_cognito.UserPoolClient No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. identityPool Required public readonly identityPool : IdentityPool ; Type: aws-cdk/aws-cognito-identitypool-alpha.IdentityPool userPool Required public readonly userPool : UserPool ; Type: aws-cdk-lib.aws_cognito.UserPool userPoolClient Optional public readonly userPoolClient : UserPoolClient ; Type: aws-cdk-lib.aws_cognito.UserPoolClient Structs UserIdentityProps Properties which configures the Identity Pool. Initializer import { UserIdentityProps } from '@aws-prototyping-sdk/identity' const userIdentityProps : UserIdentityProps = { ... } Properties Name Type Description identityPoolOptions aws-cdk/aws-cognito-identitypool-alpha.IdentityPoolProps Configuration for the Identity Pool. userPool aws-cdk-lib.aws_cognito.UserPool User provided Cognito UserPool. identityPoolOptions Optional public readonly identityPoolOptions : IdentityPoolProps ; Type: aws-cdk/aws-cognito-identitypool-alpha.IdentityPoolProps Configuration for the Identity Pool. userPool Optional public readonly userPool : UserPool ; Type: aws-cdk-lib.aws_cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool.","title":"Index"},{"location":"typescript/identity/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/identity/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/identity/index.html#useridentity","text":"Creates an Identity Pool with sane defaults configured.","title":"UserIdentity "},{"location":"typescript/identity/index.html#structs","text":"","title":"Structs "},{"location":"typescript/identity/index.html#useridentityprops","text":"Properties which configures the Identity Pool.","title":"UserIdentityProps "},{"location":"typescript/nx-monorepo/index.html","text":"The nx-monorepo package vends a NxMonorepoProject Projen construct that adds NX monorepo support and manages your yarn/npm/pnpm workspaces on your behalf. This construct enables polygot builds (and inter language build dependencies), build caching, dependency visualization and much, much more. The PDK itself uses the nx-monorepo project itself and is a good reference for seeing how a complex, polygot monorepo can be set up. To get started simply run the following command in an empty directory: npx projen new --from aws-prototyping-sdk nx-monorepo This will boostrap a new Projen monorepo and contain the following in the .projenrc.ts: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); project . synth (); To add new packages to the monorepo, you can simply add them as a child to the monorepo. To demonstrate, lets add a PDK Pipeline TS Project as a child as follows: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); project . synth (); Once added, run npx projen from the root directory. You will now notice a new TS package has been created under the packages/cicd path. Now let's add a python project to the monorepo and add an inter-language build dependency. import { nx_monorepo } from \"aws-prototyping-sdk\" ; import { PDKPipelineTsProject } from \"aws-prototyping-sdk/pipeline\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"test\" , }); const pipelineProject = new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); // Standard Projen projects also work here const pythonlib = new PythonProject ({ parent : project , outdir : \"packages/pythonlib\" , authorEmail : \"\" , authorName : \"\" , module Name : \"pythonlib\" , name : \"pythonlib\" , version : \"0.0.0\" }); // Pipeline project depends on pythonlib to build first project . addImplicitDependency ( pipelineProject , pythonlib ); project . synth (); Run npx projen from the root directory. You will now notice a new Python package has been created under packages/pythonlib. To visualize our dependency graph, run the following command from the root directory: npx nx graph . Now lets test building our project, from the root directory run npx nx run-many --target=build --all . As you can see, the pythonlib was built first followed by the cicd package. The NxMonorepoProject also manages your yarn/pnpm workspaces for you and synthesizes these into your package.json pnpm-workspace.yml respectively. For more information on NX commands, refer to this documentation . Homogenous Dependencies As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code. Typescript Since the NxMonorepoProject manages a yarn/npm/pnpm workspace, configuring dependencies between Typescript projects is as straightforward as referencing them in deps . Note that dependencies cannot be added in the same project synthesis ( npx projen ) as when projects are created. This means a two-pass approach is recommended, first to create your new projects, and then to add the dependencies. For example: First add your new projects: new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , }); Synthesise, then you can set up your dependency: const a = new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , // B depends on A deps : [ a . package . packageName ], }); Python The recommended way to configure dependencies between python projects within your monorepo is to use a single shared virtual environment. You can then install packages you wish to depend on into that environment using pip's Editable Installs . You will also need to add an implicit dependency to tell the monorepo the correct build order for your packages. For example: const sharedEnv : VenvOptions = { envdir : '../../.env' , }; const a = new PythonProject ({ parent : monorepo , outdir : 'packages/a' , module Name : 'a' , name : 'a' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , }); // Install A into the virtual env since it is consumed by B a . tasks . tryFind ( 'install' ) ! . exec ( 'pip install --editable .' ); const b = new PythonProject ({ parent : monorepo , outdir : 'packages/b' , module Name : 'b' , name : 'b' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , // B depends on A deps : [ a . module Name ], }); // Add the implicit dependency so that the monorepo will build A before B monorepo . addImplicitDependency ( b , a ); Java The recommended way to configure dependencies between java projects within your monorepo is to use shared maven repositories. The default java project build will already create a distributable in the correct format for a maven repository in its dist/java folder, so you can use this as a repository. For example: const a = new JavaProject ({ parent : monorepo , outdir : 'packages/a' , groupId : 'com.mycompany' , artifactId : 'a' , name : 'a' , version : '1.0.0' , }); const b = new JavaProject ({ parent : monorepo , outdir : 'packages/b' , groupId : 'com.mycompany' , artifactId : 'b' , name : 'b' , version : '1.0.0' , // Declare the dependency on A deps : [ ` ${ a . pom . groupId } / ${ a . pom . artifactId } @ ${ a . pom . version } ` ], }); // Add the repository b . pom . addRepository ({ url : 'file://../a/dist/java' , id : 'dependency-on-a' , }); // Add the implicit dependency to control build order monorepo . addImplicitDependency ( b , a ); API Reference Structs MonorepoUpgradeDepsOptions Configuration for Monorepo Upgrade Deps task. Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const monorepoUpgradeDepsOptions : nx_monorepo.MonorepoUpgradeDepsOptions = { ... } Properties Name Type Description syncpackConfig SyncpackConfig Syncpack configuration. taskName string Name of the task to create. syncpackConfig Optional public readonly syncpackConfig : SyncpackConfig ; Type: SyncpackConfig Default: SyncpackConfig.DEFAULT_CONFIG Syncpack configuration. No merging is performed and as such a complete syncpackConfig is required if supplied. taskName Optional public readonly taskName : string ; Type: string Default: upgrade-deps Name of the task to create. NXConfig NX configurations. https://nx.dev/configuration/packagejson Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const nXConfig : nx_monorepo.NXConfig = { ... } Properties Name Type Description implicitDependencies {[ key: string ]: string[]} Configuration for Implicit Dependnecies. nxCloudReadOnlyAccessToken string Read only access token if enabling nx cloud. nxIgnore string[] List of patterns to include in the .nxignore file. targetDependencies {[ key: string ]: TargetDependency []} Configuration for TargetDependencies. implicitDependencies Optional public readonly implicitDependencies : {[ key : string ] : string []}; Type: {[ key: string ]: string[]} Configuration for Implicit Dependnecies. https://nx.dev/configuration/packagejson#implicitdependencies nxCloudReadOnlyAccessToken Optional public readonly nxCloudReadOnlyAccessToken : string ; Type: string Read only access token if enabling nx cloud. nxIgnore Optional public readonly nxIgnore : string []; Type: string[] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore targetDependencies Optional public readonly targetDependencies : {[ key : string ] : TargetDependency []}; Type: {[ key: string ]: TargetDependency []} Configuration for TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const nxMonorepoProjectOptions : nx_monorepo.NxMonorepoProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions projen.javascript.ScopedPackagesOptions[] Options for privately hosted scoped packages. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. minMajorVersion number Minimal Major version to release. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps projen.github.workflows.JobStep[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. monorepoUpgradeDeps boolean Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nxConfig NXConfig Configuration for NX. workspaceConfig WorkspaceConfig Configuration for workspace. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Author's Organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public readonly scopedPackagesOptions : ScopedPackagesOptions []; Type: projen.javascript.ScopedPackagesOptions[] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public readonly minMajorVersion : number ; Type: number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepoUpgradeDeps Optional public readonly monorepoUpgradeDeps : boolean ; Type: boolean Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions Optional public readonly monorepoUpgradeDepsOptions : MonorepoUpgradeDepsOptions ; Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nxConfig Optional public readonly nxConfig : NXConfig ; Type: NXConfig Configuration for NX. workspaceConfig Optional public readonly workspaceConfig : WorkspaceConfig ; Type: WorkspaceConfig Configuration for workspace. ProjectTarget Project Target. Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const projectTarget : nx_monorepo.ProjectTarget = { ... } Properties Name Type Description dependsOn TargetDependency [] List of Target Dependencies. outputs string[] List of outputs to cache, relative to the root of the monorepo. dependsOn Required public readonly dependsOn : TargetDependency []; Type: TargetDependency [] List of Target Dependencies. outputs Optional public readonly outputs : string []; Type: string[] List of outputs to cache, relative to the root of the monorepo. note: must start with leading / SemverGroup Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const semverGroup : nx_monorepo.SemverGroup = { ... } Properties Name Type Description dependencies string[] the names of the dependencies (eg. packages string[] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range string the semver range which dependencies in this group should use. dependencyTypes string[] optionally only apply this group to dependencies of the provided types. dependencies Required public readonly dependencies : string []; Type: string[] the names of the dependencies (eg. \"lodash\") which belong to this group packages Required public readonly packages : string []; Type: string[] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range Required public readonly range : string ; Type: string the semver range which dependencies in this group should use. dependencyTypes Optional public readonly dependencyTypes : string []; Type: string[] optionally only apply this group to dependencies of the provided types. SyncpackConfig Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const syncpackConfig : nx_monorepo.SyncpackConfig = { ... } Properties Name Type Description dependencyTypes string[] which dependency properties to search within. dev boolean whether to search within devDependencies. filter string a string which will be passed to new RegExp() to match against package names that should be included. indent string the character(s) to be used to indent your package.json files when writing to disk. overrides boolean whether to search within npm overrides. peer boolean whether to search within peerDependencies. pnpmOverrides boolean whether to search within pnpm overrides. prod boolean whether to search within dependencies. resolutions boolean whether to search within yarn resolutions. semverGroups SemverGroup [] No description. semverRange string defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sortAz string[] which fields within package.json files should be sorted alphabetically. sortFirst string[] which fields within package.json files should appear at the top, and in what order. source string[] glob patterns for package.json file locations. versionGroups VersionGroup [] No description. workspace boolean whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. dependencyTypes Required public readonly dependencyTypes : string []; Type: string[] which dependency properties to search within. dev Required public readonly dev : boolean ; Type: boolean whether to search within devDependencies. filter Required public readonly filter : string ; Type: string a string which will be passed to new RegExp() to match against package names that should be included. indent Required public readonly indent : string ; Type: string the character(s) to be used to indent your package.json files when writing to disk. overrides Required public readonly overrides : boolean ; Type: boolean whether to search within npm overrides. peer Required public readonly peer : boolean ; Type: boolean whether to search within peerDependencies. pnpmOverrides Required public readonly pnpmOverrides : boolean ; Type: boolean whether to search within pnpm overrides. prod Required public readonly prod : boolean ; Type: boolean whether to search within dependencies. resolutions Required public readonly resolutions : boolean ; Type: boolean whether to search within yarn resolutions. semverGroups Required public readonly semverGroups : SemverGroup []; Type: SemverGroup [] semverRange Required public readonly semverRange : string ; Type: string defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sortAz Required public readonly sortAz : string []; Type: string[] which fields within package.json files should be sorted alphabetically. sortFirst Required public readonly sortFirst : string []; Type: string[] which fields within package.json files should appear at the top, and in what order. source Required public readonly source : string []; Type: string[] glob patterns for package.json file locations. versionGroups Required public readonly versionGroups : VersionGroup []; Type: VersionGroup [] workspace Required public readonly workspace : boolean ; Type: boolean whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. TargetDependency Represents an NX Target Dependency. Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const targetDependency : nx_monorepo.TargetDependency = { ... } Properties Name Type Description projects TargetDependencyProject Target dependencies. target string Projen target i.e: build, test, etc. projects Required public readonly projects : TargetDependencyProject ; Type: TargetDependencyProject Target dependencies. target Required public readonly target : string ; Type: string Projen target i.e: build, test, etc. VersionGroup Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const versionGroup : nx_monorepo.VersionGroup = { ... } Properties Name Type Description dependencies string[] the names of the dependencies (eg. packages string[] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependencyTypes string[] optionally only apply this group to dependencies of the provided types. isBanned boolean optionally force all dependencies in this group to be removed. pinVersion string optionally force all dependencies in this group to have this version. dependencies Required public readonly dependencies : string []; Type: string[] the names of the dependencies (eg. \"lodash\") which belong to this group packages Required public readonly packages : string []; Type: string[] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependencyTypes Optional public readonly dependencyTypes : string []; Type: string[] optionally only apply this group to dependencies of the provided types. isBanned Optional public readonly isBanned : boolean ; Type: boolean optionally force all dependencies in this group to be removed. pinVersion Optional public readonly pinVersion : string ; Type: string optionally force all dependencies in this group to have this version. WorkspaceConfig Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/ Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const workspaceConfig : nx_monorepo.WorkspaceConfig = { ... } Properties Name Type Description noHoist string[] List of package globs to exclude from hoisting in the workspace. noHoist Optional public readonly noHoist : string []; Type: string[] List of package globs to exclude from hoisting in the workspace. https://classic.yarnpkg.com/blog/2018/02/15/nohoist/ Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers import { nx_monorepo } from 'aws-prototyping-sdk' new nx_monorepo . NxMonorepoProject ( options : NxMonorepoProjectOptions ) Name Type Description options NxMonorepoProjectOptions No description. options Required Type: NxMonorepoProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's. overrideProjectTargets Allow project specific target overrides. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. addImplicitDependency public addImplicitDependency ( dependent : Project , dependee : Project ) : void Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: projen.Project project you want to have the dependency. dependee Required Type: projen.Project project you wish to depend on. overrideProjectTargets public overrideProjectTargets ( project : Project , targets : {[ key : string ] : ProjectTarget }) : void Allow project specific target overrides. project Required Type: projen.Project targets Required Type: {[ key: string ]: ProjectTarget } Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. subProjects projen.Project[] No description. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig subProjects Required public readonly subProjects : Project []; Type: projen.Project[] Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums TargetDependencyProject Supported enums for a TargetDependency. Members Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. SELF Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages. DEPENDENCIES Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"Index"},{"location":"typescript/nx-monorepo/index.html#homogenous-dependencies","text":"As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code.","title":"Homogenous Dependencies"},{"location":"typescript/nx-monorepo/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/nx-monorepo/index.html#structs","text":"","title":"Structs "},{"location":"typescript/nx-monorepo/index.html#monorepoupgradedepsoptions","text":"Configuration for Monorepo Upgrade Deps task.","title":"MonorepoUpgradeDepsOptions "},{"location":"typescript/nx-monorepo/index.html#nxconfig","text":"NX configurations. https://nx.dev/configuration/packagejson","title":"NXConfig "},{"location":"typescript/nx-monorepo/index.html#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"typescript/nx-monorepo/index.html#projecttarget","text":"Project Target.","title":"ProjectTarget "},{"location":"typescript/nx-monorepo/index.html#semvergroup","text":"","title":"SemverGroup "},{"location":"typescript/nx-monorepo/index.html#syncpackconfig","text":"","title":"SyncpackConfig "},{"location":"typescript/nx-monorepo/index.html#targetdependency","text":"Represents an NX Target Dependency.","title":"TargetDependency "},{"location":"typescript/nx-monorepo/index.html#versiongroup","text":"","title":"VersionGroup "},{"location":"typescript/nx-monorepo/index.html#workspaceconfig","text":"Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/","title":"WorkspaceConfig "},{"location":"typescript/nx-monorepo/index.html#classes","text":"","title":"Classes "},{"location":"typescript/nx-monorepo/index.html#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"typescript/nx-monorepo/index.html#enums","text":"","title":"Enums "},{"location":"typescript/nx-monorepo/index.html#targetdependencyproject","text":"Supported enums for a TargetDependency.","title":"TargetDependencyProject "},{"location":"typescript/open-api-gateway/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/open-api-gateway OpenAPI Gateway Define your APIs using OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given a lambda integration for every operation. The project will generate models and clients from your OpenAPI spec in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure a lambda integration is provided for every API integration. When you change your API specification, just run npx projen again to regenerate all of this! Project Typescript It's recommended that this project is used as part of an nx_monorepo project. You can still use this as a standalone project if you like (eg npx projen new --from @aws-prototyping-sdk/open-api-gateway open-api-gateway-ts ), however you will need to manage build order (ie building the generated client first, followed by the project). For usage in a monorepo: Create the project in your .projenrc: import { ClientLanguage , DocumentationFormat , OpenApiGatewayTsProject } from \"@aws-prototyping-sdk/open-api-gateway\" ; new OpenApiGatewayTsProject ({ parent : myNxMonorepo , defaultReleaseBranch : \"mainline\" , name : \"my-api\" , outdir : \"packages/api\" , clientLanguages : [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ], documentationFormats : [ DocumentationFormat . HTML2 , DocumentationFormat . PLANTUML , DocumentationFormat . MARKDOWN ], }); In the output directory ( outdir ), you'll find a few files to get you started. |_ src/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.ts - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayLambdaApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample-api.ts. |_ sample-api.ts - Example usage of the construct defined in api.ts. |_ sample-api.say-hello.ts - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client, including generated lambda handler wrappers |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation If you would prefer to not generate the sample code, you can pass sampleCode: false to OpenApiGatewayTsProject . To make changes to your api, simply update spec.yaml and run npx projen to synthesize all the typesafe client/server code! The SampleApi construct uses NodejsFunction to declare the example lambda, but you are free to change this! Python As well as typescript, you can choose to generate the cdk construct and sample handler in python. new OpenApiGatewayPythonProject ({ parent : myNxMonorepo , outdir : 'packages/myapi' , name : 'myapi' , module Name : 'myapi' , version : '1.0.0' , authorName : 'jack' , authorEmail : 'me@example.com' , clientLanguages : [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ], }); You will need to set up a shared virtual environment and configure dependencies via the monorepo (see README.md for the nx-monorepo package). An example of a full .projenrc.ts might be: import { nx_monorepo } from \"aws-prototyping-sdk\" ; import { ClientLanguage , OpenApiGatewayPythonProject } from \"@aws-prototyping-sdk/open-api-gateway\" ; import { AwsCdkPythonApp } from \"projen/lib/awscdk\" ; const monorepo = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" , \"@aws-prototyping-sdk/open-api-gateway\" ], name : \"open-api-test\" , }); const api = new OpenApiGatewayPythonProject ({ parent : monorepo , outdir : 'packages/myapi' , name : 'myapi' , module Name : 'myapi' , version : '1.0.0' , authorName : 'jack' , authorEmail : 'me@example.com' , clientLanguages : [ ClientLanguage . TYPESCRIPT ], venvOptions : { // Use a shared virtual env dir. // The generated python client will also use this virtual env dir envdir : '../../.env' , }, }); // Install into virtual env so it's available for the cdk app api . tasks . tryFind ( 'install' ) ! . exec ( 'pip install --editable .' ); const app = new AwsCdkPythonApp ({ authorName : \"jack\" , authorEmail : \"me@example.com\" , cdkVersion : \"2.1.0\" , module Name : \"myapp\" , name : \"myapp\" , version : \"1.0.0\" , parent : monorepo , outdir : \"packages/myapp\" , deps : [ api . module Name ], venvOptions : { envdir : '../../.env' , }, }); monorepo . addImplicitDependency ( app , api ); monorepo . synth (); You'll find the following directory structure in packages/myapi : |_ myapi/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.py - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayLambdaApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample_api.py. |_ sample_api.py - Example usage of the construct defined in api.py. |_ handlers/ |_ say_hello_handler_sample.py - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client, including generated lambda handler wrappers. |_ java/ - A generated java API client. For simplicity, the generated code deploys a lambda layer for the generated code and its dependencies. You may choose to define an entirely separate projen PythonProject for your lambda handlers should you wish to add more dependencies than just the generated code. OpenAPI Specification Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message Construct A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. import * as path from 'path' ; import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' ; import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs' ; import { Construct } from 'constructs' ; import { Api } from './api' ; /** * An example of how to wire lambda handler functions to the API */ export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { defaultAuthorizer : Authorizers.iam (), integrations : { // Every operation defined in your API must have an integration defined! sayHello : { function : new NodejsFunction ( scope , 'say-hello' ), }, }, }); } } Authorizers The Api construct allows you to define one or more authorizers for securing your API. An integration will use the defaultAuthorizer unless an authorizer is specified at the integration level. The following authorizers are supported: Authorizers.none - No auth Authorizers.iam - AWS IAM (Signature Version 4) Authorizers.cognito - Cognito user pool Authorizers.custom - A custom authorizer Cognito Authorizer To use the Cognito authorizer, one or more user pools must be provided. You can optionally specify the scopes to check if using an access token. You can use the withScopes method to use the same authorizer but verify different scopes for individual integrations, for example: export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { const cognitoAuthorizer = Authorizers . cognito ({ authorizerId : 'myCognitoAuthorizer' , userPools : [ new UserPool ( scope , 'UserPool' )], }); super ( scope , id , { defaultAuthorizer : cognitoAuthorizer , integrations : { // Everyone in the user pool can call this operation: sayHello : { function : new NodejsFunction ( scope , 'say-hello' ), }, // Only users with the given scopes can call this operation myRestrictedOperation : { function : new NodejsFunction ( scope , 'my-restricted-operation' ), authorizer : cognitoAuthorizer.withScopes ( 'my-resource-server/my-scope' ), }, }, }); } } For more information about scopes or identity and access tokens, please see the API Gateway documentation . Custom Authorizer Custom authorizers use lambda functions to handle authorizing requests. These can either be simple token-based authorizers, or more complex request-based authorizers. See the API Gateway documentation for more details. An example token-based authorizer (default): Authorizers . custom ({ authorizerId : 'myTokenAuthorizer' , function : new NodejsFunction ( scope , 'authorizer' ), }); An example request-based handler. By default the identitySource will be method.request.header.Authorization , however you can customise this as per the API Gateway documentation . Authorizers . custom ({ authorizerId : 'myRequestAuthorizer' , type : CustomAuthorizerType . REQUEST , identitySource : 'method.request.header.MyCustomHeader, method.request.querystring.myQueryString' , function : new NodejsFunction ( scope , 'authorizer' ), }); Generated Client Typescript The typescript-fetch OpenAPI generator is used to generate OpenAPI clients for typescript. This requires an implementation of fetch to be passed to the client. In the browser one can pass the built in fetch, or in NodeJS you can use an implementation such as node-fetch . Example usage of the client in a website: import { Configuration , DefaultApi } from \"my-api-typescript-client\" ; const client = new DefaultApi ( new Configuration ({ basePath : \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" , fetchApi : window.fetch.bind ( window ), })); await client . sayHello ({ name : \"Jack\" }); Python The python-experimental OpenAPI generator is used to generate OpenAPI clients for python. Example usage: from my_api_python import ApiClient , Configuration from my_api_python.api.default_api import DefaultApi configuration = Configuration ( host = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) with ApiClient ( configuration ) as api_client : client = DefaultApi ( api_client ) client . say_hello ( query_params = { 'name' : \"name_example\" , }, ) You'll find details about how to use the python client in the README.md alongside your generated client. Lambda Handler Wrappers Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification. Typescript import { sayHelloHandler } from \"my-api-typescript-client\" ; export const handler = sayHelloHandler ( async ( input ) => { return { statusCode : 200 , body : { message : `Hello ${ input . requestParameters . name } !` , }, }; }); Python from myapi_python.api.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> ApiResponse [ HelloResponse , ApiError ]: return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Interceptors The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next(input, event, context) . Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next . Typescript In typescript, interceptors are passed as separate arguments to the generated handler wrapper, in the order in which they should be executed. import { sayHelloHandler , LambdaRequestParameters , LambdaHandlerChain , } from \"my-api-typescript-client\" ; // Interceptor to wrap invocations in a try/catch, returning a 500 error for any unhandled exceptions. const tryCatchInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( input : LambdaRequestParameters < RequestParameters , RequestArrayParameters , RequestBody > , event : any , context : any , chain : LambdaHandlerChain < RequestParameters , RequestArrayParameters , RequestBody , Response > , ) : Promise < Response | OperationResponse < 500 , { errorMessage : string } >> => { try { return await chain . next ( input , event , context ); } catch ( e : any ) { return { statusCode : 500 , body : { errorMessage : e.message }}; } }; // tryCatchInterceptor is passed first, so it runs first and calls the second argument function (the request handler) via chain.next export const handler = sayHelloHandler ( tryCatchInterceptor , async ( input ) => { return { statusCode : 200 , body : { message : `Hello ${ input . requestParameters . name } !` , }, }; }); Another example interceptor might be to record request time metrics. The example below includes the full generic type signature for an interceptor: import { LambdaRequestParameters , LambdaHandlerChain , } from 'my-api-typescript-client' ; const timingInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( input : LambdaRequestParameters < RequestParameters , RequestArrayParameters , RequestBody > , event : any , context : any , chain : LambdaHandlerChain < RequestParameters , RequestArrayParameters , RequestBody , Response > , ) : Promise < Response > => { const start = Date . now (); const response = await chain . next ( input , event , context ); const end = Date . now (); console . log ( `Took ${ end - start } ms` ); return response ; }; Other Details Workspaces and OpenApiGatewayTsProject OpenApiGatewayTsProject can be used as part of a monorepo using YARN/NPM/PNPM workspaces. When used in a monorepo, a dependency is established between OpenApiGatewayTsProject and the generated typescript client, which is expected to be managed by the parent monorepo (ie both OpenApiGatewayTsProject and the generated typescript client are parented by the monorepo). During initial project synthesis, the dependency between OpenApiGatewayTsProject and the generated client is established via workspace configuration local to OpenApiGatewayTsProject , since the parent monorepo will not have updated to include the new packages in time for the initial \"install\". When the package manager is PNPM, this initial workspace is configured by creating a local pnpm-workspace.yaml file, and thus if you specify your own for an instance of OpenApiGatewayTsProject , synthesis will fail. It is most likely that you will not need to define this file locally in OpenApiGatewayTsProject since the monorepo copy should be used to manage all packages within the repo, however if managing this file at the OpenApiGatewayTsProject level is required, please use the pnpmWorkspace property of OpenApiGatewayTsProject . Customising Generated Client Projects By default, the generated clients are configured automatically, including project names. You can customise the generated client code using the <language>ProjectOptions properties when constructing your projen project. Python Shared Virtual Environment For adding dependencies between python projects within a monorepo you can use a single shared virtual environment, and install your python projects into that environment with pip install --editable . in the dependee. The generated python client will automatically do this if it detects it is within a monorepo. The following example shows how to configure the generated client to use a shared virtual environment: const api = new OpenApiGatewayTsProject ({ parent : monorepo , name : 'api' , outdir : 'packages/api' , defaultReleaseBranch : 'main' , clientLanguages : [ ClientLanguage . PYTHON ], pythonClientOptions : { module Name : 'my_api_python' , name : 'my_api_python' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : { // Directory relative to the generated python client (in this case packages/api/generated/python) envdir : '../../../../.env' , }, }, }); new PythonProject ({ parent : monorepo , outdir : 'packages/my-python-lib' , module Name : 'my_python_lib' , name : 'my_python_lib' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : { // Directory relative to the python lib (in this case packages/my-python-lib) envdir : '../../.env' , }, // Generated client can be safely cast to a PythonProject deps : [( api . generatedClients [ ClientLanguage . PYTHON ] as PythonProject ). module Name ], }); API Reference Constructs OpenApiGatewayLambdaApi A construct for creating an api gateway api based on the definition in the OpenAPI spec. Initializers import { OpenApiGatewayLambdaApi } from '@aws-prototyping-sdk/open-api-gateway' new OpenApiGatewayLambdaApi ( scope : Construct , id : string , props : OpenApiGatewayLambdaApiProps ) Name Type Description scope constructs.Construct No description. id string No description. props OpenApiGatewayLambdaApiProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: OpenApiGatewayLambdaApiProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { OpenApiGatewayLambdaApi } from '@aws-prototyping-sdk/open-api-gateway' OpenApiGatewayLambdaApi . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. api aws-cdk-lib.aws_apigateway.SpecRestApi No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. api Required public readonly api : SpecRestApi ; Type: aws-cdk-lib.aws_apigateway.SpecRestApi Structs AuthorizerProps Properties for an authorizer. Initializer import { AuthorizerProps } from '@aws-prototyping-sdk/open-api-gateway' const authorizerProps : AuthorizerProps = { ... } Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. CognitoAuthorizerProps Properties used to configure a cognito authorizer. Initializer import { CognitoAuthorizerProps } from '@aws-prototyping-sdk/open-api-gateway' const cognitoAuthorizerProps : CognitoAuthorizerProps = { ... } Properties Name Type Description authorizerId string Unique identifier for this authorizer. userPools aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. authorizationScopes string[] A list of authorization scopes configured on the method. authorizerId Required public readonly authorizerId : string ; Type: string Unique identifier for this authorizer. userPools Required public readonly userPools : IUserPool []; Type: aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes CustomAuthorizerProps Properties used to configure a custom authorizer. Initializer import { CustomAuthorizerProps } from '@aws-prototyping-sdk/open-api-gateway' const customAuthorizerProps : CustomAuthorizerProps = { ... } Properties Name Type Description authorizerId string Unique identifier for this authorizer. function aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds number The number of seconds during which the authorizer result is cached. identitySource string The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizerId Required public readonly authorizerId : string ; Type: string Unique identifier for this authorizer. function Required public readonly function : IFunction ; Type: aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds Optional public readonly authorizerResultTtlInSeconds : number ; Type: number Default: 300 The number of seconds during which the authorizer result is cached. identitySource Optional public readonly identitySource : string ; Type: string Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional public readonly type : CustomAuthorizerType ; Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type MethodAndPath Structure to contain an API operation's method and path. Initializer import { MethodAndPath } from '@aws-prototyping-sdk/open-api-gateway' const methodAndPath : MethodAndPath = { ... } Properties Name Type Description method string The http method of this operation. path string The path of this operation in the api. method Required public readonly method : string ; Type: string The http method of this operation. path Required public readonly path : string ; Type: string The path of this operation in the api. OpenApiGatewayLambdaApiProps Configuration for the OpenApiGatewayLambdaApi construct. Initializer import { OpenApiGatewayLambdaApiProps } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayLambdaApiProps : OpenApiGatewayLambdaApiProps = { ... } Properties Name Type Description cloudWatchRole boolean Automatically configure an AWS CloudWatch role for API Gateway. deploy boolean Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deployOptions aws-cdk-lib.aws_apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description string A description of the RestApi construct. disableExecuteApiEndpoint boolean Specifies whether clients can invoke the API using the default execute-api endpoint. domainName aws-cdk-lib.aws_apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpointExportName string Export name for the CfnOutput containing the API endpoint. endpointTypes aws-cdk-lib.aws_apigateway.EndpointType[] A list of the endpoint types of the API. failOnWarnings boolean Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters {[ key: string ]: string} Custom header parameters for the request. policy aws-cdk-lib.aws_iam.PolicyDocument A policy document that contains the permissions for this RestApi. restApiName string A name for the API Gateway RestApi resource. retainDeployments boolean Retains old deployment resources when the API changes. integrations {[ key: string ]: OpenApiIntegration } A mapping of API operation to its integration. operationLookup {[ key: string ]: MethodAndPath } Details about each operation. corsOptions aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. spec any The parsed OpenAPI specification. specPath string Path to the JSON open api spec. cloudWatchRole Optional public readonly cloudWatchRole : boolean ; Type: boolean Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional public readonly deploy : boolean ; Type: boolean Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deployOptions Optional public readonly deployOptions : StageOptions ; Type: aws-cdk-lib.aws_apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional public readonly description : string ; Type: string Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disableExecuteApiEndpoint Optional public readonly disableExecuteApiEndpoint : boolean ; Type: boolean Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domainName Optional public readonly domainName : DomainNameOptions ; Type: aws-cdk-lib.aws_apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpointExportName Optional public readonly endpointExportName : string ; Type: string Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpointTypes Optional public readonly endpointTypes : EndpointType []; Type: aws-cdk-lib.aws_apigateway.EndpointType[] Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. failOnWarnings Optional public readonly failOnWarnings : boolean ; Type: boolean Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional public readonly parameters : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional public readonly policy : PolicyDocument ; Type: aws-cdk-lib.aws_iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. restApiName Optional public readonly restApiName : string ; Type: string Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retainDeployments Optional public readonly retainDeployments : boolean ; Type: boolean Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required public readonly integrations : {[ key : string ] : OpenApiIntegration }; Type: {[ key: string ]: OpenApiIntegration } A mapping of API operation to its integration. operationLookup Required public readonly operationLookup : {[ key : string ] : MethodAndPath }; Type: {[ key: string ]: MethodAndPath } Details about each operation. corsOptions Optional public readonly corsOptions : CorsOptions ; Type: aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public readonly defaultAuthorizer : Authorizer ; Type: Authorizer The default authorizer to use for your api. When omitted, no authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required public readonly spec : any ; Type: any The parsed OpenAPI specification. specPath Required public readonly specPath : string ; Type: string Path to the JSON open api spec. OpenApiGatewayProjectOptions Options common to all open api gateway projects. Initializer import { OpenApiGatewayProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayProjectOptions : OpenApiGatewayProjectOptions = { ... } Properties Name Type Description clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). specFile string The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. specFile Optional public readonly specFile : string ; Type: string Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. OpenApiGatewayPythonProjectOptions Configuration for the OpenApiGatewayPythonProject. Initializer import { OpenApiGatewayPythonProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayPythonProjectOptions : OpenApiGatewayPythonProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. authorEmail string Author's e-mail. authorName string Author's name. version string Version of the package. classifiers string[] A list of PyPI trove classifiers that describe the project. description string A short description of the package. homepage string A URL to the website of the project. license string License of this package as an SPDX identifier. packageName string Package name. poetryOptions projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName string Name of the python package as used in imports and filenames. deps string[] List of runtime dependencies for this project. devDeps string[] List of dev dependencies for this project. pip boolean Use pip with a requirements.txt file to track project dependencies. poetry boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs boolean Use projenrc in javascript. projenrcJsOptions projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython boolean Use projenrc in Python. projenrcPythonOptions projen.python.ProjenrcOptions Options related to projenrc in python. pytest boolean Include pytest tests. pytestOptions projen.python.PytestOptions pytest options. sample boolean Include sample code and test if the relevant directories don't exist. setuptools boolean Use setuptools with a setup.py script for packaging and publishing. venv boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions projen.python.VenvOptions Venv options. clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). specFile string The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public readonly authorEmail : string ; Type: string Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public readonly authorName : string ; Type: string Default: $GIT_USER_NAME Author's name. version Required public readonly version : string ; Type: string Default: \"0.1.0\" Version of the package. classifiers Optional public readonly classifiers : string []; Type: string[] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public readonly description : string ; Type: string A short description of the package. homepage Optional public readonly homepage : string ; Type: string A URL to the website of the project. license Optional public readonly license : string ; Type: string License of this package as an SPDX identifier. packageName Optional public readonly packageName : string ; Type: string Package name. poetryOptions Optional public readonly poetryOptions : PoetryPyprojectOptionsWithoutDeps ; Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public readonly setupConfig : {[ key : string ] : any }; Type: {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName Required public readonly module Name : string ; Type: string Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public readonly pip : boolean ; Type: boolean Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional public readonly poetry : boolean ; Type: boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public readonly projenrcPython : boolean ; Type: boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public readonly projenrcPythonOptions : ProjenrcOptions ; Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public readonly pytest : boolean ; Type: boolean Default: true Include pytest tests. pytestOptions Optional public readonly pytestOptions : PytestOptions ; Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public readonly setuptools : boolean ; Type: boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional public readonly venv : boolean ; Type: boolean Default: true Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public readonly venvOptions : VenvOptions ; Type: projen.python.VenvOptions Default: defaults Venv options. clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. specFile Optional public readonly specFile : string ; Type: string Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. OpenApiGatewayTsProjectOptions Configuration for the OpenApiGatewayTsProject. Initializer import { OpenApiGatewayTsProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayTsProjectOptions : OpenApiGatewayTsProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions projen.javascript.ScopedPackagesOptions[] Options for privately hosted scoped packages. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. minMajorVersion number Minimal Major version to release. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps projen.github.workflows.JobStep[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). specFile string The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Author's Organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public readonly scopedPackagesOptions : ScopedPackagesOptions []; Type: projen.javascript.ScopedPackagesOptions[] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public readonly minMajorVersion : number ; Type: number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. specFile Optional public readonly specFile : string ; Type: string Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. OpenApiIntegration Defines an integration for an individual API operation. Initializer import { OpenApiIntegration } from '@aws-prototyping-sdk/open-api-gateway' const openApiIntegration : OpenApiIntegration = { ... } Properties Name Type Description function aws-cdk-lib.aws_lambda.IFunction The lambda function to service the api operation. authorizer Authorizer The authorizer to use for this api operation (overrides the default). function Required public readonly function : IFunction ; Type: aws-cdk-lib.aws_lambda.IFunction The lambda function to service the api operation. authorizer Optional public readonly authorizer : Authorizer ; Type: Authorizer The authorizer to use for this api operation (overrides the default). OpenApiOptions Options required alongside an Open API specification to create API Gateway resources. Initializer import { OpenApiOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiOptions : OpenApiOptions = { ... } Properties Name Type Description integrations {[ key: string ]: OpenApiIntegration } A mapping of API operation to its integration. operationLookup {[ key: string ]: MethodAndPath } Details about each operation. corsOptions aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. integrations Required public readonly integrations : {[ key : string ] : OpenApiIntegration }; Type: {[ key: string ]: OpenApiIntegration } A mapping of API operation to its integration. operationLookup Required public readonly operationLookup : {[ key : string ] : MethodAndPath }; Type: {[ key: string ]: MethodAndPath } Details about each operation. corsOptions Optional public readonly corsOptions : CorsOptions ; Type: aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public readonly defaultAuthorizer : Authorizer ; Type: Authorizer The default authorizer to use for your api. When omitted, no authorizer is used. Authorizers specified at the integration level will override this for that operation. Classes Authorizer An authorizer for authorizing API requests. Initializers import { Authorizer } from '@aws-prototyping-sdk/open-api-gateway' new Authorizer ( props : AuthorizerProps ) Name Type Description props AuthorizerProps No description. props Required Type: AuthorizerProps Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. Authorizers Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct. Initializers import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' new Authorizers () Name Type Description Static Functions Name Description cognito A Cognito User Pools authorizer. custom A custom authorizer. iam An IAM authorizer which uses AWS signature version 4 to authorize requests. none No authorizer. cognito import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' Authorizers . cognito ( props : CognitoAuthorizerProps ) A Cognito User Pools authorizer. props Required Type: CognitoAuthorizerProps custom import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' Authorizers . custom ( props : CustomAuthorizerProps ) A custom authorizer. props Required Type: CustomAuthorizerProps iam import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' Authorizers . iam () An IAM authorizer which uses AWS signature version 4 to authorize requests. none import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' Authorizers . none () No authorizer. CognitoAuthorizer An authorizer that uses Cognito identity or access tokens. Initializers import { CognitoAuthorizer } from '@aws-prototyping-sdk/open-api-gateway' new CognitoAuthorizer ( props : CognitoAuthorizerProps ) Name Type Description props CognitoAuthorizerProps No description. props Required Type: CognitoAuthorizerProps Methods Name Description withScopes Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. withScopes public withScopes ( authorizationScopes : string ) : CognitoAuthorizer Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes authorizationScopes Required Type: string the scopes to apply. Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. userPools aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. userPools Required public readonly userPools : IUserPool []; Type: aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. CustomAuthorizer An authorizer that uses a lambda function to authorize requests. Initializers import { CustomAuthorizer } from '@aws-prototyping-sdk/open-api-gateway' new CustomAuthorizer ( props : CustomAuthorizerProps ) Name Type Description props CustomAuthorizerProps No description. props Required Type: CustomAuthorizerProps Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizerResultTtlInSeconds number The number of seconds during which the authorizer result is cached. function aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. identitySource string The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. authorizerResultTtlInSeconds Required public readonly authorizerResultTtlInSeconds : number ; Type: number The number of seconds during which the authorizer result is cached. function Required public readonly function : IFunction ; Type: aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. identitySource Required public readonly identitySource : string ; Type: string The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Required public readonly type : CustomAuthorizerType ; Type: CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IamAuthorizer An IAM authorizer. Initializers import { IamAuthorizer } from '@aws-prototyping-sdk/open-api-gateway' new IamAuthorizer () Name Type Description Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. NoneAuthorizer No authorizer. Initializers import { NoneAuthorizer } from '@aws-prototyping-sdk/open-api-gateway' new NoneAuthorizer () Name Type Description Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. OpenApiGatewayPythonProject Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import { OpenApiGatewayPythonProject } from '@aws-prototyping-sdk/open-api-gateway' new OpenApiGatewayPythonProject ( options : OpenApiGatewayPythonProjectOptions ) Name Type Description options OpenApiGatewayPythonProjectOptions No description. options Required Type: OpenApiGatewayPythonProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <module>@<semver> . addDevDependency public addDevDependency ( spec : string ) : void Adds a dev dependency. spec Required Type: string Format <module>@<semver> . Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. depsManager projen.python.IPythonDeps API for managing dependencies. envManager projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName string Python module name (the project name, with any hyphens or periods replaced with underscores). version string Version of the package for distribution (should follow semver). packagingManager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient projen.python.PythonProject A reference to the generated python client. specDir string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName string The name of the spec file. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public readonly depsManager : IPythonDeps ; Type: projen.python.IPythonDeps API for managing dependencies. envManager Required public readonly envManager : IPythonEnv ; Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public readonly module Name : string ; Type: string Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public readonly version : string ; Type: string Version of the package for distribution (should follow semver). packagingManager Optional public readonly packagingManager : IPythonPackaging ; Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public readonly pytest : Pytest ; Type: projen.python.Pytest Pytest component. apiSrcDir Required public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients Required public readonly generatedClients : {[ key : string ] : Project }; Type: {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir Required public readonly generatedCodeDir : string ; Type: string The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient Required public readonly generatedPythonClient : PythonProject ; Type: projen.python.PythonProject A reference to the generated python client. specDir Required public readonly specDir : string ; Type: string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public readonly specFileName : string ; Type: string The name of the spec file. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. OpenApiGatewayTsProject Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import { OpenApiGatewayTsProject } from '@aws-prototyping-sdk/open-api-gateway' new OpenApiGatewayTsProject ( options : OpenApiGatewayTsProjectOptions ) Name Type Description options OpenApiGatewayTsProjectOptions No description. options Required Type: OpenApiGatewayTsProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName string The name of the spec file. pnpmWorkspace projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig apiSrcDir Required public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients Required public readonly generatedClients : {[ key : string ] : Project }; Type: {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir Required public readonly generatedCodeDir : string ; Type: string The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient Required public readonly generatedTypescriptClient : TypeScriptProject ; Type: projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir Required public readonly specDir : string ; Type: string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public readonly specFileName : string ; Type: string The name of the spec file. pnpmWorkspace Optional public readonly pnpmWorkspace : YamlFile ; Type: projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums ClientLanguage Supported languages for client generation. Members Name Description TYPESCRIPT No description. PYTHON No description. JAVA No description. TYPESCRIPT PYTHON JAVA CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Members Name Description TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. DocumentationFormat Formats for documentation generation. Members Name Description HTML2 No description. MARKDOWN No description. PLANTUML No description. HTML2 MARKDOWN PLANTUML","title":"Index"},{"location":"typescript/open-api-gateway/index.html#openapi-gateway","text":"Define your APIs using OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given a lambda integration for every operation. The project will generate models and clients from your OpenAPI spec in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure a lambda integration is provided for every API integration. When you change your API specification, just run npx projen again to regenerate all of this!","title":"OpenAPI Gateway"},{"location":"typescript/open-api-gateway/index.html#project","text":"","title":"Project"},{"location":"typescript/open-api-gateway/index.html#openapi-specification","text":"Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message","title":"OpenAPI Specification"},{"location":"typescript/open-api-gateway/index.html#construct","text":"A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. import * as path from 'path' ; import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' ; import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs' ; import { Construct } from 'constructs' ; import { Api } from './api' ; /** * An example of how to wire lambda handler functions to the API */ export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { defaultAuthorizer : Authorizers.iam (), integrations : { // Every operation defined in your API must have an integration defined! sayHello : { function : new NodejsFunction ( scope , 'say-hello' ), }, }, }); } }","title":"Construct"},{"location":"typescript/open-api-gateway/index.html#generated-client","text":"","title":"Generated Client"},{"location":"typescript/open-api-gateway/index.html#lambda-handler-wrappers","text":"Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification.","title":"Lambda Handler Wrappers"},{"location":"typescript/open-api-gateway/index.html#interceptors","text":"The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next(input, event, context) . Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next .","title":"Interceptors"},{"location":"typescript/open-api-gateway/index.html#other-details","text":"","title":"Other Details"},{"location":"typescript/open-api-gateway/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/open-api-gateway/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/open-api-gateway/index.html#openapigatewaylambdaapi","text":"A construct for creating an api gateway api based on the definition in the OpenAPI spec.","title":"OpenApiGatewayLambdaApi "},{"location":"typescript/open-api-gateway/index.html#structs","text":"","title":"Structs "},{"location":"typescript/open-api-gateway/index.html#authorizerprops","text":"Properties for an authorizer.","title":"AuthorizerProps "},{"location":"typescript/open-api-gateway/index.html#cognitoauthorizerprops","text":"Properties used to configure a cognito authorizer.","title":"CognitoAuthorizerProps "},{"location":"typescript/open-api-gateway/index.html#customauthorizerprops","text":"Properties used to configure a custom authorizer.","title":"CustomAuthorizerProps "},{"location":"typescript/open-api-gateway/index.html#methodandpath","text":"Structure to contain an API operation's method and path.","title":"MethodAndPath "},{"location":"typescript/open-api-gateway/index.html#openapigatewaylambdaapiprops","text":"Configuration for the OpenApiGatewayLambdaApi construct.","title":"OpenApiGatewayLambdaApiProps "},{"location":"typescript/open-api-gateway/index.html#openapigatewayprojectoptions","text":"Options common to all open api gateway projects.","title":"OpenApiGatewayProjectOptions "},{"location":"typescript/open-api-gateway/index.html#openapigatewaypythonprojectoptions","text":"Configuration for the OpenApiGatewayPythonProject.","title":"OpenApiGatewayPythonProjectOptions "},{"location":"typescript/open-api-gateway/index.html#openapigatewaytsprojectoptions","text":"Configuration for the OpenApiGatewayTsProject.","title":"OpenApiGatewayTsProjectOptions "},{"location":"typescript/open-api-gateway/index.html#openapiintegration","text":"Defines an integration for an individual API operation.","title":"OpenApiIntegration "},{"location":"typescript/open-api-gateway/index.html#openapioptions","text":"Options required alongside an Open API specification to create API Gateway resources.","title":"OpenApiOptions "},{"location":"typescript/open-api-gateway/index.html#classes","text":"","title":"Classes "},{"location":"typescript/open-api-gateway/index.html#authorizer","text":"An authorizer for authorizing API requests.","title":"Authorizer "},{"location":"typescript/open-api-gateway/index.html#authorizers_1","text":"Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct.","title":"Authorizers "},{"location":"typescript/open-api-gateway/index.html#cognitoauthorizer","text":"An authorizer that uses Cognito identity or access tokens.","title":"CognitoAuthorizer "},{"location":"typescript/open-api-gateway/index.html#customauthorizer","text":"An authorizer that uses a lambda function to authorize requests.","title":"CustomAuthorizer "},{"location":"typescript/open-api-gateway/index.html#iamauthorizer","text":"An IAM authorizer.","title":"IamAuthorizer "},{"location":"typescript/open-api-gateway/index.html#noneauthorizer","text":"No authorizer.","title":"NoneAuthorizer "},{"location":"typescript/open-api-gateway/index.html#openapigatewaypythonproject","text":"Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayPythonProject "},{"location":"typescript/open-api-gateway/index.html#openapigatewaytsproject","text":"Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayTsProject "},{"location":"typescript/open-api-gateway/index.html#enums","text":"","title":"Enums "},{"location":"typescript/open-api-gateway/index.html#clientlanguage","text":"Supported languages for client generation.","title":"ClientLanguage "},{"location":"typescript/open-api-gateway/index.html#customauthorizertype","text":"The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type","title":"CustomAuthorizerType "},{"location":"typescript/open-api-gateway/index.html#documentationformat","text":"Formats for documentation generation.","title":"DocumentationFormat "},{"location":"typescript/pdk-nag/index.html","text":"PDK Nag PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict API Reference Constructs PDKNagApp Initializers import { pdk_nag } from 'aws-prototyping-sdk' new pdk_nag . PDKNagApp ( props? : PDKNagAppProps ) Name Type Description props PDKNagAppProps No description. props Optional Type: PDKNagAppProps Methods Name Description toString Returns a string representation of this construct. synth Synthesize this stage into a cloud assembly. addNagResult No description. nagResults Returns a list of NagResult. toString public toString () : string Returns a string representation of this construct. synth public synth ( options? : StageSynthesisOptions ) : CloudAssembly Synthesize this stage into a cloud assembly. Once an assembly has been synthesized, it cannot be modified. Subsequent calls will return the same assembly. options Optional Type: aws-cdk-lib.StageSynthesisOptions addNagResult public addNagResult ( result : NagResult ) : void result Required Type: NagResult nagResults public nagResults () : NagResult [] Returns a list of NagResult. Note: app.synth() must be called before this to retrieve results. Static Functions Name Description isConstruct Checks if x is a construct. isStage Test whether the given construct is a stage. of Return the stage this construct is contained with, if available. isApp Checks if an object is an instance of the App class. isConstruct import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNagApp . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. isStage import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNagApp . isStage ( x : any ) Test whether the given construct is a stage. x Required Type: any of import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNagApp . of ( construct : IConstruct ) Return the stage this construct is contained with, if available. If called on a nested stage, returns its parent. construct Required Type: constructs.IConstruct isApp import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNagApp . isApp ( obj : any ) Checks if an object is an instance of the App class. obj Required Type: any The object to evaluate. Properties Name Type Description node constructs.Node The tree node. artifactId string Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. assetOutdir string The cloud assembly asset output directory. outdir string The cloud assembly output directory. stageName string The name of the stage. account string The default account for all resources defined within this stage. parentStage aws-cdk-lib.Stage The parent stage or undefined if this is the app. region string The default region for all resources defined within this stage. node Required public readonly node : Node ; Type: constructs.Node The tree node. artifactId Required public readonly artifactId : string ; Type: string Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. Derived from the construct path. assetOutdir Required public readonly assetOutdir : string ; Type: string The cloud assembly asset output directory. outdir Required public readonly outdir : string ; Type: string The cloud assembly output directory. stageName Required public readonly stageName : string ; Type: string The name of the stage. Based on names of the parent stages separated by hypens. account Optional public readonly account : string ; Type: string The default account for all resources defined within this stage. parentStage Optional public readonly parentStage : Stage ; Type: aws-cdk-lib.Stage The parent stage or undefined if this is the app. * region Optional public readonly region : string ; Type: string The default region for all resources defined within this stage. Structs Message Message instance. Initializer import { pdk_nag } from 'aws-prototyping-sdk' const message : pdk_nag.Message = { ... } Properties Name Type Description messageDescription string Message description. messageType string Message type as returned from cdk-nag. messageDescription Required public readonly messageDescription : string ; Type: string Message description. messageType Required public readonly messageType : string ; Type: string Message type as returned from cdk-nag. NagResult Nag result. Initializer import { pdk_nag } from 'aws-prototyping-sdk' const nagResult : pdk_nag.NagResult = { ... } Properties Name Type Description messages Message [] List of messages. resource string Resource which triggered the message. messages Required public readonly messages : Message []; Type: Message [] List of messages. resource Required public readonly resource : string ; Type: string Resource which triggered the message. PDKNagAppProps Initializer import { pdk_nag } from 'aws-prototyping-sdk' const pDKNagAppProps : pdk_nag.PDKNagAppProps = { ... } Properties Name Type Description analyticsReporting boolean Include runtime versioning information in the Stacks of this app. autoSynth boolean Automatically call synth() before the program exits. context {[ key: string ]: any} Additional context values for the application. outdir string The output directory into which to emit synthesized artifacts. stackTraces boolean Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata boolean Include construct tree metadata as part of the Cloud Assembly. failOnError boolean Determines whether any errors encountered should trigger a test failure. failOnWarning boolean Determines whether any warnings encountered should trigger a test failure. analyticsReporting Optional public readonly analyticsReporting : boolean ; Type: boolean Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. autoSynth Optional public readonly autoSynth : boolean ; Type: boolean Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . outdir Optional public readonly outdir : string ; Type: string Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. stackTraces Optional public readonly stackTraces : boolean ; Type: boolean Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata Optional public readonly treeMetadata : boolean ; Type: boolean Default: true Include construct tree metadata as part of the Cloud Assembly. failOnError Optional public readonly failOnError : boolean ; Type: boolean Default: false Determines whether any errors encountered should trigger a test failure. failOnWarning Optional public readonly failOnWarning : boolean ; Type: boolean Default: false Determines whether any warnings encountered should trigger a test failure. Classes PDKNag Helper for create a Nag Enabled App. Initializers import { pdk_nag } from 'aws-prototyping-sdk' new pdk_nag . PDKNag () Name Type Description Static Functions Name Description addResourceSuppressionsByPathNoThrow Wrapper around NagSuppressions which does not throw. app Returns an instance of an App with Nag enabled. getStackAccountRegex Returns a stack account regex. getStackPartitionRegex Returns a stack partition regex. getStackPrefix Returns a prefix comprising of a delimited set of Stack Ids. getStackRegionRegex Returns a stack region regex. addResourceSuppressionsByPathNoThrow import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . addResourceSuppressionsByPathNoThrow ( stack : Stack , path : string , suppressions : NagPackSuppression [], applyToChildren? : boolean ) Wrapper around NagSuppressions which does not throw. stack Required Type: aws-cdk-lib.Stack stack instance. path Required Type: string resource path. suppressions Required Type: cdk-nag.NagPackSuppression[] list of suppressions to apply. applyToChildren Optional Type: boolean whether to apply to children. app import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . app ( props? : PDKNagAppProps ) Returns an instance of an App with Nag enabled. props Optional Type: PDKNagAppProps props to initialize the app with. getStackAccountRegex import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . getStackAccountRegex ( stack : Stack ) Returns a stack account regex. stack Required Type: aws-cdk-lib.Stack stack instance. getStackPartitionRegex import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . getStackPartitionRegex ( stack : Stack ) Returns a stack partition regex. stack Required Type: aws-cdk-lib.Stack stack instance. getStackPrefix import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . getStackPrefix ( stack : Stack ) Returns a prefix comprising of a delimited set of Stack Ids. For example: StackA/NestedStackB/ stack Required Type: aws-cdk-lib.Stack stack instance. getStackRegionRegex import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . getStackRegionRegex ( stack : Stack ) Returns a stack region regex. stack Required Type: aws-cdk-lib.Stack stack instance.","title":"Index"},{"location":"typescript/pdk-nag/index.html#pdk-nag","text":"PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict","title":"PDK Nag"},{"location":"typescript/pdk-nag/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/pdk-nag/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/pdk-nag/index.html#pdknagapp","text":"","title":"PDKNagApp "},{"location":"typescript/pdk-nag/index.html#structs","text":"","title":"Structs "},{"location":"typescript/pdk-nag/index.html#message","text":"Message instance.","title":"Message "},{"location":"typescript/pdk-nag/index.html#nagresult","text":"Nag result.","title":"NagResult "},{"location":"typescript/pdk-nag/index.html#pdknagappprops","text":"","title":"PDKNagAppProps "},{"location":"typescript/pdk-nag/index.html#classes","text":"","title":"Classes "},{"location":"typescript/pdk-nag/index.html#pdknag","text":"Helper for create a Nag Enabled App.","title":"PDKNag "},{"location":"typescript/pipeline/index.html","text":"The pipeline module vends an extension to CDK's CodePipeline construct, named PDKPipeline. It additionally creates a CodeCommit repository and by default is configured to build the project assumming nx-monorepo is being used (although this can be changed). A Sonarqube Scanner can also be configured to trigger a scan whenever the synth build job completes successfully. This Scanner is non-blocking and as such is not instrumented as part of the pipeline. The architecture for the PDKPipeline is as follows: CodeCommit repository -> CodePipeline |-> EventBridge Rule (On Build Succeded) -> CodeBuild (Sonar Scan) |-> Secret (sonarqube token) This module additionally vends multiple Projen Projects, one for each of the supported languages. These projects aim to bootstrap your project by providing sample code which uses the PDKPipeline construct. For example, in .projenrc.ts: new PDKPipelineTsProject ({ cdkVersion : \"2.1.0\" , defaultReleaseBranch : \"mainline\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-pipeline\" , }); This will generate a package in typescript containing CDK boilerplate for a pipeline stack (which instantiates PDKPipeline), sets up a Dev stage with an Application Stage containing an empty ApplicationStack (to be implemented). Once this package is synthesized, you can run npx projen and projen will synthesize your cloudformation. Alternatively, you can initialize a project using the cli (in an empty directory) for each of the supported languages as follows: # Typescript npx projen new --from aws-prototyping-sdk pdk-pipeline-ts # Python npx projen new --from aws-prototyping-sdk pdk-pipeline-py # Java npx projen new --from aws-prototyping-sdk pdk-pipeline-java CDK Nag In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 . API Reference Constructs PDKPipeline An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals. Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . PDKPipeline ( scope : Construct , id : string , props : PDKPipelineProps ) Name Type Description scope constructs.Construct No description. id string No description. props PDKPipelineProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: PDKPipelineProps Methods Name Description toString Returns a string representation of this construct. addStage Deploy a single Stage by itself. addWave Add a Wave to the pipeline, for deploying multiple Stages in parallel. buildPipeline Send the current pipeline definition to the engine, and construct the pipeline. suppressCDKViolations No description. toString public toString () : string Returns a string representation of this construct. addStage public addStage ( stage : Stage , options? : AddStageOpts ) : StageDeployment Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies. stage Required Type: aws-cdk-lib.Stage options Optional Type: aws-cdk-lib.pipelines.AddStageOpts addWave public addWave ( id : string , options? : WaveOptions ) : Wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: declare const pipeline : pipelines.CodePipeline ; const wave = pipeline . addWave ( 'MyWave' ); wave . addStage ( new MyApplicationStage ( this , 'Stage1' )); wave . addStage ( new MyApplicationStage ( this , 'Stage2' )); id Required Type: string options Optional Type: aws-cdk-lib.pipelines.WaveOptions buildPipeline public buildPipeline () : void Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method. suppressCDKViolations public suppressCDKViolations () : void Static Functions Name Description isConstruct Checks if x is a construct. isPipeline Return whether the given object extends { @link PipelineBase}. isConstruct import { pipeline } from 'aws-prototyping-sdk' pipeline . PDKPipeline . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. isPipeline import { pipeline } from 'aws-prototyping-sdk' pipeline . PDKPipeline . isPipeline ( x : any ) Return whether the given object extends { @link PipelineBase}. We do attribute detection since we can't reliably use 'instanceof'. x Required Type: any Properties Name Type Description node constructs.Node The tree node. cloudAssemblyFileSet aws-cdk-lib.pipelines.FileSet The FileSet tha contains the cloud assembly. synth aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves aws-cdk-lib.pipelines.Wave[] The waves in this pipeline. pipeline aws-cdk-lib.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. synthProject aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the Synth. codeRepository aws-cdk-lib.aws_codecommit.Repository No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. cloudAssemblyFileSet Required public readonly cloudAssemblyFileSet : FileSet ; Type: aws-cdk-lib.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step. synth Required public readonly synth : IFileSetProducer ; Type: aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves Required public readonly waves : Wave []; Type: aws-cdk-lib.pipelines.Wave[] The waves in this pipeline. pipeline Required public readonly pipeline : Pipeline ; Type: aws-cdk-lib.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built. synthProject Required public readonly synthProject : IProject ; Type: aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built. codeRepository Required public readonly codeRepository : Repository ; Type: aws-cdk-lib.aws_codecommit.Repository SonarCodeScanner Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . SonarCodeScanner ( scope : Construct , id : string , props : SonarCodeScannerProps ) Name Type Description scope constructs.Construct No description. id string No description. props SonarCodeScannerProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: SonarCodeScannerProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { pipeline } from 'aws-prototyping-sdk' pipeline . SonarCodeScanner . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. node Required public readonly node : Node ; Type: constructs.Node The tree node. Structs PDKPipelineJavaProjectOptions Configuration options for the PDKPipelineJavaProject. Initializer import { pipeline } from 'aws-prototyping-sdk' const pDKPipelineJavaProjectOptions : pipeline.PDKPipelineJavaProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. artifactId string The artifactId is generally the name that the project is known by. groupId string This is generally unique amongst an organization or a project. version string This is the last piece of the naming puzzle. description string Description of a project is always good. packaging string Project packaging format. url string The URL, like the name, is not required. compileOptions projen.java.MavenCompileOptions Compile options. deps string[] List of runtime dependencies for this project. distdir string Final artifact output directory. junit boolean Include junit tests. junitOptions projen.java.JunitOptions junit options. packagingOptions projen.java.MavenPackagingOptions Packaging options. projenrcJava boolean Use projenrc in java. projenrcJavaOptions projen.java.ProjenrcOptions Options related to projenrc in java. testDeps string[] List of test dependencies for this project. sample boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage string The java package to use for the code sample. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. mainClass string The name of the Java class with the static main() method. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required public readonly artifactId : string ; Type: string Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required public readonly groupId : string ; Type: string Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required public readonly version : string ; Type: string Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional public readonly description : string ; Type: string Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional public readonly packaging : string ; Type: string Default: \"jar\" Project packaging format. url Optional public readonly url : string ; Type: string Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional public readonly compileOptions : MavenCompileOptions ; Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional public readonly distdir : string ; Type: string Default: \"dist/java\" Final artifact output directory. junit Optional public readonly junit : boolean ; Type: boolean Default: true Include junit tests. junitOptions Optional public readonly junitOptions : JunitOptions ; Type: projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional public readonly packagingOptions : MavenPackagingOptions ; Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional public readonly projenrcJava : boolean ; Type: boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional public readonly projenrcJavaOptions : ProjenrcOptions ; Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional public readonly testDeps : string []; Type: string[] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional public readonly sampleJavaPackage : string ; Type: string Default: \"org.acme\" The java package to use for the code sample. buildCommand Optional public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json . featureFlags Optional public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch . cdkVersion Required public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing. cdkVersionPinning Optional public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. mainClass Required public readonly mainClass : string ; Type: string Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. PDKPipelineProps Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained. Initializer import { pipeline } from 'aws-prototyping-sdk' const pDKPipelineProps : pipeline.PDKPipelineProps = { ... } Properties Name Type Description synth aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion string CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline aws-cdk-lib.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials aws-cdk-lib.pipelines.DockerCredential[] A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation boolean Enable Docker for the self-mutate step. dockerEnabledForSynth boolean Enable Docker for the 'synth' step. pipelineName string The name of the CodePipeline pipeline. publishAssetsInParallel boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks boolean Reuse the same cross region support stack for all pipelines in the App. role aws-cdk-lib.aws_iam.IRole The IAM role to be assumed by this Pipeline. selfMutation boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory string Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName string Name of the CodeCommit repository to create. codeCommitRemovalPolicy aws-cdk-lib.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName string Branch to trigger the pipeline execution. sonarCodeScannerConfig SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps aws-cdk-lib.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. synth Required public readonly synth : IFileSetProducer ; Type: aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . assetPublishingCodeBuildDefaults Optional public readonly assetPublishingCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion Optional public readonly cliVersion : string ; Type: string Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. codeBuildDefaults Optional public readonly codeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. codePipeline Optional public readonly codePipeline : Pipeline ; Type: aws-cdk-lib.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] crossAccountKeys Optional public readonly crossAccountKeys : boolean ; Type: boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. dockerCredentials Optional public readonly dockerCredentials : DockerCredential []; Type: aws-cdk-lib.pipelines.DockerCredential[] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. dockerEnabledForSelfMutation Optional public readonly dockerEnabledForSelfMutation : boolean ; Type: boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. dockerEnabledForSynth Optional public readonly dockerEnabledForSynth : boolean ; Type: boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipelineName Optional public readonly pipelineName : string ; Type: string Default: Automatically generated The name of the CodePipeline pipeline. publishAssetsInParallel Optional public readonly publishAssetsInParallel : boolean ; Type: boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuseCrossRegionSupportStacks Optional public readonly reuseCrossRegionSupportStacks : boolean ; Type: boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional public readonly role : IRole ; Type: aws-cdk-lib.aws_iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. selfMutation Optional public readonly selfMutation : boolean ; Type: boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . selfMutationCodeBuildDefaults Optional public readonly selfMutationCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults Optional public readonly synthCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory Required public readonly primarySynthDirectory : string ; Type: string Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName Required public readonly repositoryName : string ; Type: string Name of the CodeCommit repository to create. codeCommitRemovalPolicy Optional public readonly codeCommitRemovalPolicy : RemovalPolicy ; Type: aws-cdk-lib.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName Optional public readonly defaultBranchName : string ; Type: string Default: mainline Branch to trigger the pipeline execution. sonarCodeScannerConfig Optional public readonly sonarCodeScannerConfig : SonarCodeScannerConfig ; Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps Optional public readonly synthShellStepPartialProps : ShellStepProps ; Type: aws-cdk-lib.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. PDKPipelinePyProjectOptions Configuration options for the PDKPipelinePyProject. Initializer import { pipeline } from 'aws-prototyping-sdk' const pDKPipelinePyProjectOptions : pipeline.PDKPipelinePyProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. authorEmail string Author's e-mail. authorName string Author's name. version string Version of the package. classifiers string[] A list of PyPI trove classifiers that describe the project. description string A short description of the package. homepage string A URL to the website of the project. license string License of this package as an SPDX identifier. packageName string Package name. poetryOptions projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName string Name of the python package as used in imports and filenames. deps string[] List of runtime dependencies for this project. devDeps string[] List of dev dependencies for this project. pip boolean Use pip with a requirements.txt file to track project dependencies. poetry boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs boolean Use projenrc in javascript. projenrcJsOptions projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython boolean Use projenrc in Python. projenrcPythonOptions projen.python.ProjenrcOptions Options related to projenrc in python. pytest boolean Include pytest tests. pytestOptions projen.python.PytestOptions pytest options. sample boolean Include sample code and test if the relevant directories don't exist. setuptools boolean Use setuptools with a setup.py script for packaging and publishing. venv boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions projen.python.VenvOptions Venv options. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. appEntrypoint string The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir string Python sources directory. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public readonly authorEmail : string ; Type: string Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public readonly authorName : string ; Type: string Default: $GIT_USER_NAME Author's name. version Required public readonly version : string ; Type: string Default: \"0.1.0\" Version of the package. classifiers Optional public readonly classifiers : string []; Type: string[] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public readonly description : string ; Type: string A short description of the package. homepage Optional public readonly homepage : string ; Type: string A URL to the website of the project. license Optional public readonly license : string ; Type: string License of this package as an SPDX identifier. packageName Optional public readonly packageName : string ; Type: string Package name. poetryOptions Optional public readonly poetryOptions : PoetryPyprojectOptionsWithoutDeps ; Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public readonly setupConfig : {[ key : string ] : any }; Type: {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName Required public readonly module Name : string ; Type: string Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public readonly pip : boolean ; Type: boolean Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional public readonly poetry : boolean ; Type: boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public readonly projenrcPython : boolean ; Type: boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public readonly projenrcPythonOptions : ProjenrcOptions ; Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public readonly pytest : boolean ; Type: boolean Default: true Include pytest tests. pytestOptions Optional public readonly pytestOptions : PytestOptions ; Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public readonly setuptools : boolean ; Type: boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional public readonly venv : boolean ; Type: boolean Default: true Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public readonly venvOptions : VenvOptions ; Type: projen.python.VenvOptions Default: defaults Venv options. buildCommand Optional public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json . featureFlags Optional public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch . cdkVersion Required public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing. cdkVersionPinning Optional public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public readonly appEntrypoint : string ; Type: string Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional public readonly testdir : string ; Type: string Default: \"tests\" Python sources directory. PDKPipelineTsProjectOptions Configuration options for the PDKPipelineTsProject. Initializer import { pipeline } from 'aws-prototyping-sdk' const pDKPipelineTsProjectOptions : pipeline.PDKPipelineTsProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions projen.javascript.ScopedPackagesOptions[] Options for privately hosted scoped packages. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. minMajorVersion number Minimal Major version to release. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps projen.github.workflows.JobStep[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. appEntrypoint string The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover boolean Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover boolean Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Author's Organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public readonly scopedPackagesOptions : ScopedPackagesOptions []; Type: projen.javascript.ScopedPackagesOptions[] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public readonly minMajorVersion : number ; Type: number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). buildCommand Optional public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json . featureFlags Optional public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch . cdkVersion Required public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing. cdkVersionPinning Optional public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public readonly appEntrypoint : string ; Type: string Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover Optional public readonly edgeLambdaAutoDiscover : boolean ; Type: boolean Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover Optional public readonly integrationTestAutoDiscover : boolean ; Type: boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover Optional public readonly lambdaAutoDiscover : boolean ; Type: boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover Optional public readonly lambdaExtensionAutoDiscover : boolean ; Type: boolean Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions Optional public readonly lambdaOptions : LambdaFunctionCommonOptions ; Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. SonarCodeScannerConfig Initializer import { pipeline } from 'aws-prototyping-sdk' const sonarCodeScannerConfig : pipeline.SonarCodeScannerConfig = { ... } Properties Name Type Description sonarqubeAuthorizedGroup string Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName string Default profile/gate name i.e: your org profile. sonarqubeEndpoint string endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName string Name of the project to create in Sonarqube. cdkOutDir string directory containing the synthesized cdk resources. cfnNagIgnorePath string path to a file containing the cfn nag suppression rules. excludeGlobsForScan string[] glob patterns to exclude from sonar scan. includeGlobsForScan string[] glob patterns to include from sonar scan. preArchiveCommands string[] Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName string Specific profile/gate name i.e: language specific. sonarqubeTags string[] Tags to associate with this project. sonarqubeAuthorizedGroup Required public readonly sonarqubeAuthorizedGroup : string ; Type: string Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required public readonly sonarqubeDefaultProfileOrGateName : string ; Type: string Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required public readonly sonarqubeEndpoint : string ; Type: string endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required public readonly sonarqubeProjectName : string ; Type: string Name of the project to create in Sonarqube. cdkOutDir Optional public readonly cdkOutDir : string ; Type: string directory containing the synthesized cdk resources. cfnNagIgnorePath Optional public readonly cfnNagIgnorePath : string ; Type: string path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional public readonly excludeGlobsForScan : string []; Type: string[] glob patterns to exclude from sonar scan. includeGlobsForScan Optional public readonly includeGlobsForScan : string []; Type: string[] glob patterns to include from sonar scan. preArchiveCommands Optional public readonly preArchiveCommands : string []; Type: string[] Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional public readonly sonarqubeSpecificProfileOrGateName : string ; Type: string Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional public readonly sonarqubeTags : string []; Type: string[] Tags to associate with this project. SonarCodeScannerProps SonarCodeScanners properties. Initializer import { pipeline } from 'aws-prototyping-sdk' const sonarCodeScannerProps : pipeline.SonarCodeScannerProps = { ... } Properties Name Type Description sonarqubeAuthorizedGroup string Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName string Default profile/gate name i.e: your org profile. sonarqubeEndpoint string endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName string Name of the project to create in Sonarqube. cdkOutDir string directory containing the synthesized cdk resources. cfnNagIgnorePath string path to a file containing the cfn nag suppression rules. excludeGlobsForScan string[] glob patterns to exclude from sonar scan. includeGlobsForScan string[] glob patterns to include from sonar scan. preArchiveCommands string[] Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName string Specific profile/gate name i.e: language specific. sonarqubeTags string[] Tags to associate with this project. artifactBucketArn string S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn string ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn string Artifact bucket key ARN used to encrypt the artifacts. sonarqubeAuthorizedGroup Required public readonly sonarqubeAuthorizedGroup : string ; Type: string Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required public readonly sonarqubeDefaultProfileOrGateName : string ; Type: string Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required public readonly sonarqubeEndpoint : string ; Type: string endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required public readonly sonarqubeProjectName : string ; Type: string Name of the project to create in Sonarqube. cdkOutDir Optional public readonly cdkOutDir : string ; Type: string directory containing the synthesized cdk resources. cfnNagIgnorePath Optional public readonly cfnNagIgnorePath : string ; Type: string path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional public readonly excludeGlobsForScan : string []; Type: string[] glob patterns to exclude from sonar scan. includeGlobsForScan Optional public readonly includeGlobsForScan : string []; Type: string[] glob patterns to include from sonar scan. preArchiveCommands Optional public readonly preArchiveCommands : string []; Type: string[] Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional public readonly sonarqubeSpecificProfileOrGateName : string ; Type: string Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional public readonly sonarqubeTags : string []; Type: string[] Tags to associate with this project. artifactBucketArn Required public readonly artifactBucketArn : string ; Type: string S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn Required public readonly synthBuildArn : string ; Type: string ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn Optional public readonly artifactBucketKeyArn : string ; Type: string Artifact bucket key ARN used to encrypt the artifacts. Classes PDKPipelineJavaProject Synthesizes a Java Project with a CI/CD pipeline. Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . PDKPipelineJavaProject ( options : PDKPipelineJavaProjectOptions ) Name Type Description options PDKPipelineJavaProjectOptions No description. options Required Type: PDKPipelineJavaProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addPlugin Adds a build plugin to the pom. addTestDependency Adds a test dependency. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <groupId>/<artifactId>@<semver> . addPlugin public addPlugin ( spec : string , options? : PluginOptions ) : Dependency Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: string dependency spec ( group/artifact@version ). options Optional Type: projen.java.PluginOptions plugin options. addTestDependency public addTestDependency ( spec : string ) : void Adds a test dependency. spec Required Type: string Format <groupId>/<artifactId>@<semver> . ~~ addCdkDependency ~~ public addCdkDependency ( module s : string ) : void Adds an AWS CDK module dependencies. modules Required Type: string The list of modules to depend on (e.g. \"software.amazon.awscdk/aws-lambda\", \"software.amazon.awscdk/aws-iam\", etc). Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. compile projen.java.MavenCompile Compile component. distdir string Maven artifact output directory. packaging projen.java.MavenPackaging Packaging component. pom projen.java.Pom API for managing pom.xml . junit projen.java.Junit JUnit component. projenrc projen.java.Projenrc Projenrc component. cdkConfig projen.awscdk.CdkConfig The cdk.json file. cdkDeps projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdkTasks projen.awscdk.CdkTasks CDK tasks. mainClass string The full name of the main class of the java app (package.Class). mainClassName string The name of the Java class with the static main() method. mainPackage string The name of the Java package that includes the main class. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required public readonly compile : MavenCompile ; Type: projen.java.MavenCompile Compile component. distdir Required public readonly distdir : string ; Type: string Maven artifact output directory. packaging Required public readonly packaging : MavenPackaging ; Type: projen.java.MavenPackaging Packaging component. pom Required public readonly pom : Pom ; Type: projen.java.Pom API for managing pom.xml . junit Optional public readonly junit : Junit ; Type: projen.java.Junit JUnit component. projenrc Optional public readonly projenrc : Projenrc ; Type: projen.java.Projenrc Projenrc component. cdkConfig Required public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig The cdk.json file. cdkDeps Required public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdkTasks Required public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks CDK tasks. mainClass Required public readonly mainClass : string ; Type: string The full name of the main class of the java app (package.Class). mainClassName Required public readonly mainClassName : string ; Type: string The name of the Java class with the static main() method. mainPackage Required public readonly mainPackage : string ; Type: string The name of the Java package that includes the main class. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelinePyProject Synthesizes a Python Project with a CI/CD pipeline. Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . PDKPipelinePyProject ( options : PDKPipelinePyProjectOptions ) Name Type Description options PDKPipelinePyProjectOptions No description. options Required Type: PDKPipelinePyProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <module>@<semver> . addDevDependency public addDevDependency ( spec : string ) : void Adds a dev dependency. spec Required Type: string Format <module>@<semver> . Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. depsManager projen.python.IPythonDeps API for managing dependencies. envManager projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName string Python module name (the project name, with any hyphens or periods replaced with underscores). version string Version of the package for distribution (should follow semver). packagingManager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. appEntrypoint string The CDK app entrypoint. cdkConfig projen.awscdk.CdkConfig cdk.json configuration. cdkDeps projen.awscdk.AwsCdkDeps No description. cdkTasks projen.awscdk.CdkTasks Common CDK tasks. cdkVersion string The CDK version this app is using. testdir string The directory in which the python tests reside. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public readonly depsManager : IPythonDeps ; Type: projen.python.IPythonDeps API for managing dependencies. envManager Required public readonly envManager : IPythonEnv ; Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public readonly module Name : string ; Type: string Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public readonly version : string ; Type: string Version of the package for distribution (should follow semver). packagingManager Optional public readonly packagingManager : IPythonPackaging ; Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public readonly pytest : Pytest ; Type: projen.python.Pytest Pytest component. appEntrypoint Required public readonly appEntrypoint : string ; Type: string The CDK app entrypoint. cdkConfig Required public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps cdkTasks Required public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public readonly cdkVersion : string ; Type: string The CDK version this app is using. testdir Required public readonly testdir : string ; Type: string The directory in which the python tests reside. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelineTsProject Synthesizes a Typescript Project with a CI/CD pipeline. Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . PDKPipelineTsProject ( options : PDKPipelineTsProjectOptions ) Name Type Description options PDKPipelineTsProjectOptions No description. options Required Type: PDKPipelineTsProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. addCdkDependency public addCdkDependency ( module s : string ) : void Adds an AWS CDK module dependencies. modules Required Type: string The list of modules to depend on. Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. appEntrypoint string The CDK app entrypoint. cdkConfig projen.awscdk.CdkConfig cdk.json configuration. cdkDeps projen.awscdk.AwsCdkDeps No description. cdkTasks projen.awscdk.CdkTasks Common CDK tasks. cdkVersion string The CDK version this app is using. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig appEntrypoint Required public readonly appEntrypoint : string ; Type: string The CDK app entrypoint. cdkConfig Required public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps cdkTasks Required public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public readonly cdkVersion : string ; Type: string The CDK version this app is using. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"typescript/pipeline/index.html#cdk-nag","text":"In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 .","title":"CDK Nag"},{"location":"typescript/pipeline/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/pipeline/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/pipeline/index.html#pdkpipeline","text":"An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals.","title":"PDKPipeline "},{"location":"typescript/pipeline/index.html#sonarcodescanner","text":"","title":"SonarCodeScanner "},{"location":"typescript/pipeline/index.html#structs","text":"","title":"Structs "},{"location":"typescript/pipeline/index.html#pdkpipelinejavaprojectoptions","text":"Configuration options for the PDKPipelineJavaProject.","title":"PDKPipelineJavaProjectOptions "},{"location":"typescript/pipeline/index.html#pdkpipelineprops","text":"Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained.","title":"PDKPipelineProps "},{"location":"typescript/pipeline/index.html#pdkpipelinepyprojectoptions","text":"Configuration options for the PDKPipelinePyProject.","title":"PDKPipelinePyProjectOptions "},{"location":"typescript/pipeline/index.html#pdkpipelinetsprojectoptions","text":"Configuration options for the PDKPipelineTsProject.","title":"PDKPipelineTsProjectOptions "},{"location":"typescript/pipeline/index.html#sonarcodescannerconfig","text":"","title":"SonarCodeScannerConfig "},{"location":"typescript/pipeline/index.html#sonarcodescannerprops","text":"SonarCodeScanners properties.","title":"SonarCodeScannerProps "},{"location":"typescript/pipeline/index.html#classes","text":"","title":"Classes "},{"location":"typescript/pipeline/index.html#pdkpipelinejavaproject","text":"Synthesizes a Java Project with a CI/CD pipeline.","title":"PDKPipelineJavaProject "},{"location":"typescript/pipeline/index.html#pdkpipelinepyproject","text":"Synthesizes a Python Project with a CI/CD pipeline.","title":"PDKPipelinePyProject "},{"location":"typescript/pipeline/index.html#pdkpipelinetsproject","text":"Synthesizes a Typescript Project with a CI/CD pipeline.","title":"PDKPipelineTsProject "},{"location":"typescript/static-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/static-website The static-website module is able to deploy your pre-packaged static website content into an S3 Bucket, fronted by Cloudfront. This module uses an Origin Access Identity to ensure your Bucket can only be accessed via Cloudfront and is configured to only allow HTTPS requests by default. Custom runtime configurations can also be specified which will emit a runtime-config.json file along with your website content. Typically this includes resource Arns, Id's etc which may need to be referenced from your website. This package uses sane defaults and at a minimum only requires the path to your website assets. Below is a conceptual view of the default architecture this module creates: Cloudfront Distribution (HTTPS only) -> S3 Bucket (Private via OAI) |_ WAF V2 ACL |_ index.html (+ other website files and assets) |_ runtime-config.json A typical use case is to create a static website with AuthN. To accomplish this, we can leverage the UserIdentity to create the User Pool (Cognito by default) and Identity Pool. We can then pipe the respective pool id's as runtimeOptions into the StaticWebsite. After the website is deployed, these values can be interrogated from the runtime-config.json deployed alongside the website in order to perform authentication within the app using something like the Amplify Auth API . const userIdentity = new UserIdentity ( this , 'UserIdentity' ); new StaticWebsite ( this , 'StaticWebsite' , { websiteContentPath : '<relative>/<path>/<to>/<built>/<website>' , runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : userIdentity.identityPool.identityPoolId , userPoolId : userIdentity.userPool?.userPoolId , userPoolWebClientId : userIdentity.userPoolClient?.userPoolClientId , } }, }); API Reference Constructs CloudfrontWebAcl This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack. Initializers import { CloudfrontWebAcl } from '@aws-prototyping-sdk/static-website' new CloudfrontWebAcl ( scope : Construct , id : string , props? : CloudFrontWebAclProps ) Name Type Description scope constructs.Construct No description. id string No description. props CloudFrontWebAclProps No description. scope Required Type: constructs.Construct id Required Type: string props Optional Type: CloudFrontWebAclProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { CloudfrontWebAcl } from '@aws-prototyping-sdk/static-website' CloudfrontWebAcl . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. webAclArn string No description. webAclId string No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. webAclArn Required public readonly webAclArn : string ; Type: string webAclId Required public readonly webAclId : string ; Type: string StaticWebsite Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10. Initializers import { StaticWebsite } from '@aws-prototyping-sdk/static-website' new StaticWebsite ( scope : Construct , id : string , props : StaticWebsiteProps ) Name Type Description scope constructs.Construct No description. id string No description. props StaticWebsiteProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: StaticWebsiteProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { StaticWebsite } from '@aws-prototyping-sdk/static-website' StaticWebsite . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. bucketDeployment aws-cdk-lib.aws_s3_deployment.BucketDeployment No description. cloudFrontDistribution aws-cdk-lib.aws_cloudfront.Distribution No description. websiteBucket aws-cdk-lib.aws_s3.IBucket No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. bucketDeployment Required public readonly bucketDeployment : BucketDeployment ; Type: aws-cdk-lib.aws_s3_deployment.BucketDeployment cloudFrontDistribution Required public readonly cloudFrontDistribution : Distribution ; Type: aws-cdk-lib.aws_cloudfront.Distribution websiteBucket Required public readonly websiteBucket : IBucket ; Type: aws-cdk-lib.aws_s3.IBucket Structs CidrAllowList Representation of a CIDR range. Initializer import { CidrAllowList } from '@aws-prototyping-sdk/static-website' const cidrAllowList : CidrAllowList = { ... } Properties Name Type Description cidrRanges string[] Specify an IPv4 address by using CIDR notation. cidrType string Type of CIDR range. cidrRanges Required public readonly cidrRanges : string []; Type: string[] Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidrType Required public readonly cidrType : string ; Type: string Type of CIDR range. CloudFrontWebAclProps Properties to configure the web acl. Initializer import { CloudFrontWebAclProps } from '@aws-prototyping-sdk/static-website' const cloudFrontWebAclProps : CloudFrontWebAclProps = { ... } Properties Name Type Description cidrAllowList CidrAllowList List of cidr ranges to allow. managedRules ManagedRule [] List of managed rules to apply to the web acl. cidrAllowList Optional public readonly cidrAllowList : CidrAllowList ; Type: CidrAllowList Default: undefined List of cidr ranges to allow. managedRules Optional public readonly managedRules : ManagedRule []; Type: ManagedRule [] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. ManagedRule Represents a WAF V2 managed rule. Initializer import { ManagedRule } from '@aws-prototyping-sdk/static-website' const managedRule : ManagedRule = { ... } Properties Name Type Description name string The name of the managed rule group. vendor string The name of the managed rule group vendor. name Required public readonly name : string ; Type: string The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required public readonly vendor : string ; Type: string The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. RuntimeOptions Dynamic configuration which gets resolved only during deployment. Example // Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any // and all resolved values. const runtimeConfig = { jsonPayload : { bucketArn : s3Bucket.bucketArn }}; new StaticWebsite ( scope , 'StaticWebsite' , { websiteContentPath : 'path/to/website' , runtimeConfig }); Initializer import { RuntimeOptions } from '@aws-prototyping-sdk/static-website' const runtimeOptions : RuntimeOptions = { ... } Properties Name Type Description jsonPayload any Arbitrary JSON payload containing runtime values to deploy. jsonFileName string File name to store runtime configuration (jsonPayload). jsonPayload Required public readonly jsonPayload : any ; Type: any Arbitrary JSON payload containing runtime values to deploy. Typically this contains resourceArns, etc which are only known at deploy time. Example { userPoolId : some.userPool.userPoolId , someResourceArn : some.resource.Arn } jsonFileName Optional public readonly jsonFileName : string ; Type: string Default: \"runtime-config.json\" File name to store runtime configuration (jsonPayload). Must follow pattern: '*.json' StaticWebsiteProps Properties for configuring the StaticWebsite. Initializer import { StaticWebsiteProps } from '@aws-prototyping-sdk/static-website' const staticWebsiteProps : StaticWebsiteProps = { ... } Properties Name Type Description websiteContentPath string Path to the directory containing the static website files and assets. defaultWebsiteBucketEncryption aws-cdk-lib.aws_s3.BucketEncryption Bucket encryption to use for the default bucket. defaultWebsiteBucketEncryptionKey aws-cdk-lib.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distributionProps aws-cdk-lib.aws_cloudfront.DistributionProps Custom distribution properties. runtimeOptions RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps CloudFrontWebAclProps Limited configuration settings for the generated webAcl. websiteBucket aws-cdk-lib.aws_s3.IBucket Predefined bucket to deploy the website into. websiteContentPath Required public readonly websiteContentPath : string ; Type: string Path to the directory containing the static website files and assets. This directory must contain an index.html file. defaultWebsiteBucketEncryption Optional public readonly defaultWebsiteBucketEncryption : BucketEncryption ; Type: aws-cdk-lib.aws_s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } defaultWebsiteBucketEncryptionKey Optional public readonly defaultWebsiteBucketEncryptionKey : Key ; Type: aws-cdk-lib.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distributionProps Optional public readonly distributionProps : DistributionProps ; Type: aws-cdk-lib.aws_cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtimeOptions Optional public readonly runtimeOptions : RuntimeOptions ; Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps Optional public readonly webAclProps : CloudFrontWebAclProps ; Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. websiteBucket Optional public readonly websiteBucket : IBucket ; Type: aws-cdk-lib.aws_s3.IBucket Predefined bucket to deploy the website into. Classes StaticWebsiteOrigin Implements: aws-cdk-lib.aws_cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy. Initializers import { StaticWebsiteOrigin } from '@aws-prototyping-sdk/static-website' new StaticWebsiteOrigin () Name Type Description Methods Name Description bind The method called when a given Origin is added (for the first time) to a Distribution. bind public bind ( _scope : Construct , _options : OriginBindOptions ) : OriginBindConfig The method called when a given Origin is added (for the first time) to a Distribution. _scope Required Type: constructs.Construct _options Required Type: aws-cdk-lib.aws_cloudfront.OriginBindOptions","title":"Index"},{"location":"typescript/static-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/static-website/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/static-website/index.html#cloudfrontwebacl","text":"This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack.","title":"CloudfrontWebAcl "},{"location":"typescript/static-website/index.html#staticwebsite","text":"Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10.","title":"StaticWebsite "},{"location":"typescript/static-website/index.html#structs","text":"","title":"Structs "},{"location":"typescript/static-website/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"typescript/static-website/index.html#cloudfrontwebaclprops","text":"Properties to configure the web acl.","title":"CloudFrontWebAclProps "},{"location":"typescript/static-website/index.html#managedrule","text":"Represents a WAF V2 managed rule.","title":"ManagedRule "},{"location":"typescript/static-website/index.html#runtimeoptions","text":"Dynamic configuration which gets resolved only during deployment. Example // Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any // and all resolved values. const runtimeConfig = { jsonPayload : { bucketArn : s3Bucket.bucketArn }}; new StaticWebsite ( scope , 'StaticWebsite' , { websiteContentPath : 'path/to/website' , runtimeConfig });","title":"RuntimeOptions "},{"location":"typescript/static-website/index.html#staticwebsiteprops","text":"Properties for configuring the StaticWebsite.","title":"StaticWebsiteProps "},{"location":"typescript/static-website/index.html#classes","text":"","title":"Classes "},{"location":"typescript/static-website/index.html#staticwebsiteorigin","text":"Implements: aws-cdk-lib.aws_cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy.","title":"StaticWebsiteOrigin "}]}