{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Prototyping SDK (PDK) The PDK contains a set of re-usable CDK constructs, vended in multiple languages for use in prototyping engagements.","title":"AWS Prototyping SDK (PDK)"},{"location":"#aws-prototyping-sdk-pdk","text":"The PDK contains a set of re-usable CDK constructs, vended in multiple languages for use in prototyping engagements.","title":"AWS Prototyping SDK (PDK)"},{"location":"python/pdk_pipeline/API/","text":"pdk_pipeline TODO API Reference Structs GreeterProps Initializer from aws - prototyping - sdk import pdk_pipeline pdk_pipeline . GreeterProps ( greetee : str ) Properties Name Type Description greetee str No description. greetee Required greetee : str Type: str Classes Greeter Example class. Initializers from aws - prototyping - sdk import pdk_pipeline pdk_pipeline . Greeter ( greetee : str ) Name Type Description greetee str No description. greetee Required Type: str Methods Name Description greet No description. greet def greet () -> str","title":"API"},{"location":"python/pdk_pipeline/API/#pdk_pipeline","text":"TODO","title":"pdk_pipeline"},{"location":"python/pdk_pipeline/API/#api-reference","text":"","title":"API Reference "},{"location":"python/pdk_pipeline/API/#structs","text":"","title":"Structs "},{"location":"python/pdk_pipeline/API/#greeterprops","text":"","title":"GreeterProps "},{"location":"python/pdk_pipeline/API/#initializer","text":"from aws - prototyping - sdk import pdk_pipeline pdk_pipeline . GreeterProps ( greetee : str )","title":"Initializer "},{"location":"python/pdk_pipeline/API/#properties","text":"Name Type Description greetee str No description.","title":"Properties "},{"location":"python/pdk_pipeline/API/#greeteerequired","text":"greetee : str Type: str","title":"greeteeRequired "},{"location":"python/pdk_pipeline/API/#classes","text":"","title":"Classes "},{"location":"python/pdk_pipeline/API/#greeter","text":"Example class.","title":"Greeter "},{"location":"python/pdk_pipeline/API/#initializers","text":"from aws - prototyping - sdk import pdk_pipeline pdk_pipeline . Greeter ( greetee : str ) Name Type Description greetee str No description.","title":"Initializers "},{"location":"python/pdk_pipeline/API/#greeteerequired_1","text":"Type: str","title":"greeteeRequired "},{"location":"python/pdk_pipeline/API/#methods","text":"Name Description greet No description.","title":"Methods "},{"location":"python/pdk_pipeline/API/#greet","text":"def greet () -> str","title":"greet "},{"location":"python/pdk_projen/API/","text":"pdk_projen This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions. Prerequisites Ensure you have the following packages installed globally: node > 14 (or use nvm to install) Getting Started To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds. nx-monorepo The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc. Adding Subprojects Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website . Example 1 - Explicit dependencies NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time. Example 2 - Implicit dependencies Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order. FAQ I have added a project in .projenrc.ts but it isn't synthesizing? Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo. How do I visualize my dependencies? From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related. I have updated a dependency, however the build or graph viz is not detecting any changes. Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache . How do I build everything in my monorepo without a specific target package? npx nx run-many --target=build --all I am running a different target, however the dependencies are not being executed. By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects. My subproject is not caching even though I haven't changed anything. This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo. API Reference Structs NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer from aws - prototyping - sdk import pdk_projen pdk_projen . NxMonorepoProjectOptions ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , nx_ignore_patterns : typing . List [ str ] = None , target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] = None ) Properties Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. nx_ignore_patterns typing.List[str] List of patterns to include in the .nxignore file. target_dependencies typing.Mapping[typing.List[ TargetDependency ]] Configuration for NX TargetDependencies. name Required name : str Type: str Default: $BASEDIR This is the name of your project. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_token_secret Optional projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional stale : bool Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Author's Organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_projen_upgrades Optional auto_approve_projen_upgrades : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projen_upgrade_auto_merge ~~ Optional Deprecated: use autoApproveProjenUpgrades . projen_upgrade_auto_merge : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projen_upgrade_schedule Optional projen_upgrade_schedule : typing . List [ str ] Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projen_upgrade_secret ~~ Optional Deprecated: use githubTokenSecret instead. projen_upgrade_secret : str Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ typing . Any ] Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). nx_ignore_patterns Optional nx_ignore_patterns : typing . List [ str ] Type: typing.List[str] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore target_dependencies Optional target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] Type: typing.Mapping[typing.List[ TargetDependency ]] Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies TargetDependency Represents an NX Target Dependency. Initializer from aws - prototyping - sdk import pdk_projen pdk_projen . TargetDependency ( projects : TargetDependencyProject , target : str ) Properties Name Type Description projects TargetDependencyProject Target dependencies. target str Projen target i.e: build, test, etc. projects Required projects : TargetDependencyProject Type: TargetDependencyProject Target dependencies. target Required target : str Type: str Projen target i.e: build, test, etc. Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers from aws - prototyping - sdk import pdk_projen pdk_projen . NxMonorepoProject ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , nx_ignore_patterns : typing . List [ str ] = None , target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] = None ) Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. nx_ignore_patterns typing.List[str] List of patterns to include in the .nxignore file. target_dependencies typing.Mapping[typing.List[ TargetDependency ]] Configuration for NX TargetDependencies. name Required Type: str Default: $BASEDIR This is the name of your project. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_token_secret Optional Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Author's Organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_projen_upgrades Optional Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projen_upgrade_auto_merge ~~ Optional Deprecated: use autoApproveProjenUpgrades . Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projen_upgrade_schedule Optional Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projen_upgrade_secret ~~ Optional Deprecated: use githubTokenSecret instead. Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). nx_ignore_patterns Optional Type: typing.List[str] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore target_dependencies Optional Type: typing.Mapping[typing.List[ TargetDependency ]] Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_implicit_dependency Create an implicit dependency between two Project's. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. add_implicit_dependency def add_implicit_dependency ( dependent : Project , dependee : Project ) -> None Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: projen.Project project you want to have the dependency. dependee Required Type: projen.Project project you wish to depend on. Properties Name Type Description build_task projen.Task No description. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Automatic PR merges. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. build_task Required build_task : Task Type: projen.Task compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Automatic PR merges. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this pacakge. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums TargetDependencyProject Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency. SELF Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages. DEPENDENCIES Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"API"},{"location":"python/pdk_projen/API/#pdk_projen","text":"This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions.","title":"pdk_projen"},{"location":"python/pdk_projen/API/#prerequisites","text":"Ensure you have the following packages installed globally: node > 14 (or use nvm to install)","title":"Prerequisites"},{"location":"python/pdk_projen/API/#getting-started","text":"To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds.","title":"Getting Started"},{"location":"python/pdk_projen/API/#nx-monorepo","text":"The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc.","title":"nx-monorepo"},{"location":"python/pdk_projen/API/#adding-subprojects","text":"Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website .","title":"Adding Subprojects"},{"location":"python/pdk_projen/API/#example-1-explicit-dependencies","text":"NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time.","title":"Example 1 - Explicit dependencies"},{"location":"python/pdk_projen/API/#example-2-implicit-dependencies","text":"Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order.","title":"Example 2 - Implicit dependencies"},{"location":"python/pdk_projen/API/#faq","text":"","title":"FAQ"},{"location":"python/pdk_projen/API/#i-have-added-a-project-in-projenrcts-but-it-isnt-synthesizing","text":"Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo.","title":"I have added a project in .projenrc.ts but it isn't synthesizing?"},{"location":"python/pdk_projen/API/#how-do-i-visualize-my-dependencies","text":"From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related.","title":"How do I visualize my dependencies?"},{"location":"python/pdk_projen/API/#i-have-updated-a-dependency-however-the-build-or-graph-viz-is-not-detecting-any-changes","text":"Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache .","title":"I have updated a dependency, however the build or graph viz is not detecting any changes."},{"location":"python/pdk_projen/API/#how-do-i-build-everything-in-my-monorepo-without-a-specific-target-package","text":"npx nx run-many --target=build --all","title":"How do I build everything in my monorepo without a specific target package?"},{"location":"python/pdk_projen/API/#i-am-running-a-different-target-however-the-dependencies-are-not-being-executed","text":"By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects.","title":"I am running a different target, however the dependencies are not being executed."},{"location":"python/pdk_projen/API/#my-subproject-is-not-caching-even-though-i-havent-changed-anything","text":"This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo.","title":"My subproject is not caching even though I haven't changed anything."},{"location":"python/pdk_projen/API/#api-reference","text":"","title":"API Reference "},{"location":"python/pdk_projen/API/#structs","text":"","title":"Structs "},{"location":"python/pdk_projen/API/#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"python/pdk_projen/API/#initializer","text":"from aws - prototyping - sdk import pdk_projen pdk_projen . NxMonorepoProjectOptions ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , nx_ignore_patterns : typing . List [ str ] = None , target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] = None )","title":"Initializer "},{"location":"python/pdk_projen/API/#properties","text":"Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. nx_ignore_patterns typing.List[str] List of patterns to include in the .nxignore file. target_dependencies typing.Mapping[typing.List[ TargetDependency ]] Configuration for NX TargetDependencies.","title":"Properties "},{"location":"python/pdk_projen/API/#namerequired","text":"name : str Type: str Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"python/pdk_projen/API/#loggingoptional","text":"logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"python/pdk_projen/API/#outdiroptional","text":"outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"python/pdk_projen/API/#parentoptional","text":"parent : Project Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#projen_commandoptional","text":"projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projen_commandOptional "},{"location":"python/pdk_projen/API/#projenrc_jsonoptional","text":"projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrc_jsonOptional "},{"location":"python/pdk_projen/API/#projenrc_json_optionsoptional","text":"projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrc_json_optionsOptional "},{"location":"python/pdk_projen/API/#auto_approve_optionsoptional","text":"auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"auto_approve_optionsOptional "},{"location":"python/pdk_projen/API/#auto_merge_optionsoptional","text":"auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"auto_merge_optionsOptional "},{"location":"python/pdk_projen/API/#clobberoptional","text":"clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional","text":"dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional","text":"github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#github_optionsoptional","text":"github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"github_optionsOptional "},{"location":"python/pdk_projen/API/#gitpodoptional","text":"gitpod : bool Type: bool Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#mergifyoptional","text":"Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"python/pdk_projen/API/#mergify_optionsoptional","text":"Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergify_options~~Optional "},{"location":"python/pdk_projen/API/#project_typeoptional","text":"Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~project_type~~Optional "},{"location":"python/pdk_projen/API/#projen_token_secretoptional","text":"projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projen_token_secretOptional "},{"location":"python/pdk_projen/API/#readmeoptional","text":"readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"python/pdk_projen/API/#staleoptional","text":"stale : bool Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"python/pdk_projen/API/#stale_optionsoptional","text":"stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"stale_optionsOptional "},{"location":"python/pdk_projen/API/#vscodeoptional","text":"vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#allow_library_dependenciesoptional","text":"allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allow_library_dependenciesOptional "},{"location":"python/pdk_projen/API/#author_emailoptional","text":"author_email : str Type: str Author's e-mail.","title":"author_emailOptional "},{"location":"python/pdk_projen/API/#author_nameoptional","text":"author_name : str Type: str Author's name.","title":"author_nameOptional "},{"location":"python/pdk_projen/API/#author_organizationoptional","text":"author_organization : bool Type: bool Author's Organization.","title":"author_organizationOptional "},{"location":"python/pdk_projen/API/#author_urloptional","text":"author_url : str Type: str Author's URL / Website.","title":"author_urlOptional "},{"location":"python/pdk_projen/API/#auto_detect_binoptional","text":"auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"auto_detect_binOptional "},{"location":"python/pdk_projen/API/#binoptional","text":"bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"python/pdk_projen/API/#bugs_emailoptional","text":"bugs_email : str Type: str The email address to which issues should be reported.","title":"bugs_emailOptional "},{"location":"python/pdk_projen/API/#bugs_urloptional","text":"bugs_url : str Type: str The url to your project's issue tracker.","title":"bugs_urlOptional "},{"location":"python/pdk_projen/API/#bundled_depsoptional","text":"bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundled_depsOptional "},{"location":"python/pdk_projen/API/#code_artifact_optionsoptional","text":"code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"code_artifact_optionsOptional "},{"location":"python/pdk_projen/API/#depsoptional","text":"deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"python/pdk_projen/API/#descriptionoptional","text":"description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#dev_depsoptional","text":"dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"dev_depsOptional "},{"location":"python/pdk_projen/API/#entrypointoptional","text":"entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"python/pdk_projen/API/#homepageoptional","text":"homepage : str Type: str Package's Homepage / Website.","title":"homepageOptional "},{"location":"python/pdk_projen/API/#keywordsoptional","text":"keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"python/pdk_projen/API/#licenseoptional","text":"license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"python/pdk_projen/API/#licensedoptional","text":"licensed : bool Type: bool Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"python/pdk_projen/API/#max_node_versionoptional","text":"max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive).","title":"max_node_versionOptional "},{"location":"python/pdk_projen/API/#min_node_versionoptional","text":"min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"min_node_versionOptional "},{"location":"python/pdk_projen/API/#npm_accessoptional","text":"npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npm_accessOptional "},{"location":"python/pdk_projen/API/#npm_registryoptional","text":"Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npm_registry~~Optional "},{"location":"python/pdk_projen/API/#npm_registry_urloptional","text":"npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npm_registry_urlOptional "},{"location":"python/pdk_projen/API/#npm_token_secretoptional","text":"npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npm_token_secretOptional "},{"location":"python/pdk_projen/API/#package_manageroptional","text":"package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"package_managerOptional "},{"location":"python/pdk_projen/API/#package_nameoptional","text":"package_name : str Type: str Default: defaults to project name The \"name\" in package.json.","title":"package_nameOptional "},{"location":"python/pdk_projen/API/#peer_dependency_optionsoptional","text":"peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peer_dependency_optionsOptional "},{"location":"python/pdk_projen/API/#peer_depsoptional","text":"peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peer_depsOptional "},{"location":"python/pdk_projen/API/#repositoryoptional","text":"repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"python/pdk_projen/API/#repository_directoryoptional","text":"repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repository_directoryOptional "},{"location":"python/pdk_projen/API/#scriptsoptional","text":"scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"python/pdk_projen/API/#stabilityoptional","text":"stability : str Type: str Package's Stability.","title":"stabilityOptional "},{"location":"python/pdk_projen/API/#jsii_release_versionoptional","text":"jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsii_release_versionOptional "},{"location":"python/pdk_projen/API/#major_versionoptional","text":"major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"major_versionOptional "},{"location":"python/pdk_projen/API/#npm_dist_tagoptional","text":"npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npm_dist_tagOptional "},{"location":"python/pdk_projen/API/#post_build_stepsoptional","text":"post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow.","title":"post_build_stepsOptional "},{"location":"python/pdk_projen/API/#prereleaseoptional","text":"prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"python/pdk_projen/API/#publish_dry_runoptional","text":"publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publish_dry_runOptional "},{"location":"python/pdk_projen/API/#publish_tasksoptional","text":"publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publish_tasksOptional "},{"location":"python/pdk_projen/API/#release_branchesoptional","text":"release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"release_branchesOptional "},{"location":"python/pdk_projen/API/#release_every_commitoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~release_every_commit~~Optional "},{"location":"python/pdk_projen/API/#release_failure_issueoptional","text":"release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task.","title":"release_failure_issueOptional "},{"location":"python/pdk_projen/API/#release_failure_issue_labeloptional","text":"release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"release_failure_issue_labelOptional "},{"location":"python/pdk_projen/API/#release_scheduleoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~release_schedule~~Optional "},{"location":"python/pdk_projen/API/#release_tag_prefixoptional","text":"release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"release_tag_prefixOptional "},{"location":"python/pdk_projen/API/#release_triggeroptional","text":"release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"release_triggerOptional "},{"location":"python/pdk_projen/API/#release_workflow_nameoptional","text":"release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow.","title":"release_workflow_nameOptional "},{"location":"python/pdk_projen/API/#release_workflow_setup_stepsoptional","text":"release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container.","title":"release_workflow_setup_stepsOptional "},{"location":"python/pdk_projen/API/#versionrc_optionsoptional","text":"versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrc_optionsOptional "},{"location":"python/pdk_projen/API/#workflow_container_imageoptional","text":"workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows.","title":"workflow_container_imageOptional "},{"location":"python/pdk_projen/API/#workflow_runs_onoptional","text":"workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflow_runs_onOptional "},{"location":"python/pdk_projen/API/#default_release_branchrequired","text":"default_release_branch : str Type: str Default: \"main\" The name of the main release branch.","title":"default_release_branchRequired "},{"location":"python/pdk_projen/API/#artifacts_directoryoptional","text":"artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts.","title":"artifacts_directoryOptional "},{"location":"python/pdk_projen/API/#auto_approve_projen_upgradesoptional","text":"auto_approve_projen_upgrades : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_projen_upgradesOptional "},{"location":"python/pdk_projen/API/#auto_approve_upgradesoptional","text":"auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_upgradesOptional "},{"location":"python/pdk_projen/API/#build_workflowoptional","text":"build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"build_workflowOptional "},{"location":"python/pdk_projen/API/#build_workflow_triggersoptional","text":"build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"build_workflow_triggersOptional "},{"location":"python/pdk_projen/API/#bundler_optionsoptional","text":"bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundler_optionsOptional "},{"location":"python/pdk_projen/API/#code_covoptional","text":"code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"code_covOptional "},{"location":"python/pdk_projen/API/#code_cov_token_secretoptional","text":"code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"code_cov_token_secretOptional "},{"location":"python/pdk_projen/API/#copyright_owneroptional","text":"copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyright_ownerOptional "},{"location":"python/pdk_projen/API/#copyright_periodoptional","text":"copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file.","title":"copyright_periodOptional "},{"location":"python/pdk_projen/API/#dependabotoptional","text":"dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"python/pdk_projen/API/#dependabot_optionsoptional","text":"dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabot_optionsOptional "},{"location":"python/pdk_projen/API/#deps_upgradeoptional","text":"deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"deps_upgradeOptional "},{"location":"python/pdk_projen/API/#deps_upgrade_optionsoptional","text":"deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"deps_upgrade_optionsOptional "},{"location":"python/pdk_projen/API/#gitignoreoptional","text":"gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"python/pdk_projen/API/#jestoptional","text":"jest : bool Type: bool Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"python/pdk_projen/API/#jest_optionsoptional","text":"jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jest_optionsOptional "},{"location":"python/pdk_projen/API/#mutable_buildoptional","text":"mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutable_buildOptional "},{"location":"python/pdk_projen/API/#npmignoreoptional","text":"Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"python/pdk_projen/API/#npmignore_enabledoptional","text":"npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignore_enabledOptional "},{"location":"python/pdk_projen/API/#packageoptional","text":"package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"python/pdk_projen/API/#prettieroptional","text":"prettier : bool Type: bool Default: false Setup prettier.","title":"prettierOptional "},{"location":"python/pdk_projen/API/#prettier_optionsoptional","text":"prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettier_optionsOptional "},{"location":"python/pdk_projen/API/#projen_dev_dependencyoptional","text":"projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projen_dev_dependencyOptional "},{"location":"python/pdk_projen/API/#projenrc_jsoptional","text":"projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrc_jsOptional "},{"location":"python/pdk_projen/API/#projenrc_js_optionsoptional","text":"projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrc_js_optionsOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_auto_mergeoptional","text":"Deprecated: use autoApproveProjenUpgrades . projen_upgrade_auto_merge : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projen_upgrade_auto_merge~~Optional "},{"location":"python/pdk_projen/API/#projen_upgrade_scheduleoptional","text":"projen_upgrade_schedule : typing . List [ str ] Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projen_upgrade_scheduleOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_secretoptional","text":"Deprecated: use githubTokenSecret instead. projen_upgrade_secret : str Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projen_upgrade_secret~~Optional "},{"location":"python/pdk_projen/API/#projen_versionoptional","text":"projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install.","title":"projen_versionOptional "},{"location":"python/pdk_projen/API/#pull_request_templateoptional","text":"pull_request_template : bool Type: bool Default: true Include a GitHub pull request template.","title":"pull_request_templateOptional "},{"location":"python/pdk_projen/API/#pull_request_template_contentsoptional","text":"pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template.","title":"pull_request_template_contentsOptional "},{"location":"python/pdk_projen/API/#releaseoptional","text":"release : bool Type: bool Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"python/pdk_projen/API/#release_to_npmoptional","text":"release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced.","title":"release_to_npmOptional "},{"location":"python/pdk_projen/API/#release_workflowoptional","text":"Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~release_workflow~~Optional "},{"location":"python/pdk_projen/API/#workflow_bootstrap_stepsoptional","text":"workflow_bootstrap_steps : typing . List [ typing . Any ] Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflow_bootstrap_stepsOptional "},{"location":"python/pdk_projen/API/#workflow_git_identityoptional","text":"workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflow_git_identityOptional "},{"location":"python/pdk_projen/API/#workflow_node_versionoptional","text":"workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflow_node_versionOptional "},{"location":"python/pdk_projen/API/#disable_tsconfigoptional","text":"disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disable_tsconfigOptional "},{"location":"python/pdk_projen/API/#docgenoptional","text":"docgen : bool Type: bool Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"python/pdk_projen/API/#docs_directoryoptional","text":"docs_directory : str Type: str Default: \"docs\" Docs directory.","title":"docs_directoryOptional "},{"location":"python/pdk_projen/API/#entrypoint_typesoptional","text":"entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypoint_typesOptional "},{"location":"python/pdk_projen/API/#eslintoptional","text":"eslint : bool Type: bool Default: true Setup eslint.","title":"eslintOptional "},{"location":"python/pdk_projen/API/#eslint_optionsoptional","text":"eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslint_optionsOptional "},{"location":"python/pdk_projen/API/#libdiroptional","text":"libdir : str Type: str Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"python/pdk_projen/API/#projenrc_tsoptional","text":"projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrc_tsOptional "},{"location":"python/pdk_projen/API/#projenrc_ts_optionsoptional","text":"projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrc_ts_optionsOptional "},{"location":"python/pdk_projen/API/#sample_codeoptional","text":"sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sample_codeOptional "},{"location":"python/pdk_projen/API/#srcdiroptional","text":"srcdir : str Type: str Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"python/pdk_projen/API/#testdiroptional","text":"testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"python/pdk_projen/API/#tsconfigoptional","text":"tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"python/pdk_projen/API/#tsconfig_devoptional","text":"tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfig_devOptional "},{"location":"python/pdk_projen/API/#tsconfig_dev_fileoptional","text":"tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfig_dev_fileOptional "},{"location":"python/pdk_projen/API/#typescript_versionoptional","text":"typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescript_versionOptional "},{"location":"python/pdk_projen/API/#nx_ignore_patternsoptional","text":"nx_ignore_patterns : typing . List [ str ] Type: typing.List[str] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore","title":"nx_ignore_patternsOptional "},{"location":"python/pdk_projen/API/#target_dependenciesoptional","text":"target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] Type: typing.Mapping[typing.List[ TargetDependency ]] Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies","title":"target_dependenciesOptional "},{"location":"python/pdk_projen/API/#targetdependency","text":"Represents an NX Target Dependency.","title":"TargetDependency "},{"location":"python/pdk_projen/API/#initializer_1","text":"from aws - prototyping - sdk import pdk_projen pdk_projen . TargetDependency ( projects : TargetDependencyProject , target : str )","title":"Initializer "},{"location":"python/pdk_projen/API/#properties_1","text":"Name Type Description projects TargetDependencyProject Target dependencies. target str Projen target i.e: build, test, etc.","title":"Properties "},{"location":"python/pdk_projen/API/#projectsrequired","text":"projects : TargetDependencyProject Type: TargetDependencyProject Target dependencies.","title":"projectsRequired "},{"location":"python/pdk_projen/API/#targetrequired","text":"target : str Type: str Projen target i.e: build, test, etc.","title":"targetRequired "},{"location":"python/pdk_projen/API/#classes","text":"","title":"Classes "},{"location":"python/pdk_projen/API/#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"python/pdk_projen/API/#initializers","text":"from aws - prototyping - sdk import pdk_projen pdk_projen . NxMonorepoProject ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , nx_ignore_patterns : typing . List [ str ] = None , target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] = None ) Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. nx_ignore_patterns typing.List[str] List of patterns to include in the .nxignore file. target_dependencies typing.Mapping[typing.List[ TargetDependency ]] Configuration for NX TargetDependencies.","title":"Initializers "},{"location":"python/pdk_projen/API/#namerequired_1","text":"Type: str Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"python/pdk_projen/API/#loggingoptional_1","text":"Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"python/pdk_projen/API/#outdiroptional_1","text":"Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"python/pdk_projen/API/#parentoptional_1","text":"Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#projen_commandoptional_1","text":"Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projen_commandOptional "},{"location":"python/pdk_projen/API/#projenrc_jsonoptional_1","text":"Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrc_jsonOptional "},{"location":"python/pdk_projen/API/#projenrc_json_optionsoptional_1","text":"Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrc_json_optionsOptional "},{"location":"python/pdk_projen/API/#auto_approve_optionsoptional_1","text":"Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"auto_approve_optionsOptional "},{"location":"python/pdk_projen/API/#auto_merge_optionsoptional_1","text":"Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"auto_merge_optionsOptional "},{"location":"python/pdk_projen/API/#clobberoptional_1","text":"Type: bool Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_1","text":"Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_1","text":"Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#github_optionsoptional_1","text":"Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"github_optionsOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_1","text":"Type: bool Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#mergifyoptional_1","text":"Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"python/pdk_projen/API/#mergify_optionsoptional_1","text":"Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergify_options~~Optional "},{"location":"python/pdk_projen/API/#project_typeoptional_1","text":"Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~project_type~~Optional "},{"location":"python/pdk_projen/API/#projen_token_secretoptional_1","text":"Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projen_token_secretOptional "},{"location":"python/pdk_projen/API/#readmeoptional_1","text":"Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"python/pdk_projen/API/#staleoptional_1","text":"Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"python/pdk_projen/API/#stale_optionsoptional_1","text":"Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"stale_optionsOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_1","text":"Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#allow_library_dependenciesoptional_1","text":"Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allow_library_dependenciesOptional "},{"location":"python/pdk_projen/API/#author_emailoptional_1","text":"Type: str Author's e-mail.","title":"author_emailOptional "},{"location":"python/pdk_projen/API/#author_nameoptional_1","text":"Type: str Author's name.","title":"author_nameOptional "},{"location":"python/pdk_projen/API/#author_organizationoptional_1","text":"Type: bool Author's Organization.","title":"author_organizationOptional "},{"location":"python/pdk_projen/API/#author_urloptional_1","text":"Type: str Author's URL / Website.","title":"author_urlOptional "},{"location":"python/pdk_projen/API/#auto_detect_binoptional_1","text":"Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"auto_detect_binOptional "},{"location":"python/pdk_projen/API/#binoptional_1","text":"Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"python/pdk_projen/API/#bugs_emailoptional_1","text":"Type: str The email address to which issues should be reported.","title":"bugs_emailOptional "},{"location":"python/pdk_projen/API/#bugs_urloptional_1","text":"Type: str The url to your project's issue tracker.","title":"bugs_urlOptional "},{"location":"python/pdk_projen/API/#bundled_depsoptional_1","text":"Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundled_depsOptional "},{"location":"python/pdk_projen/API/#code_artifact_optionsoptional_1","text":"Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"code_artifact_optionsOptional "},{"location":"python/pdk_projen/API/#depsoptional_1","text":"Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_1","text":"Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#dev_depsoptional_1","text":"Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"dev_depsOptional "},{"location":"python/pdk_projen/API/#entrypointoptional_1","text":"Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"python/pdk_projen/API/#homepageoptional_1","text":"Type: str Package's Homepage / Website.","title":"homepageOptional "},{"location":"python/pdk_projen/API/#keywordsoptional_1","text":"Type: typing.List[str] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"python/pdk_projen/API/#licenseoptional_1","text":"Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"python/pdk_projen/API/#licensedoptional_1","text":"Type: bool Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"python/pdk_projen/API/#max_node_versionoptional_1","text":"Type: str Default: no max Minimum node.js version to require via engines (inclusive).","title":"max_node_versionOptional "},{"location":"python/pdk_projen/API/#min_node_versionoptional_1","text":"Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"min_node_versionOptional "},{"location":"python/pdk_projen/API/#npm_accessoptional_1","text":"Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npm_accessOptional "},{"location":"python/pdk_projen/API/#npm_registryoptional_1","text":"Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npm_registry~~Optional "},{"location":"python/pdk_projen/API/#npm_registry_urloptional_1","text":"Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npm_registry_urlOptional "},{"location":"python/pdk_projen/API/#npm_token_secretoptional_1","text":"Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npm_token_secretOptional "},{"location":"python/pdk_projen/API/#package_manageroptional_1","text":"Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"package_managerOptional "},{"location":"python/pdk_projen/API/#package_nameoptional_1","text":"Type: str Default: defaults to project name The \"name\" in package.json.","title":"package_nameOptional "},{"location":"python/pdk_projen/API/#peer_dependency_optionsoptional_1","text":"Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peer_dependency_optionsOptional "},{"location":"python/pdk_projen/API/#peer_depsoptional_1","text":"Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peer_depsOptional "},{"location":"python/pdk_projen/API/#repositoryoptional_1","text":"Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"python/pdk_projen/API/#repository_directoryoptional_1","text":"Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repository_directoryOptional "},{"location":"python/pdk_projen/API/#scriptsoptional_1","text":"Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"python/pdk_projen/API/#stabilityoptional_1","text":"Type: str Package's Stability.","title":"stabilityOptional "},{"location":"python/pdk_projen/API/#jsii_release_versionoptional_1","text":"Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsii_release_versionOptional "},{"location":"python/pdk_projen/API/#major_versionoptional_1","text":"Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"major_versionOptional "},{"location":"python/pdk_projen/API/#npm_dist_tagoptional_1","text":"Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npm_dist_tagOptional "},{"location":"python/pdk_projen/API/#post_build_stepsoptional_1","text":"Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow.","title":"post_build_stepsOptional "},{"location":"python/pdk_projen/API/#prereleaseoptional_1","text":"Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"python/pdk_projen/API/#publish_dry_runoptional_1","text":"Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publish_dry_runOptional "},{"location":"python/pdk_projen/API/#publish_tasksoptional_1","text":"Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publish_tasksOptional "},{"location":"python/pdk_projen/API/#release_branchesoptional_1","text":"Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"release_branchesOptional "},{"location":"python/pdk_projen/API/#release_every_commitoptional_1","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~release_every_commit~~Optional "},{"location":"python/pdk_projen/API/#release_failure_issueoptional_1","text":"Type: bool Default: false Create a github issue on every failed publishing task.","title":"release_failure_issueOptional "},{"location":"python/pdk_projen/API/#release_failure_issue_labeloptional_1","text":"Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"release_failure_issue_labelOptional "},{"location":"python/pdk_projen/API/#release_scheduleoptional_1","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~release_schedule~~Optional "},{"location":"python/pdk_projen/API/#release_tag_prefixoptional_1","text":"Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"release_tag_prefixOptional "},{"location":"python/pdk_projen/API/#release_triggeroptional_1","text":"Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"release_triggerOptional "},{"location":"python/pdk_projen/API/#release_workflow_nameoptional_1","text":"Type: str Default: \"Release\" The name of the default release workflow.","title":"release_workflow_nameOptional "},{"location":"python/pdk_projen/API/#release_workflow_setup_stepsoptional_1","text":"Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container.","title":"release_workflow_setup_stepsOptional "},{"location":"python/pdk_projen/API/#versionrc_optionsoptional_1","text":"Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrc_optionsOptional "},{"location":"python/pdk_projen/API/#workflow_container_imageoptional_1","text":"Type: str Default: default image Container image to use for GitHub workflows.","title":"workflow_container_imageOptional "},{"location":"python/pdk_projen/API/#workflow_runs_onoptional_1","text":"Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflow_runs_onOptional "},{"location":"python/pdk_projen/API/#default_release_branchrequired_1","text":"Type: str Default: \"main\" The name of the main release branch.","title":"default_release_branchRequired "},{"location":"python/pdk_projen/API/#artifacts_directoryoptional_1","text":"Type: str Default: \"dist\" A directory which will contain build artifacts.","title":"artifacts_directoryOptional "},{"location":"python/pdk_projen/API/#auto_approve_projen_upgradesoptional_1","text":"Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_projen_upgradesOptional "},{"location":"python/pdk_projen/API/#auto_approve_upgradesoptional_1","text":"Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_upgradesOptional "},{"location":"python/pdk_projen/API/#build_workflowoptional_1","text":"Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"build_workflowOptional "},{"location":"python/pdk_projen/API/#build_workflow_triggersoptional_1","text":"Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"build_workflow_triggersOptional "},{"location":"python/pdk_projen/API/#bundler_optionsoptional_1","text":"Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundler_optionsOptional "},{"location":"python/pdk_projen/API/#code_covoptional_1","text":"Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"code_covOptional "},{"location":"python/pdk_projen/API/#code_cov_token_secretoptional_1","text":"Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"code_cov_token_secretOptional "},{"location":"python/pdk_projen/API/#copyright_owneroptional_1","text":"Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyright_ownerOptional "},{"location":"python/pdk_projen/API/#copyright_periodoptional_1","text":"Type: str Default: current year The copyright years to put in the LICENSE file.","title":"copyright_periodOptional "},{"location":"python/pdk_projen/API/#dependabotoptional_1","text":"Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"python/pdk_projen/API/#dependabot_optionsoptional_1","text":"Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabot_optionsOptional "},{"location":"python/pdk_projen/API/#deps_upgradeoptional_1","text":"Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"deps_upgradeOptional "},{"location":"python/pdk_projen/API/#deps_upgrade_optionsoptional_1","text":"Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"deps_upgrade_optionsOptional "},{"location":"python/pdk_projen/API/#gitignoreoptional_1","text":"Type: typing.List[str] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"python/pdk_projen/API/#jestoptional_1","text":"Type: bool Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"python/pdk_projen/API/#jest_optionsoptional_1","text":"Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jest_optionsOptional "},{"location":"python/pdk_projen/API/#mutable_buildoptional_1","text":"Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutable_buildOptional "},{"location":"python/pdk_projen/API/#npmignoreoptional_1","text":"Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"python/pdk_projen/API/#npmignore_enabledoptional_1","text":"Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignore_enabledOptional "},{"location":"python/pdk_projen/API/#packageoptional_1","text":"Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"python/pdk_projen/API/#prettieroptional_1","text":"Type: bool Default: false Setup prettier.","title":"prettierOptional "},{"location":"python/pdk_projen/API/#prettier_optionsoptional_1","text":"Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettier_optionsOptional "},{"location":"python/pdk_projen/API/#projen_dev_dependencyoptional_1","text":"Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projen_dev_dependencyOptional "},{"location":"python/pdk_projen/API/#projenrc_jsoptional_1","text":"Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrc_jsOptional "},{"location":"python/pdk_projen/API/#projenrc_js_optionsoptional_1","text":"Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrc_js_optionsOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_auto_mergeoptional_1","text":"Deprecated: use autoApproveProjenUpgrades . Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projen_upgrade_auto_merge~~Optional "},{"location":"python/pdk_projen/API/#projen_upgrade_scheduleoptional_1","text":"Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projen_upgrade_scheduleOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_secretoptional_1","text":"Deprecated: use githubTokenSecret instead. Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projen_upgrade_secret~~Optional "},{"location":"python/pdk_projen/API/#projen_versionoptional_1","text":"Type: str Default: Defaults to the latest version. Version of projen to install.","title":"projen_versionOptional "},{"location":"python/pdk_projen/API/#pull_request_templateoptional_1","text":"Type: bool Default: true Include a GitHub pull request template.","title":"pull_request_templateOptional "},{"location":"python/pdk_projen/API/#pull_request_template_contentsoptional_1","text":"Type: typing.List[str] Default: default content The contents of the pull request template.","title":"pull_request_template_contentsOptional "},{"location":"python/pdk_projen/API/#releaseoptional_1","text":"Type: bool Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"python/pdk_projen/API/#release_to_npmoptional_1","text":"Type: bool Default: false Automatically release to npm when new versions are introduced.","title":"release_to_npmOptional "},{"location":"python/pdk_projen/API/#release_workflowoptional_1","text":"Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~release_workflow~~Optional "},{"location":"python/pdk_projen/API/#workflow_bootstrap_stepsoptional_1","text":"Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflow_bootstrap_stepsOptional "},{"location":"python/pdk_projen/API/#workflow_git_identityoptional_1","text":"Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflow_git_identityOptional "},{"location":"python/pdk_projen/API/#workflow_node_versionoptional_1","text":"Type: str Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflow_node_versionOptional "},{"location":"python/pdk_projen/API/#disable_tsconfigoptional_1","text":"Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disable_tsconfigOptional "},{"location":"python/pdk_projen/API/#docgenoptional_1","text":"Type: bool Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"python/pdk_projen/API/#docs_directoryoptional_1","text":"Type: str Default: \"docs\" Docs directory.","title":"docs_directoryOptional "},{"location":"python/pdk_projen/API/#entrypoint_typesoptional_1","text":"Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypoint_typesOptional "},{"location":"python/pdk_projen/API/#eslintoptional_1","text":"Type: bool Default: true Setup eslint.","title":"eslintOptional "},{"location":"python/pdk_projen/API/#eslint_optionsoptional_1","text":"Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslint_optionsOptional "},{"location":"python/pdk_projen/API/#libdiroptional_1","text":"Type: str Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"python/pdk_projen/API/#projenrc_tsoptional_1","text":"Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrc_tsOptional "},{"location":"python/pdk_projen/API/#projenrc_ts_optionsoptional_1","text":"Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrc_ts_optionsOptional "},{"location":"python/pdk_projen/API/#sample_codeoptional_1","text":"Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sample_codeOptional "},{"location":"python/pdk_projen/API/#srcdiroptional_1","text":"Type: str Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"python/pdk_projen/API/#testdiroptional_1","text":"Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"python/pdk_projen/API/#tsconfigoptional_1","text":"Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"python/pdk_projen/API/#tsconfig_devoptional_1","text":"Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfig_devOptional "},{"location":"python/pdk_projen/API/#tsconfig_dev_fileoptional_1","text":"Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfig_dev_fileOptional "},{"location":"python/pdk_projen/API/#typescript_versionoptional_1","text":"Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescript_versionOptional "},{"location":"python/pdk_projen/API/#nx_ignore_patternsoptional_1","text":"Type: typing.List[str] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore","title":"nx_ignore_patternsOptional "},{"location":"python/pdk_projen/API/#target_dependenciesoptional_1","text":"Type: typing.Mapping[typing.List[ TargetDependency ]] Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies","title":"target_dependenciesOptional "},{"location":"python/pdk_projen/API/#methods","text":"Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_implicit_dependency Create an implicit dependency between two Project's.","title":"Methods "},{"location":"python/pdk_projen/API/#add_exclude_from_cleanup","text":"def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"add_exclude_from_cleanup "},{"location":"python/pdk_projen/API/#globsrequired","text":"Type: str The glob patterns to match.","title":"globsRequired "},{"location":"python/pdk_projen/API/#add_git_ignore","text":"def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern.","title":"add_git_ignore "},{"location":"python/pdk_projen/API/#patternrequired","text":"Type: str The glob pattern to ignore.","title":"patternRequired "},{"location":"python/pdk_projen/API/#add_package_ignore","text":"def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"add_package_ignore "},{"location":"python/pdk_projen/API/#patternrequired_1","text":"Type: str","title":"patternRequired "},{"location":"python/pdk_projen/API/#add_task","text":"def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name.","title":"add_task "},{"location":"python/pdk_projen/API/#namerequired_2","text":"Type: str The task name to add.","title":"nameRequired "},{"location":"python/pdk_projen/API/#conditionoptional","text":"Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped.","title":"conditionOptional "},{"location":"python/pdk_projen/API/#cwdoptional","text":"Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step).","title":"cwdOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_2","text":"Type: str Default: the task name The description of this build command.","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#envoptional","text":"Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") .","title":"envOptional "},{"location":"python/pdk_projen/API/#required_envoptional","text":"Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined.","title":"required_envOptional "},{"location":"python/pdk_projen/API/#execoptional","text":"Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task.","title":"execOptional "},{"location":"python/pdk_projen/API/#add_tip","text":"def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis.","title":"~~add_tip~~ "},{"location":"python/pdk_projen/API/#messagerequired","text":"Type: str The message.","title":"messageRequired "},{"location":"python/pdk_projen/API/#annotate_generated","text":"def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotate_generated "},{"location":"python/pdk_projen/API/#globrequired","text":"Type: str the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"python/pdk_projen/API/#post_synthesize","text":"def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed.","title":"post_synthesize "},{"location":"python/pdk_projen/API/#pre_synthesize","text":"def pre_synthesize () -> None Called before all components are synthesized.","title":"pre_synthesize "},{"location":"python/pdk_projen/API/#remove_task","text":"def remove_task ( name : str ) -> Task Removes a task from a project.","title":"remove_task "},{"location":"python/pdk_projen/API/#namerequired_3","text":"Type: str The name of the task to remove.","title":"nameRequired "},{"location":"python/pdk_projen/API/#run_task_command","text":"def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK .","title":"run_task_command "},{"location":"python/pdk_projen/API/#taskrequired","text":"Type: projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"python/pdk_projen/API/#synth","text":"def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"python/pdk_projen/API/#try_find_file","text":"def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects.","title":"try_find_file "},{"location":"python/pdk_projen/API/#file_pathrequired","text":"Type: str The file path. If this path is relative, it will be resolved from the root of this project.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#try_find_json_file","text":"def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name.","title":"~~try_find_json_file~~ "},{"location":"python/pdk_projen/API/#file_pathrequired_1","text":"Type: str The file path.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#try_find_object_file","text":"def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"try_find_object_file "},{"location":"python/pdk_projen/API/#file_pathrequired_2","text":"Type: str The file path.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#add_bins","text":"def add_bins ( bins : typing . Mapping [ str ] ) -> None","title":"add_bins "},{"location":"python/pdk_projen/API/#binsrequired","text":"Type: typing.Mapping[str]","title":"binsRequired "},{"location":"python/pdk_projen/API/#add_bundled_deps","text":"def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json .","title":"add_bundled_deps "},{"location":"python/pdk_projen/API/#depsrequired","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_compile_command","text":"def add_compile_command ( commands : str ) -> None DEPRECATED.","title":"~~add_compile_command~~ "},{"location":"python/pdk_projen/API/#commandsrequired","text":"Type: str","title":"commandsRequired "},{"location":"python/pdk_projen/API/#add_deps","text":"def add_deps ( deps : str ) -> None Defines normal dependencies.","title":"add_deps "},{"location":"python/pdk_projen/API/#depsrequired_1","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_dev_deps","text":"def add_dev_deps ( deps : str ) -> None Defines development/test dependencies.","title":"add_dev_deps "},{"location":"python/pdk_projen/API/#depsrequired_2","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_fields","text":"def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json .","title":"add_fields "},{"location":"python/pdk_projen/API/#fieldsrequired","text":"Type: typing.Mapping[typing.Any] The fields to set.","title":"fieldsRequired "},{"location":"python/pdk_projen/API/#add_keywords","text":"def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated).","title":"add_keywords "},{"location":"python/pdk_projen/API/#keywordsrequired","text":"Type: str The keywords to add.","title":"keywordsRequired "},{"location":"python/pdk_projen/API/#add_peer_deps","text":"def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers.","title":"add_peer_deps "},{"location":"python/pdk_projen/API/#depsrequired_3","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_test_command","text":"def add_test_command ( commands : str ) -> None DEPRECATED.","title":"~~add_test_command~~ "},{"location":"python/pdk_projen/API/#commandsrequired_1","text":"Type: str","title":"commandsRequired "},{"location":"python/pdk_projen/API/#has_script","text":"def has_script ( name : str ) -> bool Indicates if a script by the name name is defined.","title":"has_script "},{"location":"python/pdk_projen/API/#namerequired_4","text":"Type: str The name of the script.","title":"nameRequired "},{"location":"python/pdk_projen/API/#remove_script","text":"def remove_script ( name : str ) -> None Removes the npm script (always successful).","title":"remove_script "},{"location":"python/pdk_projen/API/#namerequired_5","text":"Type: str The name of the script.","title":"nameRequired "},{"location":"python/pdk_projen/API/#render_workflow_setup","text":"def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow.","title":"render_workflow_setup "},{"location":"python/pdk_projen/API/#mutableoptional","text":"Type: bool Default: false Should the pacakge lockfile be updated?","title":"mutableOptional "},{"location":"python/pdk_projen/API/#set_script","text":"def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script.","title":"set_script "},{"location":"python/pdk_projen/API/#namerequired_6","text":"Type: str The script name.","title":"nameRequired "},{"location":"python/pdk_projen/API/#commandrequired","text":"Type: str The command to execute.","title":"commandRequired "},{"location":"python/pdk_projen/API/#add_implicit_dependency","text":"def add_implicit_dependency ( dependent : Project , dependee : Project ) -> None Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example.","title":"add_implicit_dependency "},{"location":"python/pdk_projen/API/#dependentrequired","text":"Type: projen.Project project you want to have the dependency.","title":"dependentRequired "},{"location":"python/pdk_projen/API/#dependeerequired","text":"Type: projen.Project project you wish to depend on.","title":"dependeeRequired "},{"location":"python/pdk_projen/API/#properties_2","text":"Name Type Description build_task projen.Task No description. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Automatic PR merges. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description.","title":"Properties "},{"location":"python/pdk_projen/API/#build_taskrequired","text":"build_task : Task Type: projen.Task","title":"build_taskRequired "},{"location":"python/pdk_projen/API/#compile_taskrequired","text":"compile_task : Task Type: projen.Task","title":"compile_taskRequired "},{"location":"python/pdk_projen/API/#componentsrequired","text":"components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project.","title":"componentsRequired "},{"location":"python/pdk_projen/API/#depsrequired_4","text":"deps : Dependencies Type: projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"python/pdk_projen/API/#ejectedrequired","text":"ejected : bool Type: bool Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"python/pdk_projen/API/#filesrequired","text":"files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project.","title":"filesRequired "},{"location":"python/pdk_projen/API/#gitattributesrequired","text":"gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"python/pdk_projen/API/#gitignorerequired","text":"gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"python/pdk_projen/API/#loggerrequired","text":"logger : Logger Type: projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"python/pdk_projen/API/#namerequired_7","text":"name : str Type: str Project name.","title":"nameRequired "},{"location":"python/pdk_projen/API/#outdirrequired","text":"outdir : str Type: str Absolute output directory of this project.","title":"outdirRequired "},{"location":"python/pdk_projen/API/#package_taskrequired","text":"package_task : Task Type: projen.Task","title":"package_taskRequired "},{"location":"python/pdk_projen/API/#post_compile_taskrequired","text":"post_compile_task : Task Type: projen.Task","title":"post_compile_taskRequired "},{"location":"python/pdk_projen/API/#pre_compile_taskrequired","text":"pre_compile_task : Task Type: projen.Task","title":"pre_compile_taskRequired "},{"location":"python/pdk_projen/API/#project_buildrequired","text":"project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project.","title":"project_buildRequired "},{"location":"python/pdk_projen/API/#projen_commandrequired","text":"projen_command : str Type: str The command to use in order to run the projen CLI.","title":"projen_commandRequired "},{"location":"python/pdk_projen/API/#rootrequired","text":"root : Project Type: projen.Project The root project.","title":"rootRequired "},{"location":"python/pdk_projen/API/#tasksrequired","text":"tasks : Tasks Type: projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"python/pdk_projen/API/#test_taskrequired","text":"test_task : Task Type: projen.Task","title":"test_taskRequired "},{"location":"python/pdk_projen/API/#default_taskoptional","text":"default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"default_taskOptional "},{"location":"python/pdk_projen/API/#init_projectoptional","text":"init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"init_projectOptional "},{"location":"python/pdk_projen/API/#parentoptional_2","text":"parent : Project Type: projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#project_typerequired","text":"project_type : ProjectType Type: projen.ProjectType","title":"project_typeRequired "},{"location":"python/pdk_projen/API/#auto_approveoptional","text":"auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project.","title":"auto_approveOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_2","text":"dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_2","text":"github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_2","text":"gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_2","text":"vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#allow_library_dependenciesrequired","text":"Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool","title":"~~allow_library_dependencies~~Required "},{"location":"python/pdk_projen/API/#artifacts_directoryrequired","text":"artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg .","title":"artifacts_directoryRequired "},{"location":"python/pdk_projen/API/#artifacts_javascript_directoryrequired","text":"artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ).","title":"artifacts_javascript_directoryRequired "},{"location":"python/pdk_projen/API/#bundlerrequired","text":"bundler : Bundler Type: projen.javascript.Bundler","title":"bundlerRequired "},{"location":"python/pdk_projen/API/#entrypointrequired","text":"Deprecated: use package.entrypoint entrypoint : str Type: str","title":"~~entrypoint~~Required "},{"location":"python/pdk_projen/API/#manifestrequired","text":"Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any","title":"~~manifest~~Required "},{"location":"python/pdk_projen/API/#packagerequired","text":"package : NodePackage Type: projen.javascript.NodePackage API for managing the node package.","title":"packageRequired "},{"location":"python/pdk_projen/API/#package_managerrequired","text":"Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use.","title":"~~package_manager~~Required "},{"location":"python/pdk_projen/API/#run_script_commandrequired","text":"run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager).","title":"run_script_commandRequired "},{"location":"python/pdk_projen/API/#auto_mergeoptional","text":"auto_merge : AutoMerge Type: projen.github.AutoMerge Automatic PR merges.","title":"auto_mergeOptional "},{"location":"python/pdk_projen/API/#build_workflowoptional_2","text":"build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled.","title":"build_workflowOptional "},{"location":"python/pdk_projen/API/#build_workflow_job_idoptional","text":"build_workflow_job_id : str Type: str The job ID of the build workflow.","title":"build_workflow_job_idOptional "},{"location":"python/pdk_projen/API/#jestoptional_2","text":"jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled).","title":"jestOptional "},{"location":"python/pdk_projen/API/#max_node_versionoptional_2","text":"max_node_version : str Type: str Maximum node version required by this pacakge.","title":"max_node_versionOptional "},{"location":"python/pdk_projen/API/#min_node_versionoptional_2","text":"min_node_version : str Type: str Minimum node.js version required by this package.","title":"min_node_versionOptional "},{"location":"python/pdk_projen/API/#npmignoreoptional_2","text":"npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file.","title":"npmignoreOptional "},{"location":"python/pdk_projen/API/#prettieroptional_2","text":"prettier : Prettier Type: projen.javascript.Prettier","title":"prettierOptional "},{"location":"python/pdk_projen/API/#publisheroptional","text":"Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow.","title":"~~publisher~~Optional "},{"location":"python/pdk_projen/API/#releaseoptional_2","text":"release : Release Type: projen.release.Release Release management.","title":"releaseOptional "},{"location":"python/pdk_projen/API/#upgrade_workflowoptional","text":"upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow.","title":"upgrade_workflowOptional "},{"location":"python/pdk_projen/API/#docs_directoryrequired","text":"docs_directory : str Type: str","title":"docs_directoryRequired "},{"location":"python/pdk_projen/API/#libdirrequired","text":"libdir : str Type: str The directory in which compiled .js files reside.","title":"libdirRequired "},{"location":"python/pdk_projen/API/#srcdirrequired","text":"srcdir : str Type: str The directory in which the .ts sources reside.","title":"srcdirRequired "},{"location":"python/pdk_projen/API/#testdirrequired","text":"testdir : str Type: str The directory in which tests reside.","title":"testdirRequired "},{"location":"python/pdk_projen/API/#tsconfig_devrequired","text":"tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen).","title":"tsconfig_devRequired "},{"location":"python/pdk_projen/API/#watch_taskrequired","text":"watch_task : Task Type: projen.Task The \"watch\" task.","title":"watch_taskRequired "},{"location":"python/pdk_projen/API/#docgenoptional_2","text":"docgen : bool Type: bool","title":"docgenOptional "},{"location":"python/pdk_projen/API/#eslintoptional_2","text":"eslint : Eslint Type: projen.javascript.Eslint","title":"eslintOptional "},{"location":"python/pdk_projen/API/#tsconfigoptional_2","text":"tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig","title":"tsconfigOptional "},{"location":"python/pdk_projen/API/#tsconfig_eslintoptional","text":"tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig","title":"tsconfig_eslintOptional "},{"location":"python/pdk_projen/API/#constants","text":"Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"python/pdk_projen/API/#default_taskrequired","text":"DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"python/pdk_projen/API/#enums","text":"","title":"Enums "},{"location":"python/pdk_projen/API/#targetdependencyproject","text":"Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency.","title":"TargetDependencyProject "},{"location":"python/pdk_projen/API/#self","text":"Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages.","title":"SELF "},{"location":"python/pdk_projen/API/#dependencies","text":"Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"DEPENDENCIES "},{"location":"typescript/pdk_pipeline/API/","text":"pdk_pipeline TODO API Reference Structs GreeterProps Initializer import { pdk_pipeline } from 'aws-prototyping-sdk' const greeterProps : pdk_pipeline.GreeterProps = { ... } Properties Name Type Description greetee string No description. greetee Required public readonly greetee : string ; Type: string Classes Greeter Example class. Initializers import { pdk_pipeline } from 'aws-prototyping-sdk' new pdk_pipeline . Greeter ( props : GreeterProps ) Name Type Description props GreeterProps No description. props Required Type: GreeterProps Methods Name Description greet No description. greet public greet () : string","title":"API"},{"location":"typescript/pdk_pipeline/API/#pdk_pipeline","text":"TODO","title":"pdk_pipeline"},{"location":"typescript/pdk_pipeline/API/#api-reference","text":"","title":"API Reference "},{"location":"typescript/pdk_pipeline/API/#structs","text":"","title":"Structs "},{"location":"typescript/pdk_pipeline/API/#greeterprops","text":"","title":"GreeterProps "},{"location":"typescript/pdk_pipeline/API/#initializer","text":"import { pdk_pipeline } from 'aws-prototyping-sdk' const greeterProps : pdk_pipeline.GreeterProps = { ... }","title":"Initializer "},{"location":"typescript/pdk_pipeline/API/#properties","text":"Name Type Description greetee string No description.","title":"Properties "},{"location":"typescript/pdk_pipeline/API/#greeteerequired","text":"public readonly greetee : string ; Type: string","title":"greeteeRequired "},{"location":"typescript/pdk_pipeline/API/#classes","text":"","title":"Classes "},{"location":"typescript/pdk_pipeline/API/#greeter","text":"Example class.","title":"Greeter "},{"location":"typescript/pdk_pipeline/API/#initializers","text":"import { pdk_pipeline } from 'aws-prototyping-sdk' new pdk_pipeline . Greeter ( props : GreeterProps ) Name Type Description props GreeterProps No description.","title":"Initializers "},{"location":"typescript/pdk_pipeline/API/#propsrequired","text":"Type: GreeterProps","title":"propsRequired "},{"location":"typescript/pdk_pipeline/API/#methods","text":"Name Description greet No description.","title":"Methods "},{"location":"typescript/pdk_pipeline/API/#greet","text":"public greet () : string","title":"greet "},{"location":"typescript/pdk_projen/API/","text":"pdk_projen This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions. Prerequisites Ensure you have the following packages installed globally: node > 14 (or use nvm to install) Getting Started To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds. nx-monorepo The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc. Adding Subprojects Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website . Example 1 - Explicit dependencies NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time. Example 2 - Implicit dependencies Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order. FAQ I have added a project in .projenrc.ts but it isn't synthesizing? Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo. How do I visualize my dependencies? From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related. I have updated a dependency, however the build or graph viz is not detecting any changes. Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache . How do I build everything in my monorepo without a specific target package? npx nx run-many --target=build --all I am running a different target, however the dependencies are not being executed. By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects. My subproject is not caching even though I haven't changed anything. This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo. API Reference Structs NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer import { pdk_projen } from 'aws-prototyping-sdk' const nxMonorepoProjectOptions : pdk_projen.NxMonorepoProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveProjenUpgrades boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule string[] Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret string Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps any[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. nxIgnorePatterns string[] List of patterns to include in the .nxignore file. targetDependencies {[ key: string ]: TargetDependency []} Configuration for NX TargetDependencies. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Author's Organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveProjenUpgrades Optional public readonly autoApproveProjenUpgrades : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projenUpgradeAutoMerge ~~ Optional Deprecated: use autoApproveProjenUpgrades . public readonly projenUpgradeAutoMerge : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projenUpgradeSchedule Optional public readonly projenUpgradeSchedule : string []; Type: string[] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projenUpgradeSecret ~~ Optional Deprecated: use githubTokenSecret instead. public readonly projenUpgradeSecret : string ; Type: string Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : any []; Type: any[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). nxIgnorePatterns Optional public readonly nxIgnorePatterns : string []; Type: string[] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore targetDependencies Optional public readonly targetDependencies : {[ key : string ] : TargetDependency []}; Type: {[ key: string ]: TargetDependency []} Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies TargetDependency Represents an NX Target Dependency. Initializer import { pdk_projen } from 'aws-prototyping-sdk' const targetDependency : pdk_projen.TargetDependency = { ... } Properties Name Type Description projects TargetDependencyProject Target dependencies. target string Projen target i.e: build, test, etc. projects Required public readonly projects : TargetDependencyProject ; Type: TargetDependencyProject Target dependencies. target Required public readonly target : string ; Type: string Projen target i.e: build, test, etc. Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . NxMonorepoProject ( options : NxMonorepoProjectOptions ) Name Type Description options NxMonorepoProjectOptions No description. options Required Type: NxMonorepoProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. addImplicitDependency public addImplicitDependency ( dependent : Project , dependee : Project ) : void Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: projen.Project project you want to have the dependency. dependee Required Type: projen.Project project you wish to depend on. Properties Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Automatic PR merges. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. buildTask Required public readonly buildTask : Task ; Type: projen.Task compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Automatic PR merges. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums TargetDependencyProject Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency. SELF Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages. DEPENDENCIES Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"API"},{"location":"typescript/pdk_projen/API/#pdk_projen","text":"This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions.","title":"pdk_projen"},{"location":"typescript/pdk_projen/API/#prerequisites","text":"Ensure you have the following packages installed globally: node > 14 (or use nvm to install)","title":"Prerequisites"},{"location":"typescript/pdk_projen/API/#getting-started","text":"To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds.","title":"Getting Started"},{"location":"typescript/pdk_projen/API/#nx-monorepo","text":"The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc.","title":"nx-monorepo"},{"location":"typescript/pdk_projen/API/#adding-subprojects","text":"Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website .","title":"Adding Subprojects"},{"location":"typescript/pdk_projen/API/#example-1-explicit-dependencies","text":"NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time.","title":"Example 1 - Explicit dependencies"},{"location":"typescript/pdk_projen/API/#example-2-implicit-dependencies","text":"Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order.","title":"Example 2 - Implicit dependencies"},{"location":"typescript/pdk_projen/API/#faq","text":"","title":"FAQ"},{"location":"typescript/pdk_projen/API/#i-have-added-a-project-in-projenrcts-but-it-isnt-synthesizing","text":"Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo.","title":"I have added a project in .projenrc.ts but it isn't synthesizing?"},{"location":"typescript/pdk_projen/API/#how-do-i-visualize-my-dependencies","text":"From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related.","title":"How do I visualize my dependencies?"},{"location":"typescript/pdk_projen/API/#i-have-updated-a-dependency-however-the-build-or-graph-viz-is-not-detecting-any-changes","text":"Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache .","title":"I have updated a dependency, however the build or graph viz is not detecting any changes."},{"location":"typescript/pdk_projen/API/#how-do-i-build-everything-in-my-monorepo-without-a-specific-target-package","text":"npx nx run-many --target=build --all","title":"How do I build everything in my monorepo without a specific target package?"},{"location":"typescript/pdk_projen/API/#i-am-running-a-different-target-however-the-dependencies-are-not-being-executed","text":"By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects.","title":"I am running a different target, however the dependencies are not being executed."},{"location":"typescript/pdk_projen/API/#my-subproject-is-not-caching-even-though-i-havent-changed-anything","text":"This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo.","title":"My subproject is not caching even though I haven't changed anything."},{"location":"typescript/pdk_projen/API/#api-reference","text":"","title":"API Reference "},{"location":"typescript/pdk_projen/API/#structs","text":"","title":"Structs "},{"location":"typescript/pdk_projen/API/#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"typescript/pdk_projen/API/#initializer","text":"import { pdk_projen } from 'aws-prototyping-sdk' const nxMonorepoProjectOptions : pdk_projen.NxMonorepoProjectOptions = { ... }","title":"Initializer "},{"location":"typescript/pdk_projen/API/#properties","text":"Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveProjenUpgrades boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule string[] Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret string Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps any[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. nxIgnorePatterns string[] List of patterns to include in the .nxignore file. targetDependencies {[ key: string ]: TargetDependency []} Configuration for NX TargetDependencies.","title":"Properties "},{"location":"typescript/pdk_projen/API/#namerequired","text":"public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#loggingoptional","text":"public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"typescript/pdk_projen/API/#outdiroptional","text":"public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"typescript/pdk_projen/API/#parentoptional","text":"public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projencommandoptional","text":"public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptional","text":"public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptionsoptional","text":"public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"typescript/pdk_projen/API/#autoapproveoptionsoptional","text":"public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"typescript/pdk_projen/API/#automergeoptionsoptional","text":"public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"typescript/pdk_projen/API/#clobberoptional","text":"public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional","text":"public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional","text":"public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#githuboptionsoptional","text":"public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional","text":"public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#mergifyoptional","text":"Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"typescript/pdk_projen/API/#mergifyoptionsoptional","text":"Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"typescript/pdk_projen/API/#projecttypeoptional","text":"Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"typescript/pdk_projen/API/#projentokensecretoptional","text":"public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#readmeoptional","text":"public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"typescript/pdk_projen/API/#staleoptional","text":"public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"typescript/pdk_projen/API/#staleoptionsoptional","text":"public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional","text":"public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#allowlibrarydependenciesoptional","text":"public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allowLibraryDependenciesOptional "},{"location":"typescript/pdk_projen/API/#authoremailoptional","text":"public readonly authorEmail : string ; Type: string Author's e-mail.","title":"authorEmailOptional "},{"location":"typescript/pdk_projen/API/#authornameoptional","text":"public readonly authorName : string ; Type: string Author's name.","title":"authorNameOptional "},{"location":"typescript/pdk_projen/API/#authororganizationoptional","text":"public readonly authorOrganization : boolean ; Type: boolean Author's Organization.","title":"authorOrganizationOptional "},{"location":"typescript/pdk_projen/API/#authorurloptional","text":"public readonly authorUrl : string ; Type: string Author's URL / Website.","title":"authorUrlOptional "},{"location":"typescript/pdk_projen/API/#autodetectbinoptional","text":"public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"autoDetectBinOptional "},{"location":"typescript/pdk_projen/API/#binoptional","text":"public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"typescript/pdk_projen/API/#bugsemailoptional","text":"public readonly bugsEmail : string ; Type: string The email address to which issues should be reported.","title":"bugsEmailOptional "},{"location":"typescript/pdk_projen/API/#bugsurloptional","text":"public readonly bugsUrl : string ; Type: string The url to your project's issue tracker.","title":"bugsUrlOptional "},{"location":"typescript/pdk_projen/API/#bundleddepsoptional","text":"public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundledDepsOptional "},{"location":"typescript/pdk_projen/API/#codeartifactoptionsoptional","text":"public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"codeArtifactOptionsOptional "},{"location":"typescript/pdk_projen/API/#depsoptional","text":"public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"typescript/pdk_projen/API/#descriptionoptional","text":"public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"typescript/pdk_projen/API/#devdepsoptional","text":"public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"devDepsOptional "},{"location":"typescript/pdk_projen/API/#entrypointoptional","text":"public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"typescript/pdk_projen/API/#homepageoptional","text":"public readonly homepage : string ; Type: string Package's Homepage / Website.","title":"homepageOptional "},{"location":"typescript/pdk_projen/API/#keywordsoptional","text":"public readonly keywords : string []; Type: string[] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"typescript/pdk_projen/API/#licenseoptional","text":"public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"typescript/pdk_projen/API/#licensedoptional","text":"public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"typescript/pdk_projen/API/#maxnodeversionoptional","text":"public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive).","title":"maxNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#minnodeversionoptional","text":"public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"minNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#npmaccessoptional","text":"public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npmAccessOptional "},{"location":"typescript/pdk_projen/API/#npmregistryoptional","text":"Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npmRegistry~~Optional "},{"location":"typescript/pdk_projen/API/#npmregistryurloptional","text":"public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npmRegistryUrlOptional "},{"location":"typescript/pdk_projen/API/#npmtokensecretoptional","text":"public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npmTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#packagemanageroptional","text":"public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"packageManagerOptional "},{"location":"typescript/pdk_projen/API/#packagenameoptional","text":"public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json.","title":"packageNameOptional "},{"location":"typescript/pdk_projen/API/#peerdependencyoptionsoptional","text":"public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peerDependencyOptionsOptional "},{"location":"typescript/pdk_projen/API/#peerdepsoptional","text":"public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peerDepsOptional "},{"location":"typescript/pdk_projen/API/#repositoryoptional","text":"public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"typescript/pdk_projen/API/#repositorydirectoryoptional","text":"public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repositoryDirectoryOptional "},{"location":"typescript/pdk_projen/API/#scriptsoptional","text":"public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"typescript/pdk_projen/API/#stabilityoptional","text":"public readonly stability : string ; Type: string Package's Stability.","title":"stabilityOptional "},{"location":"typescript/pdk_projen/API/#jsiireleaseversionoptional","text":"public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsiiReleaseVersionOptional "},{"location":"typescript/pdk_projen/API/#majorversionoptional","text":"public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"majorVersionOptional "},{"location":"typescript/pdk_projen/API/#npmdisttagoptional","text":"public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npmDistTagOptional "},{"location":"typescript/pdk_projen/API/#postbuildstepsoptional","text":"public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow.","title":"postBuildStepsOptional "},{"location":"typescript/pdk_projen/API/#prereleaseoptional","text":"public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"typescript/pdk_projen/API/#publishdryrunoptional","text":"public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publishDryRunOptional "},{"location":"typescript/pdk_projen/API/#publishtasksoptional","text":"public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publishTasksOptional "},{"location":"typescript/pdk_projen/API/#releasebranchesoptional","text":"public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"releaseBranchesOptional "},{"location":"typescript/pdk_projen/API/#releaseeverycommitoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~releaseEveryCommit~~Optional "},{"location":"typescript/pdk_projen/API/#releasefailureissueoptional","text":"public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task.","title":"releaseFailureIssueOptional "},{"location":"typescript/pdk_projen/API/#releasefailureissuelabeloptional","text":"public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"releaseFailureIssueLabelOptional "},{"location":"typescript/pdk_projen/API/#releasescheduleoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~releaseSchedule~~Optional "},{"location":"typescript/pdk_projen/API/#releasetagprefixoptional","text":"public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"releaseTagPrefixOptional "},{"location":"typescript/pdk_projen/API/#releasetriggeroptional","text":"public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"releaseTriggerOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflownameoptional","text":"public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow.","title":"releaseWorkflowNameOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflowsetupstepsoptional","text":"public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container.","title":"releaseWorkflowSetupStepsOptional "},{"location":"typescript/pdk_projen/API/#versionrcoptionsoptional","text":"public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrcOptionsOptional "},{"location":"typescript/pdk_projen/API/#workflowcontainerimageoptional","text":"public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows.","title":"workflowContainerImageOptional "},{"location":"typescript/pdk_projen/API/#workflowrunsonoptional","text":"public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflowRunsOnOptional "},{"location":"typescript/pdk_projen/API/#defaultreleasebranchrequired","text":"public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch.","title":"defaultReleaseBranchRequired "},{"location":"typescript/pdk_projen/API/#artifactsdirectoryoptional","text":"public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts.","title":"artifactsDirectoryOptional "},{"location":"typescript/pdk_projen/API/#autoapproveprojenupgradesoptional","text":"public readonly autoApproveProjenUpgrades : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveProjenUpgradesOptional "},{"location":"typescript/pdk_projen/API/#autoapproveupgradesoptional","text":"public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveUpgradesOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowoptional","text":"public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"buildWorkflowOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowtriggersoptional","text":"public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"buildWorkflowTriggersOptional "},{"location":"typescript/pdk_projen/API/#bundleroptionsoptional","text":"public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundlerOptionsOptional "},{"location":"typescript/pdk_projen/API/#codecovoptional","text":"public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"codeCovOptional "},{"location":"typescript/pdk_projen/API/#codecovtokensecretoptional","text":"public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"codeCovTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#copyrightowneroptional","text":"public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyrightOwnerOptional "},{"location":"typescript/pdk_projen/API/#copyrightperiodoptional","text":"public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file.","title":"copyrightPeriodOptional "},{"location":"typescript/pdk_projen/API/#dependabotoptional","text":"public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"typescript/pdk_projen/API/#dependabotoptionsoptional","text":"public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabotOptionsOptional "},{"location":"typescript/pdk_projen/API/#depsupgradeoptional","text":"public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"depsUpgradeOptional "},{"location":"typescript/pdk_projen/API/#depsupgradeoptionsoptional","text":"public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"depsUpgradeOptionsOptional "},{"location":"typescript/pdk_projen/API/#gitignoreoptional","text":"public readonly gitignore : string []; Type: string[] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"typescript/pdk_projen/API/#jestoptional","text":"public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"typescript/pdk_projen/API/#jestoptionsoptional","text":"public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jestOptionsOptional "},{"location":"typescript/pdk_projen/API/#mutablebuildoptional","text":"public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutableBuildOptional "},{"location":"typescript/pdk_projen/API/#npmignoreoptional","text":"Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"typescript/pdk_projen/API/#npmignoreenabledoptional","text":"public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignoreEnabledOptional "},{"location":"typescript/pdk_projen/API/#packageoptional","text":"public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"typescript/pdk_projen/API/#prettieroptional","text":"public readonly prettier : boolean ; Type: boolean Default: false Setup prettier.","title":"prettierOptional "},{"location":"typescript/pdk_projen/API/#prettieroptionsoptional","text":"public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettierOptionsOptional "},{"location":"typescript/pdk_projen/API/#projendevdependencyoptional","text":"public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projenDevDependencyOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsoptional","text":"public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrcJsOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsoptionsoptional","text":"public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrcJsOptionsOptional "},{"location":"typescript/pdk_projen/API/#projenupgradeautomergeoptional","text":"Deprecated: use autoApproveProjenUpgrades . public readonly projenUpgradeAutoMerge : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projenUpgradeAutoMerge~~Optional "},{"location":"typescript/pdk_projen/API/#projenupgradescheduleoptional","text":"public readonly projenUpgradeSchedule : string []; Type: string[] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projenUpgradeScheduleOptional "},{"location":"typescript/pdk_projen/API/#projenupgradesecretoptional","text":"Deprecated: use githubTokenSecret instead. public readonly projenUpgradeSecret : string ; Type: string Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projenUpgradeSecret~~Optional "},{"location":"typescript/pdk_projen/API/#projenversionoptional","text":"public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install.","title":"projenVersionOptional "},{"location":"typescript/pdk_projen/API/#pullrequesttemplateoptional","text":"public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template.","title":"pullRequestTemplateOptional "},{"location":"typescript/pdk_projen/API/#pullrequesttemplatecontentsoptional","text":"public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template.","title":"pullRequestTemplateContentsOptional "},{"location":"typescript/pdk_projen/API/#releaseoptional","text":"public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"typescript/pdk_projen/API/#releasetonpmoptional","text":"public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced.","title":"releaseToNpmOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflowoptional","text":"Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~releaseWorkflow~~Optional "},{"location":"typescript/pdk_projen/API/#workflowbootstrapstepsoptional","text":"public readonly workflowBootstrapSteps : any []; Type: any[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflowBootstrapStepsOptional "},{"location":"typescript/pdk_projen/API/#workflowgitidentityoptional","text":"public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflowGitIdentityOptional "},{"location":"typescript/pdk_projen/API/#workflownodeversionoptional","text":"public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflowNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#disabletsconfigoptional","text":"public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disableTsconfigOptional "},{"location":"typescript/pdk_projen/API/#docgenoptional","text":"public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"typescript/pdk_projen/API/#docsdirectoryoptional","text":"public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory.","title":"docsDirectoryOptional "},{"location":"typescript/pdk_projen/API/#entrypointtypesoptional","text":"public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypointTypesOptional "},{"location":"typescript/pdk_projen/API/#eslintoptional","text":"public readonly eslint : boolean ; Type: boolean Default: true Setup eslint.","title":"eslintOptional "},{"location":"typescript/pdk_projen/API/#eslintoptionsoptional","text":"public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslintOptionsOptional "},{"location":"typescript/pdk_projen/API/#libdiroptional","text":"public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"typescript/pdk_projen/API/#projenrctsoptional","text":"public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrcTsOptional "},{"location":"typescript/pdk_projen/API/#projenrctsoptionsoptional","text":"public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrcTsOptionsOptional "},{"location":"typescript/pdk_projen/API/#samplecodeoptional","text":"public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sampleCodeOptional "},{"location":"typescript/pdk_projen/API/#srcdiroptional","text":"public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"typescript/pdk_projen/API/#testdiroptional","text":"public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"typescript/pdk_projen/API/#tsconfigoptional","text":"public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"typescript/pdk_projen/API/#tsconfigdevoptional","text":"public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfigDevOptional "},{"location":"typescript/pdk_projen/API/#tsconfigdevfileoptional","text":"public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfigDevFileOptional "},{"location":"typescript/pdk_projen/API/#typescriptversionoptional","text":"public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescriptVersionOptional "},{"location":"typescript/pdk_projen/API/#nxignorepatternsoptional","text":"public readonly nxIgnorePatterns : string []; Type: string[] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore","title":"nxIgnorePatternsOptional "},{"location":"typescript/pdk_projen/API/#targetdependenciesoptional","text":"public readonly targetDependencies : {[ key : string ] : TargetDependency []}; Type: {[ key: string ]: TargetDependency []} Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies","title":"targetDependenciesOptional "},{"location":"typescript/pdk_projen/API/#targetdependency","text":"Represents an NX Target Dependency.","title":"TargetDependency "},{"location":"typescript/pdk_projen/API/#initializer_1","text":"import { pdk_projen } from 'aws-prototyping-sdk' const targetDependency : pdk_projen.TargetDependency = { ... }","title":"Initializer "},{"location":"typescript/pdk_projen/API/#properties_1","text":"Name Type Description projects TargetDependencyProject Target dependencies. target string Projen target i.e: build, test, etc.","title":"Properties "},{"location":"typescript/pdk_projen/API/#projectsrequired","text":"public readonly projects : TargetDependencyProject ; Type: TargetDependencyProject Target dependencies.","title":"projectsRequired "},{"location":"typescript/pdk_projen/API/#targetrequired","text":"public readonly target : string ; Type: string Projen target i.e: build, test, etc.","title":"targetRequired "},{"location":"typescript/pdk_projen/API/#classes","text":"","title":"Classes "},{"location":"typescript/pdk_projen/API/#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"typescript/pdk_projen/API/#initializers","text":"import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . NxMonorepoProject ( options : NxMonorepoProjectOptions ) Name Type Description options NxMonorepoProjectOptions No description.","title":"Initializers "},{"location":"typescript/pdk_projen/API/#optionsrequired","text":"Type: NxMonorepoProjectOptions","title":"optionsRequired "},{"location":"typescript/pdk_projen/API/#methods","text":"Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's.","title":"Methods "},{"location":"typescript/pdk_projen/API/#addexcludefromcleanup","text":"public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"addExcludeFromCleanup "},{"location":"typescript/pdk_projen/API/#globsrequired","text":"Type: string The glob patterns to match.","title":"globsRequired "},{"location":"typescript/pdk_projen/API/#addgitignore","text":"public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern.","title":"addGitIgnore "},{"location":"typescript/pdk_projen/API/#patternrequired","text":"Type: string The glob pattern to ignore.","title":"patternRequired "},{"location":"typescript/pdk_projen/API/#addpackageignore","text":"public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"addPackageIgnore "},{"location":"typescript/pdk_projen/API/#patternrequired_1","text":"Type: string","title":"patternRequired "},{"location":"typescript/pdk_projen/API/#addtask","text":"public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name.","title":"addTask "},{"location":"typescript/pdk_projen/API/#namerequired_1","text":"Type: string The task name to add.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#propsoptional","text":"Type: projen.TaskOptions Task properties.","title":"propsOptional "},{"location":"typescript/pdk_projen/API/#addtip","text":"public addTip ( message : string ) : void Prints a \"tip\" message during synthesis.","title":"~~addTip~~ "},{"location":"typescript/pdk_projen/API/#messagerequired","text":"Type: string The message.","title":"messageRequired "},{"location":"typescript/pdk_projen/API/#annotategenerated","text":"public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotateGenerated "},{"location":"typescript/pdk_projen/API/#globrequired","text":"Type: string the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"typescript/pdk_projen/API/#postsynthesize","text":"public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed.","title":"postSynthesize "},{"location":"typescript/pdk_projen/API/#presynthesize","text":"public preSynthesize () : void Called before all components are synthesized.","title":"preSynthesize "},{"location":"typescript/pdk_projen/API/#removetask","text":"public removeTask ( name : string ) : Task Removes a task from a project.","title":"removeTask "},{"location":"typescript/pdk_projen/API/#namerequired_2","text":"Type: string The name of the task to remove.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#runtaskcommand","text":"public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK .","title":"runTaskCommand "},{"location":"typescript/pdk_projen/API/#taskrequired","text":"Type: projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"typescript/pdk_projen/API/#synth","text":"public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"typescript/pdk_projen/API/#tryfindfile","text":"public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects.","title":"tryFindFile "},{"location":"typescript/pdk_projen/API/#filepathrequired","text":"Type: string The file path. If this path is relative, it will be resolved from the root of this project.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindjsonfile","text":"public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name.","title":"~~tryFindJsonFile~~ "},{"location":"typescript/pdk_projen/API/#filepathrequired_1","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindobjectfile","text":"public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"tryFindObjectFile "},{"location":"typescript/pdk_projen/API/#filepathrequired_2","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#addbins","text":"public addBins ( bins : {[ key : string ] : string }) : void","title":"addBins "},{"location":"typescript/pdk_projen/API/#binsrequired","text":"Type: {[ key: string ]: string}","title":"binsRequired "},{"location":"typescript/pdk_projen/API/#addbundleddeps","text":"public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json .","title":"addBundledDeps "},{"location":"typescript/pdk_projen/API/#depsrequired","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addcompilecommand","text":"public addCompileCommand ( commands : string ) : void DEPRECATED.","title":"~~addCompileCommand~~ "},{"location":"typescript/pdk_projen/API/#commandsrequired","text":"Type: string","title":"commandsRequired "},{"location":"typescript/pdk_projen/API/#adddeps","text":"public addDeps ( deps : string ) : void Defines normal dependencies.","title":"addDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_1","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#adddevdeps","text":"public addDevDeps ( deps : string ) : void Defines development/test dependencies.","title":"addDevDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_2","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addfields","text":"public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json .","title":"addFields "},{"location":"typescript/pdk_projen/API/#fieldsrequired","text":"Type: {[ key: string ]: any} The fields to set.","title":"fieldsRequired "},{"location":"typescript/pdk_projen/API/#addkeywords","text":"public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated).","title":"addKeywords "},{"location":"typescript/pdk_projen/API/#keywordsrequired","text":"Type: string The keywords to add.","title":"keywordsRequired "},{"location":"typescript/pdk_projen/API/#addpeerdeps","text":"public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers.","title":"addPeerDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_3","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addtestcommand","text":"public addTestCommand ( commands : string ) : void DEPRECATED.","title":"~~addTestCommand~~ "},{"location":"typescript/pdk_projen/API/#commandsrequired_1","text":"Type: string","title":"commandsRequired "},{"location":"typescript/pdk_projen/API/#hasscript","text":"public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined.","title":"hasScript "},{"location":"typescript/pdk_projen/API/#namerequired_3","text":"Type: string The name of the script.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#removescript","text":"public removeScript ( name : string ) : void Removes the npm script (always successful).","title":"removeScript "},{"location":"typescript/pdk_projen/API/#namerequired_4","text":"Type: string The name of the script.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#renderworkflowsetup","text":"public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow.","title":"renderWorkflowSetup "},{"location":"typescript/pdk_projen/API/#optionsoptional","text":"Type: projen.javascript.RenderWorkflowSetupOptions Options.","title":"optionsOptional "},{"location":"typescript/pdk_projen/API/#setscript","text":"public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script.","title":"setScript "},{"location":"typescript/pdk_projen/API/#namerequired_5","text":"Type: string The script name.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#commandrequired","text":"Type: string The command to execute.","title":"commandRequired "},{"location":"typescript/pdk_projen/API/#addimplicitdependency","text":"public addImplicitDependency ( dependent : Project , dependee : Project ) : void Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example.","title":"addImplicitDependency "},{"location":"typescript/pdk_projen/API/#dependentrequired","text":"Type: projen.Project project you want to have the dependency.","title":"dependentRequired "},{"location":"typescript/pdk_projen/API/#dependeerequired","text":"Type: projen.Project project you wish to depend on.","title":"dependeeRequired "},{"location":"typescript/pdk_projen/API/#properties_2","text":"Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Automatic PR merges. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description.","title":"Properties "},{"location":"typescript/pdk_projen/API/#buildtaskrequired","text":"public readonly buildTask : Task ; Type: projen.Task","title":"buildTaskRequired "},{"location":"typescript/pdk_projen/API/#compiletaskrequired","text":"public readonly compileTask : Task ; Type: projen.Task","title":"compileTaskRequired "},{"location":"typescript/pdk_projen/API/#componentsrequired","text":"public readonly components : Component []; Type: projen.Component[] Returns all the components within this project.","title":"componentsRequired "},{"location":"typescript/pdk_projen/API/#depsrequired_4","text":"public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#ejectedrequired","text":"public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"typescript/pdk_projen/API/#filesrequired","text":"public readonly files : FileBase []; Type: projen.FileBase[] All files in this project.","title":"filesRequired "},{"location":"typescript/pdk_projen/API/#gitattributesrequired","text":"public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"typescript/pdk_projen/API/#gitignorerequired","text":"public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"typescript/pdk_projen/API/#loggerrequired","text":"public readonly logger : Logger ; Type: projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"typescript/pdk_projen/API/#namerequired_6","text":"public readonly name : string ; Type: string Project name.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#outdirrequired","text":"public readonly outdir : string ; Type: string Absolute output directory of this project.","title":"outdirRequired "},{"location":"typescript/pdk_projen/API/#packagetaskrequired","text":"public readonly packageTask : Task ; Type: projen.Task","title":"packageTaskRequired "},{"location":"typescript/pdk_projen/API/#postcompiletaskrequired","text":"public readonly postCompileTask : Task ; Type: projen.Task","title":"postCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#precompiletaskrequired","text":"public readonly preCompileTask : Task ; Type: projen.Task","title":"preCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#projectbuildrequired","text":"public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project.","title":"projectBuildRequired "},{"location":"typescript/pdk_projen/API/#projencommandrequired","text":"public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI.","title":"projenCommandRequired "},{"location":"typescript/pdk_projen/API/#rootrequired","text":"public readonly root : Project ; Type: projen.Project The root project.","title":"rootRequired "},{"location":"typescript/pdk_projen/API/#tasksrequired","text":"public readonly tasks : Tasks ; Type: projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"typescript/pdk_projen/API/#testtaskrequired","text":"public readonly testTask : Task ; Type: projen.Task","title":"testTaskRequired "},{"location":"typescript/pdk_projen/API/#defaulttaskoptional","text":"public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"defaultTaskOptional "},{"location":"typescript/pdk_projen/API/#initprojectoptional","text":"public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"initProjectOptional "},{"location":"typescript/pdk_projen/API/#parentoptional_1","text":"public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projecttyperequired","text":"public readonly projectType : ProjectType ; Type: projen.ProjectType","title":"projectTypeRequired "},{"location":"typescript/pdk_projen/API/#autoapproveoptional","text":"public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project.","title":"autoApproveOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional_1","text":"public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional_1","text":"public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional_1","text":"public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional_1","text":"public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#allowlibrarydependenciesrequired","text":"Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean","title":"~~allowLibraryDependencies~~Required "},{"location":"typescript/pdk_projen/API/#artifactsdirectoryrequired","text":"public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg .","title":"artifactsDirectoryRequired "},{"location":"typescript/pdk_projen/API/#artifactsjavascriptdirectoryrequired","text":"public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ).","title":"artifactsJavascriptDirectoryRequired "},{"location":"typescript/pdk_projen/API/#bundlerrequired","text":"public readonly bundler : Bundler ; Type: projen.javascript.Bundler","title":"bundlerRequired "},{"location":"typescript/pdk_projen/API/#entrypointrequired","text":"Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string","title":"~~entrypoint~~Required "},{"location":"typescript/pdk_projen/API/#manifestrequired","text":"Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any","title":"~~manifest~~Required "},{"location":"typescript/pdk_projen/API/#packagerequired","text":"public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package.","title":"packageRequired "},{"location":"typescript/pdk_projen/API/#packagemanagerrequired","text":"Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use.","title":"~~packageManager~~Required "},{"location":"typescript/pdk_projen/API/#runscriptcommandrequired","text":"public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager).","title":"runScriptCommandRequired "},{"location":"typescript/pdk_projen/API/#automergeoptional","text":"public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Automatic PR merges.","title":"autoMergeOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowoptional_1","text":"public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled.","title":"buildWorkflowOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowjobidoptional","text":"public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow.","title":"buildWorkflowJobIdOptional "},{"location":"typescript/pdk_projen/API/#jestoptional_1","text":"public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled).","title":"jestOptional "},{"location":"typescript/pdk_projen/API/#maxnodeversionoptional_1","text":"public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge.","title":"maxNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#minnodeversionoptional_1","text":"public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package.","title":"minNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#npmignoreoptional_1","text":"public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file.","title":"npmignoreOptional "},{"location":"typescript/pdk_projen/API/#prettieroptional_1","text":"public readonly prettier : Prettier ; Type: projen.javascript.Prettier","title":"prettierOptional "},{"location":"typescript/pdk_projen/API/#publisheroptional","text":"Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow.","title":"~~publisher~~Optional "},{"location":"typescript/pdk_projen/API/#releaseoptional_1","text":"public readonly release : Release ; Type: projen.release.Release Release management.","title":"releaseOptional "},{"location":"typescript/pdk_projen/API/#upgradeworkflowoptional","text":"public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow.","title":"upgradeWorkflowOptional "},{"location":"typescript/pdk_projen/API/#docsdirectoryrequired","text":"public readonly docsDirectory : string ; Type: string","title":"docsDirectoryRequired "},{"location":"typescript/pdk_projen/API/#libdirrequired","text":"public readonly libdir : string ; Type: string The directory in which compiled .js files reside.","title":"libdirRequired "},{"location":"typescript/pdk_projen/API/#srcdirrequired","text":"public readonly srcdir : string ; Type: string The directory in which the .ts sources reside.","title":"srcdirRequired "},{"location":"typescript/pdk_projen/API/#testdirrequired","text":"public readonly testdir : string ; Type: string The directory in which tests reside.","title":"testdirRequired "},{"location":"typescript/pdk_projen/API/#tsconfigdevrequired","text":"public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen).","title":"tsconfigDevRequired "},{"location":"typescript/pdk_projen/API/#watchtaskrequired","text":"public readonly watchTask : Task ; Type: projen.Task The \"watch\" task.","title":"watchTaskRequired "},{"location":"typescript/pdk_projen/API/#docgenoptional_1","text":"public readonly docgen : boolean ; Type: boolean","title":"docgenOptional "},{"location":"typescript/pdk_projen/API/#eslintoptional_1","text":"public readonly eslint : Eslint ; Type: projen.javascript.Eslint","title":"eslintOptional "},{"location":"typescript/pdk_projen/API/#tsconfigoptional_1","text":"public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig","title":"tsconfigOptional "},{"location":"typescript/pdk_projen/API/#tsconfigeslintoptional","text":"public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig","title":"tsconfigEslintOptional "},{"location":"typescript/pdk_projen/API/#constants","text":"Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"typescript/pdk_projen/API/#default_taskrequired","text":"public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"typescript/pdk_projen/API/#enums","text":"","title":"Enums "},{"location":"typescript/pdk_projen/API/#targetdependencyproject","text":"Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency.","title":"TargetDependencyProject "},{"location":"typescript/pdk_projen/API/#self","text":"Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages.","title":"SELF "},{"location":"typescript/pdk_projen/API/#dependencies","text":"Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"DEPENDENCIES "}]}