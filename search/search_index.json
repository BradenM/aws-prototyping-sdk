{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"AWS Prototyping SDK (PDK) The PDK contains a set of useful CDK and Projen constructs, vended in multiple languages. All stable constructs live in the following respective package: TS JAVA PYTHON aws-prototpying-sdk software.aws.awsprototypingsdk/aws-prototyping-sdk aws_prototyping_sdk For packages marked experimental , please refer to the usage instruction contained within the respective package documentation. API Reference Developer Guide","title":"AWS Prototyping SDK (PDK)"},{"location":"index.html#aws-prototyping-sdk-pdk","text":"The PDK contains a set of useful CDK and Projen constructs, vended in multiple languages. All stable constructs live in the following respective package: TS JAVA PYTHON aws-prototpying-sdk software.aws.awsprototypingsdk/aws-prototyping-sdk aws_prototyping_sdk For packages marked experimental , please refer to the usage instruction contained within the respective package documentation. API Reference Developer Guide","title":"AWS Prototyping SDK (PDK)"},{"location":"java/type-safe-api/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/type-safe-api Type Safe API Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated client and server types, infrastructure, documentation, and automatic input validation! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate \"runtime\" projects from your API definition in your desired languages, which can be utilised both client side for interacting with your API, or server side for implementing your API. The project also generates a type-safe CDK construct which ensures an integration is provided for every API operation. Code is generated at build time, so when you change your API model, just rebuild and you'll see your changes reflected in the generated code. Quick Start: TypeScript This section describes how to get started quickly, with TypeScript infrastructure and lambda handlers. See the end of the README for examples in Python and Java . Create Your API Project Use the project in your .projenrc.ts . It can either be part of an nx-monorepo (recommended) or used in a standalone fashion. // Example automatically generated from non-compiling source. May contain errors. import software.aws.awsprototypingsdk.nxmonorepo.NxMonorepoProject ; import aws.prototyping.sdk.type.safe.api.TypeSafeApiProject ; import io.github.cdklabs.projen.awscdk.AwsCdkTypeScriptApp ; // Create the monorepo NxMonorepoProject monorepo = NxMonorepoProject . Builder . create ().... build (); // Create the API project Object api = TypeSafeApiProject . Builder . create () . name ( \"myapi\" ) . parent ( monorepo ) . outdir ( \"packages/api\" ) // Smithy as the model language. You can also use ModelLanguage.OPENAPI . model ( Map . of ( \"language\" , ModelLanguage . getSMITHY (), \"options\" , Map . of ( \"smithy\" , Map . of ( \"serviceName\" , Map . of ( \"namespace\" , \"com.mycompany\" , \"serviceName\" , \"MyApi\" ))))) // Generate types, client and server code in TypeScript, Python and Java . runtime ( Map . of ( \"languages\" , List . of ( Language . getTYPESCRIPT (), Language . getPYTHON (), Language . getJAVA ()))) // CDK infrastructure in TypeScript . infrastructure ( Map . of ( \"language\" , Language . getTYPESCRIPT ())) // Generate HTML documentation . documentation ( Map . of ( \"formats\" , List . of ( DocumentationFormat . getHTML_REDOC ()))) . build (); // Create a CDK infrastructure project AwsCdkTypeScriptApp infra = AwsCdkTypeScriptApp . Builder . create ().... build (); // Infrastructure can depend on the generated API infrastructure and runtime infra . addDeps ( api . getInfrastructure (). getTypescript (). getPackage (). getPackageName ()); infra . addDeps ( api . getRuntime (). getTypescript (). getPackage (). getPackageName ()); monorepo . synth (); Use the CDK Construct In your CDK application, consume the Api construct, vended from the generated typescript infrastructure package. // Example automatically generated from non-compiling source. May contain errors. import software.amazon.awscdk.Stack ; import software.amazon.awscdk.StackProps ; import software.constructs.Construct ; import myapi.typescript.infra.Api ; // <- generated typescript infrastructure package import aws.prototyping.sdk.type.safe.api.Authorizers ; import aws.prototyping.sdk.type.safe.api.Integrations ; import software.amazon.awscdk.services.lambda.nodejs.NodejsFunction ; import software.amazon.awscdk.services.apigateway.Cors ; import path.* ; public class MyStack extends Stack { public MyStack ( Construct scope , String id ) { this ( scope , id , StackProps . builder (). build ()); } public MyStack ( Construct scope , String id , StackProps props ) { super ( scope , id , props ); // Instantiate the generated CDK construct to deploy an API Gateway API based on your model // Instantiate the generated CDK construct to deploy an API Gateway API based on your model Api . Builder . create ( this , \"MyApi\" ) . defaultAuthorizer ( Authorizers . iam ()) . corsOptions ( Map . of ( \"allowOrigins\" , Cors . ALL_ORIGINS , \"allowMethods\" , Cors . ALL_METHODS )) // Supply an integration for every operation . integrations ( Map . of ( \"sayHello\" , Map . of ( \"integration\" , Integrations . lambda ( NodejsFunction . Builder . create ( this , \"SayHelloLambda\" ) . entry ( resolve ( __dirname , \"say-hello.ts\" )) . build ())))) . build (); } } Implement a Lambda Handler The generated runtime projects include lambda handler wrappers which provide type-safety for implementing your API operations. You can implement your lambda handlers in any of the supported languages, and even mix and match languages for different operations if you like. In typescript, the implementation of say-hello.ts would look like: // Example automatically generated from non-compiling source. May contain errors. import myapi.typescript.runtime.sayHelloHandler.* ; // <- generated typescript runtime package // Use the handler wrapper for type-safety to ensure you correctly implement your modelled API operation Object handler = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ` , }, }; }); Project The TypeSafeApiProject projen project sets up the project structure for you. You have a few parameters to consider when creating the project: model - Configure the API model. Select a language for the model of either Smithy or OpenAPI v3 , and supply options.smithy or options.openapi depending on your choice. runtime - Configure the generated runtime projects. Include one or more languages you wish to write your client and server-side code in. These projects contain generated types defined in your model, as well as type-safe lambda handler wrappers for implementing each operation. infrastructure - Pick the language you are writing your CDK infrastructure in. A construct will be generated in this language which can be used to deploy the API. documentation - Specify formats to generate documentation in. It's recommended that these projects are used as part of an nx-monorepo project (eg. by specifying parent: myMonorepoProject ), as it makes setting up dependencies much easier, particularly when extending your project further with a CDK app and lambda functions. Depending on the model.language you choose, you must supply the corresponding model.options . For example: // Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject . Builder . create () . model ( Map . of ( \"language\" , ModelLanguage . getSMITHY (), \"options\" , Map . of ( \"smithy\" , Map . of ( \"serviceName\" , Map . of ( \"namespace\" , \"com.mycompany\" , \"serviceName\" , \"MyApi\" )))))... . build (); // Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject . Builder . create () . model ( Map . of ( \"language\" , ModelLanguage . getOPENAPI (), \"options\" , Map . of ( \"openapi\" , Map . of ( \"title\" , \"MyApi\" ))))... . build (); model.options.smithy allows for further customisation of the Smithy project, eg: // Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject . Builder . create () . model ( Map . of ( \"language\" , ModelLanguage . getSMITHY (), \"options\" , Map . of ( \"smithy\" , Map . of ( \"serviceName\" , Map . of ( \"namespace\" , \"com.mycompany\" , \"serviceName\" , \"MyApi\" ), // By default, the contents of the smithy build output directory `model/output` will be ignored by source control. // Set this to false to include it, for example if you are generating clients directly from the smithy model. \"ignoreSmithyBuildOutput\" , false , // The gradle wrapper used for the smithy build is copied from the PDK itself if it does not already exist in // the 'smithy' folder. By default, this gradle wrapper will be ignored by source control. // Set this to false if you would like to check the gradle wrapper in to source control, for example if you want // to use a different version of the gradle wrapper in your project. \"ignoreGradleWrapper\" , false , // Use smithyBuildOptions to control what is added to smithy-build.json. \"smithyBuildOptions\" , Map . of ( \"projections\" , Map . of ( // You can customise the built-in openapi projection, used to generate the OpenAPI specification. \"openapi\" , Map . of ( \"plugins\" , Map . of ( \"openapi\" , Map . of ( // Customise the openapi projection here. // See: https://smithy.io/2.0/guides/converting-to-openapi.html \"useIntegerType\" , true , ...))), // You can add new projections here too \"ts-client\" , Map . of ( \"plugins\" , Map . of ( \"typescript-codegen\" , Map . of ( \"package\" , \"@my-test/smithy-generated-typescript-client\" , \"packageVersion\" , \"0.0.1\" )))), // Note that any additional dependencies required for projections/plugins can be added here, which in turn will // add them to the `smithy/build.gradle` file \"maven\" , Map . of ( \"dependencies\" , List . of ( \"software.amazon.smithy:smithy-validation-model:1.27.2\" )))))))... . build (); Directory Structure The TypeSafeApiProject will create the following directory structure within its outdir : |_ model/ |_ src/ |_ main/ |_ smithy - your API definition if you chose ModelLanguage.SMITHY |_ openapi - your API definition if you chose ModelLanguage.OPENAPI |_ runtime/ - generated types, client, and server code in the languages you specified |_ typescript |_ python |_ java |_ infrastructure/ - generated infrastructure (you'll find only one directory in here based on your chosen infrastructure language) |_ typescript |_ python |_ java |_ documentation/ - generated documentation in the formats you specified |_ html2 |_ html_redoc |_ plantuml |_ markdown Smithy IDL Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message } Supported Protocols Currently only AWS restJson1 is supported. Please ensure your service is annotated with the @restJson1 trait. Multiple Files You can split your definition into multiple files and folders, so long as they are all under the model/src/main/smithy directory in your API project. Authorizers Smithy supports adding API Gateway authorizers in the model itself . Given that at model definition time one usually does not know the ARN of the user pool or lambda function for an authorizer, it is recommended to add the authorizer(s) in your Api CDK construct. If using Smithy generated clients, some authorizer traits (eg sigv4) will include configuring the client for that particular method of authorization, so it can be beneficial to still define authorizers in the model. We therefore support specifying authorizers in both the model and the construct, but note that the construct will take precedence where the authorizer ID is the same. OpenAPI Specification Your model/src/main/openapi/main.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ model/src/main/openapi/ |_ main.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where main.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message Construct A CDK construct is generated in the infrastructure/<language> directory which provides a type-safe interface for creating an API Gateway API based on your model. You can extend or instantiate this construct in your CDK infrastructure project. You'll get a type error if you forget to define an integration for an operation defined in your api. // Example automatically generated from non-compiling source. May contain errors. import aws.prototyping.sdk.type.safe.api.Authorizers ; import aws.prototyping.sdk.type.safe.api.Integrations ; import software.amazon.awscdk.services.lambda.nodejs.NodejsFunction ; import software.constructs.Construct ; import myapi.typescript.infra.Api ; /** * An example of how to wire lambda handler functions to the API */ public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"defaultAuthorizer\" , Authorizers . iam (), \"integrations\" , Map . of ( // Every operation defined in your API must have an integration defined! \"sayHello\" , Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"say-hello\" )))))); } } Sharing Integrations If you would like to use the same integration for every operation (for example you'd like to use a single lambda function to service all requests with the in-built handler router ), you can use the Operations.all method from a generated runtime project to save repeating yourself: // Example automatically generated from non-compiling source. May contain errors. import myapi.typescript.runtime.Operations ; import aws.prototyping.sdk.type.safe.api.Authorizers ; import aws.prototyping.sdk.type.safe.api.Integrations ; import software.amazon.awscdk.services.lambda.nodejs.NodejsFunction ; import software.constructs.Construct ; import myapi.typescript.infra.Api ; public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"defaultAuthorizer\" , Authorizers . iam (), // Use the same integration for every operation. \"integrations\" , Operations . all ( Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"router\" )))))); } } TypeScript is demonstrated above, but this is also available in Java and Python. Authorizers The Api construct allows you to define one or more authorizers for securing your API. An integration will use the defaultAuthorizer unless an authorizer is specified at the integration level. The following authorizers are supported: Authorizers.none - No auth Authorizers.iam - AWS IAM (Signature Version 4) Authorizers.cognito - Cognito user pool Authorizers.custom - A custom authorizer Cognito Authorizer To use the Cognito authorizer, one or more user pools must be provided. You can optionally specify the scopes to check if using an access token. You can use the withScopes method to use the same authorizer but verify different scopes for individual integrations, for example: // Example automatically generated from non-compiling source. May contain errors. public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { Object cognitoAuthorizer = Authorizers . cognito ( Map . of ( \"authorizerId\" , \"myCognitoAuthorizer\" , \"userPools\" , List . of ( new UserPool ( scope , \"UserPool\" )))); super ( scope , id , Map . of ( \"defaultAuthorizer\" , cognitoAuthorizer , \"integrations\" , Map . of ( // Everyone in the user pool can call this operation: \"sayHello\" , Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"say-hello\" ))), // Only users with the given scopes can call this operation \"myRestrictedOperation\" , Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"my-restricted-operation\" )), \"authorizer\" , cognitoAuthorizer . withScopes ( \"my-resource-server/my-scope\" ))))); } } For more information about scopes or identity and access tokens, please see the API Gateway documentation . Custom Authorizer Custom authorizers use lambda functions to handle authorizing requests. These can either be simple token-based authorizers, or more complex request-based authorizers. See the API Gateway documentation for more details. An example token-based authorizer (default): // Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( Map . of ( \"authorizerId\" , \"myTokenAuthorizer\" , \"function\" , new NodejsFunction ( scope , \"authorizer\" ))); An example request-based handler. By default the identitySource will be method.request.header.Authorization , however you can customise this as per the API Gateway documentation . // Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( Map . of ( \"authorizerId\" , \"myRequestAuthorizer\" , \"type\" , CustomAuthorizerType . getREQUEST (), \"identitySource\" , \"method.request.header.MyCustomHeader, method.request.querystring.myQueryString\" , \"function\" , new NodejsFunction ( scope , \"authorizer\" ))); Integrations Integrations are used by API Gateway to service requests. Lambda Integration Currently, the only built-in integration is a lambda integration. You can construct one using Integrations.lambda(yourLambdaFunction) . Custom Integrations You can implement your own integrations by inheriting the Integration class and implementing its render method. This method is responsible for returning a snippet of OpenAPI which will be added as the x-amazon-apigateway-integration for an operation. Please refer to the API Gateway Swagger Extensions documentation for more details. You can also optionally override the grant method if you need to use CDK to grant API Gateway access to invoke your integration. Runtime: Clients The generated runtime projects include clients which can be used for type-safe interaction with your API. Typescript The typescript-fetch OpenAPI generator is used to generate typescript client. This requires an implementation of fetch to be passed to the client. In the browser one can pass the built in fetch, or in NodeJS you can use an implementation such as node-fetch . Example usage of the client in a website: // Example automatically generated from non-compiling source. May contain errors. import myapi.typescript.runtime.Configuration ; import myapi.typescript.runtime.DefaultApi ; Object client = new DefaultApi ( Configuration . Builder . create () . basePath ( \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) . fetchApi ( window . fetch . bind ( window )) . build ()); client . sayHello ( Map . of ( \"name\" , \"Jack\" )); Python The python OpenAPI generator is used to generate clients for python. Example usage: from myapi_python_runtime import ApiClient , Configuration from myapi_python_runtime.api.default_api import DefaultApi configuration = Configuration ( host = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) with ApiClient ( configuration ) as api_client : client = DefaultApi ( api_client ) client . say_hello ( query_params = { 'name' : \"name_example\" , }, ) You'll find details about how to use the python client in the README.md in your generated runtime project. Java The java OpenAPI generator is used to generate clients for Java. Example usage: import com.generated.api.myapijavaruntime.runtime.api.DefaultApi ; import com.generated.api.myapijavaruntime.runtime.ApiClient ; import com.generated.api.myapijavaruntime.runtime.Configuration ; import com.generated.api.myapijavaruntime.runtime.models.HelloResponse ; ApiClient client = Configuration . getDefaultApiClient (); client . setBasePath ( \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ); DefaultApi api = new DefaultApi ( client ); HelloResponse response = api . sayHello ( \"Adrian\" ). execute () You'll find more details about how to use the Java client in the README.md in your generated runtime project. Lambda Handler Wrappers Lambda handler wrappers are also importable from the generated runtime projects. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your model. Typescript // Example automatically generated from non-compiling source. May contain errors. import myapi.typescript.runtime.sayHelloHandler.* ; Object handler = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ! ` , }, }; }); Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handlerRouter . // Example automatically generated from non-compiling source. May contain errors. import myapi.typescript.runtime.handlerRouter.* ; import myapi.typescript.runtime.sayHelloHandler.* ; import myapi.typescript.runtime.sayGoodbyeHandler.* ; import interceptors.corsInterceptor.* ; import handlers.say.goodbye.sayGoodbye.* ; Object sayHello = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ! ` , }, }; }); Object handler = handlerRouter ( Map . of ( // Interceptors declared in this list will apply to all operations \"interceptors\" , List . of ( corsInterceptor ), // Assign handlers to each operation here \"handlers\" , Map . of ( \"sayHello\" , sayHello , \"sayGoodbye\" , sayGoodbye ))); Python from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.model.hello_response import HelloResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handler_router . from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses , handler_router , HandlerRouterHandlers from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.model.hello_response import HelloResponse from other_handlers import say_goodbye from my_interceptors import cors_interceptor @say_hello_handler def say_hello ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) handler = handler_router ( # Interceptors defined here will apply to all operations interceptors = [ cors_interceptor ], handlers = HandlerRouterHandlers ( say_hello = say_hello , say_goodbye = say_goodbye ) ) Java import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello200Response ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloRequestInput ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloResponse ; import com.generated.api.myapijavaruntime.runtime.model.HelloResponse ; public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so by extending the HandlerRouter class. import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayGoodbye ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.HandlerRouter ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.Interceptors ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello ; import java.util.Arrays ; import java.util.List ; // Interceptors defined here apply to all operations @Interceptors ({ TimingInterceptor . class }) public class ApiHandlerRouter extends HandlerRouter { // You must implement a method to return a handler for every operation @Override public SayHello sayHello () { return new SayHelloHandler (); } @Override public SayGoodbye sayGoodbye () { return new SayGoodbyeHandler (); } } Interceptors The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next . Typescript In typescript, interceptors are passed as separate arguments to the generated handler wrapper, in the order in which they should be executed. Call request.chain.next(request) from an interceptor to delegate to the rest of the chain to handle a request. Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next . // Example automatically generated from non-compiling source. May contain errors. import myapi.typescript.runtime.sayHelloHandler.* ; import myapi.typescript.runtime.ChainedRequestInput ; import myapi.typescript.runtime.OperationResponse ; // Interceptor to wrap invocations in a try/catch, returning a 500 error for any unhandled exceptions. __function tryCatchInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response | OperationResponse < 500 , { errorMessage : string } >> => { try { return await request . chain . next ( request ); } catch ( e : any ) { return { statusCode : 500 , body : { errorMessage : e . message }}; } }; // tryCatchInterceptor is passed first, so it runs first and calls the second argument function (the request handler) via chain.next Object handler = sayHelloHandler ( tryCatchInterceptor , async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ! ` , }, }; }); Another example interceptor might be to record request time metrics. The example below includes the full generic type signature for an interceptor: // Example automatically generated from non-compiling source. May contain errors. import myapi.typescript.runtime.ChainedRequestInput ; __function timingInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response > => { const start = Date . now (); const response = await request . chain . next ( request ); const end = Date . now (); console . log ( ` Took $ { end - start } ms ` ); return response ; }; Interceptors may mutate the interceptorContext to pass state to further interceptors or the final lambda handler, for example an identityInterceptor might want to extract the authenticated user from the request so that it is available in handlers. // Example automatically generated from non-compiling source. May contain errors. import myapi.typescript.runtime.LambdaRequestParameters ; import myapi.typescript.runtime.LambdaHandlerChain ; __function identityInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response > => { const authenticatedUser = await getAuthenticatedUser ( request . event ); return await request . chain . next ({ ... request , interceptorContext : { ... request . interceptorContext , authenticatedUser , }, }); }; Python In Python, a list of interceptors can be passed as a keyword argument to the generated lambda handler decorator, for example: from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.model.hello_response import HelloResponse @say_hello_handler ( interceptors = [ timing_interceptor , try_catch_interceptor ]) def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Writing an interceptor is just like writing a lambda handler. Call chain.next(input) from an interceptor to delegate to the rest of the chain to handle a request. import time from myapi_python_runtime.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def timing_interceptor ( input : ChainedApiRequest ) -> ApiResponse : start = int ( round ( time . time () * 1000 )) response = input . chain . next ( input ) end = int ( round ( time . time () * 1000 )) print ( \"Took {} ms\" . format ( end - start )) return response Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import time from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def try_catch_interceptor ( input : ChainedApiRequest ) -> ApiResponse : try : return input . chain . next ( input ) except Exception as e : return ApiResponse ( status_code = 500 , body = ApiError ( errorMessage = str ( e )), headers = {} ) Interceptors are permitted to mutate the \"interceptor context\", which is a Dict[str, Any] . Each interceptor in the chain, and the final handler, can access this context: def identity_interceptor ( input : ChainedApiRequest ) -> ApiResponse : input . interceptor_context [ \"AuthenticatedUser\" ] = get_authenticated_user ( input . event ) return input . chain . next ( input ) Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: def add_cors_headers_interceptor ( input : ChainedApiRequest ) -> ApiResponse : response = input . chain . next ( input ) return ApiResponse ( status_code = response . status_code , body = response . body , headers = { ** response . headers , \"Access-Control-Allow-Origin\" : \"*\" , \"Access-Control-Allow-Headers\" : \"*\" } ) Java In Java, interceptors can be added to a handler via the @Interceptors class annotation: import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Interceptors ; @Interceptors ({ TimingInterceptor . class , TryCatchInterceptor . class }) public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } To write an interceptor, you can implement the Interceptor interface. For example, a timing interceptor: import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Interceptor ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Response ; public class TimingInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { long start = System . currentTimeMillis (); Response res = input . getChain (). next ( input ); long end = System . currentTimeMillis (); System . out . printf ( \"Took %d ms%n\" , end - start ); return res ; } } Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Interceptor ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Response ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.ApiResponse ; import com.generated.api.myjavaapiruntime.runtime.model.ApiError ; public class TryCatchInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { try { return input . getChain (). next ( input ); } catch ( Exception e ) { return ApiResponse . builder () . statusCode ( 500 ) . body ( ApiError . builder () . errorMessage ( e . getMessage ()) . build (). toJson ()) . build (); } } } Interceptors are permitted to mutate the \"interceptor context\", which is a Map<String, Object> . Each interceptor in the chain, and the final handler, can access this context: public class IdentityInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { input . getInterceptorContext (). put ( \"AuthenticatedUser\" , this . getAuthenticatedUser ( input . getEvent ())); return input . getChain (). next ( input ); } } Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: public static class AddCorsHeadersInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { Response res = input . getChain (). next ( input ); res . getHeaders (). put ( \"Access-Control-Allow-Origin\" , \"*\" ); res . getHeaders (). put ( \"Access-Control-Allow-Headers\" , \"*\" ); return res ; } } Interceptors with Dependency Injection Interceptors referenced by the @Interceptors annotation must be constructable with no arguments. If more complex instantiation of your interceptor is required (for example if you are using dependency injection or wish to pass configuration to your interceptor), you may instead override the getInterceptors method in your handler: public class SayHelloHandler extends SayHello { @Override public List < Interceptor < SayHelloInput >> getInterceptors () { return Arrays . asList ( new MyConfiguredInterceptor <> ( 42 ), new MyOtherConfiguredInterceptor <> ( \"configuration\" )); } @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s!\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Quick Start: Python This guide assumes you want to write your CDK infrastructure in Python and your lambda handlers in Python, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like. Just specify the language in runtime.languages for any language you would like to write lambda handlers in. Create Your API Project Use the project in your .projenrc.ts . It can either be part of an nx-monorepo (recommended) or used in a standalone fashion. // Example automatically generated from non-compiling source. May contain errors. import software.aws.awsprototypingsdk.nxmonorepo.NxMonorepoProject ; import aws.prototyping.sdk.type.safe.api.TypeSafeApiProject ; import io.github.cdklabs.projen.awscdk.AwsCdkTypeScriptApp ; import io.github.cdklabs.projen.python.PythonProject ; // Create the monorepo NxMonorepoProject monorepo = NxMonorepoProject . Builder . create () . name ( \"monorepo\" ) . defaultReleaseBranch ( \"main\" ) . build (); // Create the API project Object api = TypeSafeApiProject . Builder . create () . name ( \"myapi\" ) . parent ( monorepo ) . outdir ( \"packages/api\" ) // Smithy as the model language. You can also use ModelLanguage.OPENAPI . model ( Map . of ( \"language\" , ModelLanguage . getSMITHY (), \"options\" , Map . of ( \"smithy\" , Map . of ( \"serviceName\" , Map . of ( \"namespace\" , \"com.mycompany\" , \"serviceName\" , \"MyApi\" ))))) // Generate client and server types in TypeScript, Python, and Java . runtime ( Map . of ( \"languages\" , List . of ( Language . getTYPESCRIPT (), Language . getPYTHON (), Language . getJAVA ()))) // Generate CDK infrastructure in Python . infrastructure ( Map . of ( \"language\" , Language . getPYTHON ())) // Generate HTML documentation . documentation ( Map . of ( \"formats\" , List . of ( DocumentationFormat . getHTML_REDOC ()))) . build (); // Create a project for our lambda handlers written in python PythonProject lambdas = PythonProject . Builder . create () . name ( \"lambdas\" ) . parent ( monorepo ) . outdir ( \"packages/lambdas\" ) . authorEmail ( \"me@example.com\" ) . authorName ( \"me\" ) . moduleName ( \"lambdas\" ) . version ( \"1.0.0\" ) // Poetry is used to simplify local python dependencies . poetry ( true ) . build (); // Add a local dependency on the generated python runtime lambdas . addDependency ( String . format ( \"%s@{path=\\\"%s\\\", develop=true}\" , api . getRuntime (). getPython (). getName (), path . relative ( lambdas . getOutdir (), api . getRuntime (). getPython (). getOutdir ()))); monorepo . addImplicitDependency ( lambdas , api . getRuntime (). getPython ()); // Add commands to the lambda project's package task to create a distributable which can be deployed to AWS Lambda lambdas . packageTask . exec ( \"mkdir -p lambda-dist && rm -rf lambda-dist/*\" ); lambdas . packageTask . exec ( String . format ( \"cp -r %s lambda-dist/%s\" , lambdas . getModuleName (), lambdas . getModuleName ())); lambdas . packageTask . exec ( \"poetry export --without-hashes --format=requirements.txt > lambda-dist/requirements.txt\" ); lambdas . packageTask . exec ( \"pip install -r lambda-dist/requirements.txt --target lambda-dist --upgrade\" ); lambdas . gitignore . addPatterns ( \"lambda-dist\" ); // Create a CDK infrastructure project Object infra = AwsCdkPythonApp . Builder . create () . name ( \"infra\" ) . parent ( monorepo ) . outdir ( \"packages/infra\" ) . authorEmail ( \"me@example.com\" ) . authorName ( \"me\" ) . cdkVersion ( \"2.0.0\" ) . moduleName ( \"infra\" ) . version ( \"1.0.0\" ) . poetry ( true ) . build (); // The infrastructure project depends on the python types, python infrastructure, and the lambda package infra . addDependency ( String . format ( \"%s@{path=\\\"%s\\\", develop=true}\" , api . getRuntime (). getPython (). getName (), path . relative ( infra . getOutdir (), api . getRuntime (). getPython (). getOutdir ()))); monorepo . addImplicitDependency ( infra , api . getRuntime (). getPython ()); infra . addDependency ( String . format ( \"%s@{path=\\\"%s\\\", develop=true}\" , api . getInfrastructure (). getPython (). getName (), path . relative ( infra . getOutdir (), api . getInfrastructure (). getPython (). getOutdir ()))); monorepo . addImplicitDependency ( infra , api . getInfrastructure (). getPython ()); infra . addDependency ( String . format ( \"%s@{path=\\\"%s\\\", develop=true}\" , lambdas . getName (), path . relative ( infra . getOutdir (), lambdas . getOutdir ()))); monorepo . addImplicitDependency ( infra , lambdas ); monorepo . synth (); Use the CDK Construct In your CDK application, consume the Api construct, vended from the generated Python infrastructure package. import os from aws_cdk import Stack from constructs import Construct from aws_cdk.aws_lambda import LayerVersion , Code , Function , Runtime from aws_prototyping_sdk.type_safe_api import Authorizers , TypeSafeApiIntegration , Integrations from myapi_python_runtime.apis.tags.default_api_operation_config import OperationConfig from myapi_python_infra.api import Api from pathlib import Path from os import path class MyStack ( Stack ): def __init__ ( self , scope : Construct , construct_id : str , ** kwargs ) -> None : super () . __init__ ( scope , construct_id , ** kwargs ) # Use the generated Api construct self . api = Api ( self , 'Api' , default_authorizer = Authorizers . iam (), integrations = OperationConfig ( say_hello = TypeSafeApiIntegration ( # Create a python lambda function from our \"lambda-dist\" package integration = Integrations . lambda_ ( Function ( self , 'SayHello' , runtime = Runtime . PYTHON_3_9 , code = Code . from_asset ( path . join ( \"..\" , \"lambdas\" , \"lambda-dist\" )), handler = \"lambdas.say_hello.handler\" , )), ), ), ) Implement a Lambda Handler In your lambdas project you can define your lambda handler in its source directory, eg lambdas/lambdas/say_hello.py : from myapi_python_runtime.model.say_hello_response_content import SayHelloResponseContent from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , SayHelloOperationResponses , ApiResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = SayHelloResponseContent ( message = \"Hello {} \" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Quick Start: Java This guide assumes you want to write your CDK infrastructure in Java and your lambda handlers in Java, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like. Create Your API Project Use the project in your .projenrc.ts . It can either be part of an nx-monorepo (recommended) or used in a standalone fashion. // Example automatically generated from non-compiling source. May contain errors. import software.aws.awsprototypingsdk.nxmonorepo.NxMonorepoProject ; import aws.prototyping.sdk.type.safe.api.TypeSafeApiProject ; import io.github.cdklabs.projen.awscdk.AwsCdkTypeScriptApp ; import io.github.cdklabs.projen.java.JavaProject ; // Create the monorepo NxMonorepoProject monorepo = NxMonorepoProject . Builder . create () . name ( \"monorepo\" ) . defaultReleaseBranch ( \"main\" ) . build (); // Create the API project Object api = TypeSafeApiProject . Builder . create () . name ( \"myapi\" ) . parent ( monorepo ) . outdir ( \"packages/api\" ) // Smithy as the model language. You can also use ModelLanguage.OPENAPI . model ( Map . of ( \"language\" , ModelLanguage . getSMITHY (), \"options\" , Map . of ( \"smithy\" , Map . of ( \"serviceName\" , Map . of ( \"namespace\" , \"com.mycompany\" , \"serviceName\" , \"MyApi\" ))))) // Generate client and server types in TypeScript, Python and Java . runtime ( Map . of ( \"languages\" , List . of ( Language . getTYPESCRIPT (), Language . getPYTHON (), Language . getJAVA ()))) // Generate CDK infrastructure in Java . infrastructure ( Map . of ( \"language\" , Language . getJAVA ())) // Generate HTML documentation . documentation ( Map . of ( \"formats\" , List . of ( DocumentationFormat . getHTML_REDOC ()))) . build (); JavaProject lambdas = JavaProject . Builder . create () . name ( \"lambdas\" ) . parent ( monorepo ) . outdir ( \"packages/lambdas\" ) . artifactId ( \"lambdas\" ) . groupId ( \"com.my.api\" ) . version ( \"1.0.0\" ) . build (); // The lambdas package needs a dependency on the generated java runtime lambdas . addDependency ( String . format ( \"%s/%s@%s\" , api . getRuntime (). getJava (). getPom (). getGroupId (), api . getRuntime (). getJava (). getPom (). getArtifactId (), api . getRuntime (). getJava (). getPom (). getVersion ())); lambdas . pom . addRepository ( MavenRepository . builder () . url ( String . format ( \"file://%s/dist/java\" , path . relative ( lambdas . getOutdir (), api . getRuntime (). getJava (). getOutdir ()))) . id ( \"java-api-runtime\" ) . build ()); monorepo . addImplicitDependency ( lambdas , api . getRuntime (). getJava ()); // Use the maven shade plugin to build a \"super jar\" which we can deploy to AWS Lambda lambdas . pom . addPlugin ( \"org.apache.maven.plugins/maven-shade-plugin@3.3.0\" , PluginOptions . builder () . configuration ( Map . of ( \"createDependencyReducedPom\" , false )) . executions ( List . of ( PluginExecution . builder () . id ( \"shade-task\" ) . phase ( \"package\" ) . goals ( List . of ( \"shade\" )) . build ())) . build ()); Object infra = AwsCdkJavaApp . Builder . create () . name ( \"infra\" ) . parent ( monorepo ) . outdir ( \"packages/infra\" ) . artifactId ( \"infra\" ) . groupId ( \"com.my.api\" ) . mainClass ( \"com.my.api.MyApp\" ) . version ( \"1.0.0\" ) . cdkVersion ( \"2.0.0\" ) . build (); // Add a dependency on the generated CDK infrastructure infra . addDependency ( String . format ( \"%s/%s@%s\" , api . getInfrastructure (). getJava (). getPom (). getGroupId (), api . getInfrastructure (). getJava (). getPom (). getArtifactId (), api . getInfrastructure (). getJava (). getPom (). getVersion ())); infra . pom . addRepository ( Map . of ( \"url\" , String . format ( \"file://%s/dist/java\" , path . relative ( infra . getOutdir (), api . getInfrastructure (). getJava (). getOutdir ())), \"id\" , \"java-api-infra\" )); monorepo . addImplicitDependency ( infra , api . getInfrastructure (). getJava ()); // Make sure the java lambda builds before our CDK infra monorepo . addImplicitDependency ( infra , lambdas ); monorepo . synth (); Use the CDK Construct In your CDK application, consume the Api construct, vended from the generated Java infrastructure package. package com.my.api ; import com.generated.api.myapijavainfra.infra.Api ; import com.generated.api.myapijavainfra.infra.ApiProps ; import com.generated.api.myapijavaruntime.runtime.api.OperationConfig ; import software.amazon.awscdk.Duration ; import software.amazon.awscdk.services.apigateway.CorsOptions ; import software.amazon.awscdk.services.lambda.Code ; import software.amazon.awscdk.services.lambda.Function ; import software.amazon.awscdk.services.lambda.FunctionProps ; import software.amazon.awscdk.services.lambda.Runtime ; import software.aws.awsprototypingsdk.typesafeapi.Authorizers ; import software.aws.awsprototypingsdk.typesafeapi.Integrations ; import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiIntegration ; import software.amazon.awscdk.App ; import software.amazon.awscdk.Stack ; import java.util.Arrays ; public class MyApp { public static void main ( final String [] args ) { App app = new App (); Stack s = new Stack ( app , \"infra\" ); // Declare the API construct to deploy the API Gateway resources new Api ( s , \"Api\" , ApiProps . builder () . defaultAuthorizer ( Authorizers . iam ()) . corsOptions ( CorsOptions . builder () . allowOrigins ( Arrays . asList ( \"*\" )) . allowMethods ( Arrays . asList ( \"*\" )) . build ()) . integrations ( OperationConfig . < TypeSafeApiIntegration > builder () . sayHello ( TypeSafeApiIntegration . builder () . integration ( Integrations . lambda ( // Point the lambda function to our built jar from the \"lambdas\" package new Function ( s , \"say-hello\" , FunctionProps . builder () . code ( Code . fromAsset ( \"../lambdas/dist/java/com/my/api/lambdas/1.0.0/lambdas-1.0.0.jar\" )) . handler ( \"com.my.api.SayHelloHandler\" ) . runtime ( Runtime . JAVA_11 ) . timeout ( Duration . seconds ( 30 )) . build ()))) . build ()) . build ()) . build ()); app . synth (); } } Implement a Lambda Handler In your lambdas project you can define your lambda handler in its source directory, eg lambdas/src/main/java/com/my/api/SayHelloHandler.java : package com.my.api ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello200Response ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloRequestInput ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloResponse ; import com.generated.api.myapijavaruntime.runtime.model.SayHelloResponseContent ; /** * An example lambda handler which uses the generated handler wrapper class (Handlers.SayHello) to manage marshalling * inputs and outputs. */ public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( SayHelloResponseContent . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Other Details Customising Generated Types/Infrastructure Projects By default, the generated types and infrastructure projects are configured automatically, including their project names. You can customise the generated projects using the runtime.options.<language> or infrastructure.options.<language> properties when constructing the TypeSafeApiProject . AWS WAFv2 Web ACL By default, a Web ACL is deployed and attached to your API Gateway Rest API with the \" AWSManagedRulesCommonRuleSet \", which provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10 . You can customise the Web ACL configuration via the webAclOptions of your Api CDK construct, eg: // Example automatically generated from non-compiling source. May contain errors. public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"integrations\" , Map . of (...), \"webAclOptions\" , Map . of ( // Allow access only to specific CIDR ranges \"cidrAllowList\" , Map . of ( \"cidrType\" , \"IPV4\" , \"cidrRanges\" , List . of ( \"1.2.3.4/5\" )), // Pick from the set here: https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html \"managedRules\" , List . of ( Map . of ( \"vendor\" , \"AWS\" , \"name\" , \"AWSManagedRulesSQLiRuleSet\" ))))); } } You can remove the Web ACL entirely with webAclOptions: { disable: true } - you may wish to use this if you'd like to set up a Web ACL yourself with more control over the rules. Smithy IntelliJ Plugin The Smithy-based projects are compatible with the Smithy IntelliJ Plugin , which provides syntax highlighting and auto-complete for your Smithy model. To make use of it, perform the following steps: Install the \"Smithy\" plugin (under Preferences -> Plugins ) Right-click on the smithy/build.gradle file in your Smithy API project Select \"Link Gradle Project\" Tagging Operations Operations can be grouped together into logical collections via tags. This can be achieved in Smithy with the @tags trait: @tags ([ \"pets\" , \"users\" ]) operation PurchasePet { ... } Or in OpenAPI using the tags property: paths : /pets/purchase : post : operationId : purchasePet tags : - pets - users ... When multiple tags are used, the \"first\" tag is considered to be the API that the operation belongs to, so in the generated client, the above example operation would be included in the PetsApi client but not the UsersApi client. Multiple tags are still useful for documentation generation, for example DocumentationFormat.HTML_REDOC will group operations by tag in the side navigation bar. If you would like to introduce tags without breaking existing clients, we recommend first adding a tag named default to all operations. \u26a0\ufe0f Important Note : Smithy versions below 1.28.0 sort tags in alphabetical order and so the \"first\" tag will be the earliest in the alphabet. Therefore, if using tags with older versions of Smithy, we recommend prefixing your desired first tag with an underscore (for example _default ). This is rectified in 1.28.0 , where tag order from the @tags trait is preserved. API Reference Constructs TypeSafeRestApi A construct for creating an api gateway rest api based on the definition in the OpenAPI spec. Initializers import software.aws.awsprototypingsdk.typesafeapi.TypeSafeRestApi ; TypeSafeRestApi . Builder . create ( Construct scope , java . lang . String id ) // .cloudWatchRole(java.lang.Boolean) // .deploy(java.lang.Boolean) // .deployOptions(StageOptions) // .description(java.lang.String) // .disableExecuteApiEndpoint(java.lang.Boolean) // .domainName(DomainNameOptions) // .endpointExportName(java.lang.String) // .endpointTypes(java.util.List<EndpointType>) // .failOnWarnings(java.lang.Boolean) // .parameters(java.util.Map<java.lang.String, java.lang.String>) // .policy(PolicyDocument) // .restApiName(java.lang.String) // .retainDeployments(java.lang.Boolean) . integrations ( java . util . Map < java . lang . String , TypeSafeApiIntegration > ) . operationLookup ( java . util . Map < java . lang . String , MethodAndPath > ) // .corsOptions(CorsOptions) // .defaultAuthorizer(Authorizer) . specPath ( java . lang . String ) // .webAclOptions(TypeSafeApiWebAclOptions) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. cloudWatchRole java.lang.Boolean Automatically configure an AWS CloudWatch role for API Gateway. deploy java.lang.Boolean Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deployOptions software.amazon.awscdk.services.apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description java.lang.String A description of the RestApi construct. disableExecuteApiEndpoint java.lang.Boolean Specifies whether clients can invoke the API using the default execute-api endpoint. domainName software.amazon.awscdk.services.apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpointExportName java.lang.String Export name for the CfnOutput containing the API endpoint. endpointTypes java.util.List A list of the endpoint types of the API. failOnWarnings java.lang.Boolean Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters java.util.Map Custom header parameters for the request. policy software.amazon.awscdk.services.iam.PolicyDocument A policy document that contains the permissions for this RestApi. restApiName java.lang.String A name for the API Gateway RestApi resource. retainDeployments java.lang.Boolean Retains old deployment resources when the API changes. integrations java.util.Map TypeSafeApiIntegration\\ > A mapping of API operation to its integration. operationLookup java.util.Map MethodAndPath\\ > Details about each operation. corsOptions software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. specPath java.lang.String Path to the JSON open api spec. webAclOptions TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. scope Required Type: software.constructs.Construct id Required Type: java.lang.String cloudWatchRole Optional Type: java.lang.Boolean Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional Type: java.lang.Boolean Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deployOptions Optional Type: software.amazon.awscdk.services.apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional Type: java.lang.String Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disableExecuteApiEndpoint Optional Type: java.lang.Boolean Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domainName Optional Type: software.amazon.awscdk.services.apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpointExportName Optional Type: java.lang.String Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpointTypes Optional Type: java.util.List Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. failOnWarnings Optional Type: java.lang.Boolean Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional Type: java.util.Map Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional Type: software.amazon.awscdk.services.iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. restApiName Optional Type: java.lang.String Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retainDeployments Optional Type: java.lang.Boolean Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required Type: java.util.Map TypeSafeApiIntegration\\ > A mapping of API operation to its integration. operationLookup Required Type: java.util.Map MethodAndPath\\ > Details about each operation. corsOptions Optional Type: software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. specPath Required Type: java.lang.String Path to the JSON open api spec. webAclOptions Optional Type: TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.typesafeapi.TypeSafeRestApi ; TypeSafeRestApi . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. api software.amazon.awscdk.services.apigateway.SpecRestApi No description. ipSet software.amazon.awscdk.services.wafv2.CfnIPSet No description. webAcl software.amazon.awscdk.services.wafv2.CfnWebACL No description. webAclAssociation software.amazon.awscdk.services.wafv2.CfnWebACLAssociation No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. api Required public SpecRestApi getApi (); Type: software.amazon.awscdk.services.apigateway.SpecRestApi ipSet Optional public CfnIPSet getIpSet (); Type: software.amazon.awscdk.services.wafv2.CfnIPSet webAcl Optional public CfnWebACL getWebAcl (); Type: software.amazon.awscdk.services.wafv2.CfnWebACL webAclAssociation Optional public CfnWebACLAssociation getWebAclAssociation (); Type: software.amazon.awscdk.services.wafv2.CfnWebACLAssociation Structs ApiGatewayIntegration Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html Initializer import software.aws.awsprototypingsdk.typesafeapi.ApiGatewayIntegration ; ApiGatewayIntegration . builder () // .cacheKeyParameters(java.util.List<java.lang.String>) // .cacheNamespace(java.lang.String) // .connectionId(java.lang.String) // .connectionType(java.lang.String) // .contentHandling(java.lang.String) // .credentials(java.lang.String) // .httpMethod(java.lang.String) // .passthroughBehavior(java.lang.String) // .requestParameters(java.util.Map<java.lang.String, java.lang.String>) // .requestTemplates(java.util.Map<java.lang.String, java.lang.String>) // .responses(java.util.Map<java.lang.String, ApiGatewayIntegrationResponse>) // .timeoutInMillis(java.lang.Number) // .tlsConfig(ApiGatewayIntegrationTlsConfig) // .type(java.lang.String) // .uri(java.lang.String) . build (); Properties Name Type Description cacheKeyParameters java.util.List A list of request parameters whose values are to be cached. cacheNamespace java.lang.String An API-specific tag group of related cached parameters. connectionId java.lang.String The ID of a VpcLink for the private integration. connectionType java.lang.String The integration connection type. contentHandling java.lang.String Request payload encoding conversion types. credentials java.lang.String For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. httpMethod java.lang.String The HTTP method used in the integration request. passthroughBehavior java.lang.String Specifies how a request payload of unmapped content type is passed through the integration request without modification. requestParameters java.util.Map Specifies mappings from method request parameters to integration request parameters. requestTemplates java.util.Map Mapping templates for a request payload of specified MIME types. responses java.util.Map ApiGatewayIntegrationResponse\\ > Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. timeoutInMillis java.lang.Number Custom timeout between 50 and 29,000 milliseconds. tlsConfig ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. type java.lang.String The type of integration with the specified backend. uri java.lang.String The endpoint URI of the backend. cacheKeyParameters Optional public java . util . List < java . lang . String > getCacheKeyParameters (); Type: java.util.List A list of request parameters whose values are to be cached. cacheNamespace Optional public java . lang . String getCacheNamespace (); Type: java.lang.String An API-specific tag group of related cached parameters. connectionId Optional public java . lang . String getConnectionId (); Type: java.lang.String The ID of a VpcLink for the private integration. https://docs.aws.amazon.com/apigateway/latest/api/API_VpcLink.html connectionType Optional public java . lang . String getConnectionType (); Type: java.lang.String The integration connection type. The valid value is \"VPC_LINK\" for private integration or \"INTERNET\", otherwise. contentHandling Optional public java . lang . String getContentHandling (); Type: java.lang.String Request payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. credentials Optional public java . lang . String getCredentials (); Type: java.lang.String For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. If unspecified, credentials default to resource-based permissions that must be added manually to allow the API to access the resource. For more information, see Granting Permissions Using a Resource Policy. Note: When using IAM credentials, make sure that AWS STS Regional endpoints are enabled for the Region where this API is deployed for best performance. httpMethod Optional public java . lang . String getHttpMethod (); Type: java.lang.String The HTTP method used in the integration request. For Lambda function invocations, the value must be POST. passthroughBehavior Optional public java . lang . String getPassthroughBehavior (); Type: java.lang.String Specifies how a request payload of unmapped content type is passed through the integration request without modification. Supported values are when_no_templates, when_no_match, and never. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#passthroughBehavior requestParameters Optional public java . util . Map < java . lang . String , java . lang . String > getRequestParameters (); Type: java.util.Map Specifies mappings from method request parameters to integration request parameters. Supported request parameters are querystring, path, header, and body. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestParameters.html requestTemplates Optional public java . util . Map < java . lang . String , java . lang . String > getRequestTemplates (); Type: java.util.Map Mapping templates for a request payload of specified MIME types. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestTemplates.html responses Optional public java . util . Map < java . lang . String , ApiGatewayIntegrationResponse > getResponses (); Type: java.util.Map ApiGatewayIntegrationResponse\\ > Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-responses.html timeoutInMillis Optional public java . lang . Number getTimeoutInMillis (); Type: java.lang.Number Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds. tlsConfig Optional public ApiGatewayIntegrationTlsConfig getTlsConfig (); Type: ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html type Optional public java . lang . String getType (); Type: java.lang.String The type of integration with the specified backend. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#type uri Optional public java . lang . String getUri (); Type: java.lang.String The endpoint URI of the backend. For integrations of the aws type, this is an ARN value. For the HTTP integration, this is the URL of the HTTP endpoint including the https or http scheme. ApiGatewayIntegrationResponse API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html Initializer import software.aws.awsprototypingsdk.typesafeapi.ApiGatewayIntegrationResponse ; ApiGatewayIntegrationResponse . builder () . responseParameters ( java . util . Map < java . lang . String , java . lang . String > ) . responseTemplates ( java . util . Map < java . lang . String , java . lang . String > ) . statusCode ( java . lang . String ) // .contentHandling(java.lang.String) . build (); Properties Name Type Description responseParameters java.util.Map Specifies parameter mappings for the response. responseTemplates java.util.Map Specifies MIME type-specific mapping templates for the response\u2019s payload. statusCode java.lang.String HTTP status code for the method response. contentHandling java.lang.String Response payload encoding conversion types. responseParameters Required public java . util . Map < java . lang . String , java . lang . String > getResponseParameters (); Type: java.util.Map Specifies parameter mappings for the response. responseTemplates Required public java . util . Map < java . lang . String , java . lang . String > getResponseTemplates (); Type: java.util.Map Specifies MIME type-specific mapping templates for the response\u2019s payload. statusCode Required public java . lang . String getStatusCode (); Type: java.lang.String HTTP status code for the method response. contentHandling Optional public java . lang . String getContentHandling (); Type: java.lang.String Response payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html Initializer import software.aws.awsprototypingsdk.typesafeapi.ApiGatewayIntegrationTlsConfig ; ApiGatewayIntegrationTlsConfig . builder () // .insecureSkipVerification(java.lang.Boolean) . build (); Properties Name Type Description insecureSkipVerification java.lang.Boolean Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. insecureSkipVerification Optional public java . lang . Boolean getInsecureSkipVerification (); Type: java.lang.Boolean Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations. AuthorizerProps Properties for an authorizer. Initializer import software.aws.awsprototypingsdk.typesafeapi.AuthorizerProps ; AuthorizerProps . builder () . authorizationType ( AuthorizationType ) . authorizerId ( java . lang . String ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. CidrAllowList Representation of a CIDR range. Initializer import software.aws.awsprototypingsdk.typesafeapi.CidrAllowList ; CidrAllowList . builder () . cidrRanges ( java . util . List < java . lang . String > ) . cidrType ( java . lang . String ) . build (); Properties Name Type Description cidrRanges java.util.List Specify an IPv4 address by using CIDR notation. cidrType java.lang.String Type of CIDR range. cidrRanges Required public java . util . List < java . lang . String > getCidrRanges (); Type: java.util.List Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidrType Required public java . lang . String getCidrType (); Type: java.lang.String Type of CIDR range. CognitoAuthorizerProps Properties used to configure a cognito authorizer. Initializer import software.aws.awsprototypingsdk.typesafeapi.CognitoAuthorizerProps ; CognitoAuthorizerProps . builder () . authorizerId ( java . lang . String ) . userPools ( java . util . List < IUserPool > ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Properties Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. userPools java.util.List The Cognito user pools associated with this authorizer. authorizationScopes java.util.List A list of authorization scopes configured on the method. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String Unique identifier for this authorizer. userPools Required public java . util . List < IUserPool > getUserPools (); Type: java.util.List The Cognito user pools associated with this authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes CustomAuthorizerProps Properties used to configure a custom authorizer. Initializer import software.aws.awsprototypingsdk.typesafeapi.CustomAuthorizerProps ; CustomAuthorizerProps . builder () . authorizerId ( java . lang . String ) . function ( IFunction ) // .authorizerResultTtlInSeconds(java.lang.Number) // .identitySource(java.lang.String) // .type(CustomAuthorizerType) . build (); Properties Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. function software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds java.lang.Number The number of seconds during which the authorizer result is cached. identitySource java.lang.String The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String Unique identifier for this authorizer. function Required public IFunction getFunction (); Type: software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds Optional public java . lang . Number getAuthorizerResultTtlInSeconds (); Type: java.lang.Number Default: 300 The number of seconds during which the authorizer result is cached. identitySource Optional public java . lang . String getIdentitySource (); Type: java.lang.String Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional public CustomAuthorizerType getType (); Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type DocumentationConfiguration Configuration for generated documentation. Initializer import software.aws.awsprototypingsdk.typesafeapi.DocumentationConfiguration ; DocumentationConfiguration . builder () . formats ( java . util . List < DocumentationFormat > ) . build (); Properties Name Type Description formats java.util.List< DocumentationFormat > Formats for generated documentation. formats Required public java . util . List < DocumentationFormat > getFormats (); Type: java.util.List< DocumentationFormat > Formats for generated documentation. GeneratedCodeOptions Options for generated clients. Initializer import software.aws.awsprototypingsdk.typesafeapi.GeneratedCodeOptions ; GeneratedCodeOptions . builder () // .java(JavaProjectOptions) // .python(PythonProjectOptions) // .typescript(TypeScriptProjectOptions) . build (); Properties Name Type Description java io.github.cdklabs.projen.java.JavaProjectOptions Options for a generated java project. python io.github.cdklabs.projen.python.PythonProjectOptions Options for a generated python project. typescript io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for a generated typescript project. java Optional public JavaProjectOptions getJava (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for a generated java project. These override the default inferred options. python Optional public PythonProjectOptions getPython (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for a generated python project. These override the default inferred options. typescript Optional public TypeScriptProjectOptions getTypescript (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for a generated typescript project. These override the default inferred options. GeneratedCodeProjects Generated code projects. Initializer import software.aws.awsprototypingsdk.typesafeapi.GeneratedCodeProjects ; GeneratedCodeProjects . builder () // .java(JavaProject) // .python(PythonProject) // .typescript(TypeScriptProject) . build (); Properties Name Type Description java io.github.cdklabs.projen.java.JavaProject Generated java project. python io.github.cdklabs.projen.python.PythonProject Generated python project. typescript io.github.cdklabs.projen.typescript.TypeScriptProject Generated typescript project. java Optional public JavaProject getJava (); Type: io.github.cdklabs.projen.java.JavaProject Generated java project. python Optional public PythonProject getPython (); Type: io.github.cdklabs.projen.python.PythonProject Generated python project. typescript Optional public TypeScriptProject getTypescript (); Type: io.github.cdklabs.projen.typescript.TypeScriptProject Generated typescript project. InfrastructureConfiguration Configuration for generated infrastructure. Initializer import software.aws.awsprototypingsdk.typesafeapi.InfrastructureConfiguration ; InfrastructureConfiguration . builder () . language ( Language ) // .options(GeneratedCodeOptions) . build (); Properties Name Type Description language Language The language to generate the type-safe CDK infrastructure in. options GeneratedCodeOptions Options for the infrastructure package. language Required public Language getLanguage (); Type: Language The language to generate the type-safe CDK infrastructure in. options Optional public GeneratedCodeOptions getOptions (); Type: GeneratedCodeOptions Options for the infrastructure package. Note that only those provided for the specified language will apply. IntegrationGrantProps Properties for granting the API access to invoke the operation. Initializer import software.aws.awsprototypingsdk.typesafeapi.IntegrationGrantProps ; IntegrationGrantProps . builder () . method ( java . lang . String ) . path ( java . lang . String ) . api ( SpecRestApi ) . operationId ( java . lang . String ) . scope ( Construct ) . build (); Properties Name Type Description method java.lang.String The http method of this operation. path java.lang.String The path of this operation in the api. api software.amazon.awscdk.services.apigateway.SpecRestApi The api to grant permissions for. operationId java.lang.String The ID of the operation for which permissions are being granted. scope software.constructs.Construct The scope in which permission resources can be created. method Required public java . lang . String getMethod (); Type: java.lang.String The http method of this operation. path Required public java . lang . String getPath (); Type: java.lang.String The path of this operation in the api. api Required public SpecRestApi getApi (); Type: software.amazon.awscdk.services.apigateway.SpecRestApi The api to grant permissions for. operationId Required public java . lang . String getOperationId (); Type: java.lang.String The ID of the operation for which permissions are being granted. scope Required public Construct getScope (); Type: software.constructs.Construct The scope in which permission resources can be created. IntegrationRenderProps Properties for rendering an integration into an API Gateway OpenAPI extension. Initializer import software.aws.awsprototypingsdk.typesafeapi.IntegrationRenderProps ; IntegrationRenderProps . builder () . method ( java . lang . String ) . path ( java . lang . String ) . operationId ( java . lang . String ) . scope ( Construct ) . build (); Properties Name Type Description method java.lang.String The http method of this operation. path java.lang.String The path of this operation in the api. operationId java.lang.String The ID of the operation being rendered. scope software.constructs.Construct The scope in which the integration is being rendered. method Required public java . lang . String getMethod (); Type: java.lang.String The http method of this operation. path Required public java . lang . String getPath (); Type: java.lang.String The path of this operation in the api. operationId Required public java . lang . String getOperationId (); Type: java.lang.String The ID of the operation being rendered. scope Required public Construct getScope (); Type: software.constructs.Construct The scope in which the integration is being rendered. ManagedRule Initializer import software.aws.awsprototypingsdk.typesafeapi.ManagedRule ; ManagedRule . builder () . name ( java . lang . String ) . vendor ( java . lang . String ) . build (); Properties Name Type Description name java.lang.String The name of the managed rule group. vendor java.lang.String The name of the managed rule group vendor. name Required public java . lang . String getName (); Type: java.lang.String The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required public java . lang . String getVendor (); Type: java.lang.String The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. MethodAndPath Structure to contain an API operation's method and path. Initializer import software.aws.awsprototypingsdk.typesafeapi.MethodAndPath ; MethodAndPath . builder () . method ( java . lang . String ) . path ( java . lang . String ) . build (); Properties Name Type Description method java.lang.String The http method of this operation. path java.lang.String The path of this operation in the api. method Required public java . lang . String getMethod (); Type: java.lang.String The http method of this operation. path Required public java . lang . String getPath (); Type: java.lang.String The path of this operation in the api. ModelConfiguration Configuration for modelling the API. Initializer import software.aws.awsprototypingsdk.typesafeapi.ModelConfiguration ; ModelConfiguration . builder () . language ( ModelLanguage ) . options ( ModelOptions ) . build (); Properties Name Type Description language ModelLanguage The language the API model is defined in. options ModelOptions Options for the API model. language Required public ModelLanguage getLanguage (); Type: ModelLanguage The language the API model is defined in. options Required public ModelOptions getOptions (); Type: ModelOptions Options for the API model. ModelOptions Options for models. Initializer import software.aws.awsprototypingsdk.typesafeapi.ModelOptions ; ModelOptions . builder () // .openapi(OpenApiModelOptions) // .smithy(SmithyModelOptions) . build (); Properties Name Type Description openapi OpenApiModelOptions Options for the OpenAPI model - required when model language is OPENAPI. smithy SmithyModelOptions Options for the Smithy model - required when model language is SMITHY. openapi Optional public OpenApiModelOptions getOpenapi (); Type: OpenApiModelOptions Options for the OpenAPI model - required when model language is OPENAPI. smithy Optional public SmithyModelOptions getSmithy (); Type: SmithyModelOptions Options for the Smithy model - required when model language is SMITHY. OpenApiModelOptions Options for the OpenAPI model. Initializer import software.aws.awsprototypingsdk.typesafeapi.OpenApiModelOptions ; OpenApiModelOptions . builder () . title ( java . lang . String ) . build (); Properties Name Type Description title java.lang.String The title in the OpenAPI specification. title Required public java . lang . String getTitle (); Type: java.lang.String The title in the OpenAPI specification. RuntimeConfiguration Configuration for generated runtime projects. Initializer import software.aws.awsprototypingsdk.typesafeapi.RuntimeConfiguration ; RuntimeConfiguration . builder () . languages ( java . util . List < Language > ) // .options(GeneratedCodeOptions) . build (); Properties Name Type Description languages java.util.List< Language > The languages that runtime projects will be generated in. options GeneratedCodeOptions Options for the generated runtimes. languages Required public java . util . List < Language > getLanguages (); Type: java.util.List< Language > The languages that runtime projects will be generated in. These projects can be used to provide type safety for both client and server projects. options Optional public GeneratedCodeOptions getOptions (); Type: GeneratedCodeOptions Options for the generated runtimes. Note that only options provided for the specified languages will apply. SmithyBuildOptions Options for the smithy build files. Initializer import software.aws.awsprototypingsdk.typesafeapi.SmithyBuildOptions ; SmithyBuildOptions . builder () // .imports(java.util.List<java.lang.String>) // .plugins(java.util.Map<java.lang.String, SmithyPlugin>) // .ignoreMissingPlugins(java.lang.Boolean) // .maven(SmithyMavenConfiguration) // .projections(java.util.Map<java.lang.String, SmithyProjection>) . build (); Properties Name Type Description imports java.util.List List of imports. plugins java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. ignoreMissingPlugins java.lang.Boolean If a plugin can't be found, Smithy will by default fail the build. maven SmithyMavenConfiguration Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections java.util.Map SmithyProjection\\ > Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . imports Optional public java . util . List < java . lang . String > getImports (); Type: java.util.List List of imports. plugins Optional public java . util . Map < java . lang . String , SmithyPlugin > getPlugins (); Type: java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. ignoreMissingPlugins Optional public java . lang . Boolean getIgnoreMissingPlugins (); Type: java.lang.Boolean Default: no ignoreMissingPlugins set in the smithy-build.json file If a plugin can't be found, Smithy will by default fail the build. This setting can be set to true to allow the build to progress even if a plugin can't be found on the classpath. maven Optional public SmithyMavenConfiguration getMaven (); Type: SmithyMavenConfiguration Default: the default configuration required for Smithy to OpenAPI conversion Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections Optional public java . util . Map < java . lang . String , SmithyProjection > getProjections (); Type: java.util.Map SmithyProjection\\ > Default: no projections Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . SmithyCommon Properties common to smithy plugins and the root smithy build. Initializer import software.aws.awsprototypingsdk.typesafeapi.SmithyCommon ; SmithyCommon . builder () // .imports(java.util.List<java.lang.String>) // .plugins(java.util.Map<java.lang.String, SmithyPlugin>) . build (); Properties Name Type Description imports java.util.List List of imports. plugins java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. imports Optional public java . util . List < java . lang . String > getImports (); Type: java.util.List List of imports. plugins Optional public java . util . Map < java . lang . String , SmithyPlugin > getPlugins (); Type: java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. SmithyMavenConfiguration Configuration for smithy maven dependencies. Initializer import software.aws.awsprototypingsdk.typesafeapi.SmithyMavenConfiguration ; SmithyMavenConfiguration . builder () // .dependencies(java.util.List<java.lang.String>) // .repositoryUrls(java.util.List<java.lang.String>) . build (); Properties Name Type Description dependencies java.util.List The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repositoryUrls java.util.List The repository urls used in the build.gradle and smithy-build.json files. dependencies Optional public java . util . List < java . lang . String > getDependencies (); Type: java.util.List The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repositoryUrls Optional public java . util . List < java . lang . String > getRepositoryUrls (); Type: java.util.List Default: maven central and maven local The repository urls used in the build.gradle and smithy-build.json files. SmithyModelOptions Options for a Smithy model. Initializer import software.aws.awsprototypingsdk.typesafeapi.SmithyModelOptions ; SmithyModelOptions . builder () . serviceName ( SmithyServiceName ) // .ignoreGradleWrapper(java.lang.Boolean) // .ignoreSmithyBuildOutput(java.lang.Boolean) // .smithyBuildOptions(SmithyBuildOptions) . build (); Properties Name Type Description serviceName SmithyServiceName Smithy service name. ignoreGradleWrapper java.lang.Boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput java.lang.Boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. smithyBuildOptions SmithyBuildOptions Smithy build options. serviceName Required public SmithyServiceName getServiceName (); Type: SmithyServiceName Smithy service name. ignoreGradleWrapper Optional public java . lang . Boolean getIgnoreGradleWrapper (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public java . lang . Boolean getIgnoreSmithyBuildOutput (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. smithyBuildOptions Optional public SmithyBuildOptions getSmithyBuildOptions (); Type: SmithyBuildOptions Smithy build options. SmithyPlugin A smithy plugin. Initializer import software.aws.awsprototypingsdk.typesafeapi.SmithyPlugin ; SmithyPlugin . builder () // .service(java.lang.String) . build (); Properties Name Type Description service java.lang.String The service to which the plugin should apply. service Optional public java . lang . String getService (); Type: java.lang.String The service to which the plugin should apply. SmithyProjection A smithy build projection. Initializer import software.aws.awsprototypingsdk.typesafeapi.SmithyProjection ; SmithyProjection . builder () // .imports(java.util.List<java.lang.String>) // .plugins(java.util.Map<java.lang.String, SmithyPlugin>) // .abstract(java.lang.Boolean) // .transforms(java.util.List<SmithyTransform>) . build (); Properties Name Type Description imports java.util.List List of imports. plugins java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. abstract java.lang.Boolean Whether or not the projection is abstract. transforms java.util.List< SmithyTransform > Transforms to apply to the projection. imports Optional public java . util . List < java . lang . String > getImports (); Type: java.util.List List of imports. plugins Optional public java . util . Map < java . lang . String , SmithyPlugin > getPlugins (); Type: java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. abstract Optional public java . lang . Boolean getAbstract (); Type: java.lang.Boolean Whether or not the projection is abstract. transforms Optional public java . util . List < SmithyTransform > getTransforms (); Type: java.util.List< SmithyTransform > Transforms to apply to the projection. SmithyServiceName Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html Initializer import software.aws.awsprototypingsdk.typesafeapi.SmithyServiceName ; SmithyServiceName . builder () . namespace ( java . lang . String ) . serviceName ( java . lang . String ) . build (); Properties Name Type Description namespace java.lang.String The service namespace. serviceName java.lang.String The service name. namespace Required public java . lang . String getNamespace (); Type: java.lang.String The service namespace. Nested namespaces are separated by '.', for example com.company https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id serviceName Required public java . lang . String getServiceName (); Type: java.lang.String The service name. Should be PascalCase, for example HelloService https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id SmithyTransform A smithy build transform. Initializer import software.aws.awsprototypingsdk.typesafeapi.SmithyTransform ; SmithyTransform . builder () . args ( java . util . Map < java . lang . String , java . lang . Object > ) . name ( java . lang . String ) . build (); Properties Name Type Description args java.util.Map Arguments for the transform. name java.lang.String Name of the transform. args Required public java . util . Map < java . lang . String , java . lang . Object > getArgs (); Type: java.util.Map Arguments for the transform. name Required public java . lang . String getName (); Type: java.lang.String Name of the transform. TypeSafeApiIntegration Defines an integration for an individual API operation. Initializer import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiIntegration ; TypeSafeApiIntegration . builder () . integration ( Integration ) // .authorizer(Authorizer) . build (); Properties Name Type Description integration Integration The lambda function to service the api operation. authorizer Authorizer The authorizer to use for this api operation (overrides the default). integration Required public Integration getIntegration (); Type: Integration The lambda function to service the api operation. authorizer Optional public Authorizer getAuthorizer (); Type: Authorizer The authorizer to use for this api operation (overrides the default). TypeSafeApiModelProjectOptions Initializer import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiModelProjectOptions ; TypeSafeApiModelProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitIgnoreOptions(IgnoreFileOptions) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcJsonOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) . modelLanguage ( ModelLanguage ) . modelOptions ( ModelOptions ) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitIgnoreOptions io.github.cdklabs.projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. modelLanguage ModelLanguage No description. modelOptions ModelOptions No description. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitIgnoreOptions Optional public IgnoreFileOptions getGitIgnoreOptions (); Type: io.github.cdklabs.projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcJsonOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. modelLanguage Required public ModelLanguage getModelLanguage (); Type: ModelLanguage modelOptions Required public ModelOptions getModelOptions (); Type: ModelOptions TypeSafeApiOptions Options required alongside an Open API specification to create API Gateway resources. Initializer import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiOptions ; TypeSafeApiOptions . builder () . integrations ( java . util . Map < java . lang . String , TypeSafeApiIntegration > ) . operationLookup ( java . util . Map < java . lang . String , MethodAndPath > ) // .corsOptions(CorsOptions) // .defaultAuthorizer(Authorizer) . build (); Properties Name Type Description integrations java.util.Map TypeSafeApiIntegration\\ > A mapping of API operation to its integration. operationLookup java.util.Map MethodAndPath\\ > Details about each operation. corsOptions software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. integrations Required public java . util . Map < java . lang . String , TypeSafeApiIntegration > getIntegrations (); Type: java.util.Map TypeSafeApiIntegration\\ > A mapping of API operation to its integration. operationLookup Required public java . util . Map < java . lang . String , MethodAndPath > getOperationLookup (); Type: java.util.Map MethodAndPath\\ > Details about each operation. corsOptions Optional public CorsOptions getCorsOptions (); Type: software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public Authorizer getDefaultAuthorizer (); Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. TypeSafeApiProjectOptions Options for the TypeSafeApiProject. Initializer import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiProjectOptions ; TypeSafeApiProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitIgnoreOptions(IgnoreFileOptions) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcJsonOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) . infrastructure ( InfrastructureConfiguration ) . model ( ModelConfiguration ) . runtime ( RuntimeConfiguration ) // .documentation(DocumentationConfiguration) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitIgnoreOptions io.github.cdklabs.projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. infrastructure InfrastructureConfiguration Configuration for generated infrastructure. model ModelConfiguration Configuration for the API model. runtime RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation DocumentationConfiguration Configuration for generated documentation. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitIgnoreOptions Optional public IgnoreFileOptions getGitIgnoreOptions (); Type: io.github.cdklabs.projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcJsonOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. infrastructure Required public InfrastructureConfiguration getInfrastructure (); Type: InfrastructureConfiguration Configuration for generated infrastructure. model Required public ModelConfiguration getModel (); Type: ModelConfiguration Configuration for the API model. runtime Required public RuntimeConfiguration getRuntime (); Type: RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation Optional public DocumentationConfiguration getDocumentation (); Type: DocumentationConfiguration Configuration for generated documentation. TypeSafeApiWebAclOptions Configuration for the Web ACL associated with the API. Initializer import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiWebAclOptions ; TypeSafeApiWebAclOptions . builder () // .cidrAllowList(CidrAllowList) // .disable(java.lang.Boolean) // .managedRules(java.util.List<ManagedRule>) . build (); Properties Name Type Description cidrAllowList CidrAllowList List of cidr ranges to allow. disable java.lang.Boolean If set to true, no WebACL will be associated with the API. managedRules java.util.List< ManagedRule > List of managed rules to apply to the web acl. cidrAllowList Optional public CidrAllowList getCidrAllowList (); Type: CidrAllowList Default: undefined List of cidr ranges to allow. disable Optional public java . lang . Boolean getDisable (); Type: java.lang.Boolean Default: false If set to true, no WebACL will be associated with the API. You can also use this option if you would like to create your own WebACL and associate it yourself. managedRules Optional public java . util . List < ManagedRule > getManagedRules (); Type: java.util.List< ManagedRule > Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. TypeSafeRestApiProps Configuration for the TypeSafeRestApi construct. Initializer import software.aws.awsprototypingsdk.typesafeapi.TypeSafeRestApiProps ; TypeSafeRestApiProps . builder () // .cloudWatchRole(java.lang.Boolean) // .deploy(java.lang.Boolean) // .deployOptions(StageOptions) // .description(java.lang.String) // .disableExecuteApiEndpoint(java.lang.Boolean) // .domainName(DomainNameOptions) // .endpointExportName(java.lang.String) // .endpointTypes(java.util.List<EndpointType>) // .failOnWarnings(java.lang.Boolean) // .parameters(java.util.Map<java.lang.String, java.lang.String>) // .policy(PolicyDocument) // .restApiName(java.lang.String) // .retainDeployments(java.lang.Boolean) . integrations ( java . util . Map < java . lang . String , TypeSafeApiIntegration > ) . operationLookup ( java . util . Map < java . lang . String , MethodAndPath > ) // .corsOptions(CorsOptions) // .defaultAuthorizer(Authorizer) . specPath ( java . lang . String ) // .webAclOptions(TypeSafeApiWebAclOptions) . build (); Properties Name Type Description cloudWatchRole java.lang.Boolean Automatically configure an AWS CloudWatch role for API Gateway. deploy java.lang.Boolean Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deployOptions software.amazon.awscdk.services.apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description java.lang.String A description of the RestApi construct. disableExecuteApiEndpoint java.lang.Boolean Specifies whether clients can invoke the API using the default execute-api endpoint. domainName software.amazon.awscdk.services.apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpointExportName java.lang.String Export name for the CfnOutput containing the API endpoint. endpointTypes java.util.List A list of the endpoint types of the API. failOnWarnings java.lang.Boolean Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters java.util.Map Custom header parameters for the request. policy software.amazon.awscdk.services.iam.PolicyDocument A policy document that contains the permissions for this RestApi. restApiName java.lang.String A name for the API Gateway RestApi resource. retainDeployments java.lang.Boolean Retains old deployment resources when the API changes. integrations java.util.Map TypeSafeApiIntegration\\ > A mapping of API operation to its integration. operationLookup java.util.Map MethodAndPath\\ > Details about each operation. corsOptions software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. specPath java.lang.String Path to the JSON open api spec. webAclOptions TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. cloudWatchRole Optional public java . lang . Boolean getCloudWatchRole (); Type: java.lang.Boolean Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional public java . lang . Boolean getDeploy (); Type: java.lang.Boolean Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deployOptions Optional public StageOptions getDeployOptions (); Type: software.amazon.awscdk.services.apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional public java . lang . String getDescription (); Type: java.lang.String Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disableExecuteApiEndpoint Optional public java . lang . Boolean getDisableExecuteApiEndpoint (); Type: java.lang.Boolean Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domainName Optional public DomainNameOptions getDomainName (); Type: software.amazon.awscdk.services.apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpointExportName Optional public java . lang . String getEndpointExportName (); Type: java.lang.String Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpointTypes Optional public java . util . List < EndpointType > getEndpointTypes (); Type: java.util.List Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. failOnWarnings Optional public java . lang . Boolean getFailOnWarnings (); Type: java.lang.Boolean Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional public java . util . Map < java . lang . String , java . lang . String > getParameters (); Type: java.util.Map Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional public PolicyDocument getPolicy (); Type: software.amazon.awscdk.services.iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. restApiName Optional public java . lang . String getRestApiName (); Type: java.lang.String Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retainDeployments Optional public java . lang . Boolean getRetainDeployments (); Type: java.lang.Boolean Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required public java . util . Map < java . lang . String , TypeSafeApiIntegration > getIntegrations (); Type: java.util.Map TypeSafeApiIntegration\\ > A mapping of API operation to its integration. operationLookup Required public java . util . Map < java . lang . String , MethodAndPath > getOperationLookup (); Type: java.util.Map MethodAndPath\\ > Details about each operation. corsOptions Optional public CorsOptions getCorsOptions (); Type: software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public Authorizer getDefaultAuthorizer (); Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. specPath Required public java . lang . String getSpecPath (); Type: java.lang.String Path to the JSON open api spec. webAclOptions Optional public TypeSafeApiWebAclOptions getWebAclOptions (); Type: TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. Classes Authorizer An authorizer for authorizing API requests. Initializers import software.aws.awsprototypingsdk.typesafeapi.Authorizer ; Authorizer . Builder . create () . authorizationType ( AuthorizationType ) . authorizerId ( java . lang . String ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional Type: java.util.List Scopes for the authorizer, if any. Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. Authorizers Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct. Initializers import software.aws.awsprototypingsdk.typesafeapi.Authorizers ; new Authorizers (); Name Type Description Static Functions Name Description cognito A Cognito User Pools authorizer. custom A custom authorizer. iam An IAM authorizer which uses AWS signature version 4 to authorize requests. none No authorizer. cognito import software.aws.awsprototypingsdk.typesafeapi.Authorizers ; Authorizers . cognito ( CognitoAuthorizerProps props ) A Cognito User Pools authorizer. props Required Type: CognitoAuthorizerProps custom import software.aws.awsprototypingsdk.typesafeapi.Authorizers ; Authorizers . custom ( CustomAuthorizerProps props ) A custom authorizer. props Required Type: CustomAuthorizerProps iam import software.aws.awsprototypingsdk.typesafeapi.Authorizers ; Authorizers . iam () An IAM authorizer which uses AWS signature version 4 to authorize requests. none import software.aws.awsprototypingsdk.typesafeapi.Authorizers ; Authorizers . none () No authorizer. CognitoAuthorizer An authorizer that uses Cognito identity or access tokens. Initializers import software.aws.awsprototypingsdk.typesafeapi.CognitoAuthorizer ; CognitoAuthorizer . Builder . create () . authorizerId ( java . lang . String ) . userPools ( java . util . List < IUserPool > ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. userPools java.util.List The Cognito user pools associated with this authorizer. authorizationScopes java.util.List A list of authorization scopes configured on the method. authorizerId Required Type: java.lang.String Unique identifier for this authorizer. userPools Required Type: java.util.List The Cognito user pools associated with this authorizer. authorizationScopes Optional Type: java.util.List Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes Methods Name Description withScopes Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. withScopes public CognitoAuthorizer withScopes ( java . lang . String authorizationScopes ) Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes authorizationScopes Required Type: java.lang.String the scopes to apply. Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. userPools java.util.List The Cognito user pools associated with this authorizer. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. userPools Required public java . util . List < IUserPool > getUserPools (); Type: java.util.List The Cognito user pools associated with this authorizer. CustomAuthorizer An authorizer that uses a lambda function to authorize requests. Initializers import software.aws.awsprototypingsdk.typesafeapi.CustomAuthorizer ; CustomAuthorizer . Builder . create () . authorizerId ( java . lang . String ) . function ( IFunction ) // .authorizerResultTtlInSeconds(java.lang.Number) // .identitySource(java.lang.String) // .type(CustomAuthorizerType) . build (); Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. function software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds java.lang.Number The number of seconds during which the authorizer result is cached. identitySource java.lang.String The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizerId Required Type: java.lang.String Unique identifier for this authorizer. function Required Type: software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds Optional Type: java.lang.Number Default: 300 The number of seconds during which the authorizer result is cached. identitySource Optional Type: java.lang.String Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizerResultTtlInSeconds java.lang.Number The number of seconds during which the authorizer result is cached. function software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. identitySource java.lang.String The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. authorizerResultTtlInSeconds Required public java . lang . Number getAuthorizerResultTtlInSeconds (); Type: java.lang.Number The number of seconds during which the authorizer result is cached. function Required public IFunction getFunction (); Type: software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. identitySource Required public java . lang . String getIdentitySource (); Type: java.lang.String The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Required public CustomAuthorizerType getType (); Type: CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IamAuthorizer An IAM authorizer. Initializers import software.aws.awsprototypingsdk.typesafeapi.IamAuthorizer ; new IamAuthorizer (); Name Type Description Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. Integration An integration for an API operation. You can extend this to implement your own integration if you like. Initializers import software.aws.awsprototypingsdk.typesafeapi.Integration ; new Integration (); Name Type Description Methods Name Description grant Grant permissions for the API to invoke the integration. render Render the integration into an API Gateway OpenAPI extension. grant public void grant ( IntegrationGrantProps _props ) Grant permissions for the API to invoke the integration. _props Required Type: IntegrationGrantProps render public ApiGatewayIntegration render ( IntegrationRenderProps props ) Render the integration into an API Gateway OpenAPI extension. props Required Type: IntegrationRenderProps Integrations A collection of integrations to connect API operations with a backend to service requests. Initializers import software.aws.awsprototypingsdk.typesafeapi.Integrations ; new Integrations (); Name Type Description Static Functions Name Description lambda An integration that invokes a lambda function to service the request. lambda import software.aws.awsprototypingsdk.typesafeapi.Integrations ; Integrations . lambda ( IFunction lambdaFunction ) An integration that invokes a lambda function to service the request. lambdaFunction Required Type: software.amazon.awscdk.services.lambda.IFunction the function to invoke. LambdaIntegration A lambda integration. Initializers import software.aws.awsprototypingsdk.typesafeapi.LambdaIntegration ; new LambdaIntegration ( IFunction lambdaFunction ); Name Type Description lambdaFunction software.amazon.awscdk.services.lambda.IFunction No description. lambdaFunction Required Type: software.amazon.awscdk.services.lambda.IFunction Methods Name Description grant Grant API Gateway permissions to invoke the lambda. render Render the lambda integration as a snippet of OpenAPI. grant public void grant ( IntegrationGrantProps __0 ) Grant API Gateway permissions to invoke the lambda. __0 Required Type: IntegrationGrantProps render public ApiGatewayIntegration render ( IntegrationRenderProps props ) Render the lambda integration as a snippet of OpenAPI. props Required Type: IntegrationRenderProps NoneAuthorizer No authorizer. Initializers import software.aws.awsprototypingsdk.typesafeapi.NoneAuthorizer ; new NoneAuthorizer (); Name Type Description Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. TypeSafeApiModelProject Initializers import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiModelProject ; TypeSafeApiModelProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitIgnoreOptions(IgnoreFileOptions) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcJsonOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) . modelLanguage ( ModelLanguage ) . modelOptions ( ModelOptions ) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitIgnoreOptions io.github.cdklabs.projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. modelLanguage ModelLanguage No description. modelOptions ModelOptions No description. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitIgnoreOptions Optional Type: io.github.cdklabs.projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. modelLanguage Required Type: ModelLanguage modelOptions Required Type: ModelOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Consider a set of files as \"generated\". postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String _glob ) Consider a set of files as \"generated\". This method is implemented by derived classes and used for example, to add git attributes to tell GitHub that certain files are generated. _glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. generateTask io.github.cdklabs.projen.Task No description. parsedSpecFile java.lang.String No description. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. generateTask Required public Task getGenerateTask (); Type: io.github.cdklabs.projen.Task parsedSpecFile Required public java . lang . String getParsedSpecFile (); Type: java.lang.String Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. TypeSafeApiProject Project for a type-safe API, defined using Smithy or OpenAPI. Generates a CDK construct to deploy your API, as well as client and server code to help build your API quickly. Initializers import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiProject ; TypeSafeApiProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitIgnoreOptions(IgnoreFileOptions) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcJsonOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) . infrastructure ( InfrastructureConfiguration ) . model ( ModelConfiguration ) . runtime ( RuntimeConfiguration ) // .documentation(DocumentationConfiguration) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitIgnoreOptions io.github.cdklabs.projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. infrastructure InfrastructureConfiguration Configuration for generated infrastructure. model ModelConfiguration Configuration for the API model. runtime RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation DocumentationConfiguration Configuration for generated documentation. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitIgnoreOptions Optional Type: io.github.cdklabs.projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. infrastructure Required Type: InfrastructureConfiguration Configuration for generated infrastructure. model Required Type: ModelConfiguration Configuration for the API model. runtime Required Type: RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation Optional Type: DocumentationConfiguration Configuration for generated documentation. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Consider a set of files as \"generated\". postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String _glob ) Consider a set of files as \"generated\". This method is implemented by derived classes and used for example, to add git attributes to tell GitHub that certain files are generated. _glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. infrastructure GeneratedCodeProjects Generated infrastructure projects. runtime GeneratedCodeProjects Generated runtime projects. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. infrastructure Required public GeneratedCodeProjects getInfrastructure (); Type: GeneratedCodeProjects Generated infrastructure projects. Only the property corresponding to infrastructure.language will be defined. runtime Required public GeneratedCodeProjects getRuntime (); Type: GeneratedCodeProjects Generated runtime projects. When runtime.languages includes the corresponding language, the project can be assumed to be defined. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Members Name Description TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. DocumentationFormat Formats for documentation generation. Members Name Description HTML_REDOC HTML Documentation generated by redoc. HTML2 OpenAPI Generator 'html2' documentation. MARKDOWN OpenAPI Generator 'markdown' documentation. PLANTUML OpenAPI Generator 'plantuml' documentation. HTML_REDOC HTML Documentation generated by redoc. Redocly/redoc HTML2 OpenAPI Generator 'html2' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/html2.md MARKDOWN OpenAPI Generator 'markdown' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/markdown.md PLANTUML OpenAPI Generator 'plantuml' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/plantuml.md Language Supported languages for code generation. Members Name Description TYPESCRIPT No description. PYTHON No description. JAVA No description. TYPESCRIPT PYTHON JAVA ModelLanguage The model definition language. Members Name Description SMITHY Smithy. OPENAPI OpenAPI. SMITHY Smithy. https://smithy.io/2.0/ OPENAPI OpenAPI. https://www.openapis.org/","title":"Index"},{"location":"java/type-safe-api/index.html#type-safe-api","text":"Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated client and server types, infrastructure, documentation, and automatic input validation! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate \"runtime\" projects from your API definition in your desired languages, which can be utilised both client side for interacting with your API, or server side for implementing your API. The project also generates a type-safe CDK construct which ensures an integration is provided for every API operation. Code is generated at build time, so when you change your API model, just rebuild and you'll see your changes reflected in the generated code.","title":"Type Safe API"},{"location":"java/type-safe-api/index.html#quick-start-typescript","text":"This section describes how to get started quickly, with TypeScript infrastructure and lambda handlers. See the end of the README for examples in Python and Java .","title":"Quick Start: TypeScript"},{"location":"java/type-safe-api/index.html#project","text":"The TypeSafeApiProject projen project sets up the project structure for you. You have a few parameters to consider when creating the project: model - Configure the API model. Select a language for the model of either Smithy or OpenAPI v3 , and supply options.smithy or options.openapi depending on your choice. runtime - Configure the generated runtime projects. Include one or more languages you wish to write your client and server-side code in. These projects contain generated types defined in your model, as well as type-safe lambda handler wrappers for implementing each operation. infrastructure - Pick the language you are writing your CDK infrastructure in. A construct will be generated in this language which can be used to deploy the API. documentation - Specify formats to generate documentation in. It's recommended that these projects are used as part of an nx-monorepo project (eg. by specifying parent: myMonorepoProject ), as it makes setting up dependencies much easier, particularly when extending your project further with a CDK app and lambda functions. Depending on the model.language you choose, you must supply the corresponding model.options . For example: // Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject . Builder . create () . model ( Map . of ( \"language\" , ModelLanguage . getSMITHY (), \"options\" , Map . of ( \"smithy\" , Map . of ( \"serviceName\" , Map . of ( \"namespace\" , \"com.mycompany\" , \"serviceName\" , \"MyApi\" )))))... . build (); // Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject . Builder . create () . model ( Map . of ( \"language\" , ModelLanguage . getOPENAPI (), \"options\" , Map . of ( \"openapi\" , Map . of ( \"title\" , \"MyApi\" ))))... . build (); model.options.smithy allows for further customisation of the Smithy project, eg: // Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject . Builder . create () . model ( Map . of ( \"language\" , ModelLanguage . getSMITHY (), \"options\" , Map . of ( \"smithy\" , Map . of ( \"serviceName\" , Map . of ( \"namespace\" , \"com.mycompany\" , \"serviceName\" , \"MyApi\" ), // By default, the contents of the smithy build output directory `model/output` will be ignored by source control. // Set this to false to include it, for example if you are generating clients directly from the smithy model. \"ignoreSmithyBuildOutput\" , false , // The gradle wrapper used for the smithy build is copied from the PDK itself if it does not already exist in // the 'smithy' folder. By default, this gradle wrapper will be ignored by source control. // Set this to false if you would like to check the gradle wrapper in to source control, for example if you want // to use a different version of the gradle wrapper in your project. \"ignoreGradleWrapper\" , false , // Use smithyBuildOptions to control what is added to smithy-build.json. \"smithyBuildOptions\" , Map . of ( \"projections\" , Map . of ( // You can customise the built-in openapi projection, used to generate the OpenAPI specification. \"openapi\" , Map . of ( \"plugins\" , Map . of ( \"openapi\" , Map . of ( // Customise the openapi projection here. // See: https://smithy.io/2.0/guides/converting-to-openapi.html \"useIntegerType\" , true , ...))), // You can add new projections here too \"ts-client\" , Map . of ( \"plugins\" , Map . of ( \"typescript-codegen\" , Map . of ( \"package\" , \"@my-test/smithy-generated-typescript-client\" , \"packageVersion\" , \"0.0.1\" )))), // Note that any additional dependencies required for projections/plugins can be added here, which in turn will // add them to the `smithy/build.gradle` file \"maven\" , Map . of ( \"dependencies\" , List . of ( \"software.amazon.smithy:smithy-validation-model:1.27.2\" )))))))... . build ();","title":"Project"},{"location":"java/type-safe-api/index.html#smithy-idl","text":"Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message }","title":"Smithy IDL"},{"location":"java/type-safe-api/index.html#openapi-specification","text":"Your model/src/main/openapi/main.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ model/src/main/openapi/ |_ main.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where main.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message","title":"OpenAPI Specification"},{"location":"java/type-safe-api/index.html#construct","text":"A CDK construct is generated in the infrastructure/<language> directory which provides a type-safe interface for creating an API Gateway API based on your model. You can extend or instantiate this construct in your CDK infrastructure project. You'll get a type error if you forget to define an integration for an operation defined in your api. // Example automatically generated from non-compiling source. May contain errors. import aws.prototyping.sdk.type.safe.api.Authorizers ; import aws.prototyping.sdk.type.safe.api.Integrations ; import software.amazon.awscdk.services.lambda.nodejs.NodejsFunction ; import software.constructs.Construct ; import myapi.typescript.infra.Api ; /** * An example of how to wire lambda handler functions to the API */ public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"defaultAuthorizer\" , Authorizers . iam (), \"integrations\" , Map . of ( // Every operation defined in your API must have an integration defined! \"sayHello\" , Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"say-hello\" )))))); } }","title":"Construct"},{"location":"java/type-safe-api/index.html#runtime-clients","text":"The generated runtime projects include clients which can be used for type-safe interaction with your API.","title":"Runtime: Clients"},{"location":"java/type-safe-api/index.html#lambda-handler-wrappers","text":"Lambda handler wrappers are also importable from the generated runtime projects. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your model.","title":"Lambda Handler Wrappers"},{"location":"java/type-safe-api/index.html#interceptors","text":"The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next .","title":"Interceptors"},{"location":"java/type-safe-api/index.html#quick-start-python","text":"This guide assumes you want to write your CDK infrastructure in Python and your lambda handlers in Python, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like. Just specify the language in runtime.languages for any language you would like to write lambda handlers in.","title":"Quick Start: Python"},{"location":"java/type-safe-api/index.html#quick-start-java","text":"This guide assumes you want to write your CDK infrastructure in Java and your lambda handlers in Java, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like.","title":"Quick Start: Java"},{"location":"java/type-safe-api/index.html#other-details","text":"","title":"Other Details"},{"location":"java/type-safe-api/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/type-safe-api/index.html#constructs","text":"","title":"Constructs "},{"location":"java/type-safe-api/index.html#typesaferestapi","text":"A construct for creating an api gateway rest api based on the definition in the OpenAPI spec.","title":"TypeSafeRestApi "},{"location":"java/type-safe-api/index.html#structs","text":"","title":"Structs "},{"location":"java/type-safe-api/index.html#apigatewayintegration","text":"Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html","title":"ApiGatewayIntegration "},{"location":"java/type-safe-api/index.html#apigatewayintegrationresponse","text":"API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html","title":"ApiGatewayIntegrationResponse "},{"location":"java/type-safe-api/index.html#apigatewayintegrationtlsconfig","text":"Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html","title":"ApiGatewayIntegrationTlsConfig "},{"location":"java/type-safe-api/index.html#authorizerprops","text":"Properties for an authorizer.","title":"AuthorizerProps "},{"location":"java/type-safe-api/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"java/type-safe-api/index.html#cognitoauthorizerprops","text":"Properties used to configure a cognito authorizer.","title":"CognitoAuthorizerProps "},{"location":"java/type-safe-api/index.html#customauthorizerprops","text":"Properties used to configure a custom authorizer.","title":"CustomAuthorizerProps "},{"location":"java/type-safe-api/index.html#documentationconfiguration","text":"Configuration for generated documentation.","title":"DocumentationConfiguration "},{"location":"java/type-safe-api/index.html#generatedcodeoptions","text":"Options for generated clients.","title":"GeneratedCodeOptions "},{"location":"java/type-safe-api/index.html#generatedcodeprojects","text":"Generated code projects.","title":"GeneratedCodeProjects "},{"location":"java/type-safe-api/index.html#infrastructureconfiguration","text":"Configuration for generated infrastructure.","title":"InfrastructureConfiguration "},{"location":"java/type-safe-api/index.html#integrationgrantprops","text":"Properties for granting the API access to invoke the operation.","title":"IntegrationGrantProps "},{"location":"java/type-safe-api/index.html#integrationrenderprops","text":"Properties for rendering an integration into an API Gateway OpenAPI extension.","title":"IntegrationRenderProps "},{"location":"java/type-safe-api/index.html#managedrule","text":"","title":"ManagedRule "},{"location":"java/type-safe-api/index.html#methodandpath","text":"Structure to contain an API operation's method and path.","title":"MethodAndPath "},{"location":"java/type-safe-api/index.html#modelconfiguration","text":"Configuration for modelling the API.","title":"ModelConfiguration "},{"location":"java/type-safe-api/index.html#modeloptions","text":"Options for models.","title":"ModelOptions "},{"location":"java/type-safe-api/index.html#openapimodeloptions","text":"Options for the OpenAPI model.","title":"OpenApiModelOptions "},{"location":"java/type-safe-api/index.html#runtimeconfiguration","text":"Configuration for generated runtime projects.","title":"RuntimeConfiguration "},{"location":"java/type-safe-api/index.html#smithybuildoptions","text":"Options for the smithy build files.","title":"SmithyBuildOptions "},{"location":"java/type-safe-api/index.html#smithycommon","text":"Properties common to smithy plugins and the root smithy build.","title":"SmithyCommon "},{"location":"java/type-safe-api/index.html#smithymavenconfiguration","text":"Configuration for smithy maven dependencies.","title":"SmithyMavenConfiguration "},{"location":"java/type-safe-api/index.html#smithymodeloptions","text":"Options for a Smithy model.","title":"SmithyModelOptions "},{"location":"java/type-safe-api/index.html#smithyplugin","text":"A smithy plugin.","title":"SmithyPlugin "},{"location":"java/type-safe-api/index.html#smithyprojection","text":"A smithy build projection.","title":"SmithyProjection "},{"location":"java/type-safe-api/index.html#smithyservicename","text":"Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html","title":"SmithyServiceName "},{"location":"java/type-safe-api/index.html#smithytransform","text":"A smithy build transform.","title":"SmithyTransform "},{"location":"java/type-safe-api/index.html#typesafeapiintegration","text":"Defines an integration for an individual API operation.","title":"TypeSafeApiIntegration "},{"location":"java/type-safe-api/index.html#typesafeapimodelprojectoptions","text":"","title":"TypeSafeApiModelProjectOptions "},{"location":"java/type-safe-api/index.html#typesafeapioptions","text":"Options required alongside an Open API specification to create API Gateway resources.","title":"TypeSafeApiOptions "},{"location":"java/type-safe-api/index.html#typesafeapiprojectoptions","text":"Options for the TypeSafeApiProject.","title":"TypeSafeApiProjectOptions "},{"location":"java/type-safe-api/index.html#typesafeapiwebacloptions","text":"Configuration for the Web ACL associated with the API.","title":"TypeSafeApiWebAclOptions "},{"location":"java/type-safe-api/index.html#typesaferestapiprops","text":"Configuration for the TypeSafeRestApi construct.","title":"TypeSafeRestApiProps "},{"location":"java/type-safe-api/index.html#classes","text":"","title":"Classes "},{"location":"java/type-safe-api/index.html#authorizer","text":"An authorizer for authorizing API requests.","title":"Authorizer "},{"location":"java/type-safe-api/index.html#authorizers_2","text":"Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct.","title":"Authorizers "},{"location":"java/type-safe-api/index.html#cognitoauthorizer","text":"An authorizer that uses Cognito identity or access tokens.","title":"CognitoAuthorizer "},{"location":"java/type-safe-api/index.html#customauthorizer","text":"An authorizer that uses a lambda function to authorize requests.","title":"CustomAuthorizer "},{"location":"java/type-safe-api/index.html#iamauthorizer","text":"An IAM authorizer.","title":"IamAuthorizer "},{"location":"java/type-safe-api/index.html#integration","text":"An integration for an API operation. You can extend this to implement your own integration if you like.","title":"Integration "},{"location":"java/type-safe-api/index.html#integrations_1","text":"A collection of integrations to connect API operations with a backend to service requests.","title":"Integrations "},{"location":"java/type-safe-api/index.html#lambdaintegration","text":"A lambda integration.","title":"LambdaIntegration "},{"location":"java/type-safe-api/index.html#noneauthorizer","text":"No authorizer.","title":"NoneAuthorizer "},{"location":"java/type-safe-api/index.html#typesafeapimodelproject","text":"","title":"TypeSafeApiModelProject "},{"location":"java/type-safe-api/index.html#typesafeapiproject","text":"Project for a type-safe API, defined using Smithy or OpenAPI. Generates a CDK construct to deploy your API, as well as client and server code to help build your API quickly.","title":"TypeSafeApiProject "},{"location":"java/type-safe-api/index.html#enums","text":"","title":"Enums "},{"location":"java/type-safe-api/index.html#customauthorizertype","text":"The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type","title":"CustomAuthorizerType "},{"location":"java/type-safe-api/index.html#documentationformat","text":"Formats for documentation generation.","title":"DocumentationFormat "},{"location":"java/type-safe-api/index.html#language","text":"Supported languages for code generation.","title":"Language "},{"location":"java/type-safe-api/index.html#modellanguage","text":"The model definition language.","title":"ModelLanguage "},{"location":"python/type-safe-api/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.type_safe_api Type Safe API Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated client and server types, infrastructure, documentation, and automatic input validation! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate \"runtime\" projects from your API definition in your desired languages, which can be utilised both client side for interacting with your API, or server side for implementing your API. The project also generates a type-safe CDK construct which ensures an integration is provided for every API operation. Code is generated at build time, so when you change your API model, just rebuild and you'll see your changes reflected in the generated code. Quick Start: TypeScript This section describes how to get started quickly, with TypeScript infrastructure and lambda handlers. See the end of the README for examples in Python and Java . Create Your API Project Use the project in your .projenrc.ts . It can either be part of an nx-monorepo (recommended) or used in a standalone fashion. # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.nx_monorepo import NxMonorepoProject from aws_prototyping_sdk.type_safe_api import TypeSafeApiProject from projen.awscdk import AwsCdkTypeScriptApp # Create the monorepo monorepo = NxMonorepoProject ( ... ) # Create the API project api = TypeSafeApiProject ( name = \"myapi\" , parent = monorepo , outdir = \"packages/api\" , # Smithy as the model language. You can also use ModelLanguage.OPENAPI model = { \"language\" : ModelLanguage . SMITHY , \"options\" : { \"smithy\" : { \"service_name\" : { \"namespace\" : \"com.mycompany\" , \"service_name\" : \"MyApi\" } } } }, # Generate types, client and server code in TypeScript, Python and Java runtime = { \"languages\" : [ Language . TYPESCRIPT , Language . PYTHON , Language . JAVA ] }, # CDK infrastructure in TypeScript infrastructure = { \"language\" : Language . TYPESCRIPT }, # Generate HTML documentation documentation = { \"formats\" : [ DocumentationFormat . HTML_REDOC ] } ) # Create a CDK infrastructure project infra = AwsCdkTypeScriptApp ( ... ) # Infrastructure can depend on the generated API infrastructure and runtime infra . add_deps ( api . infrastructure . typescript . package . package_name ) infra . add_deps ( api . runtime . typescript . package . package_name ) monorepo . synth () Use the CDK Construct In your CDK application, consume the Api construct, vended from the generated typescript infrastructure package. # Example automatically generated from non-compiling source. May contain errors. from aws_cdk import Stack , StackProps from constructs import Construct from myapi_typescript_infra import Api # <- generated typescript infrastructure package from aws_prototyping_sdk.type_safe_api import Authorizers , Integrations from aws_cdk.aws_lambda_nodejs import NodejsFunction from aws_cdk.aws_apigateway import Cors import path as path class MyStack ( Stack ): def __init__ ( self , scope , id , * , description = None , env = None , stackName = None , tags = None , synthesizer = None , terminationProtection = None , analyticsReporting = None , crossRegionReferences = None , permissionsBoundary = None ): super () . __init__ ( scope , id , description = description , env = env , stackName = stackName , tags = tags , synthesizer = synthesizer , terminationProtection = terminationProtection , analyticsReporting = analyticsReporting , crossRegionReferences = crossRegionReferences , permissionsBoundary = permissionsBoundary ) # Instantiate the generated CDK construct to deploy an API Gateway API based on your model Api ( self , \"MyApi\" , default_authorizer = Authorizers . iam (), cors_options = { \"allow_origins\" : Cors . ALL_ORIGINS , \"allow_methods\" : Cors . ALL_METHODS }, # Supply an integration for every operation integrations = { \"say_hello\" : { \"integration\" : Integrations . lambda_ ( NodejsFunction ( self , \"SayHelloLambda\" , entry = path . resolve ( __dirname , \"say-hello.ts\" ) )) } } ) Implement a Lambda Handler The generated runtime projects include lambda handler wrappers which provide type-safety for implementing your API operations. You can implement your lambda handlers in any of the supported languages, and even mix and match languages for different operations if you like. In typescript, the implementation of say-hello.ts would look like: # Example automatically generated from non-compiling source. May contain errors. from myapi_typescript_runtime import say_hello_handler # <- generated typescript runtime package # Use the handler wrapper for type-safety to ensure you correctly implement your modelled API operation handler = say_hello_handler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ` , }, }; }) Project The TypeSafeApiProject projen project sets up the project structure for you. You have a few parameters to consider when creating the project: model - Configure the API model. Select a language for the model of either Smithy or OpenAPI v3 , and supply options.smithy or options.openapi depending on your choice. runtime - Configure the generated runtime projects. Include one or more languages you wish to write your client and server-side code in. These projects contain generated types defined in your model, as well as type-safe lambda handler wrappers for implementing each operation. infrastructure - Pick the language you are writing your CDK infrastructure in. A construct will be generated in this language which can be used to deploy the API. documentation - Specify formats to generate documentation in. It's recommended that these projects are used as part of an nx-monorepo project (eg. by specifying parent: myMonorepoProject ), as it makes setting up dependencies much easier, particularly when extending your project further with a CDK app and lambda functions. Depending on the model.language you choose, you must supply the corresponding model.options . For example: # Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject ( model = { \"language\" : ModelLanguage . SMITHY , \"options\" : { \"smithy\" : { \"service_name\" : { \"namespace\" : \"com.mycompany\" , \"service_name\" : \"MyApi\" } } } }, ... ) # Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject ( model = { \"language\" : ModelLanguage . OPENAPI , \"options\" : { \"openapi\" : { \"title\" : \"MyApi\" } } }, ... ) model.options.smithy allows for further customisation of the Smithy project, eg: # Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject ( model = { \"language\" : ModelLanguage . SMITHY , \"options\" : { \"smithy\" : { \"service_name\" : { \"namespace\" : \"com.mycompany\" , \"service_name\" : \"MyApi\" }, # By default, the contents of the smithy build output directory `model/output` will be ignored by source control. # Set this to false to include it, for example if you are generating clients directly from the smithy model. \"ignore_smithy_build_output\" : False , # The gradle wrapper used for the smithy build is copied from the PDK itself if it does not already exist in # the 'smithy' folder. By default, this gradle wrapper will be ignored by source control. # Set this to false if you would like to check the gradle wrapper in to source control, for example if you want # to use a different version of the gradle wrapper in your project. \"ignore_gradle_wrapper\" : False , # Use smithyBuildOptions to control what is added to smithy-build.json. \"smithy_build_options\" : { \"projections\" : { # You can customise the built-in openapi projection, used to generate the OpenAPI specification. \"openapi\" : { \"plugins\" : { \"openapi\" : { # Customise the openapi projection here. # See: https://smithy.io/2.0/guides/converting-to-openapi.html \"use_integer_type\" : True , ... } } }, # You can add new projections here too \"ts-client\" : { \"plugins\" : { \"typescript-codegen\" : { \"package\" : \"@my-test/smithy-generated-typescript-client\" , \"package_version\" : \"0.0.1\" } } } }, # Note that any additional dependencies required for projections/plugins can be added here, which in turn will # add them to the `smithy/build.gradle` file \"maven\" : { \"dependencies\" : [ \"software.amazon.smithy:smithy-validation-model:1.27.2\" ] } } } } }, ... ) Directory Structure The TypeSafeApiProject will create the following directory structure within its outdir : |_ model/ |_ src/ |_ main/ |_ smithy - your API definition if you chose ModelLanguage.SMITHY |_ openapi - your API definition if you chose ModelLanguage.OPENAPI |_ runtime/ - generated types, client, and server code in the languages you specified |_ typescript |_ python |_ java |_ infrastructure/ - generated infrastructure (you'll find only one directory in here based on your chosen infrastructure language) |_ typescript |_ python |_ java |_ documentation/ - generated documentation in the formats you specified |_ html2 |_ html_redoc |_ plantuml |_ markdown Smithy IDL Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message } Supported Protocols Currently only AWS restJson1 is supported. Please ensure your service is annotated with the @restJson1 trait. Multiple Files You can split your definition into multiple files and folders, so long as they are all under the model/src/main/smithy directory in your API project. Authorizers Smithy supports adding API Gateway authorizers in the model itself . Given that at model definition time one usually does not know the ARN of the user pool or lambda function for an authorizer, it is recommended to add the authorizer(s) in your Api CDK construct. If using Smithy generated clients, some authorizer traits (eg sigv4) will include configuring the client for that particular method of authorization, so it can be beneficial to still define authorizers in the model. We therefore support specifying authorizers in both the model and the construct, but note that the construct will take precedence where the authorizer ID is the same. OpenAPI Specification Your model/src/main/openapi/main.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ model/src/main/openapi/ |_ main.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where main.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message Construct A CDK construct is generated in the infrastructure/<language> directory which provides a type-safe interface for creating an API Gateway API based on your model. You can extend or instantiate this construct in your CDK infrastructure project. You'll get a type error if you forget to define an integration for an operation defined in your api. # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.type_safe_api import Authorizers , Integrations from aws_cdk.aws_lambda_nodejs import NodejsFunction from constructs import Construct from myapi_typescript_infra import Api # # An example of how to wire lambda handler functions to the API # class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , default_authorizer = Authorizers . iam (), integrations = { # Every operation defined in your API must have an integration defined! \"say_hello\" : { \"integration\" : Integrations . lambda_ ( NodejsFunction ( scope , \"say-hello\" )) } } ) Sharing Integrations If you would like to use the same integration for every operation (for example you'd like to use a single lambda function to service all requests with the in-built handler router ), you can use the Operations.all method from a generated runtime project to save repeating yourself: # Example automatically generated from non-compiling source. May contain errors. from myapi_typescript_runtime import Operations from aws_prototyping_sdk.type_safe_api import Authorizers , Integrations from aws_cdk.aws_lambda_nodejs import NodejsFunction from constructs import Construct from myapi_typescript_infra import Api class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , default_authorizer = Authorizers . iam (), # Use the same integration for every operation. integrations = Operations . all ( integration = Integrations . lambda_ ( NodejsFunction ( scope , \"router\" )) ) ) TypeScript is demonstrated above, but this is also available in Java and Python. Authorizers The Api construct allows you to define one or more authorizers for securing your API. An integration will use the defaultAuthorizer unless an authorizer is specified at the integration level. The following authorizers are supported: Authorizers.none - No auth Authorizers.iam - AWS IAM (Signature Version 4) Authorizers.cognito - Cognito user pool Authorizers.custom - A custom authorizer Cognito Authorizer To use the Cognito authorizer, one or more user pools must be provided. You can optionally specify the scopes to check if using an access token. You can use the withScopes method to use the same authorizer but verify different scopes for individual integrations, for example: # Example automatically generated from non-compiling source. May contain errors. class SampleApi ( Api ): def __init__ ( self , scope , id ): cognito_authorizer = Authorizers . cognito ( authorizer_id = \"myCognitoAuthorizer\" , user_pools = [ UserPool ( scope , \"UserPool\" )] ) super () . __init__ ( scope , id , default_authorizer = cognito_authorizer , integrations = { # Everyone in the user pool can call this operation: \"say_hello\" : { \"integration\" : Integrations . lambda_ ( NodejsFunction ( scope , \"say-hello\" )) }, # Only users with the given scopes can call this operation \"my_restricted_operation\" : { \"integration\" : Integrations . lambda_ ( NodejsFunction ( scope , \"my-restricted-operation\" )), \"authorizer\" : cognito_authorizer . with_scopes ( \"my-resource-server/my-scope\" ) } } ) For more information about scopes or identity and access tokens, please see the API Gateway documentation . Custom Authorizer Custom authorizers use lambda functions to handle authorizing requests. These can either be simple token-based authorizers, or more complex request-based authorizers. See the API Gateway documentation for more details. An example token-based authorizer (default): # Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( authorizer_id = \"myTokenAuthorizer\" , function = NodejsFunction ( scope , \"authorizer\" ) ) An example request-based handler. By default the identitySource will be method.request.header.Authorization , however you can customise this as per the API Gateway documentation . # Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( authorizer_id = \"myRequestAuthorizer\" , type = CustomAuthorizerType . REQUEST , identity_source = \"method.request.header.MyCustomHeader, method.request.querystring.myQueryString\" , function = NodejsFunction ( scope , \"authorizer\" ) ) Integrations Integrations are used by API Gateway to service requests. Lambda Integration Currently, the only built-in integration is a lambda integration. You can construct one using Integrations.lambda(yourLambdaFunction) . Custom Integrations You can implement your own integrations by inheriting the Integration class and implementing its render method. This method is responsible for returning a snippet of OpenAPI which will be added as the x-amazon-apigateway-integration for an operation. Please refer to the API Gateway Swagger Extensions documentation for more details. You can also optionally override the grant method if you need to use CDK to grant API Gateway access to invoke your integration. Runtime: Clients The generated runtime projects include clients which can be used for type-safe interaction with your API. Typescript The typescript-fetch OpenAPI generator is used to generate typescript client. This requires an implementation of fetch to be passed to the client. In the browser one can pass the built in fetch, or in NodeJS you can use an implementation such as node-fetch . Example usage of the client in a website: # Example automatically generated from non-compiling source. May contain errors. from myapi_typescript_runtime import Configuration , DefaultApi client = DefaultApi ( Configuration ( base_path = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" , fetch_api = window . fetch . bind ( window ) )) client . say_hello ( name = \"Jack\" ) Python The python OpenAPI generator is used to generate clients for python. Example usage: from myapi_python_runtime import ApiClient , Configuration from myapi_python_runtime.api.default_api import DefaultApi configuration = Configuration ( host = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) with ApiClient ( configuration ) as api_client : client = DefaultApi ( api_client ) client . say_hello ( query_params = { 'name' : \"name_example\" , }, ) You'll find details about how to use the python client in the README.md in your generated runtime project. Java The java OpenAPI generator is used to generate clients for Java. Example usage: import com.generated.api.myapijavaruntime.runtime.api.DefaultApi ; import com.generated.api.myapijavaruntime.runtime.ApiClient ; import com.generated.api.myapijavaruntime.runtime.Configuration ; import com.generated.api.myapijavaruntime.runtime.models.HelloResponse ; ApiClient client = Configuration . getDefaultApiClient (); client . setBasePath ( \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ); DefaultApi api = new DefaultApi ( client ); HelloResponse response = api . sayHello ( \"Adrian\" ). execute () You'll find more details about how to use the Java client in the README.md in your generated runtime project. Lambda Handler Wrappers Lambda handler wrappers are also importable from the generated runtime projects. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your model. Typescript # Example automatically generated from non-compiling source. May contain errors. from myapi_typescript_runtime import say_hello_handler handler = say_hello_handler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } !` , }, }; }) Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handlerRouter . # Example automatically generated from non-compiling source. May contain errors. from myapi_typescript_runtime import handler_router , say_hello_handler , say_goodbye_handler from ..interceptors import cors_interceptor from ..handlers.say_goodbye import say_goodbye say_hello = say_hello_handler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } !` , }, }; }) handler = handler_router ( # Interceptors declared in this list will apply to all operations interceptors = [ cors_interceptor ], # Assign handlers to each operation here handlers = { \"say_hello\" : say_hello , \"say_goodbye\" : say_goodbye } ) Python from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.model.hello_response import HelloResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handler_router . from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses , handler_router , HandlerRouterHandlers from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.model.hello_response import HelloResponse from other_handlers import say_goodbye from my_interceptors import cors_interceptor @say_hello_handler def say_hello ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) handler = handler_router ( # Interceptors defined here will apply to all operations interceptors = [ cors_interceptor ], handlers = HandlerRouterHandlers ( say_hello = say_hello , say_goodbye = say_goodbye ) ) Java import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello200Response ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloRequestInput ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloResponse ; import com.generated.api.myapijavaruntime.runtime.model.HelloResponse ; public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so by extending the HandlerRouter class. import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayGoodbye ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.HandlerRouter ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.Interceptors ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello ; import java.util.Arrays ; import java.util.List ; // Interceptors defined here apply to all operations @Interceptors ({ TimingInterceptor . class }) public class ApiHandlerRouter extends HandlerRouter { // You must implement a method to return a handler for every operation @Override public SayHello sayHello () { return new SayHelloHandler (); } @Override public SayGoodbye sayGoodbye () { return new SayGoodbyeHandler (); } } Interceptors The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next . Typescript In typescript, interceptors are passed as separate arguments to the generated handler wrapper, in the order in which they should be executed. Call request.chain.next(request) from an interceptor to delegate to the rest of the chain to handle a request. Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next . # Example automatically generated from non-compiling source. May contain errors. from myapi_typescript_runtime import say_hello_handler , ChainedRequestInput , OperationResponse # Interceptor to wrap invocations in a try/catch, returning a 500 error for any unhandled exceptions. try_catch_interceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response | OperationResponse < 500 , { errorMessage : string } >> => { try { return await request . chain . next ( request ); } catch ( e : any ) { return { statusCode : 500 , body : { errorMessage : e . message }}; } } # tryCatchInterceptor is passed first, so it runs first and calls the second argument function (the request handler) via chain.next handler = say_hello_handler ( try_catch_interceptor , async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } !` , }, }; }) Another example interceptor might be to record request time metrics. The example below includes the full generic type signature for an interceptor: # Example automatically generated from non-compiling source. May contain errors. from myapi_typescript_runtime import ChainedRequestInput timing_interceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response > => { const start = Date . now (); const response = await request . chain . next ( request ); const end = Date . now (); console . log ( ` Took $ { end - start } ms ` ); return response ; } Interceptors may mutate the interceptorContext to pass state to further interceptors or the final lambda handler, for example an identityInterceptor might want to extract the authenticated user from the request so that it is available in handlers. # Example automatically generated from non-compiling source. May contain errors. from myapi_typescript_runtime import LambdaRequestParameters , LambdaHandlerChain identity_interceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response > => { const authenticatedUser = await getAuthenticatedUser ( request . event ); return await request . chain . next ({ ... request , interceptorContext : { ... request . interceptorContext , authenticatedUser , }, }); } Python In Python, a list of interceptors can be passed as a keyword argument to the generated lambda handler decorator, for example: from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.model.hello_response import HelloResponse @say_hello_handler ( interceptors = [ timing_interceptor , try_catch_interceptor ]) def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Writing an interceptor is just like writing a lambda handler. Call chain.next(input) from an interceptor to delegate to the rest of the chain to handle a request. import time from myapi_python_runtime.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def timing_interceptor ( input : ChainedApiRequest ) -> ApiResponse : start = int ( round ( time . time () * 1000 )) response = input . chain . next ( input ) end = int ( round ( time . time () * 1000 )) print ( \"Took {} ms\" . format ( end - start )) return response Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import time from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def try_catch_interceptor ( input : ChainedApiRequest ) -> ApiResponse : try : return input . chain . next ( input ) except Exception as e : return ApiResponse ( status_code = 500 , body = ApiError ( errorMessage = str ( e )), headers = {} ) Interceptors are permitted to mutate the \"interceptor context\", which is a Dict[str, Any] . Each interceptor in the chain, and the final handler, can access this context: def identity_interceptor ( input : ChainedApiRequest ) -> ApiResponse : input . interceptor_context [ \"AuthenticatedUser\" ] = get_authenticated_user ( input . event ) return input . chain . next ( input ) Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: def add_cors_headers_interceptor ( input : ChainedApiRequest ) -> ApiResponse : response = input . chain . next ( input ) return ApiResponse ( status_code = response . status_code , body = response . body , headers = { ** response . headers , \"Access-Control-Allow-Origin\" : \"*\" , \"Access-Control-Allow-Headers\" : \"*\" } ) Java In Java, interceptors can be added to a handler via the @Interceptors class annotation: import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Interceptors ; @Interceptors ({ TimingInterceptor . class , TryCatchInterceptor . class }) public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } To write an interceptor, you can implement the Interceptor interface. For example, a timing interceptor: import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Interceptor ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Response ; public class TimingInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { long start = System . currentTimeMillis (); Response res = input . getChain (). next ( input ); long end = System . currentTimeMillis (); System . out . printf ( \"Took %d ms%n\" , end - start ); return res ; } } Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Interceptor ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Response ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.ApiResponse ; import com.generated.api.myjavaapiruntime.runtime.model.ApiError ; public class TryCatchInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { try { return input . getChain (). next ( input ); } catch ( Exception e ) { return ApiResponse . builder () . statusCode ( 500 ) . body ( ApiError . builder () . errorMessage ( e . getMessage ()) . build (). toJson ()) . build (); } } } Interceptors are permitted to mutate the \"interceptor context\", which is a Map<String, Object> . Each interceptor in the chain, and the final handler, can access this context: public class IdentityInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { input . getInterceptorContext (). put ( \"AuthenticatedUser\" , this . getAuthenticatedUser ( input . getEvent ())); return input . getChain (). next ( input ); } } Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: public static class AddCorsHeadersInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { Response res = input . getChain (). next ( input ); res . getHeaders (). put ( \"Access-Control-Allow-Origin\" , \"*\" ); res . getHeaders (). put ( \"Access-Control-Allow-Headers\" , \"*\" ); return res ; } } Interceptors with Dependency Injection Interceptors referenced by the @Interceptors annotation must be constructable with no arguments. If more complex instantiation of your interceptor is required (for example if you are using dependency injection or wish to pass configuration to your interceptor), you may instead override the getInterceptors method in your handler: public class SayHelloHandler extends SayHello { @Override public List < Interceptor < SayHelloInput >> getInterceptors () { return Arrays . asList ( new MyConfiguredInterceptor <> ( 42 ), new MyOtherConfiguredInterceptor <> ( \"configuration\" )); } @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s!\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Quick Start: Python This guide assumes you want to write your CDK infrastructure in Python and your lambda handlers in Python, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like. Just specify the language in runtime.languages for any language you would like to write lambda handlers in. Create Your API Project Use the project in your .projenrc.ts . It can either be part of an nx-monorepo (recommended) or used in a standalone fashion. # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.nx_monorepo import NxMonorepoProject from aws_prototyping_sdk.type_safe_api import TypeSafeApiProject from projen.awscdk import AwsCdkTypeScriptApp from projen.python import PythonProject # Create the monorepo monorepo = NxMonorepoProject ( name = \"monorepo\" , default_release_branch = \"main\" ) # Create the API project api = TypeSafeApiProject ( name = \"myapi\" , parent = monorepo , outdir = \"packages/api\" , # Smithy as the model language. You can also use ModelLanguage.OPENAPI model = { \"language\" : ModelLanguage . SMITHY , \"options\" : { \"smithy\" : { \"service_name\" : { \"namespace\" : \"com.mycompany\" , \"service_name\" : \"MyApi\" } } } }, # Generate client and server types in TypeScript, Python, and Java runtime = { \"languages\" : [ Language . TYPESCRIPT , Language . PYTHON , Language . JAVA ] }, # Generate CDK infrastructure in Python infrastructure = { \"language\" : Language . PYTHON }, # Generate HTML documentation documentation = { \"formats\" : [ DocumentationFormat . HTML_REDOC ] } ) # Create a project for our lambda handlers written in python lambdas = PythonProject ( name = \"lambdas\" , parent = monorepo , outdir = \"packages/lambdas\" , author_email = \"me@example.com\" , author_name = \"me\" , module_name = \"lambdas\" , version = \"1.0.0\" , # Poetry is used to simplify local python dependencies poetry = True ) # Add a local dependency on the generated python runtime lambdas . add_dependency ( f \" { api . runtime . python ! . name } @ { path = \\ \"{path.relative(lambdas.outdir, api.runtime.python!.outdir)} \\\" , develop=true}\" ) monorepo . add_implicit_dependency ( lambdas , api . runtime . python ) # Add commands to the lambda project 's package task to create a distributable which can be deployed to AWS Lambda lambdas . package_task . exec ( \"mkdir -p lambda-dist && rm -rf lambda-dist/*\" ) lambdas . package_task . exec ( f \"cp -r { lambdas . moduleName } lambda-dist/ { lambdas . moduleName } \" ) lambdas . package_task . exec ( \"poetry export --without-hashes --format=requirements.txt > lambda-dist/requirements.txt\" ) lambdas . package_task . exec ( \"pip install -r lambda-dist/requirements.txt --target lambda-dist --upgrade\" ) lambdas . gitignore . add_patterns ( \"lambda-dist\" ) # Create a CDK infrastructure project infra = AwsCdkPythonApp ( name = \"infra\" , parent = monorepo , outdir = \"packages/infra\" , author_email = \"me@example.com\" , author_name = \"me\" , cdk_version = \"2.0.0\" , module_name = \"infra\" , version = \"1.0.0\" , poetry = True ) # The infrastructure project depends on the python types, python infrastructure, and the lambda package infra . add_dependency ( f \" { api . runtime . python ! . name } @ { path = \\ \"{path.relative(infra.outdir, api.runtime.python!.outdir)} \\\" , develop=true}\" ) monorepo . add_implicit_dependency ( infra , api . runtime . python ) infra . add_dependency ( f \" { api . infrastructure . python ! . name } @ { path = \\ \"{path.relative(infra.outdir, api.infrastructure.python!.outdir)} \\\" , develop=true}\" ) monorepo . add_implicit_dependency ( infra , api . infrastructure . python ) infra . add_dependency ( f \" { lambdas . name } @ { path = \\ \"{path.relative(infra.outdir, lambdas.outdir)} \\\" , develop=true}\" ) monorepo . add_implicit_dependency ( infra , lambdas ) monorepo . synth () Use the CDK Construct In your CDK application, consume the Api construct, vended from the generated Python infrastructure package. import os from aws_cdk import Stack from constructs import Construct from aws_cdk.aws_lambda import LayerVersion , Code , Function , Runtime from aws_prototyping_sdk.type_safe_api import Authorizers , TypeSafeApiIntegration , Integrations from myapi_python_runtime.apis.tags.default_api_operation_config import OperationConfig from myapi_python_infra.api import Api from pathlib import Path from os import path class MyStack ( Stack ): def __init__ ( self , scope : Construct , construct_id : str , ** kwargs ) -> None : super () . __init__ ( scope , construct_id , ** kwargs ) # Use the generated Api construct self . api = Api ( self , 'Api' , default_authorizer = Authorizers . iam (), integrations = OperationConfig ( say_hello = TypeSafeApiIntegration ( # Create a python lambda function from our \"lambda-dist\" package integration = Integrations . lambda_ ( Function ( self , 'SayHello' , runtime = Runtime . PYTHON_3_9 , code = Code . from_asset ( path . join ( \"..\" , \"lambdas\" , \"lambda-dist\" )), handler = \"lambdas.say_hello.handler\" , )), ), ), ) Implement a Lambda Handler In your lambdas project you can define your lambda handler in its source directory, eg lambdas/lambdas/say_hello.py : from myapi_python_runtime.model.say_hello_response_content import SayHelloResponseContent from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , SayHelloOperationResponses , ApiResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = SayHelloResponseContent ( message = \"Hello {} \" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Quick Start: Java This guide assumes you want to write your CDK infrastructure in Java and your lambda handlers in Java, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like. Create Your API Project Use the project in your .projenrc.ts . It can either be part of an nx-monorepo (recommended) or used in a standalone fashion. # Example automatically generated from non-compiling source. May contain errors. from projen.PluginExecution import PluginExecution from aws_prototyping_sdk.nx_monorepo import NxMonorepoProject from aws_prototyping_sdk.type_safe_api import TypeSafeApiProject from projen.awscdk import AwsCdkTypeScriptApp from projen.java import JavaProject # Create the monorepo monorepo = NxMonorepoProject ( name = \"monorepo\" , default_release_branch = \"main\" ) # Create the API project api = TypeSafeApiProject ( name = \"myapi\" , parent = monorepo , outdir = \"packages/api\" , # Smithy as the model language. You can also use ModelLanguage.OPENAPI model = { \"language\" : ModelLanguage . SMITHY , \"options\" : { \"smithy\" : { \"service_name\" : { \"namespace\" : \"com.mycompany\" , \"service_name\" : \"MyApi\" } } } }, # Generate client and server types in TypeScript, Python and Java runtime = { \"languages\" : [ Language . TYPESCRIPT , Language . PYTHON , Language . JAVA ] }, # Generate CDK infrastructure in Java infrastructure = { \"language\" : Language . JAVA }, # Generate HTML documentation documentation = { \"formats\" : [ DocumentationFormat . HTML_REDOC ] } ) lambdas = JavaProject ( name = \"lambdas\" , parent = monorepo , outdir = \"packages/lambdas\" , artifact_id = \"lambdas\" , group_id = \"com.my.api\" , version = \"1.0.0\" ) # The lambdas package needs a dependency on the generated java runtime lambdas . add_dependency ( f \" { api . runtime . java ! . pom . groupId } / { api . runtime . java ! . pom . artifactId } @ { api . runtime . java ! . pom . version } \" ) lambdas . pom . add_repository ( url = f \"file:// { path . relative ( lambdas . outdir , api . runtime . java ! . outdir ) } /dist/java\" , id = \"java-api-runtime\" ) monorepo . add_implicit_dependency ( lambdas , api . runtime . java ) # Use the maven shade plugin to build a \"super jar\" which we can deploy to AWS Lambda lambdas . pom . add_plugin ( \"org.apache.maven.plugins/maven-shade-plugin@3.3.0\" , configuration = { \"create_dependency_reduced_pom\" : False }, executions = [ PluginExecution ( id = \"shade-task\" , phase = \"package\" , goals = [ \"shade\" ] ) ] ) infra = AwsCdkJavaApp ( name = \"infra\" , parent = monorepo , outdir = \"packages/infra\" , artifact_id = \"infra\" , group_id = \"com.my.api\" , main_class = \"com.my.api.MyApp\" , version = \"1.0.0\" , cdk_version = \"2.0.0\" ) # Add a dependency on the generated CDK infrastructure infra . add_dependency ( f \" { api . infrastructure . java ! . pom . groupId } / { api . infrastructure . java ! . pom . artifactId } @ { api . infrastructure . java ! . pom . version } \" ) infra . pom . add_repository ( url = f \"file:// { path . relative ( infra . outdir , api . infrastructure . java ! . outdir ) } /dist/java\" , id = \"java-api-infra\" ) monorepo . add_implicit_dependency ( infra , api . infrastructure . java ) # Make sure the java lambda builds before our CDK infra monorepo . add_implicit_dependency ( infra , lambdas ) monorepo . synth () Use the CDK Construct In your CDK application, consume the Api construct, vended from the generated Java infrastructure package. package com.my.api ; import com.generated.api.myapijavainfra.infra.Api ; import com.generated.api.myapijavainfra.infra.ApiProps ; import com.generated.api.myapijavaruntime.runtime.api.OperationConfig ; import software.amazon.awscdk.Duration ; import software.amazon.awscdk.services.apigateway.CorsOptions ; import software.amazon.awscdk.services.lambda.Code ; import software.amazon.awscdk.services.lambda.Function ; import software.amazon.awscdk.services.lambda.FunctionProps ; import software.amazon.awscdk.services.lambda.Runtime ; import software.aws.awsprototypingsdk.typesafeapi.Authorizers ; import software.aws.awsprototypingsdk.typesafeapi.Integrations ; import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiIntegration ; import software.amazon.awscdk.App ; import software.amazon.awscdk.Stack ; import java.util.Arrays ; public class MyApp { public static void main ( final String [] args ) { App app = new App (); Stack s = new Stack ( app , \"infra\" ); // Declare the API construct to deploy the API Gateway resources new Api ( s , \"Api\" , ApiProps . builder () . defaultAuthorizer ( Authorizers . iam ()) . corsOptions ( CorsOptions . builder () . allowOrigins ( Arrays . asList ( \"*\" )) . allowMethods ( Arrays . asList ( \"*\" )) . build ()) . integrations ( OperationConfig . < TypeSafeApiIntegration > builder () . sayHello ( TypeSafeApiIntegration . builder () . integration ( Integrations . lambda ( // Point the lambda function to our built jar from the \"lambdas\" package new Function ( s , \"say-hello\" , FunctionProps . builder () . code ( Code . fromAsset ( \"../lambdas/dist/java/com/my/api/lambdas/1.0.0/lambdas-1.0.0.jar\" )) . handler ( \"com.my.api.SayHelloHandler\" ) . runtime ( Runtime . JAVA_11 ) . timeout ( Duration . seconds ( 30 )) . build ()))) . build ()) . build ()) . build ()); app . synth (); } } Implement a Lambda Handler In your lambdas project you can define your lambda handler in its source directory, eg lambdas/src/main/java/com/my/api/SayHelloHandler.java : package com.my.api ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello200Response ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloRequestInput ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloResponse ; import com.generated.api.myapijavaruntime.runtime.model.SayHelloResponseContent ; /** * An example lambda handler which uses the generated handler wrapper class (Handlers.SayHello) to manage marshalling * inputs and outputs. */ public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( SayHelloResponseContent . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Other Details Customising Generated Types/Infrastructure Projects By default, the generated types and infrastructure projects are configured automatically, including their project names. You can customise the generated projects using the runtime.options.<language> or infrastructure.options.<language> properties when constructing the TypeSafeApiProject . AWS WAFv2 Web ACL By default, a Web ACL is deployed and attached to your API Gateway Rest API with the \" AWSManagedRulesCommonRuleSet \", which provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10 . You can customise the Web ACL configuration via the webAclOptions of your Api CDK construct, eg: # Example automatically generated from non-compiling source. May contain errors. class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , integrations = { ... }, web_acl_options = { # Allow access only to specific CIDR ranges \"cidr_allow_list\" : { \"cidr_type\" : \"IPV4\" , \"cidr_ranges\" : [ \"1.2.3.4/5\" ] }, # Pick from the set here: https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html \"managed_rules\" : [{ \"vendor\" : \"AWS\" , \"name\" : \"AWSManagedRulesSQLiRuleSet\" } ] } ) You can remove the Web ACL entirely with webAclOptions: { disable: true } - you may wish to use this if you'd like to set up a Web ACL yourself with more control over the rules. Smithy IntelliJ Plugin The Smithy-based projects are compatible with the Smithy IntelliJ Plugin , which provides syntax highlighting and auto-complete for your Smithy model. To make use of it, perform the following steps: Install the \"Smithy\" plugin (under Preferences -> Plugins ) Right-click on the smithy/build.gradle file in your Smithy API project Select \"Link Gradle Project\" Tagging Operations Operations can be grouped together into logical collections via tags. This can be achieved in Smithy with the @tags trait: @tags ([ \"pets\" , \"users\" ]) operation PurchasePet { ... } Or in OpenAPI using the tags property: paths : /pets/purchase : post : operationId : purchasePet tags : - pets - users ... When multiple tags are used, the \"first\" tag is considered to be the API that the operation belongs to, so in the generated client, the above example operation would be included in the PetsApi client but not the UsersApi client. Multiple tags are still useful for documentation generation, for example DocumentationFormat.HTML_REDOC will group operations by tag in the side navigation bar. If you would like to introduce tags without breaking existing clients, we recommend first adding a tag named default to all operations. \u26a0\ufe0f Important Note : Smithy versions below 1.28.0 sort tags in alphabetical order and so the \"first\" tag will be the earliest in the alphabet. Therefore, if using tags with older versions of Smithy, we recommend prefixing your desired first tag with an underscore (for example _default ). This is rectified in 1.28.0 , where tag order from the @tags trait is preserved. API Reference Constructs TypeSafeRestApi A construct for creating an api gateway rest api based on the definition in the OpenAPI spec. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeRestApi ( scope : Construct , id : str , cloud_watch_role : bool = None , deploy : bool = None , deploy_options : StageOptions = None , description : str = None , disable_execute_api_endpoint : bool = None , domain_name : DomainNameOptions = None , endpoint_export_name : str = None , endpoint_types : typing . List [ EndpointType ] = None , fail_on_warnings : bool = None , parameters : typing . Mapping [ str ] = None , policy : PolicyDocument = None , rest_api_name : str = None , retain_deployments : bool = None , integrations : typing . Mapping [ TypeSafeApiIntegration ], operation_lookup : typing . Mapping [ MethodAndPath ], cors_options : CorsOptions = None , default_authorizer : Authorizer = None , spec_path : str , web_acl_options : TypeSafeApiWebAclOptions = None ) Name Type Description scope constructs.Construct No description. id str No description. cloud_watch_role bool Automatically configure an AWS CloudWatch role for API Gateway. deploy bool Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deploy_options aws_cdk.aws_apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description str A description of the RestApi construct. disable_execute_api_endpoint bool Specifies whether clients can invoke the API using the default execute-api endpoint. domain_name aws_cdk.aws_apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpoint_export_name str Export name for the CfnOutput containing the API endpoint. endpoint_types typing.List[aws_cdk.aws_apigateway.EndpointType] A list of the endpoint types of the API. fail_on_warnings bool Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters typing.Mapping[str] Custom header parameters for the request. policy aws_cdk.aws_iam.PolicyDocument A policy document that contains the permissions for this RestApi. rest_api_name str A name for the API Gateway RestApi resource. retain_deployments bool Retains old deployment resources when the API changes. integrations typing.Mapping[ TypeSafeApiIntegration ] A mapping of API operation to its integration. operation_lookup typing.Mapping[ MethodAndPath ] Details about each operation. cors_options aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Authorizer The default authorizer to use for your api. spec_path str Path to the JSON open api spec. web_acl_options TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. scope Required Type: constructs.Construct id Required Type: str cloud_watch_role Optional Type: bool Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional Type: bool Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deploy_options Optional Type: aws_cdk.aws_apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional Type: str Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disable_execute_api_endpoint Optional Type: bool Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domain_name Optional Type: aws_cdk.aws_apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpoint_export_name Optional Type: str Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpoint_types Optional Type: typing.List[aws_cdk.aws_apigateway.EndpointType] Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. fail_on_warnings Optional Type: bool Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional Type: typing.Mapping[str] Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional Type: aws_cdk.aws_iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. rest_api_name Optional Type: str Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retain_deployments Optional Type: bool Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required Type: typing.Mapping[ TypeSafeApiIntegration ] A mapping of API operation to its integration. operation_lookup Required Type: typing.Mapping[ MethodAndPath ] Details about each operation. cors_options Optional Type: aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Optional Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. spec_path Required Type: str Path to the JSON open api spec. web_acl_options Optional Type: TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeRestApi . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. api aws_cdk.aws_apigateway.SpecRestApi No description. ip_set aws_cdk.aws_wafv2.CfnIPSet No description. web_acl aws_cdk.aws_wafv2.CfnWebACL No description. web_acl_association aws_cdk.aws_wafv2.CfnWebACLAssociation No description. node Required node : Node Type: constructs.Node The tree node. api Required api : SpecRestApi Type: aws_cdk.aws_apigateway.SpecRestApi ip_set Optional ip_set : CfnIPSet Type: aws_cdk.aws_wafv2.CfnIPSet web_acl Optional web_acl : CfnWebACL Type: aws_cdk.aws_wafv2.CfnWebACL web_acl_association Optional web_acl_association : CfnWebACLAssociation Type: aws_cdk.aws_wafv2.CfnWebACLAssociation Structs ApiGatewayIntegration Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . ApiGatewayIntegration ( cache_key_parameters : typing . List [ str ] = None , cache_namespace : str = None , connection_id : str = None , connection_type : str = None , content_handling : str = None , credentials : str = None , http_method : str = None , passthrough_behavior : str = None , request_parameters : typing . Mapping [ str ] = None , request_templates : typing . Mapping [ str ] = None , responses : typing . Mapping [ ApiGatewayIntegrationResponse ] = None , timeout_in_millis : typing . Union [ int , float ] = None , tls_config : ApiGatewayIntegrationTlsConfig = None , type : str = None , uri : str = None ) Properties Name Type Description cache_key_parameters typing.List[str] A list of request parameters whose values are to be cached. cache_namespace str An API-specific tag group of related cached parameters. connection_id str The ID of a VpcLink for the private integration. connection_type str The integration connection type. content_handling str Request payload encoding conversion types. credentials str For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. http_method str The HTTP method used in the integration request. passthrough_behavior str Specifies how a request payload of unmapped content type is passed through the integration request without modification. request_parameters typing.Mapping[str] Specifies mappings from method request parameters to integration request parameters. request_templates typing.Mapping[str] Mapping templates for a request payload of specified MIME types. responses typing.Mapping[ ApiGatewayIntegrationResponse ] Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. timeout_in_millis typing.Union[int, float] Custom timeout between 50 and 29,000 milliseconds. tls_config ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. type str The type of integration with the specified backend. uri str The endpoint URI of the backend. cache_key_parameters Optional cache_key_parameters : typing . List [ str ] Type: typing.List[str] A list of request parameters whose values are to be cached. cache_namespace Optional cache_namespace : str Type: str An API-specific tag group of related cached parameters. connection_id Optional connection_id : str Type: str The ID of a VpcLink for the private integration. https://docs.aws.amazon.com/apigateway/latest/api/API_VpcLink.html connection_type Optional connection_type : str Type: str The integration connection type. The valid value is \"VPC_LINK\" for private integration or \"INTERNET\", otherwise. content_handling Optional content_handling : str Type: str Request payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. credentials Optional credentials : str Type: str For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. If unspecified, credentials default to resource-based permissions that must be added manually to allow the API to access the resource. For more information, see Granting Permissions Using a Resource Policy. Note: When using IAM credentials, make sure that AWS STS Regional endpoints are enabled for the Region where this API is deployed for best performance. http_method Optional http_method : str Type: str The HTTP method used in the integration request. For Lambda function invocations, the value must be POST. passthrough_behavior Optional passthrough_behavior : str Type: str Specifies how a request payload of unmapped content type is passed through the integration request without modification. Supported values are when_no_templates, when_no_match, and never. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#passthroughBehavior request_parameters Optional request_parameters : typing . Mapping [ str ] Type: typing.Mapping[str] Specifies mappings from method request parameters to integration request parameters. Supported request parameters are querystring, path, header, and body. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestParameters.html request_templates Optional request_templates : typing . Mapping [ str ] Type: typing.Mapping[str] Mapping templates for a request payload of specified MIME types. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestTemplates.html responses Optional responses : typing . Mapping [ ApiGatewayIntegrationResponse ] Type: typing.Mapping[ ApiGatewayIntegrationResponse ] Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-responses.html timeout_in_millis Optional timeout_in_millis : typing . Union [ int , float ] Type: typing.Union[int, float] Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds. tls_config Optional tls_config : ApiGatewayIntegrationTlsConfig Type: ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html type Optional type : str Type: str The type of integration with the specified backend. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#type uri Optional uri : str Type: str The endpoint URI of the backend. For integrations of the aws type, this is an ARN value. For the HTTP integration, this is the URL of the HTTP endpoint including the https or http scheme. ApiGatewayIntegrationResponse API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . ApiGatewayIntegrationResponse ( response_parameters : typing . Mapping [ str ], response_templates : typing . Mapping [ str ], status_code : str , content_handling : str = None ) Properties Name Type Description response_parameters typing.Mapping[str] Specifies parameter mappings for the response. response_templates typing.Mapping[str] Specifies MIME type-specific mapping templates for the response\u2019s payload. status_code str HTTP status code for the method response. content_handling str Response payload encoding conversion types. response_parameters Required response_parameters : typing . Mapping [ str ] Type: typing.Mapping[str] Specifies parameter mappings for the response. response_templates Required response_templates : typing . Mapping [ str ] Type: typing.Mapping[str] Specifies MIME type-specific mapping templates for the response\u2019s payload. status_code Required status_code : str Type: str HTTP status code for the method response. content_handling Optional content_handling : str Type: str Response payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . ApiGatewayIntegrationTlsConfig ( insecure_skip_verification : bool = None ) Properties Name Type Description insecure_skip_verification bool Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. insecure_skip_verification Optional insecure_skip_verification : bool Type: bool Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations. AuthorizerProps Properties for an authorizer. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . AuthorizerProps ( authorization_type : AuthorizationType , authorizer_id : str , authorization_scopes : typing . List [ str ] = None ) Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. CidrAllowList Representation of a CIDR range. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . CidrAllowList ( cidr_ranges : typing . List [ str ], cidr_type : str ) Properties Name Type Description cidr_ranges typing.List[str] Specify an IPv4 address by using CIDR notation. cidr_type str Type of CIDR range. cidr_ranges Required cidr_ranges : typing . List [ str ] Type: typing.List[str] Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidr_type Required cidr_type : str Type: str Type of CIDR range. CognitoAuthorizerProps Properties used to configure a cognito authorizer. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . CognitoAuthorizerProps ( authorizer_id : str , user_pools : typing . List [ IUserPool ], authorization_scopes : typing . List [ str ] = None ) Properties Name Type Description authorizer_id str Unique identifier for this authorizer. user_pools typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes typing.List[str] A list of authorization scopes configured on the method. authorizer_id Required authorizer_id : str Type: str Unique identifier for this authorizer. user_pools Required user_pools : typing . List [ IUserPool ] Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes CustomAuthorizerProps Properties used to configure a custom authorizer. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . CustomAuthorizerProps ( authorizer_id : str , function : IFunction , authorizer_result_ttl_in_seconds : typing . Union [ int , float ] = None , identity_source : str = None , type : CustomAuthorizerType = None ) Properties Name Type Description authorizer_id str Unique identifier for this authorizer. function aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds typing.Union[int, float] The number of seconds during which the authorizer result is cached. identity_source str The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizer_id Required authorizer_id : str Type: str Unique identifier for this authorizer. function Required function : IFunction Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds Optional authorizer_result_ttl_in_seconds : typing . Union [ int , float ] Type: typing.Union[int, float] Default: 300 The number of seconds during which the authorizer result is cached. identity_source Optional identity_source : str Type: str Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional type : CustomAuthorizerType Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type DocumentationConfiguration Configuration for generated documentation. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . DocumentationConfiguration ( formats : typing . List [ DocumentationFormat ] ) Properties Name Type Description formats typing.List[ DocumentationFormat ] Formats for generated documentation. formats Required formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats for generated documentation. GeneratedCodeOptions Options for generated clients. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . GeneratedCodeOptions ( java : JavaProjectOptions = None , python : PythonProjectOptions = None , typescript : TypeScriptProjectOptions = None ) Properties Name Type Description java projen.java.JavaProjectOptions Options for a generated java project. python projen.python.PythonProjectOptions Options for a generated python project. typescript projen.typescript.TypeScriptProjectOptions Options for a generated typescript project. java Optional java : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for a generated java project. These override the default inferred options. python Optional python : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for a generated python project. These override the default inferred options. typescript Optional typescript : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for a generated typescript project. These override the default inferred options. GeneratedCodeProjects Generated code projects. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . GeneratedCodeProjects ( java : JavaProject = None , python : PythonProject = None , typescript : TypeScriptProject = None ) Properties Name Type Description java projen.java.JavaProject Generated java project. python projen.python.PythonProject Generated python project. typescript projen.typescript.TypeScriptProject Generated typescript project. java Optional java : JavaProject Type: projen.java.JavaProject Generated java project. python Optional python : PythonProject Type: projen.python.PythonProject Generated python project. typescript Optional typescript : TypeScriptProject Type: projen.typescript.TypeScriptProject Generated typescript project. InfrastructureConfiguration Configuration for generated infrastructure. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . InfrastructureConfiguration ( language : Language , options : GeneratedCodeOptions = None ) Properties Name Type Description language Language The language to generate the type-safe CDK infrastructure in. options GeneratedCodeOptions Options for the infrastructure package. language Required language : Language Type: Language The language to generate the type-safe CDK infrastructure in. options Optional options : GeneratedCodeOptions Type: GeneratedCodeOptions Options for the infrastructure package. Note that only those provided for the specified language will apply. IntegrationGrantProps Properties for granting the API access to invoke the operation. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . IntegrationGrantProps ( method : str , path : str , api : SpecRestApi , operation_id : str , scope : Construct ) Properties Name Type Description method str The http method of this operation. path str The path of this operation in the api. api aws_cdk.aws_apigateway.SpecRestApi The api to grant permissions for. operation_id str The ID of the operation for which permissions are being granted. scope constructs.Construct The scope in which permission resources can be created. method Required method : str Type: str The http method of this operation. path Required path : str Type: str The path of this operation in the api. api Required api : SpecRestApi Type: aws_cdk.aws_apigateway.SpecRestApi The api to grant permissions for. operation_id Required operation_id : str Type: str The ID of the operation for which permissions are being granted. scope Required scope : Construct Type: constructs.Construct The scope in which permission resources can be created. IntegrationRenderProps Properties for rendering an integration into an API Gateway OpenAPI extension. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . IntegrationRenderProps ( method : str , path : str , operation_id : str , scope : Construct ) Properties Name Type Description method str The http method of this operation. path str The path of this operation in the api. operation_id str The ID of the operation being rendered. scope constructs.Construct The scope in which the integration is being rendered. method Required method : str Type: str The http method of this operation. path Required path : str Type: str The path of this operation in the api. operation_id Required operation_id : str Type: str The ID of the operation being rendered. scope Required scope : Construct Type: constructs.Construct The scope in which the integration is being rendered. ManagedRule Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . ManagedRule ( name : str , vendor : str ) Properties Name Type Description name str The name of the managed rule group. vendor str The name of the managed rule group vendor. name Required name : str Type: str The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required vendor : str Type: str The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. MethodAndPath Structure to contain an API operation's method and path. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . MethodAndPath ( method : str , path : str ) Properties Name Type Description method str The http method of this operation. path str The path of this operation in the api. method Required method : str Type: str The http method of this operation. path Required path : str Type: str The path of this operation in the api. ModelConfiguration Configuration for modelling the API. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . ModelConfiguration ( language : ModelLanguage , options : ModelOptions ) Properties Name Type Description language ModelLanguage The language the API model is defined in. options ModelOptions Options for the API model. language Required language : ModelLanguage Type: ModelLanguage The language the API model is defined in. options Required options : ModelOptions Type: ModelOptions Options for the API model. ModelOptions Options for models. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . ModelOptions ( openapi : OpenApiModelOptions = None , smithy : SmithyModelOptions = None ) Properties Name Type Description openapi OpenApiModelOptions Options for the OpenAPI model - required when model language is OPENAPI. smithy SmithyModelOptions Options for the Smithy model - required when model language is SMITHY. openapi Optional openapi : OpenApiModelOptions Type: OpenApiModelOptions Options for the OpenAPI model - required when model language is OPENAPI. smithy Optional smithy : SmithyModelOptions Type: SmithyModelOptions Options for the Smithy model - required when model language is SMITHY. OpenApiModelOptions Options for the OpenAPI model. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . OpenApiModelOptions ( title : str ) Properties Name Type Description title str The title in the OpenAPI specification. title Required title : str Type: str The title in the OpenAPI specification. RuntimeConfiguration Configuration for generated runtime projects. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . RuntimeConfiguration ( languages : typing . List [ Language ], options : GeneratedCodeOptions = None ) Properties Name Type Description languages typing.List[ Language ] The languages that runtime projects will be generated in. options GeneratedCodeOptions Options for the generated runtimes. languages Required languages : typing . List [ Language ] Type: typing.List[ Language ] The languages that runtime projects will be generated in. These projects can be used to provide type safety for both client and server projects. options Optional options : GeneratedCodeOptions Type: GeneratedCodeOptions Options for the generated runtimes. Note that only options provided for the specified languages will apply. SmithyBuildOptions Options for the smithy build files. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . SmithyBuildOptions ( imports : typing . List [ str ] = None , plugins : typing . Mapping [ SmithyPlugin ] = None , ignore_missing_plugins : bool = None , maven : SmithyMavenConfiguration = None , projections : typing . Mapping [ SmithyProjection ] = None ) Properties Name Type Description imports typing.List[str] List of imports. plugins typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. ignore_missing_plugins bool If a plugin can't be found, Smithy will by default fail the build. maven SmithyMavenConfiguration Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections typing.Mapping[ SmithyProjection ] Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . imports Optional imports : typing . List [ str ] Type: typing.List[str] List of imports. plugins Optional plugins : typing . Mapping [ SmithyPlugin ] Type: typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. ignore_missing_plugins Optional ignore_missing_plugins : bool Type: bool Default: no ignoreMissingPlugins set in the smithy-build.json file If a plugin can't be found, Smithy will by default fail the build. This setting can be set to true to allow the build to progress even if a plugin can't be found on the classpath. maven Optional maven : SmithyMavenConfiguration Type: SmithyMavenConfiguration Default: the default configuration required for Smithy to OpenAPI conversion Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections Optional projections : typing . Mapping [ SmithyProjection ] Type: typing.Mapping[ SmithyProjection ] Default: no projections Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . SmithyCommon Properties common to smithy plugins and the root smithy build. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . SmithyCommon ( imports : typing . List [ str ] = None , plugins : typing . Mapping [ SmithyPlugin ] = None ) Properties Name Type Description imports typing.List[str] List of imports. plugins typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. imports Optional imports : typing . List [ str ] Type: typing.List[str] List of imports. plugins Optional plugins : typing . Mapping [ SmithyPlugin ] Type: typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. SmithyMavenConfiguration Configuration for smithy maven dependencies. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . SmithyMavenConfiguration ( dependencies : typing . List [ str ] = None , repository_urls : typing . List [ str ] = None ) Properties Name Type Description dependencies typing.List[str] The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repository_urls typing.List[str] The repository urls used in the build.gradle and smithy-build.json files. dependencies Optional dependencies : typing . List [ str ] Type: typing.List[str] The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repository_urls Optional repository_urls : typing . List [ str ] Type: typing.List[str] Default: maven central and maven local The repository urls used in the build.gradle and smithy-build.json files. SmithyModelOptions Options for a Smithy model. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . SmithyModelOptions ( service_name : SmithyServiceName , ignore_gradle_wrapper : bool = None , ignore_smithy_build_output : bool = None , smithy_build_options : SmithyBuildOptions = None ) Properties Name Type Description service_name SmithyServiceName Smithy service name. ignore_gradle_wrapper bool Set to false if you would like to check in your gradle wrapper. ignore_smithy_build_output bool Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. smithy_build_options SmithyBuildOptions Smithy build options. service_name Required service_name : SmithyServiceName Type: SmithyServiceName Smithy service name. ignore_gradle_wrapper Optional ignore_gradle_wrapper : bool Type: bool Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignore_smithy_build_output Optional ignore_smithy_build_output : bool Type: bool Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. smithy_build_options Optional smithy_build_options : SmithyBuildOptions Type: SmithyBuildOptions Smithy build options. SmithyPlugin A smithy plugin. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . SmithyPlugin ( service : str = None ) Properties Name Type Description service str The service to which the plugin should apply. service Optional service : str Type: str The service to which the plugin should apply. SmithyProjection A smithy build projection. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . SmithyProjection ( imports : typing . List [ str ] = None , plugins : typing . Mapping [ SmithyPlugin ] = None , abstract : bool = None , transforms : typing . List [ SmithyTransform ] = None ) Properties Name Type Description imports typing.List[str] List of imports. plugins typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. abstract bool Whether or not the projection is abstract. transforms typing.List[ SmithyTransform ] Transforms to apply to the projection. imports Optional imports : typing . List [ str ] Type: typing.List[str] List of imports. plugins Optional plugins : typing . Mapping [ SmithyPlugin ] Type: typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. abstract Optional abstract : bool Type: bool Whether or not the projection is abstract. transforms Optional transforms : typing . List [ SmithyTransform ] Type: typing.List[ SmithyTransform ] Transforms to apply to the projection. SmithyServiceName Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . SmithyServiceName ( namespace : str , service_name : str ) Properties Name Type Description namespace str The service namespace. service_name str The service name. namespace Required namespace : str Type: str The service namespace. Nested namespaces are separated by '.', for example com.company https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id service_name Required service_name : str Type: str The service name. Should be PascalCase, for example HelloService https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id SmithyTransform A smithy build transform. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . SmithyTransform ( args : typing . Mapping [ typing . Any ], name : str ) Properties Name Type Description args typing.Mapping[typing.Any] Arguments for the transform. name str Name of the transform. args Required args : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Arguments for the transform. name Required name : str Type: str Name of the transform. TypeSafeApiIntegration Defines an integration for an individual API operation. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeApiIntegration ( integration : Integration , authorizer : Authorizer = None ) Properties Name Type Description integration Integration The lambda function to service the api operation. authorizer Authorizer The authorizer to use for this api operation (overrides the default). integration Required integration : Integration Type: Integration The lambda function to service the api operation. authorizer Optional authorizer : Authorizer Type: Authorizer The authorizer to use for this api operation (overrides the default). TypeSafeApiModelProjectOptions Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeApiModelProjectOptions ( name : str , commit_generated : bool = None , git_ignore_options : IgnoreFileOptions = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcJsonOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , model_language : ModelLanguage , model_options : ModelOptions ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_ignore_options projen.IgnoreFileOptions Configuration options for .gitignore file. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. model_language ModelLanguage No description. model_options ModelOptions No description. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_ignore_options Optional git_ignore_options : IgnoreFileOptions Type: projen.IgnoreFileOptions Configuration options for .gitignore file. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcJsonOptions Type: projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. model_language Required model_language : ModelLanguage Type: ModelLanguage model_options Required model_options : ModelOptions Type: ModelOptions TypeSafeApiOptions Options required alongside an Open API specification to create API Gateway resources. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeApiOptions ( integrations : typing . Mapping [ TypeSafeApiIntegration ], operation_lookup : typing . Mapping [ MethodAndPath ], cors_options : CorsOptions = None , default_authorizer : Authorizer = None ) Properties Name Type Description integrations typing.Mapping[ TypeSafeApiIntegration ] A mapping of API operation to its integration. operation_lookup typing.Mapping[ MethodAndPath ] Details about each operation. cors_options aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Authorizer The default authorizer to use for your api. integrations Required integrations : typing . Mapping [ TypeSafeApiIntegration ] Type: typing.Mapping[ TypeSafeApiIntegration ] A mapping of API operation to its integration. operation_lookup Required operation_lookup : typing . Mapping [ MethodAndPath ] Type: typing.Mapping[ MethodAndPath ] Details about each operation. cors_options Optional cors_options : CorsOptions Type: aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Optional default_authorizer : Authorizer Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. TypeSafeApiProjectOptions Options for the TypeSafeApiProject. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeApiProjectOptions ( name : str , commit_generated : bool = None , git_ignore_options : IgnoreFileOptions = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcJsonOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , infrastructure : InfrastructureConfiguration , model : ModelConfiguration , runtime : RuntimeConfiguration , documentation : DocumentationConfiguration = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_ignore_options projen.IgnoreFileOptions Configuration options for .gitignore file. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. infrastructure InfrastructureConfiguration Configuration for generated infrastructure. model ModelConfiguration Configuration for the API model. runtime RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation DocumentationConfiguration Configuration for generated documentation. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_ignore_options Optional git_ignore_options : IgnoreFileOptions Type: projen.IgnoreFileOptions Configuration options for .gitignore file. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcJsonOptions Type: projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. infrastructure Required infrastructure : InfrastructureConfiguration Type: InfrastructureConfiguration Configuration for generated infrastructure. model Required model : ModelConfiguration Type: ModelConfiguration Configuration for the API model. runtime Required runtime : RuntimeConfiguration Type: RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation Optional documentation : DocumentationConfiguration Type: DocumentationConfiguration Configuration for generated documentation. TypeSafeApiWebAclOptions Configuration for the Web ACL associated with the API. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeApiWebAclOptions ( cidr_allow_list : CidrAllowList = None , disable : bool = None , managed_rules : typing . List [ ManagedRule ] = None ) Properties Name Type Description cidr_allow_list CidrAllowList List of cidr ranges to allow. disable bool If set to true, no WebACL will be associated with the API. managed_rules typing.List[ ManagedRule ] List of managed rules to apply to the web acl. cidr_allow_list Optional cidr_allow_list : CidrAllowList Type: CidrAllowList Default: undefined List of cidr ranges to allow. disable Optional disable : bool Type: bool Default: false If set to true, no WebACL will be associated with the API. You can also use this option if you would like to create your own WebACL and associate it yourself. managed_rules Optional managed_rules : typing . List [ ManagedRule ] Type: typing.List[ ManagedRule ] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. TypeSafeRestApiProps Configuration for the TypeSafeRestApi construct. Initializer import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeRestApiProps ( cloud_watch_role : bool = None , deploy : bool = None , deploy_options : StageOptions = None , description : str = None , disable_execute_api_endpoint : bool = None , domain_name : DomainNameOptions = None , endpoint_export_name : str = None , endpoint_types : typing . List [ EndpointType ] = None , fail_on_warnings : bool = None , parameters : typing . Mapping [ str ] = None , policy : PolicyDocument = None , rest_api_name : str = None , retain_deployments : bool = None , integrations : typing . Mapping [ TypeSafeApiIntegration ], operation_lookup : typing . Mapping [ MethodAndPath ], cors_options : CorsOptions = None , default_authorizer : Authorizer = None , spec_path : str , web_acl_options : TypeSafeApiWebAclOptions = None ) Properties Name Type Description cloud_watch_role bool Automatically configure an AWS CloudWatch role for API Gateway. deploy bool Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deploy_options aws_cdk.aws_apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description str A description of the RestApi construct. disable_execute_api_endpoint bool Specifies whether clients can invoke the API using the default execute-api endpoint. domain_name aws_cdk.aws_apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpoint_export_name str Export name for the CfnOutput containing the API endpoint. endpoint_types typing.List[aws_cdk.aws_apigateway.EndpointType] A list of the endpoint types of the API. fail_on_warnings bool Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters typing.Mapping[str] Custom header parameters for the request. policy aws_cdk.aws_iam.PolicyDocument A policy document that contains the permissions for this RestApi. rest_api_name str A name for the API Gateway RestApi resource. retain_deployments bool Retains old deployment resources when the API changes. integrations typing.Mapping[ TypeSafeApiIntegration ] A mapping of API operation to its integration. operation_lookup typing.Mapping[ MethodAndPath ] Details about each operation. cors_options aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Authorizer The default authorizer to use for your api. spec_path str Path to the JSON open api spec. web_acl_options TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. cloud_watch_role Optional cloud_watch_role : bool Type: bool Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional deploy : bool Type: bool Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deploy_options Optional deploy_options : StageOptions Type: aws_cdk.aws_apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional description : str Type: str Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disable_execute_api_endpoint Optional disable_execute_api_endpoint : bool Type: bool Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domain_name Optional domain_name : DomainNameOptions Type: aws_cdk.aws_apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpoint_export_name Optional endpoint_export_name : str Type: str Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpoint_types Optional endpoint_types : typing . List [ EndpointType ] Type: typing.List[aws_cdk.aws_apigateway.EndpointType] Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. fail_on_warnings Optional fail_on_warnings : bool Type: bool Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional parameters : typing . Mapping [ str ] Type: typing.Mapping[str] Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional policy : PolicyDocument Type: aws_cdk.aws_iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. rest_api_name Optional rest_api_name : str Type: str Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retain_deployments Optional retain_deployments : bool Type: bool Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required integrations : typing . Mapping [ TypeSafeApiIntegration ] Type: typing.Mapping[ TypeSafeApiIntegration ] A mapping of API operation to its integration. operation_lookup Required operation_lookup : typing . Mapping [ MethodAndPath ] Type: typing.Mapping[ MethodAndPath ] Details about each operation. cors_options Optional cors_options : CorsOptions Type: aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Optional default_authorizer : Authorizer Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. spec_path Required spec_path : str Type: str Path to the JSON open api spec. web_acl_options Optional web_acl_options : TypeSafeApiWebAclOptions Type: TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. Classes Authorizer An authorizer for authorizing API requests. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . Authorizer ( authorization_type : AuthorizationType , authorizer_id : str , authorization_scopes : typing . List [ str ] = None ) Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required Type: str The unique identifier for the authorizer. authorization_scopes Optional Type: typing.List[str] Scopes for the authorizer, if any. Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. Authorizers Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . Authorizers () Name Type Description Static Functions Name Description cognito A Cognito User Pools authorizer. custom A custom authorizer. iam An IAM authorizer which uses AWS signature version 4 to authorize requests. none No authorizer. cognito import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . Authorizers . cognito ( authorizer_id : str , user_pools : typing . List [ IUserPool ], authorization_scopes : typing . List [ str ] = None ) A Cognito User Pools authorizer. authorizer_id Required Type: str Unique identifier for this authorizer. user_pools Required Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes Optional Type: typing.List[str] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes custom import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . Authorizers . custom ( authorizer_id : str , function : IFunction , authorizer_result_ttl_in_seconds : typing . Union [ int , float ] = None , identity_source : str = None , type : CustomAuthorizerType = None ) A custom authorizer. authorizer_id Required Type: str Unique identifier for this authorizer. function Required Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds Optional Type: typing.Union[int, float] Default: 300 The number of seconds during which the authorizer result is cached. identity_source Optional Type: str Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type iam import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . Authorizers . iam () An IAM authorizer which uses AWS signature version 4 to authorize requests. none import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . Authorizers . none () No authorizer. CognitoAuthorizer An authorizer that uses Cognito identity or access tokens. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . CognitoAuthorizer ( authorizer_id : str , user_pools : typing . List [ IUserPool ], authorization_scopes : typing . List [ str ] = None ) Name Type Description authorizer_id str Unique identifier for this authorizer. user_pools typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes typing.List[str] A list of authorization scopes configured on the method. authorizer_id Required Type: str Unique identifier for this authorizer. user_pools Required Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes Optional Type: typing.List[str] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes Methods Name Description with_scopes Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. with_scopes def with_scopes ( authorization_scopes : str ) -> CognitoAuthorizer Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes authorization_scopes Required Type: str the scopes to apply. Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. user_pools typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. user_pools Required user_pools : typing . List [ IUserPool ] Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. CustomAuthorizer An authorizer that uses a lambda function to authorize requests. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . CustomAuthorizer ( authorizer_id : str , function : IFunction , authorizer_result_ttl_in_seconds : typing . Union [ int , float ] = None , identity_source : str = None , type : CustomAuthorizerType = None ) Name Type Description authorizer_id str Unique identifier for this authorizer. function aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds typing.Union[int, float] The number of seconds during which the authorizer result is cached. identity_source str The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizer_id Required Type: str Unique identifier for this authorizer. function Required Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds Optional Type: typing.Union[int, float] Default: 300 The number of seconds during which the authorizer result is cached. identity_source Optional Type: str Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorizer_result_ttl_in_seconds typing.Union[int, float] The number of seconds during which the authorizer result is cached. function aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. identity_source str The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. authorizer_result_ttl_in_seconds Required authorizer_result_ttl_in_seconds : typing . Union [ int , float ] Type: typing.Union[int, float] The number of seconds during which the authorizer result is cached. function Required function : IFunction Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. identity_source Required identity_source : str Type: str The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Required type : CustomAuthorizerType Type: CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IamAuthorizer An IAM authorizer. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . IamAuthorizer () Name Type Description Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. Integration An integration for an API operation. You can extend this to implement your own integration if you like. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . Integration () Name Type Description Methods Name Description grant Grant permissions for the API to invoke the integration. render Render the integration into an API Gateway OpenAPI extension. grant def grant ( method : str , path : str , api : SpecRestApi , operation_id : str , scope : Construct ) -> None Grant permissions for the API to invoke the integration. method Required Type: str The http method of this operation. path Required Type: str The path of this operation in the api. api Required Type: aws_cdk.aws_apigateway.SpecRestApi The api to grant permissions for. operation_id Required Type: str The ID of the operation for which permissions are being granted. scope Required Type: constructs.Construct The scope in which permission resources can be created. render def render ( method : str , path : str , operation_id : str , scope : Construct ) -> ApiGatewayIntegration Render the integration into an API Gateway OpenAPI extension. method Required Type: str The http method of this operation. path Required Type: str The path of this operation in the api. operation_id Required Type: str The ID of the operation being rendered. scope Required Type: constructs.Construct The scope in which the integration is being rendered. Integrations A collection of integrations to connect API operations with a backend to service requests. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . Integrations () Name Type Description Static Functions Name Description lambda An integration that invokes a lambda function to service the request. lambda import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . Integrations . lambda ( lambda_function : IFunction ) An integration that invokes a lambda function to service the request. lambda_function Required Type: aws_cdk.aws_lambda.IFunction the function to invoke. LambdaIntegration A lambda integration. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . LambdaIntegration ( lambda_function : IFunction ) Name Type Description lambda_function aws_cdk.aws_lambda.IFunction No description. lambda_function Required Type: aws_cdk.aws_lambda.IFunction Methods Name Description grant Grant API Gateway permissions to invoke the lambda. render Render the lambda integration as a snippet of OpenAPI. grant def grant ( method : str , path : str , api : SpecRestApi , operation_id : str , scope : Construct ) -> None Grant API Gateway permissions to invoke the lambda. method Required Type: str The http method of this operation. path Required Type: str The path of this operation in the api. api Required Type: aws_cdk.aws_apigateway.SpecRestApi The api to grant permissions for. operation_id Required Type: str The ID of the operation for which permissions are being granted. scope Required Type: constructs.Construct The scope in which permission resources can be created. render def render ( method : str , path : str , operation_id : str , scope : Construct ) -> ApiGatewayIntegration Render the lambda integration as a snippet of OpenAPI. method Required Type: str The http method of this operation. path Required Type: str The path of this operation in the api. operation_id Required Type: str The ID of the operation being rendered. scope Required Type: constructs.Construct The scope in which the integration is being rendered. NoneAuthorizer No authorizer. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . NoneAuthorizer () Name Type Description Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. TypeSafeApiModelProject Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeApiModelProject ( name : str , commit_generated : bool = None , git_ignore_options : IgnoreFileOptions = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcJsonOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , model_language : ModelLanguage , model_options : ModelOptions ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_ignore_options projen.IgnoreFileOptions Configuration options for .gitignore file. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. model_language ModelLanguage No description. model_options ModelOptions No description. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_ignore_options Optional Type: projen.IgnoreFileOptions Configuration options for .gitignore file. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. model_language Required Type: ModelLanguage model_options Required Type: ModelOptions Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Consider a set of files as \"generated\". post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , args : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. args Optional Type: typing.List[str] Default: no arguments are passed to the step Should the provided exec shell command receive fixed args. {@link TaskStepOptions.args } exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs } steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( _glob : str ) -> None Consider a set of files as \"generated\". This method is implemented by derived classes and used for example, to add git attributes to tell GitHub that certain files are generated. _glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. generate_task projen.Task No description. parsed_spec_file str No description. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. generate_task Required generate_task : Task Type: projen.Task parsed_spec_file Required parsed_spec_file : str Type: str Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. TypeSafeApiProject Project for a type-safe API, defined using Smithy or OpenAPI. Generates a CDK construct to deploy your API, as well as client and server code to help build your API quickly. Initializers import aws_prototyping_sdk.type_safe_api aws_prototyping_sdk . type_safe_api . TypeSafeApiProject ( name : str , commit_generated : bool = None , git_ignore_options : IgnoreFileOptions = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcJsonOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , infrastructure : InfrastructureConfiguration , model : ModelConfiguration , runtime : RuntimeConfiguration , documentation : DocumentationConfiguration = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_ignore_options projen.IgnoreFileOptions Configuration options for .gitignore file. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. infrastructure InfrastructureConfiguration Configuration for generated infrastructure. model ModelConfiguration Configuration for the API model. runtime RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation DocumentationConfiguration Configuration for generated documentation. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_ignore_options Optional Type: projen.IgnoreFileOptions Configuration options for .gitignore file. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. infrastructure Required Type: InfrastructureConfiguration Configuration for generated infrastructure. model Required Type: ModelConfiguration Configuration for the API model. runtime Required Type: RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation Optional Type: DocumentationConfiguration Configuration for generated documentation. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Consider a set of files as \"generated\". post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , args : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. args Optional Type: typing.List[str] Default: no arguments are passed to the step Should the provided exec shell command receive fixed args. {@link TaskStepOptions.args } exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs } steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( _glob : str ) -> None Consider a set of files as \"generated\". This method is implemented by derived classes and used for example, to add git attributes to tell GitHub that certain files are generated. _glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. infrastructure GeneratedCodeProjects Generated infrastructure projects. runtime GeneratedCodeProjects Generated runtime projects. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. infrastructure Required infrastructure : GeneratedCodeProjects Type: GeneratedCodeProjects Generated infrastructure projects. Only the property corresponding to infrastructure.language will be defined. runtime Required runtime : GeneratedCodeProjects Type: GeneratedCodeProjects Generated runtime projects. When runtime.languages includes the corresponding language, the project can be assumed to be defined. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Members Name Description TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. DocumentationFormat Formats for documentation generation. Members Name Description HTML_REDOC HTML Documentation generated by redoc. HTML2 OpenAPI Generator 'html2' documentation. MARKDOWN OpenAPI Generator 'markdown' documentation. PLANTUML OpenAPI Generator 'plantuml' documentation. HTML_REDOC HTML Documentation generated by redoc. Redocly/redoc HTML2 OpenAPI Generator 'html2' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/html2.md MARKDOWN OpenAPI Generator 'markdown' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/markdown.md PLANTUML OpenAPI Generator 'plantuml' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/plantuml.md Language Supported languages for code generation. Members Name Description TYPESCRIPT No description. PYTHON No description. JAVA No description. TYPESCRIPT PYTHON JAVA ModelLanguage The model definition language. Members Name Description SMITHY Smithy. OPENAPI OpenAPI. SMITHY Smithy. https://smithy.io/2.0/ OPENAPI OpenAPI. https://www.openapis.org/","title":"Index"},{"location":"python/type-safe-api/index.html#type-safe-api","text":"Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated client and server types, infrastructure, documentation, and automatic input validation! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate \"runtime\" projects from your API definition in your desired languages, which can be utilised both client side for interacting with your API, or server side for implementing your API. The project also generates a type-safe CDK construct which ensures an integration is provided for every API operation. Code is generated at build time, so when you change your API model, just rebuild and you'll see your changes reflected in the generated code.","title":"Type Safe API"},{"location":"python/type-safe-api/index.html#quick-start-typescript","text":"This section describes how to get started quickly, with TypeScript infrastructure and lambda handlers. See the end of the README for examples in Python and Java .","title":"Quick Start: TypeScript"},{"location":"python/type-safe-api/index.html#project","text":"The TypeSafeApiProject projen project sets up the project structure for you. You have a few parameters to consider when creating the project: model - Configure the API model. Select a language for the model of either Smithy or OpenAPI v3 , and supply options.smithy or options.openapi depending on your choice. runtime - Configure the generated runtime projects. Include one or more languages you wish to write your client and server-side code in. These projects contain generated types defined in your model, as well as type-safe lambda handler wrappers for implementing each operation. infrastructure - Pick the language you are writing your CDK infrastructure in. A construct will be generated in this language which can be used to deploy the API. documentation - Specify formats to generate documentation in. It's recommended that these projects are used as part of an nx-monorepo project (eg. by specifying parent: myMonorepoProject ), as it makes setting up dependencies much easier, particularly when extending your project further with a CDK app and lambda functions. Depending on the model.language you choose, you must supply the corresponding model.options . For example: # Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject ( model = { \"language\" : ModelLanguage . SMITHY , \"options\" : { \"smithy\" : { \"service_name\" : { \"namespace\" : \"com.mycompany\" , \"service_name\" : \"MyApi\" } } } }, ... ) # Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject ( model = { \"language\" : ModelLanguage . OPENAPI , \"options\" : { \"openapi\" : { \"title\" : \"MyApi\" } } }, ... ) model.options.smithy allows for further customisation of the Smithy project, eg: # Example automatically generated from non-compiling source. May contain errors. TypeSafeApiProject ( model = { \"language\" : ModelLanguage . SMITHY , \"options\" : { \"smithy\" : { \"service_name\" : { \"namespace\" : \"com.mycompany\" , \"service_name\" : \"MyApi\" }, # By default, the contents of the smithy build output directory `model/output` will be ignored by source control. # Set this to false to include it, for example if you are generating clients directly from the smithy model. \"ignore_smithy_build_output\" : False , # The gradle wrapper used for the smithy build is copied from the PDK itself if it does not already exist in # the 'smithy' folder. By default, this gradle wrapper will be ignored by source control. # Set this to false if you would like to check the gradle wrapper in to source control, for example if you want # to use a different version of the gradle wrapper in your project. \"ignore_gradle_wrapper\" : False , # Use smithyBuildOptions to control what is added to smithy-build.json. \"smithy_build_options\" : { \"projections\" : { # You can customise the built-in openapi projection, used to generate the OpenAPI specification. \"openapi\" : { \"plugins\" : { \"openapi\" : { # Customise the openapi projection here. # See: https://smithy.io/2.0/guides/converting-to-openapi.html \"use_integer_type\" : True , ... } } }, # You can add new projections here too \"ts-client\" : { \"plugins\" : { \"typescript-codegen\" : { \"package\" : \"@my-test/smithy-generated-typescript-client\" , \"package_version\" : \"0.0.1\" } } } }, # Note that any additional dependencies required for projections/plugins can be added here, which in turn will # add them to the `smithy/build.gradle` file \"maven\" : { \"dependencies\" : [ \"software.amazon.smithy:smithy-validation-model:1.27.2\" ] } } } } }, ... )","title":"Project"},{"location":"python/type-safe-api/index.html#smithy-idl","text":"Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message }","title":"Smithy IDL"},{"location":"python/type-safe-api/index.html#openapi-specification","text":"Your model/src/main/openapi/main.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ model/src/main/openapi/ |_ main.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where main.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message","title":"OpenAPI Specification"},{"location":"python/type-safe-api/index.html#construct","text":"A CDK construct is generated in the infrastructure/<language> directory which provides a type-safe interface for creating an API Gateway API based on your model. You can extend or instantiate this construct in your CDK infrastructure project. You'll get a type error if you forget to define an integration for an operation defined in your api. # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.type_safe_api import Authorizers , Integrations from aws_cdk.aws_lambda_nodejs import NodejsFunction from constructs import Construct from myapi_typescript_infra import Api # # An example of how to wire lambda handler functions to the API # class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , default_authorizer = Authorizers . iam (), integrations = { # Every operation defined in your API must have an integration defined! \"say_hello\" : { \"integration\" : Integrations . lambda_ ( NodejsFunction ( scope , \"say-hello\" )) } } )","title":"Construct"},{"location":"python/type-safe-api/index.html#runtime-clients","text":"The generated runtime projects include clients which can be used for type-safe interaction with your API.","title":"Runtime: Clients"},{"location":"python/type-safe-api/index.html#lambda-handler-wrappers","text":"Lambda handler wrappers are also importable from the generated runtime projects. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your model.","title":"Lambda Handler Wrappers"},{"location":"python/type-safe-api/index.html#interceptors","text":"The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next .","title":"Interceptors"},{"location":"python/type-safe-api/index.html#quick-start-python","text":"This guide assumes you want to write your CDK infrastructure in Python and your lambda handlers in Python, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like. Just specify the language in runtime.languages for any language you would like to write lambda handlers in.","title":"Quick Start: Python"},{"location":"python/type-safe-api/index.html#quick-start-java","text":"This guide assumes you want to write your CDK infrastructure in Java and your lambda handlers in Java, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like.","title":"Quick Start: Java"},{"location":"python/type-safe-api/index.html#other-details","text":"","title":"Other Details"},{"location":"python/type-safe-api/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/type-safe-api/index.html#constructs","text":"","title":"Constructs "},{"location":"python/type-safe-api/index.html#typesaferestapi","text":"A construct for creating an api gateway rest api based on the definition in the OpenAPI spec.","title":"TypeSafeRestApi "},{"location":"python/type-safe-api/index.html#structs","text":"","title":"Structs "},{"location":"python/type-safe-api/index.html#apigatewayintegration","text":"Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html","title":"ApiGatewayIntegration "},{"location":"python/type-safe-api/index.html#apigatewayintegrationresponse","text":"API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html","title":"ApiGatewayIntegrationResponse "},{"location":"python/type-safe-api/index.html#apigatewayintegrationtlsconfig","text":"Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html","title":"ApiGatewayIntegrationTlsConfig "},{"location":"python/type-safe-api/index.html#authorizerprops","text":"Properties for an authorizer.","title":"AuthorizerProps "},{"location":"python/type-safe-api/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"python/type-safe-api/index.html#cognitoauthorizerprops","text":"Properties used to configure a cognito authorizer.","title":"CognitoAuthorizerProps "},{"location":"python/type-safe-api/index.html#customauthorizerprops","text":"Properties used to configure a custom authorizer.","title":"CustomAuthorizerProps "},{"location":"python/type-safe-api/index.html#documentationconfiguration","text":"Configuration for generated documentation.","title":"DocumentationConfiguration "},{"location":"python/type-safe-api/index.html#generatedcodeoptions","text":"Options for generated clients.","title":"GeneratedCodeOptions "},{"location":"python/type-safe-api/index.html#generatedcodeprojects","text":"Generated code projects.","title":"GeneratedCodeProjects "},{"location":"python/type-safe-api/index.html#infrastructureconfiguration","text":"Configuration for generated infrastructure.","title":"InfrastructureConfiguration "},{"location":"python/type-safe-api/index.html#integrationgrantprops","text":"Properties for granting the API access to invoke the operation.","title":"IntegrationGrantProps "},{"location":"python/type-safe-api/index.html#integrationrenderprops","text":"Properties for rendering an integration into an API Gateway OpenAPI extension.","title":"IntegrationRenderProps "},{"location":"python/type-safe-api/index.html#managedrule","text":"","title":"ManagedRule "},{"location":"python/type-safe-api/index.html#methodandpath","text":"Structure to contain an API operation's method and path.","title":"MethodAndPath "},{"location":"python/type-safe-api/index.html#modelconfiguration","text":"Configuration for modelling the API.","title":"ModelConfiguration "},{"location":"python/type-safe-api/index.html#modeloptions","text":"Options for models.","title":"ModelOptions "},{"location":"python/type-safe-api/index.html#openapimodeloptions","text":"Options for the OpenAPI model.","title":"OpenApiModelOptions "},{"location":"python/type-safe-api/index.html#runtimeconfiguration","text":"Configuration for generated runtime projects.","title":"RuntimeConfiguration "},{"location":"python/type-safe-api/index.html#smithybuildoptions","text":"Options for the smithy build files.","title":"SmithyBuildOptions "},{"location":"python/type-safe-api/index.html#smithycommon","text":"Properties common to smithy plugins and the root smithy build.","title":"SmithyCommon "},{"location":"python/type-safe-api/index.html#smithymavenconfiguration","text":"Configuration for smithy maven dependencies.","title":"SmithyMavenConfiguration "},{"location":"python/type-safe-api/index.html#smithymodeloptions","text":"Options for a Smithy model.","title":"SmithyModelOptions "},{"location":"python/type-safe-api/index.html#smithyplugin","text":"A smithy plugin.","title":"SmithyPlugin "},{"location":"python/type-safe-api/index.html#smithyprojection","text":"A smithy build projection.","title":"SmithyProjection "},{"location":"python/type-safe-api/index.html#smithyservicename","text":"Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html","title":"SmithyServiceName "},{"location":"python/type-safe-api/index.html#smithytransform","text":"A smithy build transform.","title":"SmithyTransform "},{"location":"python/type-safe-api/index.html#typesafeapiintegration","text":"Defines an integration for an individual API operation.","title":"TypeSafeApiIntegration "},{"location":"python/type-safe-api/index.html#typesafeapimodelprojectoptions","text":"","title":"TypeSafeApiModelProjectOptions "},{"location":"python/type-safe-api/index.html#typesafeapioptions","text":"Options required alongside an Open API specification to create API Gateway resources.","title":"TypeSafeApiOptions "},{"location":"python/type-safe-api/index.html#typesafeapiprojectoptions","text":"Options for the TypeSafeApiProject.","title":"TypeSafeApiProjectOptions "},{"location":"python/type-safe-api/index.html#typesafeapiwebacloptions","text":"Configuration for the Web ACL associated with the API.","title":"TypeSafeApiWebAclOptions "},{"location":"python/type-safe-api/index.html#typesaferestapiprops","text":"Configuration for the TypeSafeRestApi construct.","title":"TypeSafeRestApiProps "},{"location":"python/type-safe-api/index.html#classes","text":"","title":"Classes "},{"location":"python/type-safe-api/index.html#authorizer","text":"An authorizer for authorizing API requests.","title":"Authorizer "},{"location":"python/type-safe-api/index.html#authorizers_2","text":"Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct.","title":"Authorizers "},{"location":"python/type-safe-api/index.html#cognitoauthorizer","text":"An authorizer that uses Cognito identity or access tokens.","title":"CognitoAuthorizer "},{"location":"python/type-safe-api/index.html#customauthorizer","text":"An authorizer that uses a lambda function to authorize requests.","title":"CustomAuthorizer "},{"location":"python/type-safe-api/index.html#iamauthorizer","text":"An IAM authorizer.","title":"IamAuthorizer "},{"location":"python/type-safe-api/index.html#integration","text":"An integration for an API operation. You can extend this to implement your own integration if you like.","title":"Integration "},{"location":"python/type-safe-api/index.html#integrations_1","text":"A collection of integrations to connect API operations with a backend to service requests.","title":"Integrations "},{"location":"python/type-safe-api/index.html#lambdaintegration","text":"A lambda integration.","title":"LambdaIntegration "},{"location":"python/type-safe-api/index.html#noneauthorizer","text":"No authorizer.","title":"NoneAuthorizer "},{"location":"python/type-safe-api/index.html#typesafeapimodelproject","text":"","title":"TypeSafeApiModelProject "},{"location":"python/type-safe-api/index.html#typesafeapiproject","text":"Project for a type-safe API, defined using Smithy or OpenAPI. Generates a CDK construct to deploy your API, as well as client and server code to help build your API quickly.","title":"TypeSafeApiProject "},{"location":"python/type-safe-api/index.html#enums","text":"","title":"Enums "},{"location":"python/type-safe-api/index.html#customauthorizertype","text":"The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type","title":"CustomAuthorizerType "},{"location":"python/type-safe-api/index.html#documentationformat","text":"Formats for documentation generation.","title":"DocumentationFormat "},{"location":"python/type-safe-api/index.html#language","text":"Supported languages for code generation.","title":"Language "},{"location":"python/type-safe-api/index.html#modellanguage","text":"The model definition language.","title":"ModelLanguage "},{"location":"troubleshooting/codepipeline-random-build-errors.html","text":"I get random build failures in CodePipeline even though my project builds on my dev machine Error [ yarn run v1.22.19 [ $ npx projen build build \u00bb pre-compile | rm -rf lib build \u00bb compile | tsc \u2014build Killed Task \"build \u00bb compile\" failed when executing \"tsc \u2014build\" ( cwd: /codebuild/output/src728343998/src/packages/myPackage ) First, add --verbose to your package\u2019s compileTask to see what is the error. You may see a little bit more: [ yarn run v1.22.19 [ $ npx projen build build \u00bb pre-compile | rm -rf lib build \u00bb compile | tsc \u2014build \u2014verbose 3 :18:29 AM - Projects in this build: tsconfig.json 3 :18:30 AM - Project 'tsconfig.json' is out of date because output file 'lib/index.js' does not exist # <-- this is something new 3 :18:30 AM - Building project '/codebuild/output/src728343998/src/packages/myPackage/tsconfig.json' ... Killed Task \"build \u00bb compile\" failed when executing \"tsc \u2014build \u2014verbose\" ( cwd: /codebuild/output/src728343998/src/packages/myPackage ) Possible solutions Try to run yarn eslint and see if that was the problem. If you have changes in the repo, push it to monorepo . Try to upsize the pipeline\u2019s codeBuild build environment. The default environment has only 3GB of RAM and 2vCPUs which may not be sufficient to handle large projects: const this . pipeline = new PDKPipeline ( this , \"AppPipeline\" , { ..., codeBuildDefaults : { buildEnvironment : { computeType : ComputeType.LARGE , // or MEDIUM or X2_LARGE }, }, }); After the change, deploy your pipeline manually because self-mutation won\u2019t be in effect until the code builds.","title":"CodePipeline build failures"},{"location":"troubleshooting/codepipeline-random-build-errors.html#i-get-random-build-failures-in-codepipeline-even-though-my-project-builds-on-my-dev-machine","text":"","title":"I get random build failures in CodePipeline even though my project builds on my dev machine"},{"location":"troubleshooting/codepipeline-random-build-errors.html#error","text":"[ yarn run v1.22.19 [ $ npx projen build build \u00bb pre-compile | rm -rf lib build \u00bb compile | tsc \u2014build Killed Task \"build \u00bb compile\" failed when executing \"tsc \u2014build\" ( cwd: /codebuild/output/src728343998/src/packages/myPackage ) First, add --verbose to your package\u2019s compileTask to see what is the error. You may see a little bit more: [ yarn run v1.22.19 [ $ npx projen build build \u00bb pre-compile | rm -rf lib build \u00bb compile | tsc \u2014build \u2014verbose 3 :18:29 AM - Projects in this build: tsconfig.json 3 :18:30 AM - Project 'tsconfig.json' is out of date because output file 'lib/index.js' does not exist # <-- this is something new 3 :18:30 AM - Building project '/codebuild/output/src728343998/src/packages/myPackage/tsconfig.json' ... Killed Task \"build \u00bb compile\" failed when executing \"tsc \u2014build \u2014verbose\" ( cwd: /codebuild/output/src728343998/src/packages/myPackage )","title":"Error"},{"location":"troubleshooting/codepipeline-random-build-errors.html#possible-solutions","text":"Try to run yarn eslint and see if that was the problem. If you have changes in the repo, push it to monorepo . Try to upsize the pipeline\u2019s codeBuild build environment. The default environment has only 3GB of RAM and 2vCPUs which may not be sufficient to handle large projects: const this . pipeline = new PDKPipeline ( this , \"AppPipeline\" , { ..., codeBuildDefaults : { buildEnvironment : { computeType : ComputeType.LARGE , // or MEDIUM or X2_LARGE }, }, }); After the change, deploy your pipeline manually because self-mutation won\u2019t be in effect until the code builds.","title":"Possible solutions"},{"location":"troubleshooting/cognito-auth-middleware.html","text":"How do I setup a Cognito Auth Middleware for a generated Smithy/Open API client? import { Middleware } from \"@myProject/my-openapi-project-generated-typescript\" ; import { Auth as AmplifyAuth } from \"aws-amplify\" ; const cognitoAuthMiddleware : Middleware = { pre : async ({ init , url }) => ({ url , init : { ... init , headers : { ... init . headers , \"Content-Type\" : \"application/json\" , Authorization : ( await AmplifyAuth . currentSession ()) . getIdToken () . getJwtToken (), }, }, }), };","title":"Cognito Auth Middleware"},{"location":"troubleshooting/cognito-auth-middleware.html#how-do-i-setup-a-cognito-auth-middleware-for-a-generated-smithyopen-api-client","text":"import { Middleware } from \"@myProject/my-openapi-project-generated-typescript\" ; import { Auth as AmplifyAuth } from \"aws-amplify\" ; const cognitoAuthMiddleware : Middleware = { pre : async ({ init , url }) => ({ url , init : { ... init , headers : { ... init . headers , \"Content-Type\" : \"application/json\" , Authorization : ( await AmplifyAuth . currentSession ()) . getIdToken () . getJwtToken (), }, }, }), };","title":"How do I setup a Cognito Auth Middleware for a generated Smithy/Open API client?"},{"location":"troubleshooting/err-out-of-range-pdk.html","text":"I get ERR_OUT_OF_RANGE error while working on PDK The error [ ...totyping-sdk ] Error: Command ( npm pack \"/Users/<user>/projects/aws/aws-prototyping-sdk/packages/aws-prototyping-sdk\" ) failed with status 1 : [ ...totyping-sdk ] #STDERR> npm ERR! code ERR_OUT_OF_RANGE [ ...totyping-sdk ] #STDERR> npm ERR! The value of \"length\" is out of range. It must be >= 0 && <= 2147483647. Received 3411173948 [ ...totyping-sdk ] #STDERR> [ ...totyping-sdk ] #STDERR> npm ERR! A complete log of this run can be found in: [ ...totyping-sdk ] #STDERR> npm ERR! /Users/<user>/.npm/_logs/2022-08-21T10_56_27_554Z-debug-0.log [ ...totyping-sdk ] #STDERR> [ ...totyping-sdk ] #STDOUT> [ ...totyping-sdk ] at ChildProcess.<anonymous> ( /Users/<user>/projects/aws/aws-prototyping-sdk/node_modules/jsii-pacmak/lib/util.js:175:27 ) [ ...totyping-sdk ] at Object.onceWrapper ( node:events:642:26 ) [ ...totyping-sdk ] at ChildProcess.emit ( node:events:527:28 ) [ ...totyping-sdk ] at maybeClose ( node:internal/child_process:1090:16 ) [ ...totyping-sdk ] at Socket.<anonymous> ( node:internal/child_process:449:11 ) [ ...totyping-sdk ] at Socket.emit ( node:events:527:28 ) [ ...totyping-sdk ] at Pipe.<anonymous> ( node:net:715:12 ) [ ...totyping-sdk ] Task \"build \u00bb package \u00bb package-all \u00bb package:js\" failed when executing \"jsii-pacmak -v --target js\" ( cwd: /Users/<user>/projects/aws/aws-prototyping-sdk/packages/aws-prototyping-sdk ) error Command failed with exit code 1 . Solution Delete the dist folder in packages/aws-prototyping-sdk .","title":"ERR_OUT_OF_RANGE error"},{"location":"troubleshooting/err-out-of-range-pdk.html#i-get-err_out_of_range-error-while-working-on-pdk","text":"","title":"I get ERR_OUT_OF_RANGE error while working on PDK"},{"location":"troubleshooting/err-out-of-range-pdk.html#the-error","text":"[ ...totyping-sdk ] Error: Command ( npm pack \"/Users/<user>/projects/aws/aws-prototyping-sdk/packages/aws-prototyping-sdk\" ) failed with status 1 : [ ...totyping-sdk ] #STDERR> npm ERR! code ERR_OUT_OF_RANGE [ ...totyping-sdk ] #STDERR> npm ERR! The value of \"length\" is out of range. It must be >= 0 && <= 2147483647. Received 3411173948 [ ...totyping-sdk ] #STDERR> [ ...totyping-sdk ] #STDERR> npm ERR! A complete log of this run can be found in: [ ...totyping-sdk ] #STDERR> npm ERR! /Users/<user>/.npm/_logs/2022-08-21T10_56_27_554Z-debug-0.log [ ...totyping-sdk ] #STDERR> [ ...totyping-sdk ] #STDOUT> [ ...totyping-sdk ] at ChildProcess.<anonymous> ( /Users/<user>/projects/aws/aws-prototyping-sdk/node_modules/jsii-pacmak/lib/util.js:175:27 ) [ ...totyping-sdk ] at Object.onceWrapper ( node:events:642:26 ) [ ...totyping-sdk ] at ChildProcess.emit ( node:events:527:28 ) [ ...totyping-sdk ] at maybeClose ( node:internal/child_process:1090:16 ) [ ...totyping-sdk ] at Socket.<anonymous> ( node:internal/child_process:449:11 ) [ ...totyping-sdk ] at Socket.emit ( node:events:527:28 ) [ ...totyping-sdk ] at Pipe.<anonymous> ( node:net:715:12 ) [ ...totyping-sdk ] Task \"build \u00bb package \u00bb package-all \u00bb package:js\" failed when executing \"jsii-pacmak -v --target js\" ( cwd: /Users/<user>/projects/aws/aws-prototyping-sdk/packages/aws-prototyping-sdk ) error Command failed with exit code 1 .","title":"The error"},{"location":"troubleshooting/err-out-of-range-pdk.html#solution","text":"Delete the dist folder in packages/aws-prototyping-sdk .","title":"Solution"},{"location":"troubleshooting/fix-cdk-version.html","text":"I want to use a fixed CDK/Constructs package version const cdkVersion = ...; const constructsVersion = ...; monorepo . tryFindObjectFile ( \"package.json\" ) ? . addOverride ( \"resolutions\" , { \"**/aws-cdk-lib\" : cdkVersion , \"**/constructs\" : constructsVersion , })","title":"Custom CDK version"},{"location":"troubleshooting/fix-cdk-version.html#i-want-to-use-a-fixed-cdkconstructs-package-version","text":"const cdkVersion = ...; const constructsVersion = ...; monorepo . tryFindObjectFile ( \"package.json\" ) ? . addOverride ( \"resolutions\" , { \"**/aws-cdk-lib\" : cdkVersion , \"**/constructs\" : constructsVersion , })","title":"I want to use a fixed CDK/Constructs package version"},{"location":"troubleshooting/include-js-in-project.html","text":"How do I include js files in my project? Option #1 - via tsconfig const myPackage = new TypeScriptProject ({ // ... tsconfig : { compilerOptions : { allowJs : true , // <-------- }, }, tsconfigDev : { compilerOptions : { allowJs : true , // <--------- }, }, }); myPackage . tsconfig ? . addInclude ( \"src/**/*.js\" ); // OR more specific path: // myPackage.tsconfig?.addInclude(\"src/**/@lambda/**/*.js\"); Option #2 - with rsync ( example ) this . compileTask . exec ( 'rsync -a ./src/** ./lib --include=\"*/\" --include=\"**/*.js\" --exclude=\"*\" --prune-empty-dirs' );","title":"Include JS files"},{"location":"troubleshooting/include-js-in-project.html#how-do-i-include-js-files-in-my-project","text":"","title":"How do I include js files in my project?"},{"location":"troubleshooting/include-js-in-project.html#option-1-via-tsconfig","text":"const myPackage = new TypeScriptProject ({ // ... tsconfig : { compilerOptions : { allowJs : true , // <-------- }, }, tsconfigDev : { compilerOptions : { allowJs : true , // <--------- }, }, }); myPackage . tsconfig ? . addInclude ( \"src/**/*.js\" ); // OR more specific path: // myPackage.tsconfig?.addInclude(\"src/**/@lambda/**/*.js\");","title":"Option #1 - via tsconfig"},{"location":"troubleshooting/include-js-in-project.html#option-2-with-rsync-example","text":"this . compileTask . exec ( 'rsync -a ./src/** ./lib --include=\"*/\" --include=\"**/*.js\" --exclude=\"*\" --prune-empty-dirs' );","title":"Option #2 - with rsync (example)"},{"location":"troubleshooting/jest-warnings-globals-deprecated.html","text":"I\u2019m getting Jest (WARN) Define ts-jest config under globals is deprecated warnings The warning ts-jest [ ts-jest-transformer ] ( WARN ) Define ` ts-jest ` config under ` globals ` is deprecated. Please do transform: { <transform_regex>: [ 'ts-jest' , { /* ts-jest config goes here in Jest */ }] , } , Solution Add jestOptions when you extend or instantiate NxMonorepoProject : jestOptions : { jestConfig : { transform : { \"\\\\.[jt]sx?$\" : [ \"ts-jest\" , { tsconfig : \"tsconfig.dev.json\" }], }, }, },","title":"Jest deprecated warnings"},{"location":"troubleshooting/jest-warnings-globals-deprecated.html#im-getting-jest-warn-define-ts-jest-config-under-globals-is-deprecated-warnings","text":"","title":"I\u2019m getting Jest (WARN) Define ts-jest config under globals is deprecated warnings"},{"location":"troubleshooting/jest-warnings-globals-deprecated.html#the-warning","text":"ts-jest [ ts-jest-transformer ] ( WARN ) Define ` ts-jest ` config under ` globals ` is deprecated. Please do transform: { <transform_regex>: [ 'ts-jest' , { /* ts-jest config goes here in Jest */ }] , } ,","title":"The warning"},{"location":"troubleshooting/jest-warnings-globals-deprecated.html#solution","text":"Add jestOptions when you extend or instantiate NxMonorepoProject : jestOptions : { jestConfig : { transform : { \"\\\\.[jt]sx?$\" : [ \"ts-jest\" , { tsconfig : \"tsconfig.dev.json\" }], }, }, },","title":"Solution"},{"location":"troubleshooting/mapbox-gl-error.html","text":"I receive @types/mapbox-gl TS2304 errors I get this error when I add a CloudscapeReactTsWebsiteProject to my project: myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 328 ,19 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 329 ,19 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 339 ,19 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 340 ,19 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 347 ,86 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1230 ,33 ) : error TS2304: Cannot find name 'Node' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1359 ,52 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1359 ,64 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1387 ,43 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1387 ,55 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 2027 ,58 ) : error TS2304: Cannot find name 'WebGLContextEvent' . myPackage: \ud83d\udc7e Task \"build \u00bb compile\" failed when executing \"tsc --build\" ( cwd: /Users/<user>/projects/myProject/packages/myPackage ) Solution When you instantiate a TypeScriptProject or extend it, add this to the constructor tsconfig : { compilerOptions : { lib : [ \"es2019\" , \"dom\" ], }, },","title":"@types/mapbox-gl errors"},{"location":"troubleshooting/mapbox-gl-error.html#i-receive-typesmapbox-gl-ts2304-errors","text":"I get this error when I add a CloudscapeReactTsWebsiteProject to my project: myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 328 ,19 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 329 ,19 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 339 ,19 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 340 ,19 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 347 ,86 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1230 ,33 ) : error TS2304: Cannot find name 'Node' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1359 ,52 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1359 ,64 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1387 ,43 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1387 ,55 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 2027 ,58 ) : error TS2304: Cannot find name 'WebGLContextEvent' . myPackage: \ud83d\udc7e Task \"build \u00bb compile\" failed when executing \"tsc --build\" ( cwd: /Users/<user>/projects/myProject/packages/myPackage )","title":"I receive @types/mapbox-gl TS2304 errors"},{"location":"troubleshooting/mapbox-gl-error.html#solution","text":"When you instantiate a TypeScriptProject or extend it, add this to the constructor tsconfig : { compilerOptions : { lib : [ \"es2019\" , \"dom\" ], }, },","title":"Solution"},{"location":"troubleshooting/new-package-projen-fail.html","text":"I create a new package in my project, but running npx projen fails Make sure that when you create a new package you don\u2019t set any interdependencies neither for the package nor of the package. Dependencies accessible from npm repo are ok. Otherwise, you get an error message that some dependencies are not available. 1 - Create the package // STEP 1 -- create the package new TypeScriptProject ({ parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , deps : [ \"aws-cdk-lib\" , // <-- this is ok \"constructs\" , myOtherPackage . package . packageName // <-- DON'T ADD dependency to other package ], devDeps : [] }); 2 - run npx projen # Step 2 -- run `npx projen` npx projen 3 - Assign to variable // STEP 3 - Assign to variable const myPackage = new TypeScriptProject ({ // <--- you can assign to a variable now parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , myOtherPackage . package . packageName // <-- you can add a dependency now ], devDeps : [] }); const myOtherPackage2 = new TypeScriptProject ({ ..., deps : [ ..., myPackage . package . packageName // <-- you can add dependency to your new package in another package ] }); 4 - run npx projen again # STEP 4 -- run \"npx projen\" again npx projen","title":"How to add new project"},{"location":"troubleshooting/new-package-projen-fail.html#i-create-a-new-package-in-my-project-but-running-npx-projen-fails","text":"Make sure that when you create a new package you don\u2019t set any interdependencies neither for the package nor of the package. Dependencies accessible from npm repo are ok. Otherwise, you get an error message that some dependencies are not available.","title":"I create a new package in my project, but running npx projen fails"},{"location":"troubleshooting/new-package-projen-fail.html#1-create-the-package","text":"// STEP 1 -- create the package new TypeScriptProject ({ parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , deps : [ \"aws-cdk-lib\" , // <-- this is ok \"constructs\" , myOtherPackage . package . packageName // <-- DON'T ADD dependency to other package ], devDeps : [] });","title":"1 - Create the package"},{"location":"troubleshooting/new-package-projen-fail.html#2-run-npx-projen","text":"# Step 2 -- run `npx projen` npx projen","title":"2 - run npx projen"},{"location":"troubleshooting/new-package-projen-fail.html#3-assign-to-variable","text":"// STEP 3 - Assign to variable const myPackage = new TypeScriptProject ({ // <--- you can assign to a variable now parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , myOtherPackage . package . packageName // <-- you can add a dependency now ], devDeps : [] }); const myOtherPackage2 = new TypeScriptProject ({ ..., deps : [ ..., myPackage . package . packageName // <-- you can add dependency to your new package in another package ] });","title":"3 - Assign to variable"},{"location":"troubleshooting/new-package-projen-fail.html#4-run-npx-projen-again","text":"# STEP 4 -- run \"npx projen\" again npx projen","title":"4 - run npx projen again"},{"location":"troubleshooting/openapi-gw-internal-workspace-remove.html","text":"OpenApiGatewayTsProject / SmithyApiGatewayTsProject \u201cinternal\u201d workspace is not necessary after creation Leaving the workspaces in the project\u2019s package.json may mess with some processes, e.g.: generating typedoc documentation. To remove: mySmithyApiProject . tryFindObjectFile ( \"package.json\" ) ? . addDeletionOverride ( \"workspaces\" );","title":"open-api-gateway workspace removal"},{"location":"troubleshooting/openapi-gw-internal-workspace-remove.html#openapigatewaytsproject-smithyapigatewaytsproject-internal-workspace-is-not-necessary-after-creation","text":"Leaving the workspaces in the project\u2019s package.json may mess with some processes, e.g.: generating typedoc documentation. To remove: mySmithyApiProject . tryFindObjectFile ( \"package.json\" ) ? . addDeletionOverride ( \"workspaces\" );","title":"OpenApiGatewayTsProject / SmithyApiGatewayTsProject \u201cinternal\u201d workspace is not necessary after creation"},{"location":"troubleshooting/override-predefined-task.html","text":"I want to change a \u201cpre-defined\u201d task (e.g.: add --verbose to a tsc compile task) Use the reset function: myPackage . compileTask . reset ( \"tsc --build --verbose\" );","title":"Override pre-defined tasks"},{"location":"troubleshooting/override-predefined-task.html#i-want-to-change-a-pre-defined-task-eg-add-verbose-to-a-tsc-compile-task","text":"Use the reset function: myPackage . compileTask . reset ( \"tsc --build --verbose\" );","title":"I want to change a \u201cpre-defined\u201d task (e.g.: add --verbose to a tsc compile task)"},{"location":"troubleshooting/parameters-between-stacks.html","text":"Passing parameters between CDK stacks will cause Unresolved resource dependencies error while trying to deploy Links Cross stack values do not work with Source.data/jsonData [CDK github] Nested stack runtime-config.json properties [PDK github] TLDR; Create SSM Parameters in the stack where you create e.g.: a userPool // in UserIdentityStack this . userIdentity = new UserIdentity ( this , \"UserIdentity\" ); new StringParameter ( this , \"userPoolIdSsmParam\" , { parameterName : ssmParamNames.userPoolId , stringValue : this.userIdentity.userPool.userPoolId , }); Setup explicit dependencies between stacks/constructs // in ApplicationStack websiteStack . node . addDependency ( userIdentityStack ); Use already created SSM Parameters in the dependent stack // in WebsiteStack const userPoolIdParam = StringParameter . fromStringParameterName ( this , \"userPoolIdSsmParam\" , ssmParamNames . userPoolId ); const website = new StaticWebsite ( this , \"Website\" , { websiteContentPath : ... , runtimeOptions : { jsonPayload : { ..., userPoolId : userPoolIdParam.stringValue , ..., } } })","title":"Unresolved resource dependencies error"},{"location":"troubleshooting/parameters-between-stacks.html#passing-parameters-between-cdk-stacks-will-cause-unresolved-resource-dependencies-error-while-trying-to-deploy","text":"","title":"Passing parameters between CDK stacks will cause Unresolved resource dependencies error while trying to deploy"},{"location":"troubleshooting/parameters-between-stacks.html#links","text":"Cross stack values do not work with Source.data/jsonData [CDK github] Nested stack runtime-config.json properties [PDK github]","title":"Links"},{"location":"troubleshooting/parameters-between-stacks.html#tldr","text":"Create SSM Parameters in the stack where you create e.g.: a userPool // in UserIdentityStack this . userIdentity = new UserIdentity ( this , \"UserIdentity\" ); new StringParameter ( this , \"userPoolIdSsmParam\" , { parameterName : ssmParamNames.userPoolId , stringValue : this.userIdentity.userPool.userPoolId , }); Setup explicit dependencies between stacks/constructs // in ApplicationStack websiteStack . node . addDependency ( userIdentityStack ); Use already created SSM Parameters in the dependent stack // in WebsiteStack const userPoolIdParam = StringParameter . fromStringParameterName ( this , \"userPoolIdSsmParam\" , ssmParamNames . userPoolId ); const website = new StaticWebsite ( this , \"Website\" , { websiteContentPath : ... , runtimeOptions : { jsonPayload : { ..., userPoolId : userPoolIdParam.stringValue , ..., } } })","title":"TLDR;"},{"location":"troubleshooting/projen-samplecode-off.html","text":"I don\u2019t want projen to generate sample code and tests const myPackage = new TypeScriptProject ({ parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , sampleCode : false , // <-------- turn off sampleCode });","title":"Disable sample code generation"},{"location":"troubleshooting/projen-samplecode-off.html#i-dont-want-projen-to-generate-sample-code-and-tests","text":"const myPackage = new TypeScriptProject ({ parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , sampleCode : false , // <-------- turn off sampleCode });","title":"I don\u2019t want projen to generate sample code and tests"},{"location":"troubleshooting/react-duplicate-identifier.html","text":"I get react -related duplicate identifier error The error myPackage: ../../../../node_modules/@types/react/index.d.ts ( 3131 ,14 ) : error TS2300: Duplicate identifier 'LibraryManagedAttributes' . myPackage: ../../../../node_modules/@types/react-dom/node_modules/@types/react/index.d.ts ( 3131 ,14 ) : error TS2300: Duplicate identifier 'LibraryManagedAttributes' . myPackage: \ud83d\udc7e Task \"build \u00bb compile\" failed when executing \"tsc --build\" ( cwd: /Users/<user>/projects/myProject/packages/myPackage/generated/typescript ) Solution react-dom depends on @types/react@* while react may have another version in your project, meaning multiple versions are present. // fix react version example monorepoProject . package . addPackageResolutions ( \"@types/react@^18.0.21\" );","title":"React duplicate identifier error"},{"location":"troubleshooting/react-duplicate-identifier.html#i-get-react-related-duplicate-identifier-error","text":"","title":"I get react-related duplicate identifier error"},{"location":"troubleshooting/react-duplicate-identifier.html#the-error","text":"myPackage: ../../../../node_modules/@types/react/index.d.ts ( 3131 ,14 ) : error TS2300: Duplicate identifier 'LibraryManagedAttributes' . myPackage: ../../../../node_modules/@types/react-dom/node_modules/@types/react/index.d.ts ( 3131 ,14 ) : error TS2300: Duplicate identifier 'LibraryManagedAttributes' . myPackage: \ud83d\udc7e Task \"build \u00bb compile\" failed when executing \"tsc --build\" ( cwd: /Users/<user>/projects/myProject/packages/myPackage/generated/typescript )","title":"The error"},{"location":"troubleshooting/react-duplicate-identifier.html#solution","text":"react-dom depends on @types/react@* while react may have another version in your project, meaning multiple versions are present. // fix react version example monorepoProject . package . addPackageResolutions ( \"@types/react@^18.0.21\" );","title":"Solution"},{"location":"troubleshooting/react-router-dom-reload-fail.html","text":"My react-router-dom router doesn\u2019t work when reloading the page or loading with a non-root URL Reference link: aws-prototyping-sdk#69 Add distributionProps to your StaticWebsite : import { StaticWebsite , StaticWebsiteOrigin , } from \"@aws-prototyping-sdk/static-website\" ; ... const adminWebsite = new StaticWebsite ( this , \"Website\" , { websiteContentPath : path.join ( appsDir , \"website\" , \"build\" ), runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : identityPoolIdParam.stringValue , userPoolId : userPoolIdParam.stringValue , userPoolWebClientId : userPoolClientIdParam.stringValue , apiUrl : webApiUrlParam.stringValue , }, }, distributionProps : { defaultBehavior : { origin : StaticWebsiteOrigin , }, errorResponses : [ { httpStatus : 404 , responseHttpStatus : 404 , responsePagePath : \"/\" , }, ], }, });","title":"react-router-dom page reload"},{"location":"troubleshooting/react-router-dom-reload-fail.html#my-react-router-dom-router-doesnt-work-when-reloading-the-page-or-loading-with-a-non-root-url","text":"Reference link: aws-prototyping-sdk#69 Add distributionProps to your StaticWebsite : import { StaticWebsite , StaticWebsiteOrigin , } from \"@aws-prototyping-sdk/static-website\" ; ... const adminWebsite = new StaticWebsite ( this , \"Website\" , { websiteContentPath : path.join ( appsDir , \"website\" , \"build\" ), runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : identityPoolIdParam.stringValue , userPoolId : userPoolIdParam.stringValue , userPoolWebClientId : userPoolClientIdParam.stringValue , apiUrl : webApiUrlParam.stringValue , }, }, distributionProps : { defaultBehavior : { origin : StaticWebsiteOrigin , }, errorResponses : [ { httpStatus : 404 , responseHttpStatus : 404 , responsePagePath : \"/\" , }, ], }, });","title":"My react-router-dom router doesn\u2019t work when reloading the page or loading with a non-root URL"},{"location":"troubleshooting/smithy-pascalcase-fieldname.html","text":"I have PascalCase field names of my structure definition in a Smithy model In general, generated code is making all field names of Smithy models camelCase and it takes care of marshalling/unmarshalling those models from/to JSON. When you\u2019re using your generated handler code and/or trying to feed your data into your services, use the generated xxxFromJSON functions ON THE TOP LEVEL . Example const resp = await ddbClient . query (...). promise (); ... // wrong - will fail - if you have any PascalCase attribute names in any of the \"item\"s return { statusCode : 200 , headers : corsHeaders , body : ListMyEntityResponseContentFromJSON ({ data : resp.Items.map (( item ) => MyEntityFromJSON ( item )), }), }; const resp = await ddbClient . query (...). promise (); ... // right - only use \"top level\" <EntityName>FromJSON method return { statusCode : 200 , headers : corsHeaders , body : ListMyEntityResponseContentFromJSON ({ data : resp.Items , }), }; Note In general, when it comes to generated code, the following rules apply: <EntityName>FromJSON will create an internal representation of the entity (i.e.: PascalCase field names are converted to camelCase ). Use this method after you fetched your data (e.g.: from DB) and try to send it over the network , while handling it with the same generated code on the client side. <EntityName>ToJSON will create the real (original) representation of your data from the internal representation (i.e.: internally camelCase field names are converted back to PascalCase ). Use this if you received data from the client side (serialized by the generated code) and would like to store your data in a data store .","title":"Smithy PascalCase field names"},{"location":"troubleshooting/smithy-pascalcase-fieldname.html#i-have-pascalcase-field-names-of-my-structure-definition-in-a-smithy-model","text":"In general, generated code is making all field names of Smithy models camelCase and it takes care of marshalling/unmarshalling those models from/to JSON. When you\u2019re using your generated handler code and/or trying to feed your data into your services, use the generated xxxFromJSON functions ON THE TOP LEVEL .","title":"I have PascalCase field names of my structure definition in a Smithy model"},{"location":"troubleshooting/smithy-pascalcase-fieldname.html#example","text":"const resp = await ddbClient . query (...). promise (); ... // wrong - will fail - if you have any PascalCase attribute names in any of the \"item\"s return { statusCode : 200 , headers : corsHeaders , body : ListMyEntityResponseContentFromJSON ({ data : resp.Items.map (( item ) => MyEntityFromJSON ( item )), }), }; const resp = await ddbClient . query (...). promise (); ... // right - only use \"top level\" <EntityName>FromJSON method return { statusCode : 200 , headers : corsHeaders , body : ListMyEntityResponseContentFromJSON ({ data : resp.Items , }), };","title":"Example"},{"location":"troubleshooting/smithy-pascalcase-fieldname.html#note","text":"In general, when it comes to generated code, the following rules apply: <EntityName>FromJSON will create an internal representation of the entity (i.e.: PascalCase field names are converted to camelCase ). Use this method after you fetched your data (e.g.: from DB) and try to send it over the network , while handling it with the same generated code on the client side. <EntityName>ToJSON will create the real (original) representation of your data from the internal representation (i.e.: internally camelCase field names are converted back to PascalCase ). Use this if you received data from the client side (serialized by the generated code) and would like to store your data in a data store .","title":"Note"},{"location":"troubleshooting/typedoc-config-package.html","text":"Fine-tune typedoc configuration inside packages myProject . addFields ({ typedoc : { entryPoint : \"src/index.ts\" , readmeFile : \"./README.md\" , displayName : \"My Project\" , tsConfig : \"./tsconfig.json\" } }); Check the typedoc docs for setting up for monorepo: https://typedoc.org/guides/monorepo/","title":"Package-level typedoc config"},{"location":"troubleshooting/typedoc-config-package.html#fine-tune-typedoc-configuration-inside-packages","text":"myProject . addFields ({ typedoc : { entryPoint : \"src/index.ts\" , readmeFile : \"./README.md\" , displayName : \"My Project\" , tsConfig : \"./tsconfig.json\" } }); Check the typedoc docs for setting up for monorepo: https://typedoc.org/guides/monorepo/","title":"Fine-tune typedoc configuration inside packages"},{"location":"troubleshooting/typedoc-heap-out-of-mem-error.html","text":"typedoc fails while generating docs with Javascript heap out of memory error Set max_old_space_size in NODE_OPTIONS : myMonoRepo . addTask ( \"doc:generate\" , { exec : \"NODE_OPTIONS=--max_old_space_size=16384 npx typedoc\" , // experiment with the value needed }); Note: Make sure there is enough RAM in your code build environment if you automate this using CodePipeline .","title":"Typedoc JS heap out of mem error"},{"location":"troubleshooting/typedoc-heap-out-of-mem-error.html#typedoc-fails-while-generating-docs-with-javascript-heap-out-of-memory-error","text":"Set max_old_space_size in NODE_OPTIONS : myMonoRepo . addTask ( \"doc:generate\" , { exec : \"NODE_OPTIONS=--max_old_space_size=16384 npx typedoc\" , // experiment with the value needed }); Note: Make sure there is enough RAM in your code build environment if you automate this using CodePipeline .","title":"typedoc fails while generating docs with Javascript heap out of memory error"},{"location":"typescript/cdk-graph-plugin-diagram/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/cdk-graph-plugin-diagram Diagram Plugin - Cdk Graph @aws-prototyping-sdk/cdk-graph-plugin-diagram \\ This plugin generates diagrams utilizing the cdk-graph framework. More comprehensive documentation to come as this package stabilizes. Disclaimer: This is the first cdk graph plugin, it is highly experimental , and subject to major refactors as we gain feedback from the community. BREAKING CHANGES (pre-release) - <= v0.14.8 : Only the last stage of a multi stage app will be rendered by default, which is commonly the production stage. Use the theme.rendering.stage config option to override this for each graph or in defaults. Quick Start // bin/app.ts // Must wrap cdk app with async IIFE function to enable async cdk-graph report ( async () => { const app = new App (); // ... add stacks, etc const graph = new CdkGraph ( app , { plugins : [ new CdkGraphDiagramPlugin ()], }); app . synth (); // async cdk-graph reporting hook await graph . report (); })() // => cdk.out/diagram.dot // => cdk.out/diagram.svg // => cdk.out/diagram.png This plugin currently only supports async report() generation following the above example. Make sure to wrap the cdk app with async IIFE . Supported Formats Format Status Extends Provider DOT - Graphviz SVG DOT Graphviz PNG SVG Graphviz Diagram Providers Provider Status Formats Graphviz DOT , SVG , PNG Drawio TBD: very early stage design and development Configuration See IPluginConfig interface for details, and look in unit tests for additional examples. By default the diagram plugin will generate a single \"compact\" preset diagram. It is capable of creating multiple diagrams each with different configurations, as well as defining the defaults to use. Defaults Option Changing the defaults option will modify default options for all diagrams, including the default diagram. See IDiagramConfigBase interface for plugin.defaults options. new CdkGraphDiagramPlugin ({ defaults : { theme : \"dark\" , filterPlan : { preset : FilterPreset.NONE , } } }); // => results in a single diagram that is \"verbose\" and \"dark\", since no resources are filtered Diagrams Option By modifying the diagrams option of the plugin you have full control over the rendering of diagrams, and can render multiple diagrams. See IDiagramConfig interface for diagram config options. new CdkGraphDiagramPlugin ({ diagrams : [ { name : \"diagram-1\" , title : \"Diagram 1 (dark + compact)\" , theme : \"dark\" , // the default `filterPlan: { preset: FilterPreset.COMPACT }` will still apply }, { name : \"diagram-2\" , title : \"Diagram 2 (dark + verbose)\" , theme : \"dark\" , filterPlan : { preset : FilterPreset.NONE , }, }, { name : \"diagram-3\" , title : \"Diagram 3 (no defaults)\" , ignoreDefaults : true , // default options will not be applied (theme, filterPlan, etc) }, ], }); Example Diagram Configs (expand below) The below examples define individual diagram configs in the diagrams options of the plugin as described above. new CdkGraphDiagramPlugin ({ diagrams : [ // ... insert diagram config(s) here - see below for examples ], }); Presets Preset: compact [ ](docs/examples/compact.png) { name : \"compact\" , title : \"Compact Diagram\" , filterPlan : { preset : FilterPreset.COMPACT , }, }, Preset: verbose [ ](docs/examples/verbose.png) { name : \"verbose\" , title : \"Verbose Diagram\" , format : DiagramFormat.PNG , ignoreDefaults : true , }, Focus Focus: hoist [ ](docs/examples/focus.png) { name : \"focus\" , title : \"Focus Lambda Diagram (non-extraneous)\" , filterPlan : { focus : ( store ) => store . getNode ( getConstructUUID ( app . stack . lambda )), preset : FilterPreset.NON_EXTRANEOUS , }, ignoreDefaults : true , }, Focus: no hoist [ ](docs/examples/focus-nohoist.png) { name : \"focus-nohoist\" , title : \"Focus WebServer Diagram (noHoist, verbose)\" , filterPlan : { focus : { node : ( store ) => store . getNode ( getConstructUUID ( app . stack . webServer )), noHoist : true , }, }, ignoreDefaults : true , }, Filters Filter: Include specific cfn resource types [ ](docs/examples/filter-cfntype-include.png) { name : \"includeCfnType\" , title : \"Include CfnType Diagram (filter)\" , filterPlan : { filters : [ Filters . includeCfnType ([ aws_arch . CfnSpec . ServiceResourceDictionary . EC2 . Instance , /AWS::Lambda::Function.*/ , \"AWS::IAM::Role\" , ]), Filters . compact (), ], }, }, Filter: Exclude specific cfn resource types [ ](docs/examples/filter-cfntype-exclude.png) { name : \"excludeCfnType\" , title : \"Exclude CfnType Diagram (filter)\" , filterPlan : { filters : [ Filters . excludeCfnType ([ /AWS::EC2::VPC.*/ , aws_arch . CfnSpec . ServiceResourceDictionary . IAM . Role , ]), Filters . compact (), ], }, }, Filter: Include specific graph node types [ ](docs/examples/filter-nodetype-include.png) { name : \"includeNodeType\" , title : \"Include NodeType Diagram (filter)\" , filterPlan : { filters : [ Filters . includeNodeType ([ NodeTypeEnum . STACK , NodeTypeEnum . RESOURCE , ]), Filters . compact (), ], }, }, Filter: Include specific graph node types [ ](docs/examples/filter-nodetype-include.png) { name : \"includeNodeType\" , title : \"Include NodeType Diagram (filter)\" , filterPlan : { filters : [ Filters . includeNodeType ([ NodeTypeEnum . STACK , NodeTypeEnum . RESOURCE , ]), Filters . compact (), ], }, }, Filter: Exclude specific graph node types [ ](docs/examples/filter-nodetype-exclude.png) { name : \"excludeNodeType\" , title : \"Exclude NodeType Diagram (filter)\" , filterPlan : { filters : [ Filters . excludeNodeType ([ NodeTypeEnum . NESTED_STACK , NodeTypeEnum . CFN_RESOURCE , NodeTypeEnum . OUTPUT , NodeTypeEnum . PARAMETER , ]), Filters . compact (), ], }, }, Themes Theme: Dark [ ](docs/examples/dark.png) { name : \"Dark\" , title : \"Dark Theme Diagram\" , theme : theme , }, Theme: Dark - render service icons [ ](docs/examples/dark-services.png) { name : \"dark-services\" , title : \"Dark Theme Custom Diagram\" , theme : { theme : theme , rendering : { resourceIconMin : GraphThemeRenderingIconTarget.SERVICE , resourceIconMax : GraphThemeRenderingIconTarget.CATEGORY , cfnResourceIconMin : GraphThemeRenderingIconTarget.DATA , cfnResourceIconMax : GraphThemeRenderingIconTarget.RESOURCE , }, }, }, Theme: Dark - verbose [ ](docs/examples/dark-verbose.png) { name : \"dark-verbose\" , title : \"Dark Theme Verbose Diagram\" , ignoreDefaults : true , theme : theme , }, Next Steps [ ] Battle test in the wild and get community feedback [ ] Improve image coverage and non-image node rendering [ ] Add drawio support [ ] Add common filter patterns and helpers [ ] Enable generating diagrams outside of synthesis process (maybe CLI) [ ] Implement interactive diagram, with potential for dynamic filtering and config generation [ ] Support using interactive diagram as config generator for other plugins (or as separate plugin that depends on this) Inspired by cdk-dia and cfn-dia with \u2764\ufe0f API Reference Structs DiagramOptions Options for diagrams. Initializer import { DiagramOptions } from '@aws-prototyping-sdk/cdk-graph-plugin-diagram' const diagramOptions : DiagramOptions = { ... } Properties Name Type Description title string No description. preset aws-prototyping-sdk/cdk-graph.FilterPreset No description. theme string | IGraphThemeConfigAlt No description. title Required public readonly title : string ; Type: string preset Optional public readonly preset : FilterPreset ; Type: aws-prototyping-sdk/cdk-graph.FilterPreset theme Optional public readonly theme : string | IGraphThemeConfigAlt ; Type: string | IGraphThemeConfigAlt Classes CdkGraphDiagramPlugin Implements: aws-prototyping-sdk/cdk-graph.ICdkGraphPlugin CdkGraphDiagramPlugin is a { @link ICdkGraphPlugin CdkGraph Plugin} implementation for generating diagram artifacts from the { @link CdkGraph} framework. Initializers import { CdkGraphDiagramPlugin } from '@aws-prototyping-sdk/cdk-graph-plugin-diagram' new CdkGraphDiagramPlugin ( config? : IPluginConfig ) Name Type Description config IPluginConfig No description. config Optional Type: IPluginConfig Methods Name Description getDiagramArtifact Get diagram artifact for a given name and format. getDiagramArtifact public getDiagramArtifact ( name : string , format : DiagramFormat ) : CdkGraphArtifact Get diagram artifact for a given name and format. name Required Type: string format Required Type: DiagramFormat Static Functions Name Description artifactFilename Get standardized artifact file name for diagram artifacts. artifactId Get standardized artifact id for diagram artifacts. artifactFilename import { CdkGraphDiagramPlugin } from '@aws-prototyping-sdk/cdk-graph-plugin-diagram' CdkGraphDiagramPlugin . artifactFilename ( name : string , format : DiagramFormat ) Get standardized artifact file name for diagram artifacts. name Required Type: string format Required Type: DiagramFormat artifactId import { CdkGraphDiagramPlugin } from '@aws-prototyping-sdk/cdk-graph-plugin-diagram' CdkGraphDiagramPlugin . artifactId ( name : string , format : DiagramFormat ) Get standardized artifact id for diagram artifacts. name Required Type: string format Required Type: DiagramFormat Properties Name Type Description config IPluginConfig Get diagram plugin config. id string Unique identifier for this plugin. version string Plugin version. defaultDotArtifact aws-prototyping-sdk/cdk-graph.CdkGraphArtifact Get default dot artifact. defaultPngArtifact aws-prototyping-sdk/cdk-graph.CdkGraphArtifact Get default PNG artifact. dependencies string[] List of plugins this plugin depends on, including optional semver version (eg: [\"foo\", \"bar@1.2\"]). bind aws-prototyping-sdk/cdk-graph.IGraphPluginBindCallback Binds the plugin to the CdkGraph instance. report aws-prototyping-sdk/cdk-graph.IGraphReportCallback Generate asynchronous reports based on the graph. config Required public readonly config : IPluginConfig ; Type: IPluginConfig Get diagram plugin config. id Required public readonly id : string ; Type: string Unique identifier for this plugin. version Required public readonly version : string ; Type: string Plugin version. defaultDotArtifact Optional public readonly defaultDotArtifact : CdkGraphArtifact ; Type: aws-prototyping-sdk/cdk-graph.CdkGraphArtifact Get default dot artifact. defaultPngArtifact Optional public readonly defaultPngArtifact : CdkGraphArtifact ; Type: aws-prototyping-sdk/cdk-graph.CdkGraphArtifact Get default PNG artifact. dependencies Optional public readonly dependencies : string []; Type: string[] List of plugins this plugin depends on, including optional semver version (eg: [\"foo\", \"bar@1.2\"]). bind Required public readonly bind : IGraphPluginBindCallback ; Type: aws-prototyping-sdk/cdk-graph.IGraphPluginBindCallback Binds the plugin to the CdkGraph instance. Enables plugins to receive base configs. report Optional public readonly report : IGraphReportCallback ; Type: aws-prototyping-sdk/cdk-graph.IGraphReportCallback Generate asynchronous reports based on the graph. This is not automatically called when synthesizing CDK. Developer must explicitly add await graphInstance.report() to the CDK bin or invoke this outside of the CDK synth. In either case, the plugin receives the in-memory graph interface when invoked, as the CdkGraph will deserialize the graph prior to invoking the plugin report. Constants Name Type Description ARTIFACT_NS string Namespace for artifacts of the diagram plugin. ID string Fixed id of the diagram plugin. VERSION string Current semantic version of the diagram plugin. ARTIFACT_NS Required public readonly ARTIFACT_NS : string ; Type: string Namespace for artifacts of the diagram plugin. ID Required public readonly ID : string ; Type: string Fixed id of the diagram plugin. VERSION Required public readonly VERSION : string ; Type: string Current semantic version of the diagram plugin. Protocols IDiagramConfig Extends: IDiagramConfigBase Implemented By: IDiagramConfig Diagram configuration definition. Properties Name Type Description filterPlan aws-prototyping-sdk/cdk-graph.IGraphFilterPlan Graph { @link IGraphFilterPlan Filter Plan} used to generate a unique diagram. format DiagramFormat | DiagramFormat [] The output format(s) to generated. theme string | IGraphThemeConfigAlt Config for graph theme. name string Name of the diagram. title string The title of the diagram. ignoreDefaults boolean Indicates if default diagram config is applied as defaults to this config. filterPlan Optional public readonly filterPlan : IGraphFilterPlan ; Type: aws-prototyping-sdk/cdk-graph.IGraphFilterPlan Graph { @link IGraphFilterPlan Filter Plan} used to generate a unique diagram. format Optional public readonly format : DiagramFormat | DiagramFormat []; Type: DiagramFormat | DiagramFormat [] Default: DiagramFormat.PNG - which will through extension also generate DiagramFormat.SVG and DiagramFormat.DOT The output format(s) to generated. theme Optional public readonly theme : string | IGraphThemeConfigAlt ; Type: string | IGraphThemeConfigAlt Config for graph theme. name Required public readonly name : string ; Type: string Name of the diagram. Used as the basename of the generated file(s) which gets the extension appended. title Required public readonly title : string ; Type: string The title of the diagram. ignoreDefaults Optional public readonly ignoreDefaults : boolean ; Type: boolean Default: false Indicates if default diagram config is applied as defaults to this config. IDiagramConfigBase Implemented By: IDiagramConfig , IDiagramConfigBase Base config to specific a unique diagram to be generated. Properties Name Type Description filterPlan aws-prototyping-sdk/cdk-graph.IGraphFilterPlan Graph { @link IGraphFilterPlan Filter Plan} used to generate a unique diagram. format DiagramFormat | DiagramFormat [] The output format(s) to generated. theme string | IGraphThemeConfigAlt Config for graph theme. filterPlan Optional public readonly filterPlan : IGraphFilterPlan ; Type: aws-prototyping-sdk/cdk-graph.IGraphFilterPlan Graph { @link IGraphFilterPlan Filter Plan} used to generate a unique diagram. format Optional public readonly format : DiagramFormat | DiagramFormat []; Type: DiagramFormat | DiagramFormat [] Default: DiagramFormat.PNG - which will through extension also generate DiagramFormat.SVG and DiagramFormat.DOT The output format(s) to generated. theme Optional public readonly theme : string | IGraphThemeConfigAlt ; Type: string | IGraphThemeConfigAlt Config for graph theme. IGraphThemeConfigAlt Implemented By: IGraphThemeConfigAlt GraphThemeConfigAlt is simplified definition of theme to apply. Properties Name Type Description rendering IGraphThemeRendering No description. theme string No description. rendering Optional public readonly rendering : IGraphThemeRendering ; Type: IGraphThemeRendering theme Optional public readonly theme : string ; Type: string IGraphThemeRendering Extends: IGraphThemeRenderingIconProps , IGraphThemeRenderingOptions Implemented By: IGraphThemeRendering Properties for defining the rendering options for the graph theme. Properties Name Type Description cfnResourceIconMax GraphThemeRenderingIconTarget Highest Graph.CfnResourceNode icon to render. cfnResourceIconMin GraphThemeRenderingIconTarget Lowest Graph.CfnResourceNode icon to render. resourceIconMax GraphThemeRenderingIconTarget Highest Graph.ResourceNode icon to render. resourceIconMin GraphThemeRenderingIconTarget Lowest Graph.ResourceNode icon to render. layout string Layout direction of the graph. stack string Specify regex pattern to match root stacks to render. stage string Specify which stage to render when multiple stages are available. unconstrainedCrossClusterEdges boolean Prevent cross-cluster edges from ranking nodes in layout. cfnResourceIconMax Optional public readonly cfnResourceIconMax : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Highest Graph.CfnResourceNode icon to render. cfnResourceIconMin Optional public readonly cfnResourceIconMin : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Lowest Graph.CfnResourceNode icon to render. resourceIconMax Optional public readonly resourceIconMax : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Highest Graph.ResourceNode icon to render. resourceIconMin Optional public readonly resourceIconMin : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Lowest Graph.ResourceNode icon to render. layout Optional public readonly layout : string ; Type: string Default: horizontal Layout direction of the graph. stack Optional public readonly stack : string ; Type: string Default: undefined Will render all stacks Specify regex pattern to match root stacks to render. stage Optional public readonly stage : string ; Type: string Default: last Specify which stage to render when multiple stages are available. Can be a preset value of \"first\", \"last\", and \"all\", or regex string of the stage(s) to render. unconstrainedCrossClusterEdges Optional public readonly unconstrainedCrossClusterEdges : boolean ; Type: boolean Default: false Prevent cross-cluster edges from ranking nodes in layout. https://graphviz.org/docs/attrs/constraint/ IGraphThemeRenderingIconProps Implemented By: IGraphThemeRendering , IGraphThemeRenderingIconProps Icon specific properties for configuring graph rendering of resource icons. Properties Name Type Description cfnResourceIconMax GraphThemeRenderingIconTarget Highest Graph.CfnResourceNode icon to render. cfnResourceIconMin GraphThemeRenderingIconTarget Lowest Graph.CfnResourceNode icon to render. resourceIconMax GraphThemeRenderingIconTarget Highest Graph.ResourceNode icon to render. resourceIconMin GraphThemeRenderingIconTarget Lowest Graph.ResourceNode icon to render. cfnResourceIconMax Optional public readonly cfnResourceIconMax : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Highest Graph.CfnResourceNode icon to render. cfnResourceIconMin Optional public readonly cfnResourceIconMin : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Lowest Graph.CfnResourceNode icon to render. resourceIconMax Optional public readonly resourceIconMax : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Highest Graph.ResourceNode icon to render. resourceIconMin Optional public readonly resourceIconMin : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Lowest Graph.ResourceNode icon to render. IGraphThemeRenderingOptions Implemented By: IGraphThemeRendering , IGraphThemeRenderingOptions Additional graph rendering options. Properties Name Type Description layout string Layout direction of the graph. stack string Specify regex pattern to match root stacks to render. stage string Specify which stage to render when multiple stages are available. unconstrainedCrossClusterEdges boolean Prevent cross-cluster edges from ranking nodes in layout. layout Optional public readonly layout : string ; Type: string Default: horizontal Layout direction of the graph. stack Optional public readonly stack : string ; Type: string Default: undefined Will render all stacks Specify regex pattern to match root stacks to render. stage Optional public readonly stage : string ; Type: string Default: last Specify which stage to render when multiple stages are available. Can be a preset value of \"first\", \"last\", and \"all\", or regex string of the stage(s) to render. unconstrainedCrossClusterEdges Optional public readonly unconstrainedCrossClusterEdges : boolean ; Type: boolean Default: false Prevent cross-cluster edges from ranking nodes in layout. https://graphviz.org/docs/attrs/constraint/ IPluginConfig Implemented By: IPluginConfig Plugin configuration for diagram plugin. Properties Name Type Description defaults IDiagramConfigBase Default configuration to apply to all diagrams. diagrams IDiagramConfig [] List of diagram configurations to generate diagrams. defaults Optional public readonly defaults : IDiagramConfigBase ; Type: IDiagramConfigBase Default configuration to apply to all diagrams. diagrams Optional public readonly diagrams : IDiagramConfig []; Type: IDiagramConfig [] List of diagram configurations to generate diagrams. Enums DiagramFormat Supported diagram formats that can be generated. Extended formats are automatically generated, for example if you generate \"png\" which extends \"svg\" which extends \"dot\", the resulting generated files will be all aforementioned. Members Name Description DOT Graphviz DOT Language . SVG SVG generated using dot-wasm from { @link DiagramFormat.DOT} file. PNG PNG generated using sharp from { @link DiagramFormat.SVG} file. DOT Graphviz DOT Language . SVG SVG generated using dot-wasm from { @link DiagramFormat.DOT} file. PNG PNG generated using sharp from { @link DiagramFormat.SVG} file. GraphThemeRenderingIconTarget Icon rendering target options for GraphTheme. Members Name Description DATA Data icon (eg: EC2 instance type icon, T2). RESOURCE Resource icon. GENERAL General icon. SERVICE Service icon. CATEGORY Category icon. DATA Data icon (eg: EC2 instance type icon, T2). Resolution precedence: data => resource => general => service => category RESOURCE Resource icon. Resolution precedence: resource => general => service => category GENERAL General icon. Resolution precedence: resource => general => service => category SERVICE Service icon. Resolution precedence: service => category CATEGORY Category icon. Resolution precedence: category","title":"Index"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#diagram-plugin-cdk-graph","text":"@aws-prototyping-sdk/cdk-graph-plugin-diagram \\ This plugin generates diagrams utilizing the cdk-graph framework. More comprehensive documentation to come as this package stabilizes. Disclaimer: This is the first cdk graph plugin, it is highly experimental , and subject to major refactors as we gain feedback from the community. BREAKING CHANGES (pre-release) - <= v0.14.8 : Only the last stage of a multi stage app will be rendered by default, which is commonly the production stage. Use the theme.rendering.stage config option to override this for each graph or in defaults.","title":"Diagram Plugin - Cdk Graph"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#quick-start","text":"// bin/app.ts // Must wrap cdk app with async IIFE function to enable async cdk-graph report ( async () => { const app = new App (); // ... add stacks, etc const graph = new CdkGraph ( app , { plugins : [ new CdkGraphDiagramPlugin ()], }); app . synth (); // async cdk-graph reporting hook await graph . report (); })() // => cdk.out/diagram.dot // => cdk.out/diagram.svg // => cdk.out/diagram.png This plugin currently only supports async report() generation following the above example. Make sure to wrap the cdk app with async IIFE .","title":"Quick Start"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#supported-formats","text":"Format Status Extends Provider DOT - Graphviz SVG DOT Graphviz PNG SVG Graphviz","title":"Supported Formats"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#diagram-providers","text":"Provider Status Formats Graphviz DOT , SVG , PNG Drawio TBD: very early stage design and development","title":"Diagram Providers"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#configuration","text":"See IPluginConfig interface for details, and look in unit tests for additional examples. By default the diagram plugin will generate a single \"compact\" preset diagram. It is capable of creating multiple diagrams each with different configurations, as well as defining the defaults to use. Defaults Option Changing the defaults option will modify default options for all diagrams, including the default diagram. See IDiagramConfigBase interface for plugin.defaults options. new CdkGraphDiagramPlugin ({ defaults : { theme : \"dark\" , filterPlan : { preset : FilterPreset.NONE , } } }); // => results in a single diagram that is \"verbose\" and \"dark\", since no resources are filtered Diagrams Option By modifying the diagrams option of the plugin you have full control over the rendering of diagrams, and can render multiple diagrams. See IDiagramConfig interface for diagram config options. new CdkGraphDiagramPlugin ({ diagrams : [ { name : \"diagram-1\" , title : \"Diagram 1 (dark + compact)\" , theme : \"dark\" , // the default `filterPlan: { preset: FilterPreset.COMPACT }` will still apply }, { name : \"diagram-2\" , title : \"Diagram 2 (dark + verbose)\" , theme : \"dark\" , filterPlan : { preset : FilterPreset.NONE , }, }, { name : \"diagram-3\" , title : \"Diagram 3 (no defaults)\" , ignoreDefaults : true , // default options will not be applied (theme, filterPlan, etc) }, ], });","title":"Configuration"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#next-steps","text":"[ ] Battle test in the wild and get community feedback [ ] Improve image coverage and non-image node rendering [ ] Add drawio support [ ] Add common filter patterns and helpers [ ] Enable generating diagrams outside of synthesis process (maybe CLI) [ ] Implement interactive diagram, with potential for dynamic filtering and config generation [ ] Support using interactive diagram as config generator for other plugins (or as separate plugin that depends on this) Inspired by cdk-dia and cfn-dia with \u2764\ufe0f","title":"Next Steps"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#structs","text":"","title":"Structs "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#diagramoptions","text":"Options for diagrams.","title":"DiagramOptions "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#classes","text":"","title":"Classes "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#cdkgraphdiagramplugin","text":"Implements: aws-prototyping-sdk/cdk-graph.ICdkGraphPlugin CdkGraphDiagramPlugin is a { @link ICdkGraphPlugin CdkGraph Plugin} implementation for generating diagram artifacts from the { @link CdkGraph} framework.","title":"CdkGraphDiagramPlugin "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#protocols","text":"","title":"Protocols "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#idiagramconfig","text":"Extends: IDiagramConfigBase Implemented By: IDiagramConfig Diagram configuration definition.","title":"IDiagramConfig "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#idiagramconfigbase","text":"Implemented By: IDiagramConfig , IDiagramConfigBase Base config to specific a unique diagram to be generated.","title":"IDiagramConfigBase "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#igraphthemeconfigalt","text":"Implemented By: IGraphThemeConfigAlt GraphThemeConfigAlt is simplified definition of theme to apply.","title":"IGraphThemeConfigAlt "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#igraphthemerendering","text":"Extends: IGraphThemeRenderingIconProps , IGraphThemeRenderingOptions Implemented By: IGraphThemeRendering Properties for defining the rendering options for the graph theme.","title":"IGraphThemeRendering "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#igraphthemerenderingiconprops","text":"Implemented By: IGraphThemeRendering , IGraphThemeRenderingIconProps Icon specific properties for configuring graph rendering of resource icons.","title":"IGraphThemeRenderingIconProps "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#igraphthemerenderingoptions","text":"Implemented By: IGraphThemeRendering , IGraphThemeRenderingOptions Additional graph rendering options.","title":"IGraphThemeRenderingOptions "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#ipluginconfig","text":"Implemented By: IPluginConfig Plugin configuration for diagram plugin.","title":"IPluginConfig "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#enums","text":"","title":"Enums "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#diagramformat","text":"Supported diagram formats that can be generated. Extended formats are automatically generated, for example if you generate \"png\" which extends \"svg\" which extends \"dot\", the resulting generated files will be all aforementioned.","title":"DiagramFormat "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#graphthemerenderingicontarget","text":"Icon rendering target options for GraphTheme.","title":"GraphThemeRenderingIconTarget "},{"location":"typescript/type-safe-api/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/type-safe-api Type Safe API Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated client and server types, infrastructure, documentation, and automatic input validation! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate \"runtime\" projects from your API definition in your desired languages, which can be utilised both client side for interacting with your API, or server side for implementing your API. The project also generates a type-safe CDK construct which ensures an integration is provided for every API operation. Code is generated at build time, so when you change your API model, just rebuild and you'll see your changes reflected in the generated code. Quick Start: TypeScript This section describes how to get started quickly, with TypeScript infrastructure and lambda handlers. See the end of the README for examples in Python and Java . Create Your API Project Use the project in your .projenrc.ts . It can either be part of an nx-monorepo (recommended) or used in a standalone fashion. import { NxMonorepoProject } from \"@aws-prototyping-sdk/nx-monorepo\" ; import { TypeSafeApiProject } from \"@aws-prototyping-sdk/type-safe-api\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; // Create the monorepo const monorepo = new NxMonorepoProject ({ ... }); // Create the API project const api = new TypeSafeApiProject ({ name : \"myapi\" , parent : monorepo , outdir : 'packages/api' , // Smithy as the model language. You can also use ModelLanguage.OPENAPI model : { language : ModelLanguage.SMITHY , options : { smithy : { serviceName : { namespace : 'com.mycompany' , serviceName : 'MyApi' , }, }, }, }, // Generate types, client and server code in TypeScript, Python and Java runtime : { languages : [ Language . TYPESCRIPT , Language . PYTHON , Language . JAVA ], }, // CDK infrastructure in TypeScript infrastructure : { language : Language.TYPESCRIPT , }, // Generate HTML documentation documentation : { formats : [ DocumentationFormat . HTML_REDOC ], } }); // Create a CDK infrastructure project const infra = new AwsCdkTypeScriptApp ({ ... }); // Infrastructure can depend on the generated API infrastructure and runtime infra . addDeps ( api . infrastructure . typescript ! . package . packageName ); infra . addDeps ( api . runtime . typescript ! . package . packageName ); monorepo . synth (); Use the CDK Construct In your CDK application, consume the Api construct, vended from the generated typescript infrastructure package. import { Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; import { Api } from \"myapi-typescript-infra\" ; // <- generated typescript infrastructure package import { Authorizers , Integrations } from \"@aws-prototyping-sdk/type-safe-api\" ; import { NodejsFunction } from \"aws-cdk-lib/aws-lambda-nodejs\" ; import { Cors } from \"aws-cdk-lib/aws-apigateway\" ; import * as path from 'path' ; export class MyStack extends Stack { constructor ( scope : Construct , id : string , props : StackProps = {}) { super ( scope , id , props ); // Instantiate the generated CDK construct to deploy an API Gateway API based on your model new Api ( this , 'MyApi' , { defaultAuthorizer : Authorizers.iam (), corsOptions : { allowOrigins : Cors.ALL_ORIGINS , allowMethods : Cors.ALL_METHODS , }, // Supply an integration for every operation integrations : { sayHello : { integration : Integrations.lambda ( new NodejsFunction ( this , 'SayHelloLambda' , { entry : path.resolve ( __dirname , 'say-hello.ts' ), })), }, }, }); } } Implement a Lambda Handler The generated runtime projects include lambda handler wrappers which provide type-safety for implementing your API operations. You can implement your lambda handlers in any of the supported languages, and even mix and match languages for different operations if you like. In typescript, the implementation of say-hello.ts would look like: import { sayHelloHandler } from \"myapi-typescript-runtime\" ; // <- generated typescript runtime package // Use the handler wrapper for type-safety to ensure you correctly implement your modelled API operation export const handler = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : `Hello ${ input . requestParameters . name } ` , }, }; }); Project The TypeSafeApiProject projen project sets up the project structure for you. You have a few parameters to consider when creating the project: model - Configure the API model. Select a language for the model of either Smithy or OpenAPI v3 , and supply options.smithy or options.openapi depending on your choice. runtime - Configure the generated runtime projects. Include one or more languages you wish to write your client and server-side code in. These projects contain generated types defined in your model, as well as type-safe lambda handler wrappers for implementing each operation. infrastructure - Pick the language you are writing your CDK infrastructure in. A construct will be generated in this language which can be used to deploy the API. documentation - Specify formats to generate documentation in. It's recommended that these projects are used as part of an nx-monorepo project (eg. by specifying parent: myMonorepoProject ), as it makes setting up dependencies much easier, particularly when extending your project further with a CDK app and lambda functions. Depending on the model.language you choose, you must supply the corresponding model.options . For example: new TypeSafeApiProject ({ model : { language : ModelLanguage.SMITHY , options : { smithy : { serviceName : { namespace : 'com.mycompany' , serviceName : 'MyApi' , }, }, }, }, ... }); new TypeSafeApiProject ({ model : { language : ModelLanguage.OPENAPI , options : { openapi : { title : 'MyApi' , }, }, }, ... }); model.options.smithy allows for further customisation of the Smithy project, eg: new TypeSafeApiProject ({ model : { language : ModelLanguage.SMITHY , options : { smithy : { serviceName : { namespace : 'com.mycompany' , serviceName : 'MyApi' , }, // By default, the contents of the smithy build output directory `model/output` will be ignored by source control. // Set this to false to include it, for example if you are generating clients directly from the smithy model. ignoreSmithyBuildOutput : false , // The gradle wrapper used for the smithy build is copied from the PDK itself if it does not already exist in // the 'smithy' folder. By default, this gradle wrapper will be ignored by source control. // Set this to false if you would like to check the gradle wrapper in to source control, for example if you want // to use a different version of the gradle wrapper in your project. ignoreGradleWrapper : false , // Use smithyBuildOptions to control what is added to smithy-build.json. smithyBuildOptions : { projections : { // You can customise the built-in openapi projection, used to generate the OpenAPI specification. openapi : { plugins : { openapi : { // Customise the openapi projection here. // See: https://smithy.io/2.0/guides/converting-to-openapi.html useIntegerType : true , ... } } }, // You can add new projections here too \"ts-client\" : { \"plugins\" : { \"typescript-codegen\" : { \"package\" : \"@my-test/smithy-generated-typescript-client\" , \"packageVersion\" : \"0.0.1\" } } } }, // Note that any additional dependencies required for projections/plugins can be added here, which in turn will // add them to the `smithy/build.gradle` file maven : { dependencies : [ \"software.amazon.smithy:smithy-validation-model:1.27.2\" , ] } } }, } }, ... }); Directory Structure The TypeSafeApiProject will create the following directory structure within its outdir : |_ model/ |_ src/ |_ main/ |_ smithy - your API definition if you chose ModelLanguage.SMITHY |_ openapi - your API definition if you chose ModelLanguage.OPENAPI |_ runtime/ - generated types, client, and server code in the languages you specified |_ typescript |_ python |_ java |_ infrastructure/ - generated infrastructure (you'll find only one directory in here based on your chosen infrastructure language) |_ typescript |_ python |_ java |_ documentation/ - generated documentation in the formats you specified |_ html2 |_ html_redoc |_ plantuml |_ markdown Smithy IDL Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message } Supported Protocols Currently only AWS restJson1 is supported. Please ensure your service is annotated with the @restJson1 trait. Multiple Files You can split your definition into multiple files and folders, so long as they are all under the model/src/main/smithy directory in your API project. Authorizers Smithy supports adding API Gateway authorizers in the model itself . Given that at model definition time one usually does not know the ARN of the user pool or lambda function for an authorizer, it is recommended to add the authorizer(s) in your Api CDK construct. If using Smithy generated clients, some authorizer traits (eg sigv4) will include configuring the client for that particular method of authorization, so it can be beneficial to still define authorizers in the model. We therefore support specifying authorizers in both the model and the construct, but note that the construct will take precedence where the authorizer ID is the same. OpenAPI Specification Your model/src/main/openapi/main.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ model/src/main/openapi/ |_ main.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where main.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message Construct A CDK construct is generated in the infrastructure/<language> directory which provides a type-safe interface for creating an API Gateway API based on your model. You can extend or instantiate this construct in your CDK infrastructure project. You'll get a type error if you forget to define an integration for an operation defined in your api. import { Authorizers , Integrations } from '@aws-prototyping-sdk/type-safe-api' ; import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs' ; import { Construct } from 'constructs' ; import { Api } from 'myapi-typescript-infra' ; /** * An example of how to wire lambda handler functions to the API */ export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { defaultAuthorizer : Authorizers.iam (), integrations : { // Every operation defined in your API must have an integration defined! sayHello : { integration : Integrations.lambda ( new NodejsFunction ( scope , 'say-hello' )), }, }, }); } } Sharing Integrations If you would like to use the same integration for every operation (for example you'd like to use a single lambda function to service all requests with the in-built handler router ), you can use the Operations.all method from a generated runtime project to save repeating yourself: import { Operations } from 'myapi-typescript-runtime' ; import { Authorizers , Integrations } from '@aws-prototyping-sdk/type-safe-api' ; import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs' ; import { Construct } from 'constructs' ; import { Api } from 'myapi-typescript-infra' ; export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { defaultAuthorizer : Authorizers.iam (), // Use the same integration for every operation. integrations : Operations.all ({ integration : Integrations.lambda ( new NodejsFunction ( scope , 'router' )), }), }); } } TypeScript is demonstrated above, but this is also available in Java and Python. Authorizers The Api construct allows you to define one or more authorizers for securing your API. An integration will use the defaultAuthorizer unless an authorizer is specified at the integration level. The following authorizers are supported: Authorizers.none - No auth Authorizers.iam - AWS IAM (Signature Version 4) Authorizers.cognito - Cognito user pool Authorizers.custom - A custom authorizer Cognito Authorizer To use the Cognito authorizer, one or more user pools must be provided. You can optionally specify the scopes to check if using an access token. You can use the withScopes method to use the same authorizer but verify different scopes for individual integrations, for example: export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { const cognitoAuthorizer = Authorizers . cognito ({ authorizerId : 'myCognitoAuthorizer' , userPools : [ new UserPool ( scope , 'UserPool' )], }); super ( scope , id , { defaultAuthorizer : cognitoAuthorizer , integrations : { // Everyone in the user pool can call this operation: sayHello : { integration : Integrations.lambda ( new NodejsFunction ( scope , 'say-hello' )), }, // Only users with the given scopes can call this operation myRestrictedOperation : { integration : Integrations.lambda ( new NodejsFunction ( scope , 'my-restricted-operation' )), authorizer : cognitoAuthorizer.withScopes ( 'my-resource-server/my-scope' ), }, }, }); } } For more information about scopes or identity and access tokens, please see the API Gateway documentation . Custom Authorizer Custom authorizers use lambda functions to handle authorizing requests. These can either be simple token-based authorizers, or more complex request-based authorizers. See the API Gateway documentation for more details. An example token-based authorizer (default): Authorizers . custom ({ authorizerId : 'myTokenAuthorizer' , function : new NodejsFunction ( scope , 'authorizer' ), }); An example request-based handler. By default the identitySource will be method.request.header.Authorization , however you can customise this as per the API Gateway documentation . Authorizers . custom ({ authorizerId : 'myRequestAuthorizer' , type : CustomAuthorizerType . REQUEST , identitySource : 'method.request.header.MyCustomHeader, method.request.querystring.myQueryString' , function : new NodejsFunction ( scope , 'authorizer' ), }); Integrations Integrations are used by API Gateway to service requests. Lambda Integration Currently, the only built-in integration is a lambda integration. You can construct one using Integrations.lambda(yourLambdaFunction) . Custom Integrations You can implement your own integrations by inheriting the Integration class and implementing its render method. This method is responsible for returning a snippet of OpenAPI which will be added as the x-amazon-apigateway-integration for an operation. Please refer to the API Gateway Swagger Extensions documentation for more details. You can also optionally override the grant method if you need to use CDK to grant API Gateway access to invoke your integration. Runtime: Clients The generated runtime projects include clients which can be used for type-safe interaction with your API. Typescript The typescript-fetch OpenAPI generator is used to generate typescript client. This requires an implementation of fetch to be passed to the client. In the browser one can pass the built in fetch, or in NodeJS you can use an implementation such as node-fetch . Example usage of the client in a website: import { Configuration , DefaultApi } from \"myapi-typescript-runtime\" ; const client = new DefaultApi ( new Configuration ({ basePath : \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" , fetchApi : window.fetch.bind ( window ), })); await client . sayHello ({ name : \"Jack\" }); Python The python OpenAPI generator is used to generate clients for python. Example usage: from myapi_python_runtime import ApiClient , Configuration from myapi_python_runtime.api.default_api import DefaultApi configuration = Configuration ( host = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) with ApiClient ( configuration ) as api_client : client = DefaultApi ( api_client ) client . say_hello ( query_params = { 'name' : \"name_example\" , }, ) You'll find details about how to use the python client in the README.md in your generated runtime project. Java The java OpenAPI generator is used to generate clients for Java. Example usage: import com.generated.api.myapijavaruntime.runtime.api.DefaultApi ; import com.generated.api.myapijavaruntime.runtime.ApiClient ; import com.generated.api.myapijavaruntime.runtime.Configuration ; import com.generated.api.myapijavaruntime.runtime.models.HelloResponse ; ApiClient client = Configuration . getDefaultApiClient (); client . setBasePath ( \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ); DefaultApi api = new DefaultApi ( client ); HelloResponse response = api . sayHello ( \"Adrian\" ). execute () You'll find more details about how to use the Java client in the README.md in your generated runtime project. Lambda Handler Wrappers Lambda handler wrappers are also importable from the generated runtime projects. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your model. Typescript import { sayHelloHandler } from \"myapi-typescript-runtime\" ; export const handler = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : `Hello ${ input . requestParameters . name } !` , }, }; }); Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handlerRouter . import { handlerRouter , sayHelloHandler , sayGoodbyeHandler } from \"myapi-typescript-runtime\" ; import { corsInterceptor } from \"./interceptors\" ; import { sayGoodbye } from \"./handlers/say-goodbye\" ; const sayHello = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : `Hello ${ input . requestParameters . name } !` , }, }; }); export const handler = handlerRouter ({ // Interceptors declared in this list will apply to all operations interceptors : [ corsInterceptor ], // Assign handlers to each operation here handlers : { sayHello , sayGoodbye , }, }); Python from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.model.hello_response import HelloResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handler_router . from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses , handler_router , HandlerRouterHandlers from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.model.hello_response import HelloResponse from other_handlers import say_goodbye from my_interceptors import cors_interceptor @say_hello_handler def say_hello ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) handler = handler_router ( # Interceptors defined here will apply to all operations interceptors = [ cors_interceptor ], handlers = HandlerRouterHandlers ( say_hello = say_hello , say_goodbye = say_goodbye ) ) Java import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello200Response ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloRequestInput ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloResponse ; import com.generated.api.myapijavaruntime.runtime.model.HelloResponse ; public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so by extending the HandlerRouter class. import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayGoodbye ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.HandlerRouter ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.Interceptors ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello ; import java.util.Arrays ; import java.util.List ; // Interceptors defined here apply to all operations @Interceptors ({ TimingInterceptor . class }) public class ApiHandlerRouter extends HandlerRouter { // You must implement a method to return a handler for every operation @Override public SayHello sayHello () { return new SayHelloHandler (); } @Override public SayGoodbye sayGoodbye () { return new SayGoodbyeHandler (); } } Interceptors The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next . Typescript In typescript, interceptors are passed as separate arguments to the generated handler wrapper, in the order in which they should be executed. Call request.chain.next(request) from an interceptor to delegate to the rest of the chain to handle a request. Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next . import { sayHelloHandler , ChainedRequestInput , OperationResponse , } from \"myapi-typescript-runtime\" ; // Interceptor to wrap invocations in a try/catch, returning a 500 error for any unhandled exceptions. const tryCatchInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ) : Promise < Response | OperationResponse < 500 , { errorMessage : string } >> => { try { return await request . chain . next ( request ); } catch ( e : any ) { return { statusCode : 500 , body : { errorMessage : e.message }}; } }; // tryCatchInterceptor is passed first, so it runs first and calls the second argument function (the request handler) via chain.next export const handler = sayHelloHandler ( tryCatchInterceptor , async ({ input }) => { return { statusCode : 200 , body : { message : `Hello ${ input . requestParameters . name } !` , }, }; }); Another example interceptor might be to record request time metrics. The example below includes the full generic type signature for an interceptor: import { ChainedRequestInput , } from 'myapi-typescript-runtime' ; const timingInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ) : Promise < Response > => { const start = Date . now (); const response = await request . chain . next ( request ); const end = Date . now (); console . log ( `Took ${ end - start } ms` ); return response ; }; Interceptors may mutate the interceptorContext to pass state to further interceptors or the final lambda handler, for example an identityInterceptor might want to extract the authenticated user from the request so that it is available in handlers. import { LambdaRequestParameters , LambdaHandlerChain , } from 'myapi-typescript-runtime' ; const identityInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ) : Promise < Response > => { const authenticatedUser = await getAuthenticatedUser ( request . event ); return await request . chain . next ({ ... request , interceptorContext : { ... request . interceptorContext , authenticatedUser , }, }); }; Python In Python, a list of interceptors can be passed as a keyword argument to the generated lambda handler decorator, for example: from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.model.hello_response import HelloResponse @say_hello_handler ( interceptors = [ timing_interceptor , try_catch_interceptor ]) def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Writing an interceptor is just like writing a lambda handler. Call chain.next(input) from an interceptor to delegate to the rest of the chain to handle a request. import time from myapi_python_runtime.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def timing_interceptor ( input : ChainedApiRequest ) -> ApiResponse : start = int ( round ( time . time () * 1000 )) response = input . chain . next ( input ) end = int ( round ( time . time () * 1000 )) print ( \"Took {} ms\" . format ( end - start )) return response Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import time from myapi_python_runtime.model.api_error import ApiError from myapi_python_runtime.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def try_catch_interceptor ( input : ChainedApiRequest ) -> ApiResponse : try : return input . chain . next ( input ) except Exception as e : return ApiResponse ( status_code = 500 , body = ApiError ( errorMessage = str ( e )), headers = {} ) Interceptors are permitted to mutate the \"interceptor context\", which is a Dict[str, Any] . Each interceptor in the chain, and the final handler, can access this context: def identity_interceptor ( input : ChainedApiRequest ) -> ApiResponse : input . interceptor_context [ \"AuthenticatedUser\" ] = get_authenticated_user ( input . event ) return input . chain . next ( input ) Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: def add_cors_headers_interceptor ( input : ChainedApiRequest ) -> ApiResponse : response = input . chain . next ( input ) return ApiResponse ( status_code = response . status_code , body = response . body , headers = { ** response . headers , \"Access-Control-Allow-Origin\" : \"*\" , \"Access-Control-Allow-Headers\" : \"*\" } ) Java In Java, interceptors can be added to a handler via the @Interceptors class annotation: import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Interceptors ; @Interceptors ({ TimingInterceptor . class , TryCatchInterceptor . class }) public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } To write an interceptor, you can implement the Interceptor interface. For example, a timing interceptor: import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Interceptor ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Response ; public class TimingInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { long start = System . currentTimeMillis (); Response res = input . getChain (). next ( input ); long end = System . currentTimeMillis (); System . out . printf ( \"Took %d ms%n\" , end - start ); return res ; } } Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Interceptor ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.Response ; import com.generated.api.myjavaapiruntime.runtime.api.Handlers.ApiResponse ; import com.generated.api.myjavaapiruntime.runtime.model.ApiError ; public class TryCatchInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { try { return input . getChain (). next ( input ); } catch ( Exception e ) { return ApiResponse . builder () . statusCode ( 500 ) . body ( ApiError . builder () . errorMessage ( e . getMessage ()) . build (). toJson ()) . build (); } } } Interceptors are permitted to mutate the \"interceptor context\", which is a Map<String, Object> . Each interceptor in the chain, and the final handler, can access this context: public class IdentityInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { input . getInterceptorContext (). put ( \"AuthenticatedUser\" , this . getAuthenticatedUser ( input . getEvent ())); return input . getChain (). next ( input ); } } Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: public static class AddCorsHeadersInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { Response res = input . getChain (). next ( input ); res . getHeaders (). put ( \"Access-Control-Allow-Origin\" , \"*\" ); res . getHeaders (). put ( \"Access-Control-Allow-Headers\" , \"*\" ); return res ; } } Interceptors with Dependency Injection Interceptors referenced by the @Interceptors annotation must be constructable with no arguments. If more complex instantiation of your interceptor is required (for example if you are using dependency injection or wish to pass configuration to your interceptor), you may instead override the getInterceptors method in your handler: public class SayHelloHandler extends SayHello { @Override public List < Interceptor < SayHelloInput >> getInterceptors () { return Arrays . asList ( new MyConfiguredInterceptor <> ( 42 ), new MyOtherConfiguredInterceptor <> ( \"configuration\" )); } @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s!\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Quick Start: Python This guide assumes you want to write your CDK infrastructure in Python and your lambda handlers in Python, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like. Just specify the language in runtime.languages for any language you would like to write lambda handlers in. Create Your API Project Use the project in your .projenrc.ts . It can either be part of an nx-monorepo (recommended) or used in a standalone fashion. import { NxMonorepoProject } from \"@aws-prototyping-sdk/nx-monorepo\" ; import { TypeSafeApiProject } from \"@aws-prototyping-sdk/type-safe-api\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { PythonProject } from \"projen/lib/python\" ; // Create the monorepo const monorepo = new NxMonorepoProject ({ name : 'monorepo' , defaultReleaseBranch : \"main\" , }); // Create the API project const api = new TypeSafeApiProject ({ name : \"myapi\" , parent : monorepo , outdir : 'packages/api' , // Smithy as the model language. You can also use ModelLanguage.OPENAPI model : { language : ModelLanguage.SMITHY , options : { smithy : { serviceName : { namespace : 'com.mycompany' , serviceName : 'MyApi' , }, }, }, }, // Generate client and server types in TypeScript, Python, and Java runtime : { languages : [ Language . TYPESCRIPT , Language . PYTHON , Language . JAVA ], }, // Generate CDK infrastructure in Python infrastructure : { language : Language.PYTHON , }, // Generate HTML documentation documentation : { formats : [ DocumentationFormat . HTML_REDOC ] }, }); // Create a project for our lambda handlers written in python const lambdas = new PythonProject ({ name : \"lambdas\" , parent : monorepo , outdir : 'packages/lambdas' , authorEmail : \"me@example.com\" , authorName : \"me\" , module Name : \"lambdas\" , version : \"1.0.0\" , // Poetry is used to simplify local python dependencies poetry : true , }); // Add a local dependency on the generated python runtime lambdas . addDependency ( ` ${ api . runtime . python ! . name } @{path=\" ${ path . relative ( lambdas . outdir , api . runtime . python ! . outdir ) } \", develop=true}` ); monorepo . addImplicitDependency ( lambdas , api . runtime . python ! ); // Add commands to the lambda project's package task to create a distributable which can be deployed to AWS Lambda lambdas . packageTask . exec ( `mkdir -p lambda-dist && rm -rf lambda-dist/*` ); lambdas . packageTask . exec ( `cp -r ${ lambdas . module Name } lambda-dist/ ${ lambdas . module Name } ` ); lambdas . packageTask . exec ( `poetry export --without-hashes --format=requirements.txt > lambda-dist/requirements.txt` ); lambdas . packageTask . exec ( `pip install -r lambda-dist/requirements.txt --target lambda-dist --upgrade` ); lambdas . gitignore . addPatterns ( 'lambda-dist' ); // Create a CDK infrastructure project const infra = new AwsCdkPythonApp ({ name : \"infra\" , parent : monorepo , outdir : 'packages/infra' , authorEmail : \"me@example.com\" , authorName : \"me\" , cdkVersion : \"2.0.0\" , module Name : \"infra\" , version : \"1.0.0\" , poetry : true , }); // The infrastructure project depends on the python types, python infrastructure, and the lambda package infra . addDependency ( ` ${ api . runtime . python ! . name } @{path=\" ${ path . relative ( infra . outdir , api . runtime . python ! . outdir ) } \", develop=true}` ); monorepo . addImplicitDependency ( infra , api . runtime . python ! ); infra . addDependency ( ` ${ api . infrastructure . python ! . name } @{path=\" ${ path . relative ( infra . outdir , api . infrastructure . python ! . outdir ) } \", develop=true}` ); monorepo . addImplicitDependency ( infra , api . infrastructure . python ! ); infra . addDependency ( ` ${ lambdas . name } @{path=\" ${ path . relative ( infra . outdir , lambdas . outdir ) } \", develop=true}` ); monorepo . addImplicitDependency ( infra , lambdas ); monorepo . synth (); Use the CDK Construct In your CDK application, consume the Api construct, vended from the generated Python infrastructure package. import os from aws_cdk import Stack from constructs import Construct from aws_cdk.aws_lambda import LayerVersion , Code , Function , Runtime from aws_prototyping_sdk.type_safe_api import Authorizers , TypeSafeApiIntegration , Integrations from myapi_python_runtime.apis.tags.default_api_operation_config import OperationConfig from myapi_python_infra.api import Api from pathlib import Path from os import path class MyStack ( Stack ): def __init__ ( self , scope : Construct , construct_id : str , ** kwargs ) -> None : super () . __init__ ( scope , construct_id , ** kwargs ) # Use the generated Api construct self . api = Api ( self , 'Api' , default_authorizer = Authorizers . iam (), integrations = OperationConfig ( say_hello = TypeSafeApiIntegration ( # Create a python lambda function from our \"lambda-dist\" package integration = Integrations . lambda_ ( Function ( self , 'SayHello' , runtime = Runtime . PYTHON_3_9 , code = Code . from_asset ( path . join ( \"..\" , \"lambdas\" , \"lambda-dist\" )), handler = \"lambdas.say_hello.handler\" , )), ), ), ) Implement a Lambda Handler In your lambdas project you can define your lambda handler in its source directory, eg lambdas/lambdas/say_hello.py : from myapi_python_runtime.model.say_hello_response_content import SayHelloResponseContent from myapi_python_runtime.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , SayHelloOperationResponses , ApiResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = SayHelloResponseContent ( message = \"Hello {} \" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Quick Start: Java This guide assumes you want to write your CDK infrastructure in Java and your lambda handlers in Java, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like. Create Your API Project Use the project in your .projenrc.ts . It can either be part of an nx-monorepo (recommended) or used in a standalone fashion. import { NxMonorepoProject } from \"@aws-prototyping-sdk/nx-monorepo\" ; import { TypeSafeApiProject } from \"@aws-prototyping-sdk/type-safe-api\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { JavaProject } from \"projen/lib/java\" ; // Create the monorepo const monorepo = new NxMonorepoProject ({ name : 'monorepo' , defaultReleaseBranch : \"main\" , }); // Create the API project const api = new TypeSafeApiProject ({ name : \"myapi\" , parent : monorepo , outdir : 'packages/api' , // Smithy as the model language. You can also use ModelLanguage.OPENAPI model : { language : ModelLanguage.SMITHY , options : { smithy : { serviceName : { namespace : 'com.mycompany' , serviceName : 'MyApi' , }, }, }, }, // Generate client and server types in TypeScript, Python and Java runtime : { languages : [ Language . TYPESCRIPT , Language . PYTHON , Language . JAVA ], }, // Generate CDK infrastructure in Java infrastructure : { language : Language.JAVA , }, // Generate HTML documentation documentation : { formats : [ DocumentationFormat . HTML_REDOC ], }, }); const lambdas = new JavaProject ({ name : \"lambdas\" , parent : monorepo , outdir : 'packages/lambdas' , artifactId : \"lambdas\" , groupId : \"com.my.api\" , version : \"1.0.0\" , }); // The lambdas package needs a dependency on the generated java runtime lambdas . addDependency ( ` ${ api . runtime . java ! . pom . groupId } / ${ api . runtime . java ! . pom . artifactId } @ ${ api . runtime . java ! . pom . version } ` ); lambdas . pom . addRepository ({ url : `file:// ${ path . relative ( lambdas . outdir , api . runtime . java ! . outdir ) } /dist/java` , id : 'java-api-runtime' , }); monorepo . addImplicitDependency ( lambdas , api . runtime . java ! ); // Use the maven shade plugin to build a \"super jar\" which we can deploy to AWS Lambda lambdas . pom . addPlugin ( \"org.apache.maven.plugins/maven-shade-plugin@3.3.0\" , { configuration : { createDependencyReducedPom : false , }, executions : [ { id : \"shade-task\" , phase : \"package\" , goals : [ \"shade\" ], }, ], }); const infra = new AwsCdkJavaApp ({ name : \"infra\" , parent : monorepo , outdir : 'packages/infra' , artifactId : \"infra\" , groupId : \"com.my.api\" , mainClass : \"com.my.api.MyApp\" , version : \"1.0.0\" , cdkVersion : \"2.0.0\" , }); // Add a dependency on the generated CDK infrastructure infra . addDependency ( ` ${ api . infrastructure . java ! . pom . groupId } / ${ api . infrastructure . java ! . pom . artifactId } @ ${ api . infrastructure . java ! . pom . version } ` ); infra . pom . addRepository ({ url : `file:// ${ path . relative ( infra . outdir , api . infrastructure . java ! . outdir ) } /dist/java` , id : 'java-api-infra' , }); monorepo . addImplicitDependency ( infra , api . infrastructure . java ! ); // Make sure the java lambda builds before our CDK infra monorepo . addImplicitDependency ( infra , lambdas ); monorepo . synth (); Use the CDK Construct In your CDK application, consume the Api construct, vended from the generated Java infrastructure package. package com.my.api ; import com.generated.api.myapijavainfra.infra.Api ; import com.generated.api.myapijavainfra.infra.ApiProps ; import com.generated.api.myapijavaruntime.runtime.api.OperationConfig ; import software.amazon.awscdk.Duration ; import software.amazon.awscdk.services.apigateway.CorsOptions ; import software.amazon.awscdk.services.lambda.Code ; import software.amazon.awscdk.services.lambda.Function ; import software.amazon.awscdk.services.lambda.FunctionProps ; import software.amazon.awscdk.services.lambda.Runtime ; import software.aws.awsprototypingsdk.typesafeapi.Authorizers ; import software.aws.awsprototypingsdk.typesafeapi.Integrations ; import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiIntegration ; import software.amazon.awscdk.App ; import software.amazon.awscdk.Stack ; import java.util.Arrays ; public class MyApp { public static void main ( final String [] args ) { App app = new App (); Stack s = new Stack ( app , \"infra\" ); // Declare the API construct to deploy the API Gateway resources new Api ( s , \"Api\" , ApiProps . builder () . defaultAuthorizer ( Authorizers . iam ()) . corsOptions ( CorsOptions . builder () . allowOrigins ( Arrays . asList ( \"*\" )) . allowMethods ( Arrays . asList ( \"*\" )) . build ()) . integrations ( OperationConfig . < TypeSafeApiIntegration > builder () . sayHello ( TypeSafeApiIntegration . builder () . integration ( Integrations . lambda ( // Point the lambda function to our built jar from the \"lambdas\" package new Function ( s , \"say-hello\" , FunctionProps . builder () . code ( Code . fromAsset ( \"../lambdas/dist/java/com/my/api/lambdas/1.0.0/lambdas-1.0.0.jar\" )) . handler ( \"com.my.api.SayHelloHandler\" ) . runtime ( Runtime . JAVA_11 ) . timeout ( Duration . seconds ( 30 )) . build ()))) . build ()) . build ()) . build ()); app . synth (); } } Implement a Lambda Handler In your lambdas project you can define your lambda handler in its source directory, eg lambdas/src/main/java/com/my/api/SayHelloHandler.java : package com.my.api ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHello200Response ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloRequestInput ; import com.generated.api.myapijavaruntime.runtime.api.Handlers.SayHelloResponse ; import com.generated.api.myapijavaruntime.runtime.model.SayHelloResponseContent ; /** * An example lambda handler which uses the generated handler wrapper class (Handlers.SayHello) to manage marshalling * inputs and outputs. */ public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( SayHelloResponseContent . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Other Details Customising Generated Types/Infrastructure Projects By default, the generated types and infrastructure projects are configured automatically, including their project names. You can customise the generated projects using the runtime.options.<language> or infrastructure.options.<language> properties when constructing the TypeSafeApiProject . AWS WAFv2 Web ACL By default, a Web ACL is deployed and attached to your API Gateway Rest API with the \" AWSManagedRulesCommonRuleSet \", which provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10 . You can customise the Web ACL configuration via the webAclOptions of your Api CDK construct, eg: export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { integrations : { ... }, webAclOptions : { // Allow access only to specific CIDR ranges cidrAllowList : { cidrType : 'IPV4' , cidrRanges : [ '1.2.3.4/5' ], }, // Pick from the set here: https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html managedRules : [ { vendor : 'AWS' , name : 'AWSManagedRulesSQLiRuleSet' }, ], }, }); } } You can remove the Web ACL entirely with webAclOptions: { disable: true } - you may wish to use this if you'd like to set up a Web ACL yourself with more control over the rules. Smithy IntelliJ Plugin The Smithy-based projects are compatible with the Smithy IntelliJ Plugin , which provides syntax highlighting and auto-complete for your Smithy model. To make use of it, perform the following steps: Install the \"Smithy\" plugin (under Preferences -> Plugins ) Right-click on the smithy/build.gradle file in your Smithy API project Select \"Link Gradle Project\" Tagging Operations Operations can be grouped together into logical collections via tags. This can be achieved in Smithy with the @tags trait: @tags ([ \"pets\" , \"users\" ]) operation PurchasePet { ... } Or in OpenAPI using the tags property: paths : /pets/purchase : post : operationId : purchasePet tags : - pets - users ... When multiple tags are used, the \"first\" tag is considered to be the API that the operation belongs to, so in the generated client, the above example operation would be included in the PetsApi client but not the UsersApi client. Multiple tags are still useful for documentation generation, for example DocumentationFormat.HTML_REDOC will group operations by tag in the side navigation bar. If you would like to introduce tags without breaking existing clients, we recommend first adding a tag named default to all operations. \u26a0\ufe0f Important Note : Smithy versions below 1.28.0 sort tags in alphabetical order and so the \"first\" tag will be the earliest in the alphabet. Therefore, if using tags with older versions of Smithy, we recommend prefixing your desired first tag with an underscore (for example _default ). This is rectified in 1.28.0 , where tag order from the @tags trait is preserved. API Reference Constructs TypeSafeRestApi A construct for creating an api gateway rest api based on the definition in the OpenAPI spec. Initializers import { TypeSafeRestApi } from '@aws-prototyping-sdk/type-safe-api' new TypeSafeRestApi ( scope : Construct , id : string , props : TypeSafeRestApiProps ) Name Type Description scope constructs.Construct No description. id string No description. props TypeSafeRestApiProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: TypeSafeRestApiProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { TypeSafeRestApi } from '@aws-prototyping-sdk/type-safe-api' TypeSafeRestApi . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. api aws-cdk-lib.aws_apigateway.SpecRestApi No description. ipSet aws-cdk-lib.aws_wafv2.CfnIPSet No description. webAcl aws-cdk-lib.aws_wafv2.CfnWebACL No description. webAclAssociation aws-cdk-lib.aws_wafv2.CfnWebACLAssociation No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. api Required public readonly api : SpecRestApi ; Type: aws-cdk-lib.aws_apigateway.SpecRestApi ipSet Optional public readonly ipSet : CfnIPSet ; Type: aws-cdk-lib.aws_wafv2.CfnIPSet webAcl Optional public readonly webAcl : CfnWebACL ; Type: aws-cdk-lib.aws_wafv2.CfnWebACL webAclAssociation Optional public readonly webAclAssociation : CfnWebACLAssociation ; Type: aws-cdk-lib.aws_wafv2.CfnWebACLAssociation Structs ApiGatewayIntegration Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html Initializer import { ApiGatewayIntegration } from '@aws-prototyping-sdk/type-safe-api' const apiGatewayIntegration : ApiGatewayIntegration = { ... } Properties Name Type Description cacheKeyParameters string[] A list of request parameters whose values are to be cached. cacheNamespace string An API-specific tag group of related cached parameters. connectionId string The ID of a VpcLink for the private integration. connectionType string The integration connection type. contentHandling string Request payload encoding conversion types. credentials string For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. httpMethod string The HTTP method used in the integration request. passthroughBehavior string Specifies how a request payload of unmapped content type is passed through the integration request without modification. requestParameters {[ key: string ]: string} Specifies mappings from method request parameters to integration request parameters. requestTemplates {[ key: string ]: string} Mapping templates for a request payload of specified MIME types. responses {[ key: string ]: ApiGatewayIntegrationResponse } Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. timeoutInMillis number Custom timeout between 50 and 29,000 milliseconds. tlsConfig ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. type string The type of integration with the specified backend. uri string The endpoint URI of the backend. cacheKeyParameters Optional public readonly cacheKeyParameters : string []; Type: string[] A list of request parameters whose values are to be cached. cacheNamespace Optional public readonly cacheNamespace : string ; Type: string An API-specific tag group of related cached parameters. connectionId Optional public readonly connectionId : string ; Type: string The ID of a VpcLink for the private integration. https://docs.aws.amazon.com/apigateway/latest/api/API_VpcLink.html connectionType Optional public readonly connectionType : string ; Type: string The integration connection type. The valid value is \"VPC_LINK\" for private integration or \"INTERNET\", otherwise. contentHandling Optional public readonly contentHandling : string ; Type: string Request payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. credentials Optional public readonly credentials : string ; Type: string For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. If unspecified, credentials default to resource-based permissions that must be added manually to allow the API to access the resource. For more information, see Granting Permissions Using a Resource Policy. Note: When using IAM credentials, make sure that AWS STS Regional endpoints are enabled for the Region where this API is deployed for best performance. httpMethod Optional public readonly httpMethod : string ; Type: string The HTTP method used in the integration request. For Lambda function invocations, the value must be POST. passthroughBehavior Optional public readonly passthroughBehavior : string ; Type: string Specifies how a request payload of unmapped content type is passed through the integration request without modification. Supported values are when_no_templates, when_no_match, and never. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#passthroughBehavior requestParameters Optional public readonly requestParameters : {[ key : string ] : string }; Type: {[ key: string ]: string} Specifies mappings from method request parameters to integration request parameters. Supported request parameters are querystring, path, header, and body. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestParameters.html requestTemplates Optional public readonly requestTemplates : {[ key : string ] : string }; Type: {[ key: string ]: string} Mapping templates for a request payload of specified MIME types. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestTemplates.html responses Optional public readonly responses : {[ key : string ] : ApiGatewayIntegrationResponse }; Type: {[ key: string ]: ApiGatewayIntegrationResponse } Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-responses.html timeoutInMillis Optional public readonly timeoutInMillis : number ; Type: number Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds. tlsConfig Optional public readonly tlsConfig : ApiGatewayIntegrationTlsConfig ; Type: ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html type Optional public readonly type : string ; Type: string The type of integration with the specified backend. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#type uri Optional public readonly uri : string ; Type: string The endpoint URI of the backend. For integrations of the aws type, this is an ARN value. For the HTTP integration, this is the URL of the HTTP endpoint including the https or http scheme. ApiGatewayIntegrationResponse API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html Initializer import { ApiGatewayIntegrationResponse } from '@aws-prototyping-sdk/type-safe-api' const apiGatewayIntegrationResponse : ApiGatewayIntegrationResponse = { ... } Properties Name Type Description responseParameters {[ key: string ]: string} Specifies parameter mappings for the response. responseTemplates {[ key: string ]: string} Specifies MIME type-specific mapping templates for the response\u2019s payload. statusCode string HTTP status code for the method response. contentHandling string Response payload encoding conversion types. responseParameters Required public readonly responseParameters : {[ key : string ] : string }; Type: {[ key: string ]: string} Specifies parameter mappings for the response. responseTemplates Required public readonly responseTemplates : {[ key : string ] : string }; Type: {[ key: string ]: string} Specifies MIME type-specific mapping templates for the response\u2019s payload. statusCode Required public readonly statusCode : string ; Type: string HTTP status code for the method response. contentHandling Optional public readonly contentHandling : string ; Type: string Response payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html Initializer import { ApiGatewayIntegrationTlsConfig } from '@aws-prototyping-sdk/type-safe-api' const apiGatewayIntegrationTlsConfig : ApiGatewayIntegrationTlsConfig = { ... } Properties Name Type Description insecureSkipVerification boolean Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. insecureSkipVerification Optional public readonly insecureSkipVerification : boolean ; Type: boolean Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations. AuthorizerProps Properties for an authorizer. Initializer import { AuthorizerProps } from '@aws-prototyping-sdk/type-safe-api' const authorizerProps : AuthorizerProps = { ... } Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. CidrAllowList Representation of a CIDR range. Initializer import { CidrAllowList } from '@aws-prototyping-sdk/type-safe-api' const cidrAllowList : CidrAllowList = { ... } Properties Name Type Description cidrRanges string[] Specify an IPv4 address by using CIDR notation. cidrType string Type of CIDR range. cidrRanges Required public readonly cidrRanges : string []; Type: string[] Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidrType Required public readonly cidrType : string ; Type: string Type of CIDR range. CognitoAuthorizerProps Properties used to configure a cognito authorizer. Initializer import { CognitoAuthorizerProps } from '@aws-prototyping-sdk/type-safe-api' const cognitoAuthorizerProps : CognitoAuthorizerProps = { ... } Properties Name Type Description authorizerId string Unique identifier for this authorizer. userPools aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. authorizationScopes string[] A list of authorization scopes configured on the method. authorizerId Required public readonly authorizerId : string ; Type: string Unique identifier for this authorizer. userPools Required public readonly userPools : IUserPool []; Type: aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes CustomAuthorizerProps Properties used to configure a custom authorizer. Initializer import { CustomAuthorizerProps } from '@aws-prototyping-sdk/type-safe-api' const customAuthorizerProps : CustomAuthorizerProps = { ... } Properties Name Type Description authorizerId string Unique identifier for this authorizer. function aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds number The number of seconds during which the authorizer result is cached. identitySource string The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizerId Required public readonly authorizerId : string ; Type: string Unique identifier for this authorizer. function Required public readonly function : IFunction ; Type: aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds Optional public readonly authorizerResultTtlInSeconds : number ; Type: number Default: 300 The number of seconds during which the authorizer result is cached. identitySource Optional public readonly identitySource : string ; Type: string Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional public readonly type : CustomAuthorizerType ; Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type DocumentationConfiguration Configuration for generated documentation. Initializer import { DocumentationConfiguration } from '@aws-prototyping-sdk/type-safe-api' const documentationConfiguration : DocumentationConfiguration = { ... } Properties Name Type Description formats DocumentationFormat [] Formats for generated documentation. formats Required public readonly formats : DocumentationFormat []; Type: DocumentationFormat [] Formats for generated documentation. GeneratedCodeOptions Options for generated clients. Initializer import { GeneratedCodeOptions } from '@aws-prototyping-sdk/type-safe-api' const generatedCodeOptions : GeneratedCodeOptions = { ... } Properties Name Type Description java projen.java.JavaProjectOptions Options for a generated java project. python projen.python.PythonProjectOptions Options for a generated python project. typescript projen.typescript.TypeScriptProjectOptions Options for a generated typescript project. java Optional public readonly java : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for a generated java project. These override the default inferred options. python Optional public readonly python : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for a generated python project. These override the default inferred options. typescript Optional public readonly typescript : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for a generated typescript project. These override the default inferred options. GeneratedCodeProjects Generated code projects. Initializer import { GeneratedCodeProjects } from '@aws-prototyping-sdk/type-safe-api' const generatedCodeProjects : GeneratedCodeProjects = { ... } Properties Name Type Description java projen.java.JavaProject Generated java project. python projen.python.PythonProject Generated python project. typescript projen.typescript.TypeScriptProject Generated typescript project. java Optional public readonly java : JavaProject ; Type: projen.java.JavaProject Generated java project. python Optional public readonly python : PythonProject ; Type: projen.python.PythonProject Generated python project. typescript Optional public readonly typescript : TypeScriptProject ; Type: projen.typescript.TypeScriptProject Generated typescript project. InfrastructureConfiguration Configuration for generated infrastructure. Initializer import { InfrastructureConfiguration } from '@aws-prototyping-sdk/type-safe-api' const infrastructureConfiguration : InfrastructureConfiguration = { ... } Properties Name Type Description language Language The language to generate the type-safe CDK infrastructure in. options GeneratedCodeOptions Options for the infrastructure package. language Required public readonly language : Language ; Type: Language The language to generate the type-safe CDK infrastructure in. options Optional public readonly options : GeneratedCodeOptions ; Type: GeneratedCodeOptions Options for the infrastructure package. Note that only those provided for the specified language will apply. IntegrationGrantProps Properties for granting the API access to invoke the operation. Initializer import { IntegrationGrantProps } from '@aws-prototyping-sdk/type-safe-api' const integrationGrantProps : IntegrationGrantProps = { ... } Properties Name Type Description method string The http method of this operation. path string The path of this operation in the api. api aws-cdk-lib.aws_apigateway.SpecRestApi The api to grant permissions for. operationId string The ID of the operation for which permissions are being granted. scope constructs.Construct The scope in which permission resources can be created. method Required public readonly method : string ; Type: string The http method of this operation. path Required public readonly path : string ; Type: string The path of this operation in the api. api Required public readonly api : SpecRestApi ; Type: aws-cdk-lib.aws_apigateway.SpecRestApi The api to grant permissions for. operationId Required public readonly operationId : string ; Type: string The ID of the operation for which permissions are being granted. scope Required public readonly scope : Construct ; Type: constructs.Construct The scope in which permission resources can be created. IntegrationRenderProps Properties for rendering an integration into an API Gateway OpenAPI extension. Initializer import { IntegrationRenderProps } from '@aws-prototyping-sdk/type-safe-api' const integrationRenderProps : IntegrationRenderProps = { ... } Properties Name Type Description method string The http method of this operation. path string The path of this operation in the api. operationId string The ID of the operation being rendered. scope constructs.Construct The scope in which the integration is being rendered. method Required public readonly method : string ; Type: string The http method of this operation. path Required public readonly path : string ; Type: string The path of this operation in the api. operationId Required public readonly operationId : string ; Type: string The ID of the operation being rendered. scope Required public readonly scope : Construct ; Type: constructs.Construct The scope in which the integration is being rendered. ManagedRule Initializer import { ManagedRule } from '@aws-prototyping-sdk/type-safe-api' const managedRule : ManagedRule = { ... } Properties Name Type Description name string The name of the managed rule group. vendor string The name of the managed rule group vendor. name Required public readonly name : string ; Type: string The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required public readonly vendor : string ; Type: string The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. MethodAndPath Structure to contain an API operation's method and path. Initializer import { MethodAndPath } from '@aws-prototyping-sdk/type-safe-api' const methodAndPath : MethodAndPath = { ... } Properties Name Type Description method string The http method of this operation. path string The path of this operation in the api. method Required public readonly method : string ; Type: string The http method of this operation. path Required public readonly path : string ; Type: string The path of this operation in the api. ModelConfiguration Configuration for modelling the API. Initializer import { ModelConfiguration } from '@aws-prototyping-sdk/type-safe-api' const modelConfiguration : ModelConfiguration = { ... } Properties Name Type Description language ModelLanguage The language the API model is defined in. options ModelOptions Options for the API model. language Required public readonly language : ModelLanguage ; Type: ModelLanguage The language the API model is defined in. options Required public readonly options : ModelOptions ; Type: ModelOptions Options for the API model. ModelOptions Options for models. Initializer import { ModelOptions } from '@aws-prototyping-sdk/type-safe-api' const modelOptions : ModelOptions = { ... } Properties Name Type Description openapi OpenApiModelOptions Options for the OpenAPI model - required when model language is OPENAPI. smithy SmithyModelOptions Options for the Smithy model - required when model language is SMITHY. openapi Optional public readonly openapi : OpenApiModelOptions ; Type: OpenApiModelOptions Options for the OpenAPI model - required when model language is OPENAPI. smithy Optional public readonly smithy : SmithyModelOptions ; Type: SmithyModelOptions Options for the Smithy model - required when model language is SMITHY. OpenApiModelOptions Options for the OpenAPI model. Initializer import { OpenApiModelOptions } from '@aws-prototyping-sdk/type-safe-api' const openApiModelOptions : OpenApiModelOptions = { ... } Properties Name Type Description title string The title in the OpenAPI specification. title Required public readonly title : string ; Type: string The title in the OpenAPI specification. RuntimeConfiguration Configuration for generated runtime projects. Initializer import { RuntimeConfiguration } from '@aws-prototyping-sdk/type-safe-api' const runtimeConfiguration : RuntimeConfiguration = { ... } Properties Name Type Description languages Language [] The languages that runtime projects will be generated in. options GeneratedCodeOptions Options for the generated runtimes. languages Required public readonly languages : Language []; Type: Language [] The languages that runtime projects will be generated in. These projects can be used to provide type safety for both client and server projects. options Optional public readonly options : GeneratedCodeOptions ; Type: GeneratedCodeOptions Options for the generated runtimes. Note that only options provided for the specified languages will apply. SmithyBuildOptions Options for the smithy build files. Initializer import { SmithyBuildOptions } from '@aws-prototyping-sdk/type-safe-api' const smithyBuildOptions : SmithyBuildOptions = { ... } Properties Name Type Description imports string[] List of imports. plugins {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. ignoreMissingPlugins boolean If a plugin can't be found, Smithy will by default fail the build. maven SmithyMavenConfiguration Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections {[ key: string ]: SmithyProjection } Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . imports Optional public readonly imports : string []; Type: string[] List of imports. plugins Optional public readonly plugins : {[ key : string ] : SmithyPlugin }; Type: {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. ignoreMissingPlugins Optional public readonly ignoreMissingPlugins : boolean ; Type: boolean Default: no ignoreMissingPlugins set in the smithy-build.json file If a plugin can't be found, Smithy will by default fail the build. This setting can be set to true to allow the build to progress even if a plugin can't be found on the classpath. maven Optional public readonly maven : SmithyMavenConfiguration ; Type: SmithyMavenConfiguration Default: the default configuration required for Smithy to OpenAPI conversion Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections Optional public readonly projections : {[ key : string ] : SmithyProjection }; Type: {[ key: string ]: SmithyProjection } Default: no projections Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . SmithyCommon Properties common to smithy plugins and the root smithy build. Initializer import { SmithyCommon } from '@aws-prototyping-sdk/type-safe-api' const smithyCommon : SmithyCommon = { ... } Properties Name Type Description imports string[] List of imports. plugins {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. imports Optional public readonly imports : string []; Type: string[] List of imports. plugins Optional public readonly plugins : {[ key : string ] : SmithyPlugin }; Type: {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. SmithyMavenConfiguration Configuration for smithy maven dependencies. Initializer import { SmithyMavenConfiguration } from '@aws-prototyping-sdk/type-safe-api' const smithyMavenConfiguration : SmithyMavenConfiguration = { ... } Properties Name Type Description dependencies string[] The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repositoryUrls string[] The repository urls used in the build.gradle and smithy-build.json files. dependencies Optional public readonly dependencies : string []; Type: string[] The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repositoryUrls Optional public readonly repositoryUrls : string []; Type: string[] Default: maven central and maven local The repository urls used in the build.gradle and smithy-build.json files. SmithyModelOptions Options for a Smithy model. Initializer import { SmithyModelOptions } from '@aws-prototyping-sdk/type-safe-api' const smithyModelOptions : SmithyModelOptions = { ... } Properties Name Type Description serviceName SmithyServiceName Smithy service name. ignoreGradleWrapper boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. smithyBuildOptions SmithyBuildOptions Smithy build options. serviceName Required public readonly serviceName : SmithyServiceName ; Type: SmithyServiceName Smithy service name. ignoreGradleWrapper Optional public readonly ignoreGradleWrapper : boolean ; Type: boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public readonly ignoreSmithyBuildOutput : boolean ; Type: boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. smithyBuildOptions Optional public readonly smithyBuildOptions : SmithyBuildOptions ; Type: SmithyBuildOptions Smithy build options. SmithyPlugin A smithy plugin. Initializer import { SmithyPlugin } from '@aws-prototyping-sdk/type-safe-api' const smithyPlugin : SmithyPlugin = { ... } Properties Name Type Description service string The service to which the plugin should apply. service Optional public readonly service : string ; Type: string The service to which the plugin should apply. SmithyProjection A smithy build projection. Initializer import { SmithyProjection } from '@aws-prototyping-sdk/type-safe-api' const smithyProjection : SmithyProjection = { ... } Properties Name Type Description imports string[] List of imports. plugins {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. abstract boolean Whether or not the projection is abstract. transforms SmithyTransform [] Transforms to apply to the projection. imports Optional public readonly imports : string []; Type: string[] List of imports. plugins Optional public readonly plugins : {[ key : string ] : SmithyPlugin }; Type: {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. abstract Optional public readonly abstract : boolean ; Type: boolean Whether or not the projection is abstract. transforms Optional public readonly transforms : SmithyTransform []; Type: SmithyTransform [] Transforms to apply to the projection. SmithyServiceName Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html Initializer import { SmithyServiceName } from '@aws-prototyping-sdk/type-safe-api' const smithyServiceName : SmithyServiceName = { ... } Properties Name Type Description namespace string The service namespace. serviceName string The service name. namespace Required public readonly namespace : string ; Type: string The service namespace. Nested namespaces are separated by '.', for example com.company https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id serviceName Required public readonly serviceName : string ; Type: string The service name. Should be PascalCase, for example HelloService https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id SmithyTransform A smithy build transform. Initializer import { SmithyTransform } from '@aws-prototyping-sdk/type-safe-api' const smithyTransform : SmithyTransform = { ... } Properties Name Type Description args {[ key: string ]: any} Arguments for the transform. name string Name of the transform. args Required public readonly args : {[ key : string ] : any }; Type: {[ key: string ]: any} Arguments for the transform. name Required public readonly name : string ; Type: string Name of the transform. TypeSafeApiIntegration Defines an integration for an individual API operation. Initializer import { TypeSafeApiIntegration } from '@aws-prototyping-sdk/type-safe-api' const typeSafeApiIntegration : TypeSafeApiIntegration = { ... } Properties Name Type Description integration Integration The lambda function to service the api operation. authorizer Authorizer The authorizer to use for this api operation (overrides the default). integration Required public readonly integration : Integration ; Type: Integration The lambda function to service the api operation. authorizer Optional public readonly authorizer : Authorizer ; Type: Authorizer The authorizer to use for this api operation (overrides the default). TypeSafeApiModelProjectOptions Initializer import { TypeSafeApiModelProjectOptions } from '@aws-prototyping-sdk/type-safe-api' const typeSafeApiModelProjectOptions : TypeSafeApiModelProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitIgnoreOptions projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. modelLanguage ModelLanguage No description. modelOptions ModelOptions No description. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitIgnoreOptions Optional public readonly gitIgnoreOptions : IgnoreFileOptions ; Type: projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcJsonOptions ; Type: projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. modelLanguage Required public readonly modelLanguage : ModelLanguage ; Type: ModelLanguage modelOptions Required public readonly modelOptions : ModelOptions ; Type: ModelOptions TypeSafeApiOptions Options required alongside an Open API specification to create API Gateway resources. Initializer import { TypeSafeApiOptions } from '@aws-prototyping-sdk/type-safe-api' const typeSafeApiOptions : TypeSafeApiOptions = { ... } Properties Name Type Description integrations {[ key: string ]: TypeSafeApiIntegration } A mapping of API operation to its integration. operationLookup {[ key: string ]: MethodAndPath } Details about each operation. corsOptions aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. integrations Required public readonly integrations : {[ key : string ] : TypeSafeApiIntegration }; Type: {[ key: string ]: TypeSafeApiIntegration } A mapping of API operation to its integration. operationLookup Required public readonly operationLookup : {[ key : string ] : MethodAndPath }; Type: {[ key: string ]: MethodAndPath } Details about each operation. corsOptions Optional public readonly corsOptions : CorsOptions ; Type: aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public readonly defaultAuthorizer : Authorizer ; Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. TypeSafeApiProjectOptions Options for the TypeSafeApiProject. Initializer import { TypeSafeApiProjectOptions } from '@aws-prototyping-sdk/type-safe-api' const typeSafeApiProjectOptions : TypeSafeApiProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitIgnoreOptions projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcJsonOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. infrastructure InfrastructureConfiguration Configuration for generated infrastructure. model ModelConfiguration Configuration for the API model. runtime RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation DocumentationConfiguration Configuration for generated documentation. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitIgnoreOptions Optional public readonly gitIgnoreOptions : IgnoreFileOptions ; Type: projen.IgnoreFileOptions Configuration options for .gitignore file. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcJsonOptions ; Type: projen.ProjenrcJsonOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. infrastructure Required public readonly infrastructure : InfrastructureConfiguration ; Type: InfrastructureConfiguration Configuration for generated infrastructure. model Required public readonly model : ModelConfiguration ; Type: ModelConfiguration Configuration for the API model. runtime Required public readonly runtime : RuntimeConfiguration ; Type: RuntimeConfiguration Configuration for generated runtime projects (containing types, clients and server code). documentation Optional public readonly documentation : DocumentationConfiguration ; Type: DocumentationConfiguration Configuration for generated documentation. TypeSafeApiWebAclOptions Configuration for the Web ACL associated with the API. Initializer import { TypeSafeApiWebAclOptions } from '@aws-prototyping-sdk/type-safe-api' const typeSafeApiWebAclOptions : TypeSafeApiWebAclOptions = { ... } Properties Name Type Description cidrAllowList CidrAllowList List of cidr ranges to allow. disable boolean If set to true, no WebACL will be associated with the API. managedRules ManagedRule [] List of managed rules to apply to the web acl. cidrAllowList Optional public readonly cidrAllowList : CidrAllowList ; Type: CidrAllowList Default: undefined List of cidr ranges to allow. disable Optional public readonly disable : boolean ; Type: boolean Default: false If set to true, no WebACL will be associated with the API. You can also use this option if you would like to create your own WebACL and associate it yourself. managedRules Optional public readonly managedRules : ManagedRule []; Type: ManagedRule [] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. TypeSafeRestApiProps Configuration for the TypeSafeRestApi construct. Initializer import { TypeSafeRestApiProps } from '@aws-prototyping-sdk/type-safe-api' const typeSafeRestApiProps : TypeSafeRestApiProps = { ... } Properties Name Type Description cloudWatchRole boolean Automatically configure an AWS CloudWatch role for API Gateway. deploy boolean Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deployOptions aws-cdk-lib.aws_apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description string A description of the RestApi construct. disableExecuteApiEndpoint boolean Specifies whether clients can invoke the API using the default execute-api endpoint. domainName aws-cdk-lib.aws_apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpointExportName string Export name for the CfnOutput containing the API endpoint. endpointTypes aws-cdk-lib.aws_apigateway.EndpointType[] A list of the endpoint types of the API. failOnWarnings boolean Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters {[ key: string ]: string} Custom header parameters for the request. policy aws-cdk-lib.aws_iam.PolicyDocument A policy document that contains the permissions for this RestApi. restApiName string A name for the API Gateway RestApi resource. retainDeployments boolean Retains old deployment resources when the API changes. integrations {[ key: string ]: TypeSafeApiIntegration } A mapping of API operation to its integration. operationLookup {[ key: string ]: MethodAndPath } Details about each operation. corsOptions aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. specPath string Path to the JSON open api spec. webAclOptions TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. cloudWatchRole Optional public readonly cloudWatchRole : boolean ; Type: boolean Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional public readonly deploy : boolean ; Type: boolean Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deployOptions Optional public readonly deployOptions : StageOptions ; Type: aws-cdk-lib.aws_apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional public readonly description : string ; Type: string Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disableExecuteApiEndpoint Optional public readonly disableExecuteApiEndpoint : boolean ; Type: boolean Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domainName Optional public readonly domainName : DomainNameOptions ; Type: aws-cdk-lib.aws_apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpointExportName Optional public readonly endpointExportName : string ; Type: string Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpointTypes Optional public readonly endpointTypes : EndpointType []; Type: aws-cdk-lib.aws_apigateway.EndpointType[] Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. failOnWarnings Optional public readonly failOnWarnings : boolean ; Type: boolean Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional public readonly parameters : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional public readonly policy : PolicyDocument ; Type: aws-cdk-lib.aws_iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. restApiName Optional public readonly restApiName : string ; Type: string Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retainDeployments Optional public readonly retainDeployments : boolean ; Type: boolean Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required public readonly integrations : {[ key : string ] : TypeSafeApiIntegration }; Type: {[ key: string ]: TypeSafeApiIntegration } A mapping of API operation to its integration. operationLookup Required public readonly operationLookup : {[ key : string ] : MethodAndPath }; Type: {[ key: string ]: MethodAndPath } Details about each operation. corsOptions Optional public readonly corsOptions : CorsOptions ; Type: aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public readonly defaultAuthorizer : Authorizer ; Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. specPath Required public readonly specPath : string ; Type: string Path to the JSON open api spec. webAclOptions Optional public readonly webAclOptions : TypeSafeApiWebAclOptions ; Type: TypeSafeApiWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. Classes Authorizer An authorizer for authorizing API requests. Initializers import { Authorizer } from '@aws-prototyping-sdk/type-safe-api' new Authorizer ( props : AuthorizerProps ) Name Type Description props AuthorizerProps No description. props Required Type: AuthorizerProps Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. Authorizers Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct. Initializers import { Authorizers } from '@aws-prototyping-sdk/type-safe-api' new Authorizers () Name Type Description Static Functions Name Description cognito A Cognito User Pools authorizer. custom A custom authorizer. iam An IAM authorizer which uses AWS signature version 4 to authorize requests. none No authorizer. cognito import { Authorizers } from '@aws-prototyping-sdk/type-safe-api' Authorizers . cognito ( props : CognitoAuthorizerProps ) A Cognito User Pools authorizer. props Required Type: CognitoAuthorizerProps custom import { Authorizers } from '@aws-prototyping-sdk/type-safe-api' Authorizers . custom ( props : CustomAuthorizerProps ) A custom authorizer. props Required Type: CustomAuthorizerProps iam import { Authorizers } from '@aws-prototyping-sdk/type-safe-api' Authorizers . iam () An IAM authorizer which uses AWS signature version 4 to authorize requests. none import { Authorizers } from '@aws-prototyping-sdk/type-safe-api' Authorizers . none () No authorizer. CognitoAuthorizer An authorizer that uses Cognito identity or access tokens. Initializers import { CognitoAuthorizer } from '@aws-prototyping-sdk/type-safe-api' new CognitoAuthorizer ( props : CognitoAuthorizerProps ) Name Type Description props CognitoAuthorizerProps No description. props Required Type: CognitoAuthorizerProps Methods Name Description withScopes Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. withScopes public withScopes ( authorizationScopes : string ) : CognitoAuthorizer Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes authorizationScopes Required Type: string the scopes to apply. Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. userPools aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. userPools Required public readonly userPools : IUserPool []; Type: aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. CustomAuthorizer An authorizer that uses a lambda function to authorize requests. Initializers import { CustomAuthorizer } from '@aws-prototyping-sdk/type-safe-api' new CustomAuthorizer ( props : CustomAuthorizerProps ) Name Type Description props CustomAuthorizerProps No description. props Required Type: CustomAuthorizerProps Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizerResultTtlInSeconds number The number of seconds during which the authorizer result is cached. function aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. identitySource string The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. authorizerResultTtlInSeconds Required public readonly authorizerResultTtlInSeconds : number ; Type: number The number of seconds during which the authorizer result is cached. function Required public readonly function : IFunction ; Type: aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. identitySource Required public readonly identitySource : string ; Type: string The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Required public readonly type : CustomAuthorizerType ; Type: CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IamAuthorizer An IAM authorizer. Initializers import { IamAuthorizer } from '@aws-prototyping-sdk/type-safe-api' new IamAuthorizer () Name Type Description Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. Integration An integration for an API operation. You can extend this to implement your own integration if you like. Initializers import { Integration } from '@aws-prototyping-sdk/type-safe-api' new Integration () Name Type Description Methods Name Description grant Grant permissions for the API to invoke the integration. render Render the integration into an API Gateway OpenAPI extension. grant public grant ( _props : IntegrationGrantProps ) : void Grant permissions for the API to invoke the integration. _props Required Type: IntegrationGrantProps render public render ( props : IntegrationRenderProps ) : ApiGatewayIntegration Render the integration into an API Gateway OpenAPI extension. props Required Type: IntegrationRenderProps Integrations A collection of integrations to connect API operations with a backend to service requests. Initializers import { Integrations } from '@aws-prototyping-sdk/type-safe-api' new Integrations () Name Type Description Static Functions Name Description lambda An integration that invokes a lambda function to service the request. lambda import { Integrations } from '@aws-prototyping-sdk/type-safe-api' Integrations . lambda ( lambdaFunction : IFunction ) An integration that invokes a lambda function to service the request. lambdaFunction Required Type: aws-cdk-lib.aws_lambda.IFunction the function to invoke. LambdaIntegration A lambda integration. Initializers import { LambdaIntegration } from '@aws-prototyping-sdk/type-safe-api' new LambdaIntegration ( lambdaFunction : IFunction ) Name Type Description lambdaFunction aws-cdk-lib.aws_lambda.IFunction No description. lambdaFunction Required Type: aws-cdk-lib.aws_lambda.IFunction Methods Name Description grant Grant API Gateway permissions to invoke the lambda. render Render the lambda integration as a snippet of OpenAPI. grant public grant ( __0 : IntegrationGrantProps ) : void Grant API Gateway permissions to invoke the lambda. __0 Required Type: IntegrationGrantProps render public render ( props : IntegrationRenderProps ) : ApiGatewayIntegration Render the lambda integration as a snippet of OpenAPI. props Required Type: IntegrationRenderProps NoneAuthorizer No authorizer. Initializers import { NoneAuthorizer } from '@aws-prototyping-sdk/type-safe-api' new NoneAuthorizer () Name Type Description Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. TypeSafeApiModelProject Initializers import { TypeSafeApiModelProject } from '@aws-prototyping-sdk/type-safe-api' new TypeSafeApiModelProject ( options : TypeSafeApiModelProjectOptions ) Name Type Description options TypeSafeApiModelProjectOptions No description. options Required Type: TypeSafeApiModelProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Consider a set of files as \"generated\". postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( _glob : string ) : void Consider a set of files as \"generated\". This method is implemented by derived classes and used for example, to add git attributes to tell GitHub that certain files are generated. _glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. generateTask projen.Task No description. parsedSpecFile string No description. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. generateTask Required public readonly generateTask : Task ; Type: projen.Task parsedSpecFile Required public readonly parsedSpecFile : string ; Type: string Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. TypeSafeApiProject Project for a type-safe API, defined using Smithy or OpenAPI. Generates a CDK construct to deploy your API, as well as client and server code to help build your API quickly. Initializers import { TypeSafeApiProject } from '@aws-prototyping-sdk/type-safe-api' new TypeSafeApiProject ( options : TypeSafeApiProjectOptions ) Name Type Description options TypeSafeApiProjectOptions No description. options Required Type: TypeSafeApiProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Consider a set of files as \"generated\". postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( _glob : string ) : void Consider a set of files as \"generated\". This method is implemented by derived classes and used for example, to add git attributes to tell GitHub that certain files are generated. _glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. infrastructure GeneratedCodeProjects Generated infrastructure projects. runtime GeneratedCodeProjects Generated runtime projects. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. infrastructure Required public readonly infrastructure : GeneratedCodeProjects ; Type: GeneratedCodeProjects Generated infrastructure projects. Only the property corresponding to infrastructure.language will be defined. runtime Required public readonly runtime : GeneratedCodeProjects ; Type: GeneratedCodeProjects Generated runtime projects. When runtime.languages includes the corresponding language, the project can be assumed to be defined. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Members Name Description TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. DocumentationFormat Formats for documentation generation. Members Name Description HTML_REDOC HTML Documentation generated by redoc. HTML2 OpenAPI Generator 'html2' documentation. MARKDOWN OpenAPI Generator 'markdown' documentation. PLANTUML OpenAPI Generator 'plantuml' documentation. HTML_REDOC HTML Documentation generated by redoc. Redocly/redoc HTML2 OpenAPI Generator 'html2' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/html2.md MARKDOWN OpenAPI Generator 'markdown' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/markdown.md PLANTUML OpenAPI Generator 'plantuml' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/plantuml.md Language Supported languages for code generation. Members Name Description TYPESCRIPT No description. PYTHON No description. JAVA No description. TYPESCRIPT PYTHON JAVA ModelLanguage The model definition language. Members Name Description SMITHY Smithy. OPENAPI OpenAPI. SMITHY Smithy. https://smithy.io/2.0/ OPENAPI OpenAPI. https://www.openapis.org/","title":"Index"},{"location":"typescript/type-safe-api/index.html#type-safe-api","text":"Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated client and server types, infrastructure, documentation, and automatic input validation! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate \"runtime\" projects from your API definition in your desired languages, which can be utilised both client side for interacting with your API, or server side for implementing your API. The project also generates a type-safe CDK construct which ensures an integration is provided for every API operation. Code is generated at build time, so when you change your API model, just rebuild and you'll see your changes reflected in the generated code.","title":"Type Safe API"},{"location":"typescript/type-safe-api/index.html#quick-start-typescript","text":"This section describes how to get started quickly, with TypeScript infrastructure and lambda handlers. See the end of the README for examples in Python and Java .","title":"Quick Start: TypeScript"},{"location":"typescript/type-safe-api/index.html#project","text":"The TypeSafeApiProject projen project sets up the project structure for you. You have a few parameters to consider when creating the project: model - Configure the API model. Select a language for the model of either Smithy or OpenAPI v3 , and supply options.smithy or options.openapi depending on your choice. runtime - Configure the generated runtime projects. Include one or more languages you wish to write your client and server-side code in. These projects contain generated types defined in your model, as well as type-safe lambda handler wrappers for implementing each operation. infrastructure - Pick the language you are writing your CDK infrastructure in. A construct will be generated in this language which can be used to deploy the API. documentation - Specify formats to generate documentation in. It's recommended that these projects are used as part of an nx-monorepo project (eg. by specifying parent: myMonorepoProject ), as it makes setting up dependencies much easier, particularly when extending your project further with a CDK app and lambda functions. Depending on the model.language you choose, you must supply the corresponding model.options . For example: new TypeSafeApiProject ({ model : { language : ModelLanguage.SMITHY , options : { smithy : { serviceName : { namespace : 'com.mycompany' , serviceName : 'MyApi' , }, }, }, }, ... }); new TypeSafeApiProject ({ model : { language : ModelLanguage.OPENAPI , options : { openapi : { title : 'MyApi' , }, }, }, ... }); model.options.smithy allows for further customisation of the Smithy project, eg: new TypeSafeApiProject ({ model : { language : ModelLanguage.SMITHY , options : { smithy : { serviceName : { namespace : 'com.mycompany' , serviceName : 'MyApi' , }, // By default, the contents of the smithy build output directory `model/output` will be ignored by source control. // Set this to false to include it, for example if you are generating clients directly from the smithy model. ignoreSmithyBuildOutput : false , // The gradle wrapper used for the smithy build is copied from the PDK itself if it does not already exist in // the 'smithy' folder. By default, this gradle wrapper will be ignored by source control. // Set this to false if you would like to check the gradle wrapper in to source control, for example if you want // to use a different version of the gradle wrapper in your project. ignoreGradleWrapper : false , // Use smithyBuildOptions to control what is added to smithy-build.json. smithyBuildOptions : { projections : { // You can customise the built-in openapi projection, used to generate the OpenAPI specification. openapi : { plugins : { openapi : { // Customise the openapi projection here. // See: https://smithy.io/2.0/guides/converting-to-openapi.html useIntegerType : true , ... } } }, // You can add new projections here too \"ts-client\" : { \"plugins\" : { \"typescript-codegen\" : { \"package\" : \"@my-test/smithy-generated-typescript-client\" , \"packageVersion\" : \"0.0.1\" } } } }, // Note that any additional dependencies required for projections/plugins can be added here, which in turn will // add them to the `smithy/build.gradle` file maven : { dependencies : [ \"software.amazon.smithy:smithy-validation-model:1.27.2\" , ] } } }, } }, ... });","title":"Project"},{"location":"typescript/type-safe-api/index.html#smithy-idl","text":"Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message }","title":"Smithy IDL"},{"location":"typescript/type-safe-api/index.html#openapi-specification","text":"Your model/src/main/openapi/main.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ model/src/main/openapi/ |_ main.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where main.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message","title":"OpenAPI Specification"},{"location":"typescript/type-safe-api/index.html#construct","text":"A CDK construct is generated in the infrastructure/<language> directory which provides a type-safe interface for creating an API Gateway API based on your model. You can extend or instantiate this construct in your CDK infrastructure project. You'll get a type error if you forget to define an integration for an operation defined in your api. import { Authorizers , Integrations } from '@aws-prototyping-sdk/type-safe-api' ; import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs' ; import { Construct } from 'constructs' ; import { Api } from 'myapi-typescript-infra' ; /** * An example of how to wire lambda handler functions to the API */ export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { defaultAuthorizer : Authorizers.iam (), integrations : { // Every operation defined in your API must have an integration defined! sayHello : { integration : Integrations.lambda ( new NodejsFunction ( scope , 'say-hello' )), }, }, }); } }","title":"Construct"},{"location":"typescript/type-safe-api/index.html#runtime-clients","text":"The generated runtime projects include clients which can be used for type-safe interaction with your API.","title":"Runtime: Clients"},{"location":"typescript/type-safe-api/index.html#lambda-handler-wrappers","text":"Lambda handler wrappers are also importable from the generated runtime projects. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your model.","title":"Lambda Handler Wrappers"},{"location":"typescript/type-safe-api/index.html#interceptors","text":"The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next .","title":"Interceptors"},{"location":"typescript/type-safe-api/index.html#quick-start-python","text":"This guide assumes you want to write your CDK infrastructure in Python and your lambda handlers in Python, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like. Just specify the language in runtime.languages for any language you would like to write lambda handlers in.","title":"Quick Start: Python"},{"location":"typescript/type-safe-api/index.html#quick-start-java","text":"This guide assumes you want to write your CDK infrastructure in Java and your lambda handlers in Java, however note that you your infrastructure language and lambda handler language(s) are not tied to one another, you can mix and match as you like.","title":"Quick Start: Java"},{"location":"typescript/type-safe-api/index.html#other-details","text":"","title":"Other Details"},{"location":"typescript/type-safe-api/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/type-safe-api/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/type-safe-api/index.html#typesaferestapi","text":"A construct for creating an api gateway rest api based on the definition in the OpenAPI spec.","title":"TypeSafeRestApi "},{"location":"typescript/type-safe-api/index.html#structs","text":"","title":"Structs "},{"location":"typescript/type-safe-api/index.html#apigatewayintegration","text":"Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html","title":"ApiGatewayIntegration "},{"location":"typescript/type-safe-api/index.html#apigatewayintegrationresponse","text":"API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html","title":"ApiGatewayIntegrationResponse "},{"location":"typescript/type-safe-api/index.html#apigatewayintegrationtlsconfig","text":"Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html","title":"ApiGatewayIntegrationTlsConfig "},{"location":"typescript/type-safe-api/index.html#authorizerprops","text":"Properties for an authorizer.","title":"AuthorizerProps "},{"location":"typescript/type-safe-api/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"typescript/type-safe-api/index.html#cognitoauthorizerprops","text":"Properties used to configure a cognito authorizer.","title":"CognitoAuthorizerProps "},{"location":"typescript/type-safe-api/index.html#customauthorizerprops","text":"Properties used to configure a custom authorizer.","title":"CustomAuthorizerProps "},{"location":"typescript/type-safe-api/index.html#documentationconfiguration","text":"Configuration for generated documentation.","title":"DocumentationConfiguration "},{"location":"typescript/type-safe-api/index.html#generatedcodeoptions","text":"Options for generated clients.","title":"GeneratedCodeOptions "},{"location":"typescript/type-safe-api/index.html#generatedcodeprojects","text":"Generated code projects.","title":"GeneratedCodeProjects "},{"location":"typescript/type-safe-api/index.html#infrastructureconfiguration","text":"Configuration for generated infrastructure.","title":"InfrastructureConfiguration "},{"location":"typescript/type-safe-api/index.html#integrationgrantprops","text":"Properties for granting the API access to invoke the operation.","title":"IntegrationGrantProps "},{"location":"typescript/type-safe-api/index.html#integrationrenderprops","text":"Properties for rendering an integration into an API Gateway OpenAPI extension.","title":"IntegrationRenderProps "},{"location":"typescript/type-safe-api/index.html#managedrule","text":"","title":"ManagedRule "},{"location":"typescript/type-safe-api/index.html#methodandpath","text":"Structure to contain an API operation's method and path.","title":"MethodAndPath "},{"location":"typescript/type-safe-api/index.html#modelconfiguration","text":"Configuration for modelling the API.","title":"ModelConfiguration "},{"location":"typescript/type-safe-api/index.html#modeloptions","text":"Options for models.","title":"ModelOptions "},{"location":"typescript/type-safe-api/index.html#openapimodeloptions","text":"Options for the OpenAPI model.","title":"OpenApiModelOptions "},{"location":"typescript/type-safe-api/index.html#runtimeconfiguration","text":"Configuration for generated runtime projects.","title":"RuntimeConfiguration "},{"location":"typescript/type-safe-api/index.html#smithybuildoptions","text":"Options for the smithy build files.","title":"SmithyBuildOptions "},{"location":"typescript/type-safe-api/index.html#smithycommon","text":"Properties common to smithy plugins and the root smithy build.","title":"SmithyCommon "},{"location":"typescript/type-safe-api/index.html#smithymavenconfiguration","text":"Configuration for smithy maven dependencies.","title":"SmithyMavenConfiguration "},{"location":"typescript/type-safe-api/index.html#smithymodeloptions","text":"Options for a Smithy model.","title":"SmithyModelOptions "},{"location":"typescript/type-safe-api/index.html#smithyplugin","text":"A smithy plugin.","title":"SmithyPlugin "},{"location":"typescript/type-safe-api/index.html#smithyprojection","text":"A smithy build projection.","title":"SmithyProjection "},{"location":"typescript/type-safe-api/index.html#smithyservicename","text":"Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html","title":"SmithyServiceName "},{"location":"typescript/type-safe-api/index.html#smithytransform","text":"A smithy build transform.","title":"SmithyTransform "},{"location":"typescript/type-safe-api/index.html#typesafeapiintegration","text":"Defines an integration for an individual API operation.","title":"TypeSafeApiIntegration "},{"location":"typescript/type-safe-api/index.html#typesafeapimodelprojectoptions","text":"","title":"TypeSafeApiModelProjectOptions "},{"location":"typescript/type-safe-api/index.html#typesafeapioptions","text":"Options required alongside an Open API specification to create API Gateway resources.","title":"TypeSafeApiOptions "},{"location":"typescript/type-safe-api/index.html#typesafeapiprojectoptions","text":"Options for the TypeSafeApiProject.","title":"TypeSafeApiProjectOptions "},{"location":"typescript/type-safe-api/index.html#typesafeapiwebacloptions","text":"Configuration for the Web ACL associated with the API.","title":"TypeSafeApiWebAclOptions "},{"location":"typescript/type-safe-api/index.html#typesaferestapiprops","text":"Configuration for the TypeSafeRestApi construct.","title":"TypeSafeRestApiProps "},{"location":"typescript/type-safe-api/index.html#classes","text":"","title":"Classes "},{"location":"typescript/type-safe-api/index.html#authorizer","text":"An authorizer for authorizing API requests.","title":"Authorizer "},{"location":"typescript/type-safe-api/index.html#authorizers_2","text":"Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct.","title":"Authorizers "},{"location":"typescript/type-safe-api/index.html#cognitoauthorizer","text":"An authorizer that uses Cognito identity or access tokens.","title":"CognitoAuthorizer "},{"location":"typescript/type-safe-api/index.html#customauthorizer","text":"An authorizer that uses a lambda function to authorize requests.","title":"CustomAuthorizer "},{"location":"typescript/type-safe-api/index.html#iamauthorizer","text":"An IAM authorizer.","title":"IamAuthorizer "},{"location":"typescript/type-safe-api/index.html#integration","text":"An integration for an API operation. You can extend this to implement your own integration if you like.","title":"Integration "},{"location":"typescript/type-safe-api/index.html#integrations_1","text":"A collection of integrations to connect API operations with a backend to service requests.","title":"Integrations "},{"location":"typescript/type-safe-api/index.html#lambdaintegration","text":"A lambda integration.","title":"LambdaIntegration "},{"location":"typescript/type-safe-api/index.html#noneauthorizer","text":"No authorizer.","title":"NoneAuthorizer "},{"location":"typescript/type-safe-api/index.html#typesafeapimodelproject","text":"","title":"TypeSafeApiModelProject "},{"location":"typescript/type-safe-api/index.html#typesafeapiproject","text":"Project for a type-safe API, defined using Smithy or OpenAPI. Generates a CDK construct to deploy your API, as well as client and server code to help build your API quickly.","title":"TypeSafeApiProject "},{"location":"typescript/type-safe-api/index.html#enums","text":"","title":"Enums "},{"location":"typescript/type-safe-api/index.html#customauthorizertype","text":"The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type","title":"CustomAuthorizerType "},{"location":"typescript/type-safe-api/index.html#documentationformat","text":"Formats for documentation generation.","title":"DocumentationFormat "},{"location":"typescript/type-safe-api/index.html#language","text":"Supported languages for code generation.","title":"Language "},{"location":"typescript/type-safe-api/index.html#modellanguage","text":"The model definition language.","title":"ModelLanguage "}]}