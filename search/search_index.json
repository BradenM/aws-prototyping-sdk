{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Prototyping SDK (PDK) The PDK contains a set of re-usable CDK constructs, vended in multiple languages for use in prototyping engagements.","title":"AWS Prototyping SDK (PDK)"},{"location":"#aws-prototyping-sdk-pdk","text":"The PDK contains a set of re-usable CDK constructs, vended in multiple languages for use in prototyping engagements.","title":"AWS Prototyping SDK (PDK)"},{"location":"java/pdk_pipeline/API/","text":"pdk_pipeline TODO API Reference Constructs PDKPipeline An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals. Initializers import software.aws.awsprototypingsdk.pdk_pipeline.PDKPipeline ; PDKPipeline . Builder . create ( Construct scope , java . lang . String id ) . synth ( IFileSetProducer ) // .assetPublishingCodeBuildDefaults(CodeBuildOptions) // .cliVersion(java.lang.String) // .codeBuildDefaults(CodeBuildOptions) // .codePipeline(Pipeline) // .crossAccountKeys(java.lang.Boolean) // .dockerCredentials(java.util.List<DockerCredential>) // .dockerEnabledForSelfMutation(java.lang.Boolean) // .dockerEnabledForSynth(java.lang.Boolean) // .pipelineName(java.lang.String) // .publishAssetsInParallel(java.lang.Boolean) // .reuseCrossRegionSupportStacks(java.lang.Boolean) // .selfMutation(java.lang.Boolean) // .selfMutationCodeBuildDefaults(CodeBuildOptions) // .synthCodeBuildDefaults(CodeBuildOptions) . primarySynthDirectory ( java . lang . String ) . repositoryName ( java . lang . String ) // .defaultBranchName(java.lang.String) // .prBuildChecker(java.lang.Boolean) // .synthShellStepPartialProps(ShellStepProps) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion java.lang.String CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline software.amazon.awscdk.services.codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys java.lang.Boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials java.util.List A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation java.lang.Boolean Enable Docker for the self-mutate step. dockerEnabledForSynth java.lang.Boolean Enable Docker for the 'synth' step. pipelineName java.lang.String The name of the CodePipeline pipeline. publishAssetsInParallel java.lang.Boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks java.lang.Boolean Reuse the same cross region support stack for all pipelines in the App. selfMutation java.lang.Boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName java.lang.String Name of the CodeCommit repository to create. defaultBranchName java.lang.String Branch to trigger the pipeline execution. prBuildChecker java.lang.Boolean Enables a build job to trigger on PR merges to the defaultBranchName. synthShellStepPartialProps software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. scope Required Type: software.constructs.Construct id Required Type: java.lang.String synth Required Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . assetPublishingCodeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion Optional Type: java.lang.String Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. codeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. codePipeline Optional Type: software.amazon.awscdk.services.codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] crossAccountKeys Optional Type: java.lang.Boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. dockerCredentials Optional Type: java.util.List Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. dockerEnabledForSelfMutation Optional Type: java.lang.Boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. dockerEnabledForSynth Optional Type: java.lang.Boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipelineName Optional Type: java.lang.String Default: Automatically generated The name of the CodePipeline pipeline. publishAssetsInParallel Optional Type: java.lang.Boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuseCrossRegionSupportStacks Optional Type: java.lang.Boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. selfMutation Optional Type: java.lang.Boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . selfMutationCodeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory Required Type: java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName Required Type: java.lang.String Name of the CodeCommit repository to create. defaultBranchName Optional Type: java.lang.String Default: mainline Branch to trigger the pipeline execution. prBuildChecker Optional Type: java.lang.Boolean Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build. synthShellStepPartialProps Optional Type: software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. Methods Name Description toString Returns a string representation of this construct. addStage Deploy a single Stage by itself. addWave Add a Wave to the pipeline, for deploying multiple Stages in parallel. buildPipeline Send the current pipeline definition to the engine, and construct the pipeline. toString public java . lang . String toString () Returns a string representation of this construct. addStage public StageDeployment addStage ( Stage stage ) public StageDeployment addStage ( Stage stage , AddStageOpts options ) Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies. stage Required Type: software.amazon.awscdk.Stage options Optional Type: software.amazon.awscdk.pipelines.AddStageOpts addWave public Wave addWave ( java . lang . String id ) public Wave addWave ( java . lang . String id , WaveOptions options ) Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: ts declare const pipeline: pipelines.CodePipeline; const wave = pipeline.addWave('MyWave'); wave.addStage(new MyApplicationStage(this, 'Stage1')); wave.addStage(new MyApplicationStage(this, 'Stage2')); id Required Type: java.lang.String options Optional Type: software.amazon.awscdk.pipelines.WaveOptions buildPipeline public void buildPipeline () Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method. Static Functions Name Description isConstruct Checks if x is a construct. ~~ isConstruct ~~ import software.aws.awsprototypingsdk.pdk_pipeline.PDKPipeline ; PDKPipeline . isConstruct ( java . lang . Object x ) Checks if x is a construct. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. cloudAssemblyFileSet software.amazon.awscdk.pipelines.FileSet The FileSet tha contains the cloud assembly. synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves java.util.List The waves in this pipeline. pipeline software.amazon.awscdk.services.codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. synthProject software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the Synth. codeRepository software.amazon.awscdk.services.codecommit.Repository No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. cloudAssemblyFileSet Required public FileSet getCloudAssemblyFileSet (); Type: software.amazon.awscdk.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step. synth Required public IFileSetProducer getSynth (); Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves Required public java . util . List < Wave > getWaves (); Type: java.util.List The waves in this pipeline. pipeline Required public Pipeline getPipeline (); Type: software.amazon.awscdk.services.codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built. synthProject Required public IProject getSynthProject (); Type: software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built. codeRepository Required public Repository getCodeRepository (); Type: software.amazon.awscdk.services.codecommit.Repository Structs PDKPipelineProps Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained. Initializer import software.aws.awsprototypingsdk.pdk_pipeline.PDKPipelineProps ; PDKPipelineProps . builder () . synth ( IFileSetProducer ) // .assetPublishingCodeBuildDefaults(CodeBuildOptions) // .cliVersion(java.lang.String) // .codeBuildDefaults(CodeBuildOptions) // .codePipeline(Pipeline) // .crossAccountKeys(java.lang.Boolean) // .dockerCredentials(java.util.List<DockerCredential>) // .dockerEnabledForSelfMutation(java.lang.Boolean) // .dockerEnabledForSynth(java.lang.Boolean) // .pipelineName(java.lang.String) // .publishAssetsInParallel(java.lang.Boolean) // .reuseCrossRegionSupportStacks(java.lang.Boolean) // .selfMutation(java.lang.Boolean) // .selfMutationCodeBuildDefaults(CodeBuildOptions) // .synthCodeBuildDefaults(CodeBuildOptions) . primarySynthDirectory ( java . lang . String ) . repositoryName ( java . lang . String ) // .defaultBranchName(java.lang.String) // .prBuildChecker(java.lang.Boolean) // .synthShellStepPartialProps(ShellStepProps) . build (); Properties Name Type Description synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion java.lang.String CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline software.amazon.awscdk.services.codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys java.lang.Boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials java.util.List A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation java.lang.Boolean Enable Docker for the self-mutate step. dockerEnabledForSynth java.lang.Boolean Enable Docker for the 'synth' step. pipelineName java.lang.String The name of the CodePipeline pipeline. publishAssetsInParallel java.lang.Boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks java.lang.Boolean Reuse the same cross region support stack for all pipelines in the App. selfMutation java.lang.Boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName java.lang.String Name of the CodeCommit repository to create. defaultBranchName java.lang.String Branch to trigger the pipeline execution. prBuildChecker java.lang.Boolean Enables a build job to trigger on PR merges to the defaultBranchName. synthShellStepPartialProps software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. synth Required public IFileSetProducer getSynth (); Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . assetPublishingCodeBuildDefaults Optional public CodeBuildOptions getAssetPublishingCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion Optional public java . lang . String getCliVersion (); Type: java.lang.String Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. codeBuildDefaults Optional public CodeBuildOptions getCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. codePipeline Optional public Pipeline getCodePipeline (); Type: software.amazon.awscdk.services.codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] crossAccountKeys Optional public java . lang . Boolean getCrossAccountKeys (); Type: java.lang.Boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. dockerCredentials Optional public java . util . List < DockerCredential > getDockerCredentials (); Type: java.util.List Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. dockerEnabledForSelfMutation Optional public java . lang . Boolean getDockerEnabledForSelfMutation (); Type: java.lang.Boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. dockerEnabledForSynth Optional public java . lang . Boolean getDockerEnabledForSynth (); Type: java.lang.Boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipelineName Optional public java . lang . String getPipelineName (); Type: java.lang.String Default: Automatically generated The name of the CodePipeline pipeline. publishAssetsInParallel Optional public java . lang . Boolean getPublishAssetsInParallel (); Type: java.lang.Boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuseCrossRegionSupportStacks Optional public java . lang . Boolean getReuseCrossRegionSupportStacks (); Type: java.lang.Boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. selfMutation Optional public java . lang . Boolean getSelfMutation (); Type: java.lang.Boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . selfMutationCodeBuildDefaults Optional public CodeBuildOptions getSelfMutationCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults Optional public CodeBuildOptions getSynthCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory Required public java . lang . String getPrimarySynthDirectory (); Type: java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName Required public java . lang . String getRepositoryName (); Type: java.lang.String Name of the CodeCommit repository to create. defaultBranchName Optional public java . lang . String getDefaultBranchName (); Type: java.lang.String Default: mainline Branch to trigger the pipeline execution. prBuildChecker Optional public java . lang . Boolean getPrBuildChecker (); Type: java.lang.Boolean Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build. synthShellStepPartialProps Optional public ShellStepProps getSynthShellStepPartialProps (); Type: software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps.","title":"API"},{"location":"java/pdk_pipeline/API/#pdk_pipeline","text":"TODO","title":"pdk_pipeline"},{"location":"java/pdk_pipeline/API/#api-reference","text":"","title":"API Reference "},{"location":"java/pdk_pipeline/API/#constructs","text":"","title":"Constructs "},{"location":"java/pdk_pipeline/API/#pdkpipeline","text":"An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals.","title":"PDKPipeline "},{"location":"java/pdk_pipeline/API/#initializers","text":"import software.aws.awsprototypingsdk.pdk_pipeline.PDKPipeline ; PDKPipeline . Builder . create ( Construct scope , java . lang . String id ) . synth ( IFileSetProducer ) // .assetPublishingCodeBuildDefaults(CodeBuildOptions) // .cliVersion(java.lang.String) // .codeBuildDefaults(CodeBuildOptions) // .codePipeline(Pipeline) // .crossAccountKeys(java.lang.Boolean) // .dockerCredentials(java.util.List<DockerCredential>) // .dockerEnabledForSelfMutation(java.lang.Boolean) // .dockerEnabledForSynth(java.lang.Boolean) // .pipelineName(java.lang.String) // .publishAssetsInParallel(java.lang.Boolean) // .reuseCrossRegionSupportStacks(java.lang.Boolean) // .selfMutation(java.lang.Boolean) // .selfMutationCodeBuildDefaults(CodeBuildOptions) // .synthCodeBuildDefaults(CodeBuildOptions) . primarySynthDirectory ( java . lang . String ) . repositoryName ( java . lang . String ) // .defaultBranchName(java.lang.String) // .prBuildChecker(java.lang.Boolean) // .synthShellStepPartialProps(ShellStepProps) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion java.lang.String CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline software.amazon.awscdk.services.codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys java.lang.Boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials java.util.List A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation java.lang.Boolean Enable Docker for the self-mutate step. dockerEnabledForSynth java.lang.Boolean Enable Docker for the 'synth' step. pipelineName java.lang.String The name of the CodePipeline pipeline. publishAssetsInParallel java.lang.Boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks java.lang.Boolean Reuse the same cross region support stack for all pipelines in the App. selfMutation java.lang.Boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName java.lang.String Name of the CodeCommit repository to create. defaultBranchName java.lang.String Branch to trigger the pipeline execution. prBuildChecker java.lang.Boolean Enables a build job to trigger on PR merges to the defaultBranchName. synthShellStepPartialProps software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands.","title":"Initializers "},{"location":"java/pdk_pipeline/API/#scoperequired","text":"Type: software.constructs.Construct","title":"scopeRequired "},{"location":"java/pdk_pipeline/API/#idrequired","text":"Type: java.lang.String","title":"idRequired "},{"location":"java/pdk_pipeline/API/#synthrequired","text":"Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out .","title":"synthRequired "},{"location":"java/pdk_pipeline/API/#assetpublishingcodebuilddefaultsoptional","text":"Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects.","title":"assetPublishingCodeBuildDefaultsOptional "},{"location":"java/pdk_pipeline/API/#cliversionoptional","text":"Type: java.lang.String Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version.","title":"cliVersionOptional "},{"location":"java/pdk_pipeline/API/#codebuilddefaultsoptional","text":"Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline.","title":"codeBuildDefaultsOptional "},{"location":"java/pdk_pipeline/API/#codepipelineoptional","text":"Type: software.amazon.awscdk.services.codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface]","title":"codePipelineOptional "},{"location":"java/pdk_pipeline/API/#crossaccountkeysoptional","text":"Type: java.lang.Boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys.","title":"crossAccountKeysOptional "},{"location":"java/pdk_pipeline/API/#dockercredentialsoptional","text":"Type: java.util.List Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets.","title":"dockerCredentialsOptional "},{"location":"java/pdk_pipeline/API/#dockerenabledforselfmutationoptional","text":"Type: java.lang.Boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline.","title":"dockerEnabledForSelfMutationOptional "},{"location":"java/pdk_pipeline/API/#dockerenabledforsynthoptional","text":"Type: java.lang.Boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset.","title":"dockerEnabledForSynthOptional "},{"location":"java/pdk_pipeline/API/#pipelinenameoptional","text":"Type: java.lang.String Default: Automatically generated The name of the CodePipeline pipeline.","title":"pipelineNameOptional "},{"location":"java/pdk_pipeline/API/#publishassetsinparalleloptional","text":"Type: java.lang.Boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you.","title":"publishAssetsInParallelOptional "},{"location":"java/pdk_pipeline/API/#reusecrossregionsupportstacksoptional","text":"Type: java.lang.Boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App.","title":"reuseCrossRegionSupportStacksOptional "},{"location":"java/pdk_pipeline/API/#selfmutationoptional","text":"Type: java.lang.Boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy .","title":"selfMutationOptional "},{"location":"java/pdk_pipeline/API/#selfmutationcodebuilddefaultsoptional","text":"Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects.","title":"selfMutationCodeBuildDefaultsOptional "},{"location":"java/pdk_pipeline/API/#synthcodebuilddefaultsoptional","text":"Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects.","title":"synthCodeBuildDefaultsOptional "},{"location":"java/pdk_pipeline/API/#primarysynthdirectoryrequired","text":"Type: java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out.","title":"primarySynthDirectoryRequired "},{"location":"java/pdk_pipeline/API/#repositorynamerequired","text":"Type: java.lang.String Name of the CodeCommit repository to create.","title":"repositoryNameRequired "},{"location":"java/pdk_pipeline/API/#defaultbranchnameoptional","text":"Type: java.lang.String Default: mainline Branch to trigger the pipeline execution.","title":"defaultBranchNameOptional "},{"location":"java/pdk_pipeline/API/#prbuildcheckeroptional","text":"Type: java.lang.Boolean Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build.","title":"prBuildCheckerOptional "},{"location":"java/pdk_pipeline/API/#synthshellsteppartialpropsoptional","text":"Type: software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps.","title":"synthShellStepPartialPropsOptional "},{"location":"java/pdk_pipeline/API/#methods","text":"Name Description toString Returns a string representation of this construct. addStage Deploy a single Stage by itself. addWave Add a Wave to the pipeline, for deploying multiple Stages in parallel. buildPipeline Send the current pipeline definition to the engine, and construct the pipeline.","title":"Methods "},{"location":"java/pdk_pipeline/API/#tostring","text":"public java . lang . String toString () Returns a string representation of this construct.","title":"toString "},{"location":"java/pdk_pipeline/API/#addstage","text":"public StageDeployment addStage ( Stage stage ) public StageDeployment addStage ( Stage stage , AddStageOpts options ) Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies.","title":"addStage "},{"location":"java/pdk_pipeline/API/#stagerequired","text":"Type: software.amazon.awscdk.Stage","title":"stageRequired "},{"location":"java/pdk_pipeline/API/#optionsoptional","text":"Type: software.amazon.awscdk.pipelines.AddStageOpts","title":"optionsOptional "},{"location":"java/pdk_pipeline/API/#addwave","text":"public Wave addWave ( java . lang . String id ) public Wave addWave ( java . lang . String id , WaveOptions options ) Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: ts declare const pipeline: pipelines.CodePipeline; const wave = pipeline.addWave('MyWave'); wave.addStage(new MyApplicationStage(this, 'Stage1')); wave.addStage(new MyApplicationStage(this, 'Stage2'));","title":"addWave "},{"location":"java/pdk_pipeline/API/#idrequired_1","text":"Type: java.lang.String","title":"idRequired "},{"location":"java/pdk_pipeline/API/#optionsoptional_1","text":"Type: software.amazon.awscdk.pipelines.WaveOptions","title":"optionsOptional "},{"location":"java/pdk_pipeline/API/#buildpipeline","text":"public void buildPipeline () Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method.","title":"buildPipeline "},{"location":"java/pdk_pipeline/API/#static-functions","text":"Name Description isConstruct Checks if x is a construct.","title":"Static Functions "},{"location":"java/pdk_pipeline/API/#isconstruct","text":"import software.aws.awsprototypingsdk.pdk_pipeline.PDKPipeline ; PDKPipeline . isConstruct ( java . lang . Object x ) Checks if x is a construct.","title":"~~isConstruct~~ "},{"location":"java/pdk_pipeline/API/#xrequired","text":"Type: java.lang.Object Any object.","title":"xRequired "},{"location":"java/pdk_pipeline/API/#properties","text":"Name Type Description node software.constructs.Node The tree node. cloudAssemblyFileSet software.amazon.awscdk.pipelines.FileSet The FileSet tha contains the cloud assembly. synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves java.util.List The waves in this pipeline. pipeline software.amazon.awscdk.services.codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. synthProject software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the Synth. codeRepository software.amazon.awscdk.services.codecommit.Repository No description.","title":"Properties "},{"location":"java/pdk_pipeline/API/#noderequired","text":"public Node getNode (); Type: software.constructs.Node The tree node.","title":"nodeRequired "},{"location":"java/pdk_pipeline/API/#cloudassemblyfilesetrequired","text":"public FileSet getCloudAssemblyFileSet (); Type: software.amazon.awscdk.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step.","title":"cloudAssemblyFileSetRequired "},{"location":"java/pdk_pipeline/API/#synthrequired_1","text":"public IFileSetProducer getSynth (); Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly.","title":"synthRequired "},{"location":"java/pdk_pipeline/API/#wavesrequired","text":"public java . util . List < Wave > getWaves (); Type: java.util.List The waves in this pipeline.","title":"wavesRequired "},{"location":"java/pdk_pipeline/API/#pipelinerequired","text":"public Pipeline getPipeline (); Type: software.amazon.awscdk.services.codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built.","title":"pipelineRequired "},{"location":"java/pdk_pipeline/API/#synthprojectrequired","text":"public IProject getSynthProject (); Type: software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built.","title":"synthProjectRequired "},{"location":"java/pdk_pipeline/API/#coderepositoryrequired","text":"public Repository getCodeRepository (); Type: software.amazon.awscdk.services.codecommit.Repository","title":"codeRepositoryRequired "},{"location":"java/pdk_pipeline/API/#structs","text":"","title":"Structs "},{"location":"java/pdk_pipeline/API/#pdkpipelineprops","text":"Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained.","title":"PDKPipelineProps "},{"location":"java/pdk_pipeline/API/#initializer","text":"import software.aws.awsprototypingsdk.pdk_pipeline.PDKPipelineProps ; PDKPipelineProps . builder () . synth ( IFileSetProducer ) // .assetPublishingCodeBuildDefaults(CodeBuildOptions) // .cliVersion(java.lang.String) // .codeBuildDefaults(CodeBuildOptions) // .codePipeline(Pipeline) // .crossAccountKeys(java.lang.Boolean) // .dockerCredentials(java.util.List<DockerCredential>) // .dockerEnabledForSelfMutation(java.lang.Boolean) // .dockerEnabledForSynth(java.lang.Boolean) // .pipelineName(java.lang.String) // .publishAssetsInParallel(java.lang.Boolean) // .reuseCrossRegionSupportStacks(java.lang.Boolean) // .selfMutation(java.lang.Boolean) // .selfMutationCodeBuildDefaults(CodeBuildOptions) // .synthCodeBuildDefaults(CodeBuildOptions) . primarySynthDirectory ( java . lang . String ) . repositoryName ( java . lang . String ) // .defaultBranchName(java.lang.String) // .prBuildChecker(java.lang.Boolean) // .synthShellStepPartialProps(ShellStepProps) . build ();","title":"Initializer "},{"location":"java/pdk_pipeline/API/#properties_1","text":"Name Type Description synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion java.lang.String CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline software.amazon.awscdk.services.codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys java.lang.Boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials java.util.List A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation java.lang.Boolean Enable Docker for the self-mutate step. dockerEnabledForSynth java.lang.Boolean Enable Docker for the 'synth' step. pipelineName java.lang.String The name of the CodePipeline pipeline. publishAssetsInParallel java.lang.Boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks java.lang.Boolean Reuse the same cross region support stack for all pipelines in the App. selfMutation java.lang.Boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName java.lang.String Name of the CodeCommit repository to create. defaultBranchName java.lang.String Branch to trigger the pipeline execution. prBuildChecker java.lang.Boolean Enables a build job to trigger on PR merges to the defaultBranchName. synthShellStepPartialProps software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands.","title":"Properties "},{"location":"java/pdk_pipeline/API/#synthrequired_2","text":"public IFileSetProducer getSynth (); Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out .","title":"synthRequired "},{"location":"java/pdk_pipeline/API/#assetpublishingcodebuilddefaultsoptional_1","text":"public CodeBuildOptions getAssetPublishingCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects.","title":"assetPublishingCodeBuildDefaultsOptional "},{"location":"java/pdk_pipeline/API/#cliversionoptional_1","text":"public java . lang . String getCliVersion (); Type: java.lang.String Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version.","title":"cliVersionOptional "},{"location":"java/pdk_pipeline/API/#codebuilddefaultsoptional_1","text":"public CodeBuildOptions getCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline.","title":"codeBuildDefaultsOptional "},{"location":"java/pdk_pipeline/API/#codepipelineoptional_1","text":"public Pipeline getCodePipeline (); Type: software.amazon.awscdk.services.codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface]","title":"codePipelineOptional "},{"location":"java/pdk_pipeline/API/#crossaccountkeysoptional_1","text":"public java . lang . Boolean getCrossAccountKeys (); Type: java.lang.Boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys.","title":"crossAccountKeysOptional "},{"location":"java/pdk_pipeline/API/#dockercredentialsoptional_1","text":"public java . util . List < DockerCredential > getDockerCredentials (); Type: java.util.List Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets.","title":"dockerCredentialsOptional "},{"location":"java/pdk_pipeline/API/#dockerenabledforselfmutationoptional_1","text":"public java . lang . Boolean getDockerEnabledForSelfMutation (); Type: java.lang.Boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline.","title":"dockerEnabledForSelfMutationOptional "},{"location":"java/pdk_pipeline/API/#dockerenabledforsynthoptional_1","text":"public java . lang . Boolean getDockerEnabledForSynth (); Type: java.lang.Boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset.","title":"dockerEnabledForSynthOptional "},{"location":"java/pdk_pipeline/API/#pipelinenameoptional_1","text":"public java . lang . String getPipelineName (); Type: java.lang.String Default: Automatically generated The name of the CodePipeline pipeline.","title":"pipelineNameOptional "},{"location":"java/pdk_pipeline/API/#publishassetsinparalleloptional_1","text":"public java . lang . Boolean getPublishAssetsInParallel (); Type: java.lang.Boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you.","title":"publishAssetsInParallelOptional "},{"location":"java/pdk_pipeline/API/#reusecrossregionsupportstacksoptional_1","text":"public java . lang . Boolean getReuseCrossRegionSupportStacks (); Type: java.lang.Boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App.","title":"reuseCrossRegionSupportStacksOptional "},{"location":"java/pdk_pipeline/API/#selfmutationoptional_1","text":"public java . lang . Boolean getSelfMutation (); Type: java.lang.Boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy .","title":"selfMutationOptional "},{"location":"java/pdk_pipeline/API/#selfmutationcodebuilddefaultsoptional_1","text":"public CodeBuildOptions getSelfMutationCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects.","title":"selfMutationCodeBuildDefaultsOptional "},{"location":"java/pdk_pipeline/API/#synthcodebuilddefaultsoptional_1","text":"public CodeBuildOptions getSynthCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects.","title":"synthCodeBuildDefaultsOptional "},{"location":"java/pdk_pipeline/API/#primarysynthdirectoryrequired_1","text":"public java . lang . String getPrimarySynthDirectory (); Type: java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out.","title":"primarySynthDirectoryRequired "},{"location":"java/pdk_pipeline/API/#repositorynamerequired_1","text":"public java . lang . String getRepositoryName (); Type: java.lang.String Name of the CodeCommit repository to create.","title":"repositoryNameRequired "},{"location":"java/pdk_pipeline/API/#defaultbranchnameoptional_1","text":"public java . lang . String getDefaultBranchName (); Type: java.lang.String Default: mainline Branch to trigger the pipeline execution.","title":"defaultBranchNameOptional "},{"location":"java/pdk_pipeline/API/#prbuildcheckeroptional_1","text":"public java . lang . Boolean getPrBuildChecker (); Type: java.lang.Boolean Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build.","title":"prBuildCheckerOptional "},{"location":"java/pdk_pipeline/API/#synthshellsteppartialpropsoptional_1","text":"public ShellStepProps getSynthShellStepPartialProps (); Type: software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps.","title":"synthShellStepPartialPropsOptional "},{"location":"java/pdk_projen/API/","text":"pdk_projen This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions. Prerequisites Ensure you have the following packages installed globally: node > 14 (or use nvm to install) Getting Started To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds. nx-monorepo The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc. Adding Subprojects Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website . Example 1 - Explicit dependencies NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time. Example 2 - Implicit dependencies Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order. FAQ How do I run a target just on a specific package? To run a package specific target, you can do the following: cd packages/<my-package> npx projen <target> How do I add a new target to a projen Sub Project? In your .projenrc.ts , do the following: const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); infra . addTask ( \"new-target\" , { exec : \"echo \\\"hi\\\"\" }); As usual, ensure you run npx projen in the root directory to synthesize your change. From here is it just a case of executing npx projen new-target in the package directory. I have added a project in .projenrc.ts but it isn't synthesizing? Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo. How do I visualize my dependencies? From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related. I have updated a dependency, however the build or graph viz is not detecting any changes. Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache . How do I build everything in my monorepo without a specific target package? npx nx run-many --target=build --all I am running a different target, however the dependencies are not being executed. By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects. My subproject is not caching even though I haven't changed anything. This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo. API Reference Structs NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer import software.aws.awsprototypingsdk.pdk_projen.NxMonorepoProjectOptions ; NxMonorepoProjectOptions . builder () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveProjenUpgrades(java.lang.Boolean) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenUpgradeAutoMerge(java.lang.Boolean) // .projenUpgradeSchedule(java.util.List<java.lang.String>) // .projenUpgradeSecret(java.lang.String) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<java.lang.Object>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .nxIgnorePatterns(java.util.List<java.lang.String>) // .sampleLanguage(SampleLanguage) // .targetDependencies(java.util.Map<java.lang.String, java.util.List<TargetDependency>>) . build (); Properties Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveProjenUpgrades java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule java.util.List Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret java.lang.String Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. nxIgnorePatterns java.util.List List of patterns to include in the .nxignore file. sampleLanguage SampleLanguage Language to generate sample code on first synthesis. targetDependencies java.util.Map<java.lang.String, java.util.List< TargetDependency >> Configuration for NX TargetDependencies. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Author's Organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveProjenUpgrades Optional public java . lang . Boolean getAutoApproveProjenUpgrades (); Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projenUpgradeAutoMerge ~~ Optional Deprecated: use autoApproveProjenUpgrades . public java . lang . Boolean getProjenUpgradeAutoMerge (); Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projenUpgradeSchedule Optional public java . util . List < java . lang . String > getProjenUpgradeSchedule (); Type: java.util.List Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projenUpgradeSecret ~~ Optional Deprecated: use githubTokenSecret instead. public java . lang . String getProjenUpgradeSecret (); Type: java.lang.String Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < java . lang . Object > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). nxIgnorePatterns Optional public java . util . List < java . lang . String > getNxIgnorePatterns (); Type: java.util.List Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore sampleLanguage Optional public SampleLanguage getSampleLanguage (); Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis. targetDependencies Optional public java . util . Map < java . lang . String , java . util . List < TargetDependency >> getTargetDependencies (); Type: java.util.Map<java.lang.String, java.util.List< TargetDependency >> Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies PDKPipelinePyProjectOptions Configuration options for the PDKPipelinePyProject. Initializer import software.aws.awsprototypingsdk.pdk_projen.PDKPipelinePyProjectOptions ; PDKPipelinePyProjectOptions . builder () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .testdir(java.lang.String) . build (); Properties Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcPython java.lang.Boolean Use projenrc in python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir java.lang.String Python sources directory. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public java . lang . String getAuthorEmail (); Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public java . lang . String getAuthorName (); Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional public java . util . List < java . lang . String > getClassifiers (); Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public java . lang . String getDescription (); Type: java.lang.String A short description of the package. homepage Optional public java . lang . String getHomepage (); Type: java.lang.String A URL to the website of the project. license Optional public java . lang . String getLicense (); Type: java.lang.String License of this package as an SPDX identifier. poetryOptions Optional public PoetryPyprojectOptionsWithoutDeps getPoetryOptions (); Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public java . util . Map < java . lang . String , java . lang . Object > getSetupConfig (); Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public java . lang . Boolean getPip (); Type: java.lang.Boolean Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional public java . lang . Boolean getPoetry (); Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcPython Optional public java . lang . Boolean getProjenrcPython (); Type: java.lang.Boolean Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public ProjenrcOptions getProjenrcPythonOptions (); Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public java . lang . Boolean getPytest (); Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional public PytestOptions getPytestOptions (); Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public java . lang . Boolean getSetuptools (); Type: java.lang.Boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional public java . lang . Boolean getVenv (); Type: java.lang.Boolean Default: true Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public VenvOptions getVenvOptions (); Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. buildCommand Optional public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public java . lang . String getAppEntrypoint (); Type: java.lang.String Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"tests\" Python sources directory. PDKPipelineTsProjectOptions Configuration options for the PDKPipelineTsProject. Initializer import software.aws.awsprototypingsdk.pdk_projen.PDKPipelineTsProjectOptions ; PDKPipelineTsProjectOptions . builder () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveProjenUpgrades(java.lang.Boolean) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenUpgradeAutoMerge(java.lang.Boolean) // .projenUpgradeSchedule(java.util.List<java.lang.String>) // .projenUpgradeSecret(java.lang.String) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<java.lang.Object>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .integrationTestAutoDiscover(java.lang.Boolean) // .lambdaAutoDiscover(java.lang.Boolean) // .lambdaOptions(LambdaFunctionCommonOptions) . build (); Properties Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveProjenUpgrades java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule java.util.List Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret java.lang.String Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integrationTestAutoDiscover java.lang.Boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Author's Organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveProjenUpgrades Optional public java . lang . Boolean getAutoApproveProjenUpgrades (); Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projenUpgradeAutoMerge ~~ Optional Deprecated: use autoApproveProjenUpgrades . public java . lang . Boolean getProjenUpgradeAutoMerge (); Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projenUpgradeSchedule Optional public java . util . List < java . lang . String > getProjenUpgradeSchedule (); Type: java.util.List Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projenUpgradeSecret ~~ Optional Deprecated: use githubTokenSecret instead. public java . lang . String getProjenUpgradeSecret (); Type: java.lang.String Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < java . lang . Object > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). buildCommand Optional public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public java . lang . String getAppEntrypoint (); Type: java.lang.String Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integrationTestAutoDiscover Optional public java . lang . Boolean getIntegrationTestAutoDiscover (); Type: java.lang.Boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover Optional public java . lang . Boolean getLambdaAutoDiscover (); Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions Optional public LambdaFunctionCommonOptions getLambdaOptions (); Type: io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. TargetDependency Represents an NX Target Dependency. Initializer import software.aws.awsprototypingsdk.pdk_projen.TargetDependency ; TargetDependency . builder () . projects ( TargetDependencyProject ) . target ( java . lang . String ) . build (); Properties Name Type Description projects TargetDependencyProject Target dependencies. target java.lang.String Projen target i.e: build, test, etc. projects Required public TargetDependencyProject getProjects (); Type: TargetDependencyProject Target dependencies. target Required public java . lang . String getTarget (); Type: java.lang.String Projen target i.e: build, test, etc. Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers import software.aws.awsprototypingsdk.pdk_projen.NxMonorepoProject ; NxMonorepoProject . Builder . create () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveProjenUpgrades(java.lang.Boolean) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenUpgradeAutoMerge(java.lang.Boolean) // .projenUpgradeSchedule(java.util.List<java.lang.String>) // .projenUpgradeSecret(java.lang.String) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<java.lang.Object>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .nxIgnorePatterns(java.util.List<java.lang.String>) // .sampleLanguage(SampleLanguage) // .targetDependencies(java.util.Map<java.lang.String, java.util.List<TargetDependency>>) . build (); Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveProjenUpgrades java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule java.util.List Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret java.lang.String Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. nxIgnorePatterns java.util.List List of patterns to include in the .nxignore file. sampleLanguage SampleLanguage Language to generate sample code on first synthesis. targetDependencies java.util.Map<java.lang.String, java.util.List< TargetDependency >> Configuration for NX TargetDependencies. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Author's Organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveProjenUpgrades Optional Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projenUpgradeAutoMerge ~~ Optional Deprecated: use autoApproveProjenUpgrades . Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projenUpgradeSchedule Optional Type: java.util.List Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projenUpgradeSecret ~~ Optional Deprecated: use githubTokenSecret instead. Type: java.lang.String Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). nxIgnorePatterns Optional Type: java.util.List Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore sampleLanguage Optional Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis. targetDependencies Optional Type: java.util.Map<java.lang.String, java.util.List< TargetDependency >> Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. addImplicitDependency public void addImplicitDependency ( Project dependent , Project dependee ) Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: io.github.cdklabs.projen.Project project you want to have the dependency. dependee Required Type: io.github.cdklabs.projen.Project project you wish to depend on. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Automatic PR merges. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this pacakge. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Automatic PR merges. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this pacakge. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PdkPipelinePyProject Synthesizes a Python Project with a CI/CD pipeline. Initializers import software.aws.awsprototypingsdk.pdk_projen.PdkPipelinePyProject ; PdkPipelinePyProject . Builder . create () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .testdir(java.lang.String) . build (); Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcPython java.lang.Boolean Use projenrc in python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir java.lang.String Python sources directory. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: java.lang.String A short description of the package. homepage Optional Type: java.lang.String A URL to the website of the project. license Optional Type: java.lang.String License of this package as an SPDX identifier. poetryOptions Optional Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: java.lang.Boolean Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcPython Optional Type: java.lang.Boolean Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py . projenrcPythonOptions Optional Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: java.lang.Boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: java.lang.Boolean Default: true Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. buildCommand Optional Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional Type: java.lang.String Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional Type: java.lang.String Default: \"tests\" Python sources directory. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <module>@<semver> . addDevDependency public void addDevDependency ( java . lang . String spec ) Adds a dev dependency. spec Required Type: java.lang.String Format <module>@<semver> . Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. depsManager io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version java.lang.String Version of the package for distribution (should follow semver). packagingManager io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. pytest io.github.cdklabs.projen.python.Pytest Pytest component. appEntrypoint java.lang.String The CDK app entrypoint. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps No description. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion java.lang.String The CDK version this app is using. testdir java.lang.String The directory in which the python tests reside. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public IPythonDeps getDepsManager (); Type: io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager Required public IPythonEnv getEnvManager (); Type: io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public java . lang . String getVersion (); Type: java.lang.String Version of the package for distribution (should follow semver). packagingManager Optional public IPythonPackaging getPackagingManager (); Type: io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public Pytest getPytest (); Type: io.github.cdklabs.projen.python.Pytest Pytest component. appEntrypoint Required public java . lang . String getAppEntrypoint (); Type: java.lang.String The CDK app entrypoint. cdkConfig Required public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps cdkTasks Required public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String The CDK version this app is using. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which the python tests reside. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelineTsProject Synthesizes a Typescript Project with a CI/CD pipeline. Initializers import software.aws.awsprototypingsdk.pdk_projen.PDKPipelineTsProject ; PDKPipelineTsProject . Builder . create () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveProjenUpgrades(java.lang.Boolean) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenUpgradeAutoMerge(java.lang.Boolean) // .projenUpgradeSchedule(java.util.List<java.lang.String>) // .projenUpgradeSecret(java.lang.String) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<java.lang.Object>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .integrationTestAutoDiscover(java.lang.Boolean) // .lambdaAutoDiscover(java.lang.Boolean) // .lambdaOptions(LambdaFunctionCommonOptions) . build (); Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveProjenUpgrades java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule java.util.List Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret java.lang.String Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integrationTestAutoDiscover java.lang.Boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Author's Organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveProjenUpgrades Optional Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projenUpgradeAutoMerge ~~ Optional Deprecated: use autoApproveProjenUpgrades . Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projenUpgradeSchedule Optional Type: java.util.List Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projenUpgradeSecret ~~ Optional Deprecated: use githubTokenSecret instead. Type: java.lang.String Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). buildCommand Optional Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional Type: java.lang.String Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integrationTestAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions Optional Type: io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. addCdkDependency public void addCdkDependency ( java . lang . String modules ) Adds an AWS CDK module dependencies. modules Required Type: java.lang.String The list of modules to depend on. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Automatic PR merges. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this pacakge. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. appEntrypoint java.lang.String The CDK app entrypoint. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps No description. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion java.lang.String The CDK version this app is using. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Automatic PR merges. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this pacakge. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig appEntrypoint Required public java . lang . String getAppEntrypoint (); Type: java.lang.String The CDK app entrypoint. cdkConfig Required public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps cdkTasks Required public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String The CDK version this app is using. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums SampleLanguage Name Description TYPESCRIPT No description. PYTHON No description. Supported languages to generate sample code. TYPESCRIPT PYTHON TargetDependencyProject Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency. SELF Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages. DEPENDENCIES Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"API"},{"location":"java/pdk_projen/API/#pdk_projen","text":"This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions.","title":"pdk_projen"},{"location":"java/pdk_projen/API/#prerequisites","text":"Ensure you have the following packages installed globally: node > 14 (or use nvm to install)","title":"Prerequisites"},{"location":"java/pdk_projen/API/#getting-started","text":"To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds.","title":"Getting Started"},{"location":"java/pdk_projen/API/#nx-monorepo","text":"The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc.","title":"nx-monorepo"},{"location":"java/pdk_projen/API/#adding-subprojects","text":"Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website .","title":"Adding Subprojects"},{"location":"java/pdk_projen/API/#example-1-explicit-dependencies","text":"NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time.","title":"Example 1 - Explicit dependencies"},{"location":"java/pdk_projen/API/#example-2-implicit-dependencies","text":"Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order.","title":"Example 2 - Implicit dependencies"},{"location":"java/pdk_projen/API/#faq","text":"","title":"FAQ"},{"location":"java/pdk_projen/API/#how-do-i-run-a-target-just-on-a-specific-package","text":"To run a package specific target, you can do the following: cd packages/<my-package> npx projen <target>","title":"How do I run a target just on a specific package?"},{"location":"java/pdk_projen/API/#how-do-i-add-a-new-target-to-a-projen-sub-project","text":"In your .projenrc.ts , do the following: const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); infra . addTask ( \"new-target\" , { exec : \"echo \\\"hi\\\"\" }); As usual, ensure you run npx projen in the root directory to synthesize your change. From here is it just a case of executing npx projen new-target in the package directory.","title":"How do I add a new target to a projen Sub Project?"},{"location":"java/pdk_projen/API/#i-have-added-a-project-in-projenrcts-but-it-isnt-synthesizing","text":"Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo.","title":"I have added a project in .projenrc.ts but it isn't synthesizing?"},{"location":"java/pdk_projen/API/#how-do-i-visualize-my-dependencies","text":"From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related.","title":"How do I visualize my dependencies?"},{"location":"java/pdk_projen/API/#i-have-updated-a-dependency-however-the-build-or-graph-viz-is-not-detecting-any-changes","text":"Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache .","title":"I have updated a dependency, however the build or graph viz is not detecting any changes."},{"location":"java/pdk_projen/API/#how-do-i-build-everything-in-my-monorepo-without-a-specific-target-package","text":"npx nx run-many --target=build --all","title":"How do I build everything in my monorepo without a specific target package?"},{"location":"java/pdk_projen/API/#i-am-running-a-different-target-however-the-dependencies-are-not-being-executed","text":"By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects.","title":"I am running a different target, however the dependencies are not being executed."},{"location":"java/pdk_projen/API/#my-subproject-is-not-caching-even-though-i-havent-changed-anything","text":"This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo.","title":"My subproject is not caching even though I haven't changed anything."},{"location":"java/pdk_projen/API/#api-reference","text":"","title":"API Reference "},{"location":"java/pdk_projen/API/#structs","text":"","title":"Structs "},{"location":"java/pdk_projen/API/#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"java/pdk_projen/API/#initializer","text":"import software.aws.awsprototypingsdk.pdk_projen.NxMonorepoProjectOptions ; NxMonorepoProjectOptions . builder () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveProjenUpgrades(java.lang.Boolean) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenUpgradeAutoMerge(java.lang.Boolean) // .projenUpgradeSchedule(java.util.List<java.lang.String>) // .projenUpgradeSecret(java.lang.String) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<java.lang.Object>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .nxIgnorePatterns(java.util.List<java.lang.String>) // .sampleLanguage(SampleLanguage) // .targetDependencies(java.util.Map<java.lang.String, java.util.List<TargetDependency>>) . build ();","title":"Initializer "},{"location":"java/pdk_projen/API/#properties","text":"Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveProjenUpgrades java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule java.util.List Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret java.lang.String Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. nxIgnorePatterns java.util.List List of patterns to include in the .nxignore file. sampleLanguage SampleLanguage Language to generate sample code on first synthesis. targetDependencies java.util.Map<java.lang.String, java.util.List< TargetDependency >> Configuration for NX TargetDependencies.","title":"Properties "},{"location":"java/pdk_projen/API/#namerequired","text":"public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"java/pdk_projen/API/#loggingoptional","text":"public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"java/pdk_projen/API/#outdiroptional","text":"public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"java/pdk_projen/API/#parentoptional","text":"public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"java/pdk_projen/API/#projencommandoptional","text":"public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptional","text":"public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptionsoptional","text":"public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"java/pdk_projen/API/#autoapproveoptionsoptional","text":"public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"java/pdk_projen/API/#automergeoptionsoptional","text":"public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"java/pdk_projen/API/#clobberoptional","text":"public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"java/pdk_projen/API/#devcontaineroptional","text":"public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"java/pdk_projen/API/#githuboptional","text":"public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"java/pdk_projen/API/#githuboptionsoptional","text":"public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"java/pdk_projen/API/#gitpodoptional","text":"public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"java/pdk_projen/API/#mergifyoptional","text":"Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"java/pdk_projen/API/#mergifyoptionsoptional","text":"Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"java/pdk_projen/API/#projecttypeoptional","text":"Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"java/pdk_projen/API/#projentokensecretoptional","text":"public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"java/pdk_projen/API/#readmeoptional","text":"public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"java/pdk_projen/API/#staleoptional","text":"public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"java/pdk_projen/API/#staleoptionsoptional","text":"public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"java/pdk_projen/API/#vscodeoptional","text":"public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"java/pdk_projen/API/#allowlibrarydependenciesoptional","text":"public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allowLibraryDependenciesOptional "},{"location":"java/pdk_projen/API/#authoremailoptional","text":"public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail.","title":"authorEmailOptional "},{"location":"java/pdk_projen/API/#authornameoptional","text":"public java . lang . String getAuthorName (); Type: java.lang.String Author's name.","title":"authorNameOptional "},{"location":"java/pdk_projen/API/#authororganizationoptional","text":"public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Author's Organization.","title":"authorOrganizationOptional "},{"location":"java/pdk_projen/API/#authorurloptional","text":"public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website.","title":"authorUrlOptional "},{"location":"java/pdk_projen/API/#autodetectbinoptional","text":"public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"autoDetectBinOptional "},{"location":"java/pdk_projen/API/#binoptional","text":"public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"java/pdk_projen/API/#bugsemailoptional","text":"public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported.","title":"bugsEmailOptional "},{"location":"java/pdk_projen/API/#bugsurloptional","text":"public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker.","title":"bugsUrlOptional "},{"location":"java/pdk_projen/API/#bundleddepsoptional","text":"public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundledDepsOptional "},{"location":"java/pdk_projen/API/#codeartifactoptionsoptional","text":"public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"codeArtifactOptionsOptional "},{"location":"java/pdk_projen/API/#depsoptional","text":"public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"java/pdk_projen/API/#descriptionoptional","text":"public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"java/pdk_projen/API/#devdepsoptional","text":"public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"devDepsOptional "},{"location":"java/pdk_projen/API/#entrypointoptional","text":"public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"java/pdk_projen/API/#homepageoptional","text":"public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website.","title":"homepageOptional "},{"location":"java/pdk_projen/API/#keywordsoptional","text":"public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json .","title":"keywordsOptional "},{"location":"java/pdk_projen/API/#licenseoptional","text":"public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"java/pdk_projen/API/#licensedoptional","text":"public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"java/pdk_projen/API/#maxnodeversionoptional","text":"public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive).","title":"maxNodeVersionOptional "},{"location":"java/pdk_projen/API/#minnodeversionoptional","text":"public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"minNodeVersionOptional "},{"location":"java/pdk_projen/API/#npmaccessoptional","text":"public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npmAccessOptional "},{"location":"java/pdk_projen/API/#npmregistryoptional","text":"Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npmRegistry~~Optional "},{"location":"java/pdk_projen/API/#npmregistryurloptional","text":"public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npmRegistryUrlOptional "},{"location":"java/pdk_projen/API/#npmtokensecretoptional","text":"public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npmTokenSecretOptional "},{"location":"java/pdk_projen/API/#packagemanageroptional","text":"public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"packageManagerOptional "},{"location":"java/pdk_projen/API/#packagenameoptional","text":"public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json.","title":"packageNameOptional "},{"location":"java/pdk_projen/API/#peerdependencyoptionsoptional","text":"public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peerDependencyOptionsOptional "},{"location":"java/pdk_projen/API/#peerdepsoptional","text":"public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peerDepsOptional "},{"location":"java/pdk_projen/API/#repositoryoptional","text":"public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"java/pdk_projen/API/#repositorydirectoryoptional","text":"public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repositoryDirectoryOptional "},{"location":"java/pdk_projen/API/#scriptsoptional","text":"public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"java/pdk_projen/API/#stabilityoptional","text":"public java . lang . String getStability (); Type: java.lang.String Package's Stability.","title":"stabilityOptional "},{"location":"java/pdk_projen/API/#jsiireleaseversionoptional","text":"public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsiiReleaseVersionOptional "},{"location":"java/pdk_projen/API/#majorversionoptional","text":"public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"majorVersionOptional "},{"location":"java/pdk_projen/API/#npmdisttagoptional","text":"public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npmDistTagOptional "},{"location":"java/pdk_projen/API/#postbuildstepsoptional","text":"public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow.","title":"postBuildStepsOptional "},{"location":"java/pdk_projen/API/#prereleaseoptional","text":"public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"java/pdk_projen/API/#publishdryrunoptional","text":"public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publishDryRunOptional "},{"location":"java/pdk_projen/API/#publishtasksoptional","text":"public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publishTasksOptional "},{"location":"java/pdk_projen/API/#releasebranchesoptional","text":"public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"releaseBranchesOptional "},{"location":"java/pdk_projen/API/#releaseeverycommitoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~releaseEveryCommit~~Optional "},{"location":"java/pdk_projen/API/#releasefailureissueoptional","text":"public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task.","title":"releaseFailureIssueOptional "},{"location":"java/pdk_projen/API/#releasefailureissuelabeloptional","text":"public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"releaseFailureIssueLabelOptional "},{"location":"java/pdk_projen/API/#releasescheduleoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~releaseSchedule~~Optional "},{"location":"java/pdk_projen/API/#releasetagprefixoptional","text":"public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"releaseTagPrefixOptional "},{"location":"java/pdk_projen/API/#releasetriggeroptional","text":"public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"releaseTriggerOptional "},{"location":"java/pdk_projen/API/#releaseworkflownameoptional","text":"public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow.","title":"releaseWorkflowNameOptional "},{"location":"java/pdk_projen/API/#releaseworkflowsetupstepsoptional","text":"public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container.","title":"releaseWorkflowSetupStepsOptional "},{"location":"java/pdk_projen/API/#versionrcoptionsoptional","text":"public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrcOptionsOptional "},{"location":"java/pdk_projen/API/#workflowcontainerimageoptional","text":"public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows.","title":"workflowContainerImageOptional "},{"location":"java/pdk_projen/API/#workflowrunsonoptional","text":"public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflowRunsOnOptional "},{"location":"java/pdk_projen/API/#defaultreleasebranchrequired","text":"public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch.","title":"defaultReleaseBranchRequired "},{"location":"java/pdk_projen/API/#artifactsdirectoryoptional","text":"public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts.","title":"artifactsDirectoryOptional "},{"location":"java/pdk_projen/API/#autoapproveprojenupgradesoptional","text":"public java . lang . Boolean getAutoApproveProjenUpgrades (); Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveProjenUpgradesOptional "},{"location":"java/pdk_projen/API/#autoapproveupgradesoptional","text":"public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveUpgradesOptional "},{"location":"java/pdk_projen/API/#buildworkflowoptional","text":"public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"buildWorkflowOptional "},{"location":"java/pdk_projen/API/#buildworkflowtriggersoptional","text":"public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"buildWorkflowTriggersOptional "},{"location":"java/pdk_projen/API/#bundleroptionsoptional","text":"public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler .","title":"bundlerOptionsOptional "},{"location":"java/pdk_projen/API/#codecovoptional","text":"public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"codeCovOptional "},{"location":"java/pdk_projen/API/#codecovtokensecretoptional","text":"public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"codeCovTokenSecretOptional "},{"location":"java/pdk_projen/API/#copyrightowneroptional","text":"public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyrightOwnerOptional "},{"location":"java/pdk_projen/API/#copyrightperiodoptional","text":"public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file.","title":"copyrightPeriodOptional "},{"location":"java/pdk_projen/API/#dependabotoptional","text":"public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"java/pdk_projen/API/#dependabotoptionsoptional","text":"public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabotOptionsOptional "},{"location":"java/pdk_projen/API/#depsupgradeoptional","text":"public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"depsUpgradeOptional "},{"location":"java/pdk_projen/API/#depsupgradeoptionsoptional","text":"public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"depsUpgradeOptionsOptional "},{"location":"java/pdk_projen/API/#gitignoreoptional","text":"public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"java/pdk_projen/API/#jestoptional","text":"public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"java/pdk_projen/API/#jestoptionsoptional","text":"public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options.","title":"jestOptionsOptional "},{"location":"java/pdk_projen/API/#mutablebuildoptional","text":"public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutableBuildOptional "},{"location":"java/pdk_projen/API/#npmignoreoptional","text":"Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"java/pdk_projen/API/#npmignoreenabledoptional","text":"public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignoreEnabledOptional "},{"location":"java/pdk_projen/API/#packageoptional","text":"public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"java/pdk_projen/API/#prettieroptional","text":"public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier.","title":"prettierOptional "},{"location":"java/pdk_projen/API/#prettieroptionsoptional","text":"public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettierOptionsOptional "},{"location":"java/pdk_projen/API/#projendevdependencyoptional","text":"public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projenDevDependencyOptional "},{"location":"java/pdk_projen/API/#projenrcjsoptional","text":"public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrcJsOptional "},{"location":"java/pdk_projen/API/#projenrcjsoptionsoptional","text":"public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrcJsOptionsOptional "},{"location":"java/pdk_projen/API/#projenupgradeautomergeoptional","text":"Deprecated: use autoApproveProjenUpgrades . public java . lang . Boolean getProjenUpgradeAutoMerge (); Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projenUpgradeAutoMerge~~Optional "},{"location":"java/pdk_projen/API/#projenupgradescheduleoptional","text":"public java . util . List < java . lang . String > getProjenUpgradeSchedule (); Type: java.util.List Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projenUpgradeScheduleOptional "},{"location":"java/pdk_projen/API/#projenupgradesecretoptional","text":"Deprecated: use githubTokenSecret instead. public java . lang . String getProjenUpgradeSecret (); Type: java.lang.String Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projenUpgradeSecret~~Optional "},{"location":"java/pdk_projen/API/#projenversionoptional","text":"public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install.","title":"projenVersionOptional "},{"location":"java/pdk_projen/API/#pullrequesttemplateoptional","text":"public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template.","title":"pullRequestTemplateOptional "},{"location":"java/pdk_projen/API/#pullrequesttemplatecontentsoptional","text":"public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template.","title":"pullRequestTemplateContentsOptional "},{"location":"java/pdk_projen/API/#releaseoptional","text":"public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"java/pdk_projen/API/#releasetonpmoptional","text":"public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced.","title":"releaseToNpmOptional "},{"location":"java/pdk_projen/API/#releaseworkflowoptional","text":"Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~releaseWorkflow~~Optional "},{"location":"java/pdk_projen/API/#workflowbootstrapstepsoptional","text":"public java . util . List < java . lang . Object > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflowBootstrapStepsOptional "},{"location":"java/pdk_projen/API/#workflowgitidentityoptional","text":"public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflowGitIdentityOptional "},{"location":"java/pdk_projen/API/#workflownodeversionoptional","text":"public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflowNodeVersionOptional "},{"location":"java/pdk_projen/API/#disabletsconfigoptional","text":"public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disableTsconfigOptional "},{"location":"java/pdk_projen/API/#docgenoptional","text":"public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"java/pdk_projen/API/#docsdirectoryoptional","text":"public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory.","title":"docsDirectoryOptional "},{"location":"java/pdk_projen/API/#entrypointtypesoptional","text":"public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypointTypesOptional "},{"location":"java/pdk_projen/API/#eslintoptional","text":"public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint.","title":"eslintOptional "},{"location":"java/pdk_projen/API/#eslintoptionsoptional","text":"public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslintOptionsOptional "},{"location":"java/pdk_projen/API/#libdiroptional","text":"public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"java/pdk_projen/API/#projenrctsoptional","text":"public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrcTsOptional "},{"location":"java/pdk_projen/API/#projenrctsoptionsoptional","text":"public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrcTsOptionsOptional "},{"location":"java/pdk_projen/API/#samplecodeoptional","text":"public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sampleCodeOptional "},{"location":"java/pdk_projen/API/#srcdiroptional","text":"public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"java/pdk_projen/API/#testdiroptional","text":"public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"java/pdk_projen/API/#tsconfigoptional","text":"public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"java/pdk_projen/API/#tsconfigdevoptional","text":"public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfigDevOptional "},{"location":"java/pdk_projen/API/#tsconfigdevfileoptional","text":"public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfigDevFileOptional "},{"location":"java/pdk_projen/API/#typescriptversionoptional","text":"public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescriptVersionOptional "},{"location":"java/pdk_projen/API/#nxignorepatternsoptional","text":"public java . util . List < java . lang . String > getNxIgnorePatterns (); Type: java.util.List Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore","title":"nxIgnorePatternsOptional "},{"location":"java/pdk_projen/API/#samplelanguageoptional","text":"public SampleLanguage getSampleLanguage (); Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis.","title":"sampleLanguageOptional "},{"location":"java/pdk_projen/API/#targetdependenciesoptional","text":"public java . util . Map < java . lang . String , java . util . List < TargetDependency >> getTargetDependencies (); Type: java.util.Map<java.lang.String, java.util.List< TargetDependency >> Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies","title":"targetDependenciesOptional "},{"location":"java/pdk_projen/API/#pdkpipelinepyprojectoptions","text":"Configuration options for the PDKPipelinePyProject.","title":"PDKPipelinePyProjectOptions "},{"location":"java/pdk_projen/API/#initializer_1","text":"import software.aws.awsprototypingsdk.pdk_projen.PDKPipelinePyProjectOptions ; PDKPipelinePyProjectOptions . builder () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .testdir(java.lang.String) . build ();","title":"Initializer "},{"location":"java/pdk_projen/API/#properties_1","text":"Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcPython java.lang.Boolean Use projenrc in python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir java.lang.String Python sources directory.","title":"Properties "},{"location":"java/pdk_projen/API/#namerequired_1","text":"public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"java/pdk_projen/API/#loggingoptional_1","text":"public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"java/pdk_projen/API/#outdiroptional_1","text":"public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"java/pdk_projen/API/#parentoptional_1","text":"public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"java/pdk_projen/API/#projencommandoptional_1","text":"public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptional_1","text":"public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptionsoptional_1","text":"public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"java/pdk_projen/API/#autoapproveoptionsoptional_1","text":"public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"java/pdk_projen/API/#automergeoptionsoptional_1","text":"public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"java/pdk_projen/API/#clobberoptional_1","text":"public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"java/pdk_projen/API/#devcontaineroptional_1","text":"public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"java/pdk_projen/API/#githuboptional_1","text":"public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"java/pdk_projen/API/#githuboptionsoptional_1","text":"public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"java/pdk_projen/API/#gitpodoptional_1","text":"public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"java/pdk_projen/API/#mergifyoptional_1","text":"Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"java/pdk_projen/API/#mergifyoptionsoptional_1","text":"Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"java/pdk_projen/API/#projecttypeoptional_1","text":"Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"java/pdk_projen/API/#projentokensecretoptional_1","text":"public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"java/pdk_projen/API/#readmeoptional_1","text":"public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"java/pdk_projen/API/#staleoptional_1","text":"public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"java/pdk_projen/API/#staleoptionsoptional_1","text":"public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"java/pdk_projen/API/#vscodeoptional_1","text":"public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"java/pdk_projen/API/#authoremailrequired","text":"public java . lang . String getAuthorEmail (); Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail.","title":"authorEmailRequired "},{"location":"java/pdk_projen/API/#authornamerequired","text":"public java . lang . String getAuthorName (); Type: java.lang.String Default: $GIT_USER_NAME Author's name.","title":"authorNameRequired "},{"location":"java/pdk_projen/API/#versionrequired","text":"public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" Version of the package.","title":"versionRequired "},{"location":"java/pdk_projen/API/#classifiersoptional","text":"public java . util . List < java . lang . String > getClassifiers (); Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/","title":"classifiersOptional "},{"location":"java/pdk_projen/API/#descriptionoptional_1","text":"public java . lang . String getDescription (); Type: java.lang.String A short description of the package.","title":"descriptionOptional "},{"location":"java/pdk_projen/API/#homepageoptional_1","text":"public java . lang . String getHomepage (); Type: java.lang.String A URL to the website of the project.","title":"homepageOptional "},{"location":"java/pdk_projen/API/#licenseoptional_1","text":"public java . lang . String getLicense (); Type: java.lang.String License of this package as an SPDX identifier.","title":"licenseOptional "},{"location":"java/pdk_projen/API/#poetryoptionsoptional","text":"public PoetryPyprojectOptionsWithoutDeps getPoetryOptions (); Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry.","title":"poetryOptionsOptional "},{"location":"java/pdk_projen/API/#setupconfigoptional","text":"public java . util . Map < java . lang . String , java . lang . Object > getSetupConfig (); Type: java.util.Map Additional fields to pass in the setup() function if using setuptools.","title":"setupConfigOptional "},{"location":"java/pdk_projen/API/#modulenamerequired","text":"public java . lang . String getModuleName (); Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores.","title":"moduleNameRequired "},{"location":"java/pdk_projen/API/#depsoptional_1","text":"public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() .","title":"depsOptional "},{"location":"java/pdk_projen/API/#devdepsoptional_1","text":"public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() .","title":"devDepsOptional "},{"location":"java/pdk_projen/API/#pipoptional","text":"public java . lang . Boolean getPip (); Type: java.lang.Boolean Default: true Use pip with a requirements.txt file to track project dependencies.","title":"pipOptional "},{"location":"java/pdk_projen/API/#poetryoptional","text":"public java . lang . Boolean getPoetry (); Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing.","title":"poetryOptional "},{"location":"java/pdk_projen/API/#projenrcpythonoptional","text":"public java . lang . Boolean getProjenrcPython (); Type: java.lang.Boolean Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py .","title":"projenrcPythonOptional "},{"location":"java/pdk_projen/API/#projenrcpythonoptionsoptional","text":"public ProjenrcOptions getProjenrcPythonOptions (); Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python.","title":"projenrcPythonOptionsOptional "},{"location":"java/pdk_projen/API/#pytestoptional","text":"public java . lang . Boolean getPytest (); Type: java.lang.Boolean Default: true Include pytest tests.","title":"pytestOptional "},{"location":"java/pdk_projen/API/#pytestoptionsoptional","text":"public PytestOptions getPytestOptions (); Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options.","title":"pytestOptionsOptional "},{"location":"java/pdk_projen/API/#sampleoptional","text":"public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist.","title":"sampleOptional "},{"location":"java/pdk_projen/API/#setuptoolsoptional","text":"public java . lang . Boolean getSetuptools (); Type: java.lang.Boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing.","title":"setuptoolsOptional "},{"location":"java/pdk_projen/API/#venvoptional","text":"public java . lang . Boolean getVenv (); Type: java.lang.Boolean Default: true Use venv to manage a virtual environment for installing dependencies inside.","title":"venvOptional "},{"location":"java/pdk_projen/API/#venvoptionsoptional","text":"public VenvOptions getVenvOptions (); Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options.","title":"venvOptionsOptional "},{"location":"java/pdk_projen/API/#buildcommandoptional","text":"public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"buildCommandOptional "},{"location":"java/pdk_projen/API/#cdkoutoptional","text":"public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"java/pdk_projen/API/#contextoptional","text":"public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"java/pdk_projen/API/#featureflagsoptional","text":"public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json.","title":"featureFlagsOptional "},{"location":"java/pdk_projen/API/#requireapprovaloptional","text":"public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"requireApprovalOptional "},{"location":"java/pdk_projen/API/#watchexcludesoptional","text":"public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch .","title":"watchExcludesOptional "},{"location":"java/pdk_projen/API/#watchincludesoptional","text":"public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch .","title":"watchIncludesOptional "},{"location":"java/pdk_projen/API/#cdkversionrequired","text":"public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdkVersionRequired "},{"location":"java/pdk_projen/API/#cdkassertoptional","text":"Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdkAssert~~Optional "},{"location":"java/pdk_projen/API/#cdkassertionsoptional","text":"public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdkAssertionsOptional "},{"location":"java/pdk_projen/API/#cdkdependenciesoptional","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires.","title":"~~cdkDependencies~~Optional "},{"location":"java/pdk_projen/API/#cdkdependenciesasdepsoptional","text":"Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdkDependenciesAsDeps~~Optional "},{"location":"java/pdk_projen/API/#cdktestdependenciesoptional","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing.","title":"~~cdkTestDependencies~~Optional "},{"location":"java/pdk_projen/API/#cdkversionpinningoptional","text":"public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdkVersionPinningOptional "},{"location":"java/pdk_projen/API/#constructsversionoptional","text":"public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructsVersionOptional "},{"location":"java/pdk_projen/API/#appentrypointoptional","text":"public java . lang . String getAppEntrypoint (); Type: java.lang.String Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"appEntrypointOptional "},{"location":"java/pdk_projen/API/#testdiroptional_1","text":"public java . lang . String getTestdir (); Type: java.lang.String Default: \"tests\" Python sources directory.","title":"testdirOptional "},{"location":"java/pdk_projen/API/#pdkpipelinetsprojectoptions","text":"Configuration options for the PDKPipelineTsProject.","title":"PDKPipelineTsProjectOptions "},{"location":"java/pdk_projen/API/#initializer_2","text":"import software.aws.awsprototypingsdk.pdk_projen.PDKPipelineTsProjectOptions ; PDKPipelineTsProjectOptions . builder () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveProjenUpgrades(java.lang.Boolean) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenUpgradeAutoMerge(java.lang.Boolean) // .projenUpgradeSchedule(java.util.List<java.lang.String>) // .projenUpgradeSecret(java.lang.String) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<java.lang.Object>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .integrationTestAutoDiscover(java.lang.Boolean) // .lambdaAutoDiscover(java.lang.Boolean) // .lambdaOptions(LambdaFunctionCommonOptions) . build ();","title":"Initializer "},{"location":"java/pdk_projen/API/#properties_2","text":"Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveProjenUpgrades java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule java.util.List Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret java.lang.String Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integrationTestAutoDiscover java.lang.Boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions.","title":"Properties "},{"location":"java/pdk_projen/API/#namerequired_2","text":"public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"java/pdk_projen/API/#loggingoptional_2","text":"public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"java/pdk_projen/API/#outdiroptional_2","text":"public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"java/pdk_projen/API/#parentoptional_2","text":"public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"java/pdk_projen/API/#projencommandoptional_2","text":"public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptional_2","text":"public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptionsoptional_2","text":"public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"java/pdk_projen/API/#autoapproveoptionsoptional_2","text":"public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"java/pdk_projen/API/#automergeoptionsoptional_2","text":"public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"java/pdk_projen/API/#clobberoptional_2","text":"public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"java/pdk_projen/API/#devcontaineroptional_2","text":"public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"java/pdk_projen/API/#githuboptional_2","text":"public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"java/pdk_projen/API/#githuboptionsoptional_2","text":"public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"java/pdk_projen/API/#gitpodoptional_2","text":"public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"java/pdk_projen/API/#mergifyoptional_2","text":"Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"java/pdk_projen/API/#mergifyoptionsoptional_2","text":"Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"java/pdk_projen/API/#projecttypeoptional_2","text":"Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"java/pdk_projen/API/#projentokensecretoptional_2","text":"public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"java/pdk_projen/API/#readmeoptional_2","text":"public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"java/pdk_projen/API/#staleoptional_2","text":"public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"java/pdk_projen/API/#staleoptionsoptional_2","text":"public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"java/pdk_projen/API/#vscodeoptional_2","text":"public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"java/pdk_projen/API/#allowlibrarydependenciesoptional_1","text":"public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allowLibraryDependenciesOptional "},{"location":"java/pdk_projen/API/#authoremailoptional_1","text":"public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail.","title":"authorEmailOptional "},{"location":"java/pdk_projen/API/#authornameoptional_1","text":"public java . lang . String getAuthorName (); Type: java.lang.String Author's name.","title":"authorNameOptional "},{"location":"java/pdk_projen/API/#authororganizationoptional_1","text":"public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Author's Organization.","title":"authorOrganizationOptional "},{"location":"java/pdk_projen/API/#authorurloptional_1","text":"public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website.","title":"authorUrlOptional "},{"location":"java/pdk_projen/API/#autodetectbinoptional_1","text":"public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"autoDetectBinOptional "},{"location":"java/pdk_projen/API/#binoptional_1","text":"public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"java/pdk_projen/API/#bugsemailoptional_1","text":"public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported.","title":"bugsEmailOptional "},{"location":"java/pdk_projen/API/#bugsurloptional_1","text":"public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker.","title":"bugsUrlOptional "},{"location":"java/pdk_projen/API/#bundleddepsoptional_1","text":"public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundledDepsOptional "},{"location":"java/pdk_projen/API/#codeartifactoptionsoptional_1","text":"public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"codeArtifactOptionsOptional "},{"location":"java/pdk_projen/API/#depsoptional_2","text":"public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"java/pdk_projen/API/#descriptionoptional_2","text":"public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"java/pdk_projen/API/#devdepsoptional_2","text":"public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"devDepsOptional "},{"location":"java/pdk_projen/API/#entrypointoptional_1","text":"public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"java/pdk_projen/API/#homepageoptional_2","text":"public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website.","title":"homepageOptional "},{"location":"java/pdk_projen/API/#keywordsoptional_1","text":"public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json .","title":"keywordsOptional "},{"location":"java/pdk_projen/API/#licenseoptional_2","text":"public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"java/pdk_projen/API/#licensedoptional_1","text":"public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"java/pdk_projen/API/#maxnodeversionoptional_1","text":"public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive).","title":"maxNodeVersionOptional "},{"location":"java/pdk_projen/API/#minnodeversionoptional_1","text":"public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"minNodeVersionOptional "},{"location":"java/pdk_projen/API/#npmaccessoptional_1","text":"public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npmAccessOptional "},{"location":"java/pdk_projen/API/#npmregistryoptional_1","text":"Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npmRegistry~~Optional "},{"location":"java/pdk_projen/API/#npmregistryurloptional_1","text":"public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npmRegistryUrlOptional "},{"location":"java/pdk_projen/API/#npmtokensecretoptional_1","text":"public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npmTokenSecretOptional "},{"location":"java/pdk_projen/API/#packagemanageroptional_1","text":"public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"packageManagerOptional "},{"location":"java/pdk_projen/API/#packagenameoptional_1","text":"public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json.","title":"packageNameOptional "},{"location":"java/pdk_projen/API/#peerdependencyoptionsoptional_1","text":"public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peerDependencyOptionsOptional "},{"location":"java/pdk_projen/API/#peerdepsoptional_1","text":"public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peerDepsOptional "},{"location":"java/pdk_projen/API/#repositoryoptional_1","text":"public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"java/pdk_projen/API/#repositorydirectoryoptional_1","text":"public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repositoryDirectoryOptional "},{"location":"java/pdk_projen/API/#scriptsoptional_1","text":"public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"java/pdk_projen/API/#stabilityoptional_1","text":"public java . lang . String getStability (); Type: java.lang.String Package's Stability.","title":"stabilityOptional "},{"location":"java/pdk_projen/API/#jsiireleaseversionoptional_1","text":"public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsiiReleaseVersionOptional "},{"location":"java/pdk_projen/API/#majorversionoptional_1","text":"public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"majorVersionOptional "},{"location":"java/pdk_projen/API/#npmdisttagoptional_1","text":"public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npmDistTagOptional "},{"location":"java/pdk_projen/API/#postbuildstepsoptional_1","text":"public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow.","title":"postBuildStepsOptional "},{"location":"java/pdk_projen/API/#prereleaseoptional_1","text":"public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"java/pdk_projen/API/#publishdryrunoptional_1","text":"public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publishDryRunOptional "},{"location":"java/pdk_projen/API/#publishtasksoptional_1","text":"public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publishTasksOptional "},{"location":"java/pdk_projen/API/#releasebranchesoptional_1","text":"public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"releaseBranchesOptional "},{"location":"java/pdk_projen/API/#releaseeverycommitoptional_1","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~releaseEveryCommit~~Optional "},{"location":"java/pdk_projen/API/#releasefailureissueoptional_1","text":"public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task.","title":"releaseFailureIssueOptional "},{"location":"java/pdk_projen/API/#releasefailureissuelabeloptional_1","text":"public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"releaseFailureIssueLabelOptional "},{"location":"java/pdk_projen/API/#releasescheduleoptional_1","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~releaseSchedule~~Optional "},{"location":"java/pdk_projen/API/#releasetagprefixoptional_1","text":"public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"releaseTagPrefixOptional "},{"location":"java/pdk_projen/API/#releasetriggeroptional_1","text":"public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"releaseTriggerOptional "},{"location":"java/pdk_projen/API/#releaseworkflownameoptional_1","text":"public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow.","title":"releaseWorkflowNameOptional "},{"location":"java/pdk_projen/API/#releaseworkflowsetupstepsoptional_1","text":"public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container.","title":"releaseWorkflowSetupStepsOptional "},{"location":"java/pdk_projen/API/#versionrcoptionsoptional_1","text":"public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrcOptionsOptional "},{"location":"java/pdk_projen/API/#workflowcontainerimageoptional_1","text":"public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows.","title":"workflowContainerImageOptional "},{"location":"java/pdk_projen/API/#workflowrunsonoptional_1","text":"public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflowRunsOnOptional "},{"location":"java/pdk_projen/API/#defaultreleasebranchrequired_1","text":"public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch.","title":"defaultReleaseBranchRequired "},{"location":"java/pdk_projen/API/#artifactsdirectoryoptional_1","text":"public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts.","title":"artifactsDirectoryOptional "},{"location":"java/pdk_projen/API/#autoapproveprojenupgradesoptional_1","text":"public java . lang . Boolean getAutoApproveProjenUpgrades (); Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveProjenUpgradesOptional "},{"location":"java/pdk_projen/API/#autoapproveupgradesoptional_1","text":"public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveUpgradesOptional "},{"location":"java/pdk_projen/API/#buildworkflowoptional_1","text":"public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"buildWorkflowOptional "},{"location":"java/pdk_projen/API/#buildworkflowtriggersoptional_1","text":"public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"buildWorkflowTriggersOptional "},{"location":"java/pdk_projen/API/#bundleroptionsoptional_1","text":"public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler .","title":"bundlerOptionsOptional "},{"location":"java/pdk_projen/API/#codecovoptional_1","text":"public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"codeCovOptional "},{"location":"java/pdk_projen/API/#codecovtokensecretoptional_1","text":"public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"codeCovTokenSecretOptional "},{"location":"java/pdk_projen/API/#copyrightowneroptional_1","text":"public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyrightOwnerOptional "},{"location":"java/pdk_projen/API/#copyrightperiodoptional_1","text":"public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file.","title":"copyrightPeriodOptional "},{"location":"java/pdk_projen/API/#dependabotoptional_1","text":"public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"java/pdk_projen/API/#dependabotoptionsoptional_1","text":"public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabotOptionsOptional "},{"location":"java/pdk_projen/API/#depsupgradeoptional_1","text":"public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"depsUpgradeOptional "},{"location":"java/pdk_projen/API/#depsupgradeoptionsoptional_1","text":"public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"depsUpgradeOptionsOptional "},{"location":"java/pdk_projen/API/#gitignoreoptional_1","text":"public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"java/pdk_projen/API/#jestoptional_1","text":"public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"java/pdk_projen/API/#jestoptionsoptional_1","text":"public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options.","title":"jestOptionsOptional "},{"location":"java/pdk_projen/API/#mutablebuildoptional_1","text":"public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutableBuildOptional "},{"location":"java/pdk_projen/API/#npmignoreoptional_1","text":"Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"java/pdk_projen/API/#npmignoreenabledoptional_1","text":"public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignoreEnabledOptional "},{"location":"java/pdk_projen/API/#packageoptional_1","text":"public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"java/pdk_projen/API/#prettieroptional_1","text":"public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier.","title":"prettierOptional "},{"location":"java/pdk_projen/API/#prettieroptionsoptional_1","text":"public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettierOptionsOptional "},{"location":"java/pdk_projen/API/#projendevdependencyoptional_1","text":"public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projenDevDependencyOptional "},{"location":"java/pdk_projen/API/#projenrcjsoptional_1","text":"public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrcJsOptional "},{"location":"java/pdk_projen/API/#projenrcjsoptionsoptional_1","text":"public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrcJsOptionsOptional "},{"location":"java/pdk_projen/API/#projenupgradeautomergeoptional_1","text":"Deprecated: use autoApproveProjenUpgrades . public java . lang . Boolean getProjenUpgradeAutoMerge (); Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projenUpgradeAutoMerge~~Optional "},{"location":"java/pdk_projen/API/#projenupgradescheduleoptional_1","text":"public java . util . List < java . lang . String > getProjenUpgradeSchedule (); Type: java.util.List Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projenUpgradeScheduleOptional "},{"location":"java/pdk_projen/API/#projenupgradesecretoptional_1","text":"Deprecated: use githubTokenSecret instead. public java . lang . String getProjenUpgradeSecret (); Type: java.lang.String Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projenUpgradeSecret~~Optional "},{"location":"java/pdk_projen/API/#projenversionoptional_1","text":"public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install.","title":"projenVersionOptional "},{"location":"java/pdk_projen/API/#pullrequesttemplateoptional_1","text":"public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template.","title":"pullRequestTemplateOptional "},{"location":"java/pdk_projen/API/#pullrequesttemplatecontentsoptional_1","text":"public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template.","title":"pullRequestTemplateContentsOptional "},{"location":"java/pdk_projen/API/#releaseoptional_1","text":"public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"java/pdk_projen/API/#releasetonpmoptional_1","text":"public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced.","title":"releaseToNpmOptional "},{"location":"java/pdk_projen/API/#releaseworkflowoptional_1","text":"Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~releaseWorkflow~~Optional "},{"location":"java/pdk_projen/API/#workflowbootstrapstepsoptional_1","text":"public java . util . List < java . lang . Object > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflowBootstrapStepsOptional "},{"location":"java/pdk_projen/API/#workflowgitidentityoptional_1","text":"public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflowGitIdentityOptional "},{"location":"java/pdk_projen/API/#workflownodeversionoptional_1","text":"public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflowNodeVersionOptional "},{"location":"java/pdk_projen/API/#disabletsconfigoptional_1","text":"public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disableTsconfigOptional "},{"location":"java/pdk_projen/API/#docgenoptional_1","text":"public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"java/pdk_projen/API/#docsdirectoryoptional_1","text":"public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory.","title":"docsDirectoryOptional "},{"location":"java/pdk_projen/API/#entrypointtypesoptional_1","text":"public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypointTypesOptional "},{"location":"java/pdk_projen/API/#eslintoptional_1","text":"public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint.","title":"eslintOptional "},{"location":"java/pdk_projen/API/#eslintoptionsoptional_1","text":"public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslintOptionsOptional "},{"location":"java/pdk_projen/API/#libdiroptional_1","text":"public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"java/pdk_projen/API/#projenrctsoptional_1","text":"public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrcTsOptional "},{"location":"java/pdk_projen/API/#projenrctsoptionsoptional_1","text":"public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrcTsOptionsOptional "},{"location":"java/pdk_projen/API/#samplecodeoptional_1","text":"public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sampleCodeOptional "},{"location":"java/pdk_projen/API/#srcdiroptional_1","text":"public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"java/pdk_projen/API/#testdiroptional_2","text":"public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"java/pdk_projen/API/#tsconfigoptional_1","text":"public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"java/pdk_projen/API/#tsconfigdevoptional_1","text":"public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfigDevOptional "},{"location":"java/pdk_projen/API/#tsconfigdevfileoptional_1","text":"public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfigDevFileOptional "},{"location":"java/pdk_projen/API/#typescriptversionoptional_1","text":"public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescriptVersionOptional "},{"location":"java/pdk_projen/API/#buildcommandoptional_1","text":"public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"buildCommandOptional "},{"location":"java/pdk_projen/API/#cdkoutoptional_1","text":"public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"java/pdk_projen/API/#contextoptional_1","text":"public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"java/pdk_projen/API/#featureflagsoptional_1","text":"public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json.","title":"featureFlagsOptional "},{"location":"java/pdk_projen/API/#requireapprovaloptional_1","text":"public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"requireApprovalOptional "},{"location":"java/pdk_projen/API/#watchexcludesoptional_1","text":"public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch .","title":"watchExcludesOptional "},{"location":"java/pdk_projen/API/#watchincludesoptional_1","text":"public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch .","title":"watchIncludesOptional "},{"location":"java/pdk_projen/API/#cdkversionrequired_1","text":"public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdkVersionRequired "},{"location":"java/pdk_projen/API/#cdkassertoptional_1","text":"Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdkAssert~~Optional "},{"location":"java/pdk_projen/API/#cdkassertionsoptional_1","text":"public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdkAssertionsOptional "},{"location":"java/pdk_projen/API/#cdkdependenciesoptional_1","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires.","title":"~~cdkDependencies~~Optional "},{"location":"java/pdk_projen/API/#cdkdependenciesasdepsoptional_1","text":"Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdkDependenciesAsDeps~~Optional "},{"location":"java/pdk_projen/API/#cdktestdependenciesoptional_1","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing.","title":"~~cdkTestDependencies~~Optional "},{"location":"java/pdk_projen/API/#cdkversionpinningoptional_1","text":"public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdkVersionPinningOptional "},{"location":"java/pdk_projen/API/#constructsversionoptional_1","text":"public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructsVersionOptional "},{"location":"java/pdk_projen/API/#appentrypointoptional_1","text":"public java . lang . String getAppEntrypoint (); Type: java.lang.String Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"appEntrypointOptional "},{"location":"java/pdk_projen/API/#integrationtestautodiscoveroptional","text":"public java . lang . Boolean getIntegrationTestAutoDiscover (); Type: java.lang.Boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory.","title":"integrationTestAutoDiscoverOptional "},{"location":"java/pdk_projen/API/#lambdaautodiscoveroptional","text":"public java . lang . Boolean getLambdaAutoDiscover (); Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project.","title":"lambdaAutoDiscoverOptional "},{"location":"java/pdk_projen/API/#lambdaoptionsoptional","text":"public LambdaFunctionCommonOptions getLambdaOptions (); Type: io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions.","title":"lambdaOptionsOptional "},{"location":"java/pdk_projen/API/#targetdependency","text":"Represents an NX Target Dependency.","title":"TargetDependency "},{"location":"java/pdk_projen/API/#initializer_3","text":"import software.aws.awsprototypingsdk.pdk_projen.TargetDependency ; TargetDependency . builder () . projects ( TargetDependencyProject ) . target ( java . lang . String ) . build ();","title":"Initializer "},{"location":"java/pdk_projen/API/#properties_3","text":"Name Type Description projects TargetDependencyProject Target dependencies. target java.lang.String Projen target i.e: build, test, etc.","title":"Properties "},{"location":"java/pdk_projen/API/#projectsrequired","text":"public TargetDependencyProject getProjects (); Type: TargetDependencyProject Target dependencies.","title":"projectsRequired "},{"location":"java/pdk_projen/API/#targetrequired","text":"public java . lang . String getTarget (); Type: java.lang.String Projen target i.e: build, test, etc.","title":"targetRequired "},{"location":"java/pdk_projen/API/#classes","text":"","title":"Classes "},{"location":"java/pdk_projen/API/#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"java/pdk_projen/API/#initializers","text":"import software.aws.awsprototypingsdk.pdk_projen.NxMonorepoProject ; NxMonorepoProject . Builder . create () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveProjenUpgrades(java.lang.Boolean) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenUpgradeAutoMerge(java.lang.Boolean) // .projenUpgradeSchedule(java.util.List<java.lang.String>) // .projenUpgradeSecret(java.lang.String) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<java.lang.Object>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .nxIgnorePatterns(java.util.List<java.lang.String>) // .sampleLanguage(SampleLanguage) // .targetDependencies(java.util.Map<java.lang.String, java.util.List<TargetDependency>>) . build (); Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveProjenUpgrades java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule java.util.List Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret java.lang.String Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. nxIgnorePatterns java.util.List List of patterns to include in the .nxignore file. sampleLanguage SampleLanguage Language to generate sample code on first synthesis. targetDependencies java.util.Map<java.lang.String, java.util.List< TargetDependency >> Configuration for NX TargetDependencies.","title":"Initializers "},{"location":"java/pdk_projen/API/#namerequired_3","text":"Type: java.lang.String Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"java/pdk_projen/API/#loggingoptional_3","text":"Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"java/pdk_projen/API/#outdiroptional_3","text":"Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"java/pdk_projen/API/#parentoptional_3","text":"Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"java/pdk_projen/API/#projencommandoptional_3","text":"Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptional_3","text":"Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptionsoptional_3","text":"Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"java/pdk_projen/API/#autoapproveoptionsoptional_3","text":"Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"java/pdk_projen/API/#automergeoptionsoptional_3","text":"Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"java/pdk_projen/API/#clobberoptional_3","text":"Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"java/pdk_projen/API/#devcontaineroptional_3","text":"Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"java/pdk_projen/API/#githuboptional_3","text":"Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"java/pdk_projen/API/#githuboptionsoptional_3","text":"Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"java/pdk_projen/API/#gitpodoptional_3","text":"Type: java.lang.Boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"java/pdk_projen/API/#mergifyoptional_3","text":"Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"java/pdk_projen/API/#mergifyoptionsoptional_3","text":"Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"java/pdk_projen/API/#projecttypeoptional_3","text":"Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"java/pdk_projen/API/#projentokensecretoptional_3","text":"Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"java/pdk_projen/API/#readmeoptional_3","text":"Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"java/pdk_projen/API/#staleoptional_3","text":"Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"java/pdk_projen/API/#staleoptionsoptional_3","text":"Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"java/pdk_projen/API/#vscodeoptional_3","text":"Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"java/pdk_projen/API/#allowlibrarydependenciesoptional_2","text":"Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allowLibraryDependenciesOptional "},{"location":"java/pdk_projen/API/#authoremailoptional_2","text":"Type: java.lang.String Author's e-mail.","title":"authorEmailOptional "},{"location":"java/pdk_projen/API/#authornameoptional_2","text":"Type: java.lang.String Author's name.","title":"authorNameOptional "},{"location":"java/pdk_projen/API/#authororganizationoptional_2","text":"Type: java.lang.Boolean Author's Organization.","title":"authorOrganizationOptional "},{"location":"java/pdk_projen/API/#authorurloptional_2","text":"Type: java.lang.String Author's URL / Website.","title":"authorUrlOptional "},{"location":"java/pdk_projen/API/#autodetectbinoptional_2","text":"Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"autoDetectBinOptional "},{"location":"java/pdk_projen/API/#binoptional_2","text":"Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"java/pdk_projen/API/#bugsemailoptional_2","text":"Type: java.lang.String The email address to which issues should be reported.","title":"bugsEmailOptional "},{"location":"java/pdk_projen/API/#bugsurloptional_2","text":"Type: java.lang.String The url to your project's issue tracker.","title":"bugsUrlOptional "},{"location":"java/pdk_projen/API/#bundleddepsoptional_2","text":"Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundledDepsOptional "},{"location":"java/pdk_projen/API/#codeartifactoptionsoptional_2","text":"Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"codeArtifactOptionsOptional "},{"location":"java/pdk_projen/API/#depsoptional_3","text":"Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"java/pdk_projen/API/#descriptionoptional_3","text":"Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"java/pdk_projen/API/#devdepsoptional_3","text":"Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"devDepsOptional "},{"location":"java/pdk_projen/API/#entrypointoptional_2","text":"Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"java/pdk_projen/API/#homepageoptional_3","text":"Type: java.lang.String Package's Homepage / Website.","title":"homepageOptional "},{"location":"java/pdk_projen/API/#keywordsoptional_2","text":"Type: java.util.List Keywords to include in package.json .","title":"keywordsOptional "},{"location":"java/pdk_projen/API/#licenseoptional_3","text":"Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"java/pdk_projen/API/#licensedoptional_2","text":"Type: java.lang.Boolean Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"java/pdk_projen/API/#maxnodeversionoptional_2","text":"Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive).","title":"maxNodeVersionOptional "},{"location":"java/pdk_projen/API/#minnodeversionoptional_2","text":"Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"minNodeVersionOptional "},{"location":"java/pdk_projen/API/#npmaccessoptional_2","text":"Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npmAccessOptional "},{"location":"java/pdk_projen/API/#npmregistryoptional_2","text":"Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npmRegistry~~Optional "},{"location":"java/pdk_projen/API/#npmregistryurloptional_2","text":"Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npmRegistryUrlOptional "},{"location":"java/pdk_projen/API/#npmtokensecretoptional_2","text":"Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npmTokenSecretOptional "},{"location":"java/pdk_projen/API/#packagemanageroptional_2","text":"Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"packageManagerOptional "},{"location":"java/pdk_projen/API/#packagenameoptional_2","text":"Type: java.lang.String Default: defaults to project name The \"name\" in package.json.","title":"packageNameOptional "},{"location":"java/pdk_projen/API/#peerdependencyoptionsoptional_2","text":"Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peerDependencyOptionsOptional "},{"location":"java/pdk_projen/API/#peerdepsoptional_2","text":"Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peerDepsOptional "},{"location":"java/pdk_projen/API/#repositoryoptional_2","text":"Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"java/pdk_projen/API/#repositorydirectoryoptional_2","text":"Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repositoryDirectoryOptional "},{"location":"java/pdk_projen/API/#scriptsoptional_2","text":"Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"java/pdk_projen/API/#stabilityoptional_2","text":"Type: java.lang.String Package's Stability.","title":"stabilityOptional "},{"location":"java/pdk_projen/API/#jsiireleaseversionoptional_2","text":"Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsiiReleaseVersionOptional "},{"location":"java/pdk_projen/API/#majorversionoptional_2","text":"Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"majorVersionOptional "},{"location":"java/pdk_projen/API/#npmdisttagoptional_2","text":"Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npmDistTagOptional "},{"location":"java/pdk_projen/API/#postbuildstepsoptional_2","text":"Type: java.util.List Default: [] Steps to execute after build as part of the release workflow.","title":"postBuildStepsOptional "},{"location":"java/pdk_projen/API/#prereleaseoptional_2","text":"Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"java/pdk_projen/API/#publishdryrunoptional_2","text":"Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publishDryRunOptional "},{"location":"java/pdk_projen/API/#publishtasksoptional_2","text":"Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publishTasksOptional "},{"location":"java/pdk_projen/API/#releasebranchesoptional_2","text":"Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"releaseBranchesOptional "},{"location":"java/pdk_projen/API/#releaseeverycommitoptional_2","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~releaseEveryCommit~~Optional "},{"location":"java/pdk_projen/API/#releasefailureissueoptional_2","text":"Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task.","title":"releaseFailureIssueOptional "},{"location":"java/pdk_projen/API/#releasefailureissuelabeloptional_2","text":"Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"releaseFailureIssueLabelOptional "},{"location":"java/pdk_projen/API/#releasescheduleoptional_2","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~releaseSchedule~~Optional "},{"location":"java/pdk_projen/API/#releasetagprefixoptional_2","text":"Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"releaseTagPrefixOptional "},{"location":"java/pdk_projen/API/#releasetriggeroptional_2","text":"Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"releaseTriggerOptional "},{"location":"java/pdk_projen/API/#releaseworkflownameoptional_2","text":"Type: java.lang.String Default: \"Release\" The name of the default release workflow.","title":"releaseWorkflowNameOptional "},{"location":"java/pdk_projen/API/#releaseworkflowsetupstepsoptional_2","text":"Type: java.util.List A set of workflow steps to execute in order to setup the workflow container.","title":"releaseWorkflowSetupStepsOptional "},{"location":"java/pdk_projen/API/#versionrcoptionsoptional_2","text":"Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrcOptionsOptional "},{"location":"java/pdk_projen/API/#workflowcontainerimageoptional_2","text":"Type: java.lang.String Default: default image Container image to use for GitHub workflows.","title":"workflowContainerImageOptional "},{"location":"java/pdk_projen/API/#workflowrunsonoptional_2","text":"Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflowRunsOnOptional "},{"location":"java/pdk_projen/API/#defaultreleasebranchrequired_2","text":"Type: java.lang.String Default: \"main\" The name of the main release branch.","title":"defaultReleaseBranchRequired "},{"location":"java/pdk_projen/API/#artifactsdirectoryoptional_2","text":"Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts.","title":"artifactsDirectoryOptional "},{"location":"java/pdk_projen/API/#autoapproveprojenupgradesoptional_2","text":"Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveProjenUpgradesOptional "},{"location":"java/pdk_projen/API/#autoapproveupgradesoptional_2","text":"Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveUpgradesOptional "},{"location":"java/pdk_projen/API/#buildworkflowoptional_2","text":"Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"buildWorkflowOptional "},{"location":"java/pdk_projen/API/#buildworkflowtriggersoptional_2","text":"Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"buildWorkflowTriggersOptional "},{"location":"java/pdk_projen/API/#bundleroptionsoptional_2","text":"Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler .","title":"bundlerOptionsOptional "},{"location":"java/pdk_projen/API/#codecovoptional_2","text":"Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"codeCovOptional "},{"location":"java/pdk_projen/API/#codecovtokensecretoptional_2","text":"Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"codeCovTokenSecretOptional "},{"location":"java/pdk_projen/API/#copyrightowneroptional_2","text":"Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyrightOwnerOptional "},{"location":"java/pdk_projen/API/#copyrightperiodoptional_2","text":"Type: java.lang.String Default: current year The copyright years to put in the LICENSE file.","title":"copyrightPeriodOptional "},{"location":"java/pdk_projen/API/#dependabotoptional_2","text":"Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"java/pdk_projen/API/#dependabotoptionsoptional_2","text":"Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabotOptionsOptional "},{"location":"java/pdk_projen/API/#depsupgradeoptional_2","text":"Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"depsUpgradeOptional "},{"location":"java/pdk_projen/API/#depsupgradeoptionsoptional_2","text":"Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"depsUpgradeOptionsOptional "},{"location":"java/pdk_projen/API/#gitignoreoptional_2","text":"Type: java.util.List Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"java/pdk_projen/API/#jestoptional_2","text":"Type: java.lang.Boolean Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"java/pdk_projen/API/#jestoptionsoptional_2","text":"Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options.","title":"jestOptionsOptional "},{"location":"java/pdk_projen/API/#mutablebuildoptional_2","text":"Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutableBuildOptional "},{"location":"java/pdk_projen/API/#npmignoreoptional_2","text":"Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"java/pdk_projen/API/#npmignoreenabledoptional_2","text":"Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignoreEnabledOptional "},{"location":"java/pdk_projen/API/#packageoptional_2","text":"Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"java/pdk_projen/API/#prettieroptional_2","text":"Type: java.lang.Boolean Default: false Setup prettier.","title":"prettierOptional "},{"location":"java/pdk_projen/API/#prettieroptionsoptional_2","text":"Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettierOptionsOptional "},{"location":"java/pdk_projen/API/#projendevdependencyoptional_2","text":"Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projenDevDependencyOptional "},{"location":"java/pdk_projen/API/#projenrcjsoptional_2","text":"Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrcJsOptional "},{"location":"java/pdk_projen/API/#projenrcjsoptionsoptional_2","text":"Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrcJsOptionsOptional "},{"location":"java/pdk_projen/API/#projenupgradeautomergeoptional_2","text":"Deprecated: use autoApproveProjenUpgrades . Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projenUpgradeAutoMerge~~Optional "},{"location":"java/pdk_projen/API/#projenupgradescheduleoptional_2","text":"Type: java.util.List Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projenUpgradeScheduleOptional "},{"location":"java/pdk_projen/API/#projenupgradesecretoptional_2","text":"Deprecated: use githubTokenSecret instead. Type: java.lang.String Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projenUpgradeSecret~~Optional "},{"location":"java/pdk_projen/API/#projenversionoptional_2","text":"Type: java.lang.String Default: Defaults to the latest version. Version of projen to install.","title":"projenVersionOptional "},{"location":"java/pdk_projen/API/#pullrequesttemplateoptional_2","text":"Type: java.lang.Boolean Default: true Include a GitHub pull request template.","title":"pullRequestTemplateOptional "},{"location":"java/pdk_projen/API/#pullrequesttemplatecontentsoptional_2","text":"Type: java.util.List Default: default content The contents of the pull request template.","title":"pullRequestTemplateContentsOptional "},{"location":"java/pdk_projen/API/#releaseoptional_2","text":"Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"java/pdk_projen/API/#releasetonpmoptional_2","text":"Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced.","title":"releaseToNpmOptional "},{"location":"java/pdk_projen/API/#releaseworkflowoptional_2","text":"Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~releaseWorkflow~~Optional "},{"location":"java/pdk_projen/API/#workflowbootstrapstepsoptional_2","text":"Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflowBootstrapStepsOptional "},{"location":"java/pdk_projen/API/#workflowgitidentityoptional_2","text":"Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflowGitIdentityOptional "},{"location":"java/pdk_projen/API/#workflownodeversionoptional_2","text":"Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflowNodeVersionOptional "},{"location":"java/pdk_projen/API/#disabletsconfigoptional_2","text":"Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disableTsconfigOptional "},{"location":"java/pdk_projen/API/#docgenoptional_2","text":"Type: java.lang.Boolean Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"java/pdk_projen/API/#docsdirectoryoptional_2","text":"Type: java.lang.String Default: \"docs\" Docs directory.","title":"docsDirectoryOptional "},{"location":"java/pdk_projen/API/#entrypointtypesoptional_2","text":"Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypointTypesOptional "},{"location":"java/pdk_projen/API/#eslintoptional_2","text":"Type: java.lang.Boolean Default: true Setup eslint.","title":"eslintOptional "},{"location":"java/pdk_projen/API/#eslintoptionsoptional_2","text":"Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslintOptionsOptional "},{"location":"java/pdk_projen/API/#libdiroptional_2","text":"Type: java.lang.String Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"java/pdk_projen/API/#projenrctsoptional_2","text":"Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrcTsOptional "},{"location":"java/pdk_projen/API/#projenrctsoptionsoptional_2","text":"Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrcTsOptionsOptional "},{"location":"java/pdk_projen/API/#samplecodeoptional_2","text":"Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sampleCodeOptional "},{"location":"java/pdk_projen/API/#srcdiroptional_2","text":"Type: java.lang.String Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"java/pdk_projen/API/#testdiroptional_3","text":"Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"java/pdk_projen/API/#tsconfigoptional_2","text":"Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"java/pdk_projen/API/#tsconfigdevoptional_2","text":"Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfigDevOptional "},{"location":"java/pdk_projen/API/#tsconfigdevfileoptional_2","text":"Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfigDevFileOptional "},{"location":"java/pdk_projen/API/#typescriptversionoptional_2","text":"Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescriptVersionOptional "},{"location":"java/pdk_projen/API/#nxignorepatternsoptional_1","text":"Type: java.util.List Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore","title":"nxIgnorePatternsOptional "},{"location":"java/pdk_projen/API/#samplelanguageoptional_1","text":"Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis.","title":"sampleLanguageOptional "},{"location":"java/pdk_projen/API/#targetdependenciesoptional_1","text":"Type: java.util.Map<java.lang.String, java.util.List< TargetDependency >> Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies","title":"targetDependenciesOptional "},{"location":"java/pdk_projen/API/#methods","text":"Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's.","title":"Methods "},{"location":"java/pdk_projen/API/#addexcludefromcleanup","text":"public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"addExcludeFromCleanup "},{"location":"java/pdk_projen/API/#globsrequired","text":"Type: java.lang.String The glob patterns to match.","title":"globsRequired "},{"location":"java/pdk_projen/API/#addgitignore","text":"public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern.","title":"addGitIgnore "},{"location":"java/pdk_projen/API/#patternrequired","text":"Type: java.lang.String The glob pattern to ignore.","title":"patternRequired "},{"location":"java/pdk_projen/API/#addpackageignore","text":"public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"addPackageIgnore "},{"location":"java/pdk_projen/API/#patternrequired_1","text":"Type: java.lang.String","title":"patternRequired "},{"location":"java/pdk_projen/API/#addtask","text":"public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name.","title":"addTask "},{"location":"java/pdk_projen/API/#namerequired_4","text":"Type: java.lang.String The task name to add.","title":"nameRequired "},{"location":"java/pdk_projen/API/#propsoptional","text":"Type: io.github.cdklabs.projen.TaskOptions Task properties.","title":"propsOptional "},{"location":"java/pdk_projen/API/#addtip","text":"public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis.","title":"~~addTip~~ "},{"location":"java/pdk_projen/API/#messagerequired","text":"Type: java.lang.String The message.","title":"messageRequired "},{"location":"java/pdk_projen/API/#annotategenerated","text":"public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotateGenerated "},{"location":"java/pdk_projen/API/#globrequired","text":"Type: java.lang.String the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"java/pdk_projen/API/#postsynthesize","text":"public void postSynthesize () Called after all components are synthesized. Order is not guaranteed.","title":"postSynthesize "},{"location":"java/pdk_projen/API/#presynthesize","text":"public void preSynthesize () Called before all components are synthesized.","title":"preSynthesize "},{"location":"java/pdk_projen/API/#removetask","text":"public Task removeTask ( java . lang . String name ) Removes a task from a project.","title":"removeTask "},{"location":"java/pdk_projen/API/#namerequired_5","text":"Type: java.lang.String The name of the task to remove.","title":"nameRequired "},{"location":"java/pdk_projen/API/#runtaskcommand","text":"public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK .","title":"runTaskCommand "},{"location":"java/pdk_projen/API/#taskrequired","text":"Type: io.github.cdklabs.projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"java/pdk_projen/API/#synth","text":"public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"java/pdk_projen/API/#tryfindfile","text":"public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects.","title":"tryFindFile "},{"location":"java/pdk_projen/API/#filepathrequired","text":"Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project.","title":"filePathRequired "},{"location":"java/pdk_projen/API/#tryfindjsonfile","text":"public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name.","title":"~~tryFindJsonFile~~ "},{"location":"java/pdk_projen/API/#filepathrequired_1","text":"Type: java.lang.String The file path.","title":"filePathRequired "},{"location":"java/pdk_projen/API/#tryfindobjectfile","text":"public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"tryFindObjectFile "},{"location":"java/pdk_projen/API/#filepathrequired_2","text":"Type: java.lang.String The file path.","title":"filePathRequired "},{"location":"java/pdk_projen/API/#addbins","text":"public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins )","title":"addBins "},{"location":"java/pdk_projen/API/#binsrequired","text":"Type: java.util.Map","title":"binsRequired "},{"location":"java/pdk_projen/API/#addbundleddeps","text":"public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json .","title":"addBundledDeps "},{"location":"java/pdk_projen/API/#depsrequired","text":"Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"java/pdk_projen/API/#addcompilecommand","text":"public void addCompileCommand ( java . lang . String commands ) DEPRECATED.","title":"~~addCompileCommand~~ "},{"location":"java/pdk_projen/API/#commandsrequired","text":"Type: java.lang.String","title":"commandsRequired "},{"location":"java/pdk_projen/API/#adddeps","text":"public void addDeps ( java . lang . String deps ) Defines normal dependencies.","title":"addDeps "},{"location":"java/pdk_projen/API/#depsrequired_1","text":"Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"java/pdk_projen/API/#adddevdeps","text":"public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies.","title":"addDevDeps "},{"location":"java/pdk_projen/API/#depsrequired_2","text":"Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"java/pdk_projen/API/#addfields","text":"public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json .","title":"addFields "},{"location":"java/pdk_projen/API/#fieldsrequired","text":"Type: java.util.Map The fields to set.","title":"fieldsRequired "},{"location":"java/pdk_projen/API/#addkeywords","text":"public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated).","title":"addKeywords "},{"location":"java/pdk_projen/API/#keywordsrequired","text":"Type: java.lang.String The keywords to add.","title":"keywordsRequired "},{"location":"java/pdk_projen/API/#addpeerdeps","text":"public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers.","title":"addPeerDeps "},{"location":"java/pdk_projen/API/#depsrequired_3","text":"Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"java/pdk_projen/API/#addtestcommand","text":"public void addTestCommand ( java . lang . String commands ) DEPRECATED.","title":"~~addTestCommand~~ "},{"location":"java/pdk_projen/API/#commandsrequired_1","text":"Type: java.lang.String","title":"commandsRequired "},{"location":"java/pdk_projen/API/#hasscript","text":"public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined.","title":"hasScript "},{"location":"java/pdk_projen/API/#namerequired_6","text":"Type: java.lang.String The name of the script.","title":"nameRequired "},{"location":"java/pdk_projen/API/#removescript","text":"public void removeScript ( java . lang . String name ) Removes the npm script (always successful).","title":"removeScript "},{"location":"java/pdk_projen/API/#namerequired_7","text":"Type: java.lang.String The name of the script.","title":"nameRequired "},{"location":"java/pdk_projen/API/#renderworkflowsetup","text":"public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow.","title":"renderWorkflowSetup "},{"location":"java/pdk_projen/API/#optionsoptional","text":"Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options.","title":"optionsOptional "},{"location":"java/pdk_projen/API/#setscript","text":"public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script.","title":"setScript "},{"location":"java/pdk_projen/API/#namerequired_8","text":"Type: java.lang.String The script name.","title":"nameRequired "},{"location":"java/pdk_projen/API/#commandrequired","text":"Type: java.lang.String The command to execute.","title":"commandRequired "},{"location":"java/pdk_projen/API/#addimplicitdependency","text":"public void addImplicitDependency ( Project dependent , Project dependee ) Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example.","title":"addImplicitDependency "},{"location":"java/pdk_projen/API/#dependentrequired","text":"Type: io.github.cdklabs.projen.Project project you want to have the dependency.","title":"dependentRequired "},{"location":"java/pdk_projen/API/#dependeerequired","text":"Type: io.github.cdklabs.projen.Project project you wish to depend on.","title":"dependeeRequired "},{"location":"java/pdk_projen/API/#properties_4","text":"Name Type Description buildTask io.github.cdklabs.projen.Task No description. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Automatic PR merges. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this pacakge. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description.","title":"Properties "},{"location":"java/pdk_projen/API/#buildtaskrequired","text":"public Task getBuildTask (); Type: io.github.cdklabs.projen.Task","title":"buildTaskRequired "},{"location":"java/pdk_projen/API/#compiletaskrequired","text":"public Task getCompileTask (); Type: io.github.cdklabs.projen.Task","title":"compileTaskRequired "},{"location":"java/pdk_projen/API/#componentsrequired","text":"public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project.","title":"componentsRequired "},{"location":"java/pdk_projen/API/#depsrequired_4","text":"public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"java/pdk_projen/API/#ejectedrequired","text":"public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"java/pdk_projen/API/#filesrequired","text":"public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project.","title":"filesRequired "},{"location":"java/pdk_projen/API/#gitattributesrequired","text":"public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"java/pdk_projen/API/#gitignorerequired","text":"public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"java/pdk_projen/API/#loggerrequired","text":"public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"java/pdk_projen/API/#namerequired_9","text":"public java . lang . String getName (); Type: java.lang.String Project name.","title":"nameRequired "},{"location":"java/pdk_projen/API/#outdirrequired","text":"public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project.","title":"outdirRequired "},{"location":"java/pdk_projen/API/#packagetaskrequired","text":"public Task getPackageTask (); Type: io.github.cdklabs.projen.Task","title":"packageTaskRequired "},{"location":"java/pdk_projen/API/#postcompiletaskrequired","text":"public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task","title":"postCompileTaskRequired "},{"location":"java/pdk_projen/API/#precompiletaskrequired","text":"public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task","title":"preCompileTaskRequired "},{"location":"java/pdk_projen/API/#projectbuildrequired","text":"public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project.","title":"projectBuildRequired "},{"location":"java/pdk_projen/API/#projencommandrequired","text":"public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI.","title":"projenCommandRequired "},{"location":"java/pdk_projen/API/#rootrequired","text":"public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project.","title":"rootRequired "},{"location":"java/pdk_projen/API/#tasksrequired","text":"public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"java/pdk_projen/API/#testtaskrequired","text":"public Task getTestTask (); Type: io.github.cdklabs.projen.Task","title":"testTaskRequired "},{"location":"java/pdk_projen/API/#defaulttaskoptional","text":"public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"defaultTaskOptional "},{"location":"java/pdk_projen/API/#initprojectoptional","text":"public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"initProjectOptional "},{"location":"java/pdk_projen/API/#parentoptional_4","text":"public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"java/pdk_projen/API/#projecttyperequired","text":"public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType","title":"projectTypeRequired "},{"location":"java/pdk_projen/API/#autoapproveoptional","text":"public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project.","title":"autoApproveOptional "},{"location":"java/pdk_projen/API/#devcontaineroptional_4","text":"public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"devContainerOptional "},{"location":"java/pdk_projen/API/#githuboptional_4","text":"public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"java/pdk_projen/API/#gitpodoptional_4","text":"public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"java/pdk_projen/API/#vscodeoptional_4","text":"public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"java/pdk_projen/API/#allowlibrarydependenciesrequired","text":"Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean","title":"~~allowLibraryDependencies~~Required "},{"location":"java/pdk_projen/API/#artifactsdirectoryrequired","text":"public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg .","title":"artifactsDirectoryRequired "},{"location":"java/pdk_projen/API/#artifactsjavascriptdirectoryrequired","text":"public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ).","title":"artifactsJavascriptDirectoryRequired "},{"location":"java/pdk_projen/API/#bundlerrequired","text":"public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler","title":"bundlerRequired "},{"location":"java/pdk_projen/API/#entrypointrequired","text":"Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String","title":"~~entrypoint~~Required "},{"location":"java/pdk_projen/API/#manifestrequired","text":"Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object","title":"~~manifest~~Required "},{"location":"java/pdk_projen/API/#packagerequired","text":"public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package.","title":"packageRequired "},{"location":"java/pdk_projen/API/#packagemanagerrequired","text":"Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use.","title":"~~packageManager~~Required "},{"location":"java/pdk_projen/API/#runscriptcommandrequired","text":"public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager).","title":"runScriptCommandRequired "},{"location":"java/pdk_projen/API/#automergeoptional","text":"public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Automatic PR merges.","title":"autoMergeOptional "},{"location":"java/pdk_projen/API/#buildworkflowoptional_3","text":"public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled.","title":"buildWorkflowOptional "},{"location":"java/pdk_projen/API/#buildworkflowjobidoptional","text":"public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow.","title":"buildWorkflowJobIdOptional "},{"location":"java/pdk_projen/API/#jestoptional_3","text":"public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled).","title":"jestOptional "},{"location":"java/pdk_projen/API/#maxnodeversionoptional_3","text":"public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this pacakge.","title":"maxNodeVersionOptional "},{"location":"java/pdk_projen/API/#minnodeversionoptional_3","text":"public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package.","title":"minNodeVersionOptional "},{"location":"java/pdk_projen/API/#npmignoreoptional_3","text":"public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file.","title":"npmignoreOptional "},{"location":"java/pdk_projen/API/#prettieroptional_3","text":"public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier","title":"prettierOptional "},{"location":"java/pdk_projen/API/#publisheroptional","text":"Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow.","title":"~~publisher~~Optional "},{"location":"java/pdk_projen/API/#releaseoptional_3","text":"public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management.","title":"releaseOptional "},{"location":"java/pdk_projen/API/#upgradeworkflowoptional","text":"public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow.","title":"upgradeWorkflowOptional "},{"location":"java/pdk_projen/API/#docsdirectoryrequired","text":"public java . lang . String getDocsDirectory (); Type: java.lang.String","title":"docsDirectoryRequired "},{"location":"java/pdk_projen/API/#libdirrequired","text":"public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside.","title":"libdirRequired "},{"location":"java/pdk_projen/API/#srcdirrequired","text":"public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside.","title":"srcdirRequired "},{"location":"java/pdk_projen/API/#testdirrequired","text":"public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside.","title":"testdirRequired "},{"location":"java/pdk_projen/API/#tsconfigdevrequired","text":"public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen).","title":"tsconfigDevRequired "},{"location":"java/pdk_projen/API/#watchtaskrequired","text":"public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task.","title":"watchTaskRequired "},{"location":"java/pdk_projen/API/#docgenoptional_3","text":"public java . lang . Boolean getDocgen (); Type: java.lang.Boolean","title":"docgenOptional "},{"location":"java/pdk_projen/API/#eslintoptional_3","text":"public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint","title":"eslintOptional "},{"location":"java/pdk_projen/API/#tsconfigoptional_3","text":"public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig","title":"tsconfigOptional "},{"location":"java/pdk_projen/API/#tsconfigeslintoptional","text":"public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig","title":"tsconfigEslintOptional "},{"location":"java/pdk_projen/API/#constants","text":"Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"java/pdk_projen/API/#default_taskrequired","text":"public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"java/pdk_projen/API/#pdkpipelinepyproject","text":"Synthesizes a Python Project with a CI/CD pipeline.","title":"PdkPipelinePyProject "},{"location":"java/pdk_projen/API/#initializers_1","text":"import software.aws.awsprototypingsdk.pdk_projen.PdkPipelinePyProject ; PdkPipelinePyProject . Builder . create () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .testdir(java.lang.String) . build (); Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcPython java.lang.Boolean Use projenrc in python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir java.lang.String Python sources directory.","title":"Initializers "},{"location":"java/pdk_projen/API/#namerequired_10","text":"Type: java.lang.String Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"java/pdk_projen/API/#loggingoptional_4","text":"Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"java/pdk_projen/API/#outdiroptional_4","text":"Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"java/pdk_projen/API/#parentoptional_5","text":"Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"java/pdk_projen/API/#projencommandoptional_4","text":"Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptional_4","text":"Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptionsoptional_4","text":"Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"java/pdk_projen/API/#autoapproveoptionsoptional_4","text":"Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"java/pdk_projen/API/#automergeoptionsoptional_4","text":"Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"java/pdk_projen/API/#clobberoptional_4","text":"Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"java/pdk_projen/API/#devcontaineroptional_5","text":"Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"java/pdk_projen/API/#githuboptional_5","text":"Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"java/pdk_projen/API/#githuboptionsoptional_4","text":"Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"java/pdk_projen/API/#gitpodoptional_5","text":"Type: java.lang.Boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"java/pdk_projen/API/#mergifyoptional_4","text":"Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"java/pdk_projen/API/#mergifyoptionsoptional_4","text":"Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"java/pdk_projen/API/#projecttypeoptional_4","text":"Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"java/pdk_projen/API/#projentokensecretoptional_4","text":"Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"java/pdk_projen/API/#readmeoptional_4","text":"Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"java/pdk_projen/API/#staleoptional_4","text":"Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"java/pdk_projen/API/#staleoptionsoptional_4","text":"Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"java/pdk_projen/API/#vscodeoptional_5","text":"Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"java/pdk_projen/API/#authoremailrequired_1","text":"Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail.","title":"authorEmailRequired "},{"location":"java/pdk_projen/API/#authornamerequired_1","text":"Type: java.lang.String Default: $GIT_USER_NAME Author's name.","title":"authorNameRequired "},{"location":"java/pdk_projen/API/#versionrequired_1","text":"Type: java.lang.String Default: \"0.1.0\" Version of the package.","title":"versionRequired "},{"location":"java/pdk_projen/API/#classifiersoptional_1","text":"Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/","title":"classifiersOptional "},{"location":"java/pdk_projen/API/#descriptionoptional_4","text":"Type: java.lang.String A short description of the package.","title":"descriptionOptional "},{"location":"java/pdk_projen/API/#homepageoptional_4","text":"Type: java.lang.String A URL to the website of the project.","title":"homepageOptional "},{"location":"java/pdk_projen/API/#licenseoptional_4","text":"Type: java.lang.String License of this package as an SPDX identifier.","title":"licenseOptional "},{"location":"java/pdk_projen/API/#poetryoptionsoptional_1","text":"Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry.","title":"poetryOptionsOptional "},{"location":"java/pdk_projen/API/#setupconfigoptional_1","text":"Type: java.util.Map Additional fields to pass in the setup() function if using setuptools.","title":"setupConfigOptional "},{"location":"java/pdk_projen/API/#modulenamerequired_1","text":"Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores.","title":"moduleNameRequired "},{"location":"java/pdk_projen/API/#depsoptional_4","text":"Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() .","title":"depsOptional "},{"location":"java/pdk_projen/API/#devdepsoptional_4","text":"Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() .","title":"devDepsOptional "},{"location":"java/pdk_projen/API/#pipoptional_1","text":"Type: java.lang.Boolean Default: true Use pip with a requirements.txt file to track project dependencies.","title":"pipOptional "},{"location":"java/pdk_projen/API/#poetryoptional_1","text":"Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing.","title":"poetryOptional "},{"location":"java/pdk_projen/API/#projenrcpythonoptional_1","text":"Type: java.lang.Boolean Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py .","title":"projenrcPythonOptional "},{"location":"java/pdk_projen/API/#projenrcpythonoptionsoptional_1","text":"Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python.","title":"projenrcPythonOptionsOptional "},{"location":"java/pdk_projen/API/#pytestoptional_1","text":"Type: java.lang.Boolean Default: true Include pytest tests.","title":"pytestOptional "},{"location":"java/pdk_projen/API/#pytestoptionsoptional_1","text":"Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options.","title":"pytestOptionsOptional "},{"location":"java/pdk_projen/API/#sampleoptional_1","text":"Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist.","title":"sampleOptional "},{"location":"java/pdk_projen/API/#setuptoolsoptional_1","text":"Type: java.lang.Boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing.","title":"setuptoolsOptional "},{"location":"java/pdk_projen/API/#venvoptional_1","text":"Type: java.lang.Boolean Default: true Use venv to manage a virtual environment for installing dependencies inside.","title":"venvOptional "},{"location":"java/pdk_projen/API/#venvoptionsoptional_1","text":"Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options.","title":"venvOptionsOptional "},{"location":"java/pdk_projen/API/#buildcommandoptional_2","text":"Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"buildCommandOptional "},{"location":"java/pdk_projen/API/#cdkoutoptional_2","text":"Type: java.lang.String Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"java/pdk_projen/API/#contextoptional_2","text":"Type: java.util.Map Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"java/pdk_projen/API/#featureflagsoptional_2","text":"Type: java.lang.Boolean Default: true Include all feature flags in cdk.json.","title":"featureFlagsOptional "},{"location":"java/pdk_projen/API/#requireapprovaloptional_2","text":"Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"requireApprovalOptional "},{"location":"java/pdk_projen/API/#watchexcludesoptional_2","text":"Type: java.util.List Default: [] Glob patterns to exclude from cdk watch .","title":"watchExcludesOptional "},{"location":"java/pdk_projen/API/#watchincludesoptional_2","text":"Type: java.util.List Default: [] Glob patterns to include in cdk watch .","title":"watchIncludesOptional "},{"location":"java/pdk_projen/API/#cdkversionrequired_2","text":"Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdkVersionRequired "},{"location":"java/pdk_projen/API/#cdkassertoptional_2","text":"Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdkAssert~~Optional "},{"location":"java/pdk_projen/API/#cdkassertionsoptional_2","text":"Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdkAssertionsOptional "},{"location":"java/pdk_projen/API/#cdkdependenciesoptional_2","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires.","title":"~~cdkDependencies~~Optional "},{"location":"java/pdk_projen/API/#cdkdependenciesasdepsoptional_2","text":"Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdkDependenciesAsDeps~~Optional "},{"location":"java/pdk_projen/API/#cdktestdependenciesoptional_2","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing.","title":"~~cdkTestDependencies~~Optional "},{"location":"java/pdk_projen/API/#cdkversionpinningoptional_2","text":"Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdkVersionPinningOptional "},{"location":"java/pdk_projen/API/#constructsversionoptional_2","text":"Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructsVersionOptional "},{"location":"java/pdk_projen/API/#appentrypointoptional_2","text":"Type: java.lang.String Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"appEntrypointOptional "},{"location":"java/pdk_projen/API/#testdiroptional_4","text":"Type: java.lang.String Default: \"tests\" Python sources directory.","title":"testdirOptional "},{"location":"java/pdk_projen/API/#methods_1","text":"Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency.","title":"Methods "},{"location":"java/pdk_projen/API/#addexcludefromcleanup_1","text":"public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"addExcludeFromCleanup "},{"location":"java/pdk_projen/API/#globsrequired_1","text":"Type: java.lang.String The glob patterns to match.","title":"globsRequired "},{"location":"java/pdk_projen/API/#addgitignore_1","text":"public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern.","title":"addGitIgnore "},{"location":"java/pdk_projen/API/#patternrequired_2","text":"Type: java.lang.String The glob pattern to ignore.","title":"patternRequired "},{"location":"java/pdk_projen/API/#addpackageignore_1","text":"public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"addPackageIgnore "},{"location":"java/pdk_projen/API/#_patternrequired","text":"Type: java.lang.String The glob pattern to exclude.","title":"_patternRequired "},{"location":"java/pdk_projen/API/#addtask_1","text":"public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name.","title":"addTask "},{"location":"java/pdk_projen/API/#namerequired_11","text":"Type: java.lang.String The task name to add.","title":"nameRequired "},{"location":"java/pdk_projen/API/#propsoptional_1","text":"Type: io.github.cdklabs.projen.TaskOptions Task properties.","title":"propsOptional "},{"location":"java/pdk_projen/API/#addtip_1","text":"public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis.","title":"~~addTip~~ "},{"location":"java/pdk_projen/API/#messagerequired_1","text":"Type: java.lang.String The message.","title":"messageRequired "},{"location":"java/pdk_projen/API/#annotategenerated_1","text":"public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotateGenerated "},{"location":"java/pdk_projen/API/#globrequired_1","text":"Type: java.lang.String the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"java/pdk_projen/API/#postsynthesize_1","text":"public void postSynthesize () Called after all components are synthesized. Order is not guaranteed.","title":"postSynthesize "},{"location":"java/pdk_projen/API/#presynthesize_1","text":"public void preSynthesize () Called before all components are synthesized.","title":"preSynthesize "},{"location":"java/pdk_projen/API/#removetask_1","text":"public Task removeTask ( java . lang . String name ) Removes a task from a project.","title":"removeTask "},{"location":"java/pdk_projen/API/#namerequired_12","text":"Type: java.lang.String The name of the task to remove.","title":"nameRequired "},{"location":"java/pdk_projen/API/#runtaskcommand_1","text":"public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task>","title":"runTaskCommand "},{"location":"java/pdk_projen/API/#taskrequired_1","text":"Type: io.github.cdklabs.projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"java/pdk_projen/API/#synth_1","text":"public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"java/pdk_projen/API/#tryfindfile_1","text":"public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects.","title":"tryFindFile "},{"location":"java/pdk_projen/API/#filepathrequired_3","text":"Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project.","title":"filePathRequired "},{"location":"java/pdk_projen/API/#tryfindjsonfile_1","text":"public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name.","title":"~~tryFindJsonFile~~ "},{"location":"java/pdk_projen/API/#filepathrequired_4","text":"Type: java.lang.String The file path.","title":"filePathRequired "},{"location":"java/pdk_projen/API/#tryfindobjectfile_1","text":"public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"tryFindObjectFile "},{"location":"java/pdk_projen/API/#filepathrequired_5","text":"Type: java.lang.String The file path.","title":"filePathRequired "},{"location":"java/pdk_projen/API/#adddependency","text":"public void addDependency ( java . lang . String spec ) Adds a runtime dependency.","title":"addDependency "},{"location":"java/pdk_projen/API/#specrequired","text":"Type: java.lang.String Format <module>@<semver> .","title":"specRequired "},{"location":"java/pdk_projen/API/#adddevdependency","text":"public void addDevDependency ( java . lang . String spec ) Adds a dev dependency.","title":"addDevDependency "},{"location":"java/pdk_projen/API/#specrequired_1","text":"Type: java.lang.String Format <module>@<semver> .","title":"specRequired "},{"location":"java/pdk_projen/API/#properties_5","text":"Name Type Description buildTask io.github.cdklabs.projen.Task No description. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. depsManager io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version java.lang.String Version of the package for distribution (should follow semver). packagingManager io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. pytest io.github.cdklabs.projen.python.Pytest Pytest component. appEntrypoint java.lang.String The CDK app entrypoint. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps No description. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion java.lang.String The CDK version this app is using. testdir java.lang.String The directory in which the python tests reside.","title":"Properties "},{"location":"java/pdk_projen/API/#buildtaskrequired_1","text":"public Task getBuildTask (); Type: io.github.cdklabs.projen.Task","title":"buildTaskRequired "},{"location":"java/pdk_projen/API/#compiletaskrequired_1","text":"public Task getCompileTask (); Type: io.github.cdklabs.projen.Task","title":"compileTaskRequired "},{"location":"java/pdk_projen/API/#componentsrequired_1","text":"public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project.","title":"componentsRequired "},{"location":"java/pdk_projen/API/#depsrequired_5","text":"public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"java/pdk_projen/API/#ejectedrequired_1","text":"public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"java/pdk_projen/API/#filesrequired_1","text":"public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project.","title":"filesRequired "},{"location":"java/pdk_projen/API/#gitattributesrequired_1","text":"public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"java/pdk_projen/API/#gitignorerequired_1","text":"public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"java/pdk_projen/API/#loggerrequired_1","text":"public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"java/pdk_projen/API/#namerequired_13","text":"public java . lang . String getName (); Type: java.lang.String Project name.","title":"nameRequired "},{"location":"java/pdk_projen/API/#outdirrequired_1","text":"public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project.","title":"outdirRequired "},{"location":"java/pdk_projen/API/#packagetaskrequired_1","text":"public Task getPackageTask (); Type: io.github.cdklabs.projen.Task","title":"packageTaskRequired "},{"location":"java/pdk_projen/API/#postcompiletaskrequired_1","text":"public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task","title":"postCompileTaskRequired "},{"location":"java/pdk_projen/API/#precompiletaskrequired_1","text":"public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task","title":"preCompileTaskRequired "},{"location":"java/pdk_projen/API/#projectbuildrequired_1","text":"public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project.","title":"projectBuildRequired "},{"location":"java/pdk_projen/API/#projencommandrequired_1","text":"public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI.","title":"projenCommandRequired "},{"location":"java/pdk_projen/API/#rootrequired_1","text":"public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project.","title":"rootRequired "},{"location":"java/pdk_projen/API/#tasksrequired_1","text":"public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"java/pdk_projen/API/#testtaskrequired_1","text":"public Task getTestTask (); Type: io.github.cdklabs.projen.Task","title":"testTaskRequired "},{"location":"java/pdk_projen/API/#defaulttaskoptional_1","text":"public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"defaultTaskOptional "},{"location":"java/pdk_projen/API/#initprojectoptional_1","text":"public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"initProjectOptional "},{"location":"java/pdk_projen/API/#parentoptional_6","text":"public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"java/pdk_projen/API/#projecttyperequired_1","text":"public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType","title":"projectTypeRequired "},{"location":"java/pdk_projen/API/#autoapproveoptional_1","text":"public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project.","title":"autoApproveOptional "},{"location":"java/pdk_projen/API/#devcontaineroptional_6","text":"public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"devContainerOptional "},{"location":"java/pdk_projen/API/#githuboptional_6","text":"public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"java/pdk_projen/API/#gitpodoptional_6","text":"public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"java/pdk_projen/API/#vscodeoptional_6","text":"public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"java/pdk_projen/API/#depsmanagerrequired","text":"public IPythonDeps getDepsManager (); Type: io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies.","title":"depsManagerRequired "},{"location":"java/pdk_projen/API/#envmanagerrequired","text":"public IPythonEnv getEnvManager (); Type: io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment.","title":"envManagerRequired "},{"location":"java/pdk_projen/API/#modulenamerequired_2","text":"public java . lang . String getModuleName (); Type: java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores).","title":"moduleNameRequired "},{"location":"java/pdk_projen/API/#versionrequired_2","text":"public java . lang . String getVersion (); Type: java.lang.String Version of the package for distribution (should follow semver).","title":"versionRequired "},{"location":"java/pdk_projen/API/#packagingmanageroptional","text":"public IPythonPackaging getPackagingManager (); Type: io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB.","title":"packagingManagerOptional "},{"location":"java/pdk_projen/API/#pytestoptional_2","text":"public Pytest getPytest (); Type: io.github.cdklabs.projen.python.Pytest Pytest component.","title":"pytestOptional "},{"location":"java/pdk_projen/API/#appentrypointrequired","text":"public java . lang . String getAppEntrypoint (); Type: java.lang.String The CDK app entrypoint.","title":"appEntrypointRequired "},{"location":"java/pdk_projen/API/#cdkconfigrequired","text":"public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration.","title":"cdkConfigRequired "},{"location":"java/pdk_projen/API/#cdkdepsrequired","text":"public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps","title":"cdkDepsRequired "},{"location":"java/pdk_projen/API/#cdktasksrequired","text":"public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks.","title":"cdkTasksRequired "},{"location":"java/pdk_projen/API/#cdkversionrequired_3","text":"public java . lang . String getCdkVersion (); Type: java.lang.String The CDK version this app is using.","title":"cdkVersionRequired "},{"location":"java/pdk_projen/API/#testdirrequired_1","text":"public java . lang . String getTestdir (); Type: java.lang.String The directory in which the python tests reside.","title":"testdirRequired "},{"location":"java/pdk_projen/API/#constants_1","text":"Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"java/pdk_projen/API/#default_taskrequired_1","text":"public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"java/pdk_projen/API/#pdkpipelinetsproject","text":"Synthesizes a Typescript Project with a CI/CD pipeline.","title":"PDKPipelineTsProject "},{"location":"java/pdk_projen/API/#initializers_2","text":"import software.aws.awsprototypingsdk.pdk_projen.PDKPipelineTsProject ; PDKPipelineTsProject . Builder . create () . name ( java . lang . String ) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveProjenUpgrades(java.lang.Boolean) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenUpgradeAutoMerge(java.lang.Boolean) // .projenUpgradeSchedule(java.util.List<java.lang.String>) // .projenUpgradeSecret(java.lang.String) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<java.lang.Object>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .integrationTestAutoDiscover(java.lang.Boolean) // .lambdaAutoDiscover(java.lang.Boolean) // .lambdaOptions(LambdaFunctionCommonOptions) . build (); Name Type Description name java.lang.String This is the name of your project. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Author's Organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveProjenUpgrades java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge java.lang.Boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule java.util.List Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret java.lang.String Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integrationTestAutoDiscover java.lang.Boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions.","title":"Initializers "},{"location":"java/pdk_projen/API/#namerequired_14","text":"Type: java.lang.String Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"java/pdk_projen/API/#loggingoptional_5","text":"Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"java/pdk_projen/API/#outdiroptional_5","text":"Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"java/pdk_projen/API/#parentoptional_7","text":"Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"java/pdk_projen/API/#projencommandoptional_5","text":"Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptional_5","text":"Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"java/pdk_projen/API/#projenrcjsonoptionsoptional_5","text":"Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"java/pdk_projen/API/#autoapproveoptionsoptional_5","text":"Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"java/pdk_projen/API/#automergeoptionsoptional_5","text":"Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"java/pdk_projen/API/#clobberoptional_5","text":"Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"java/pdk_projen/API/#devcontaineroptional_7","text":"Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"java/pdk_projen/API/#githuboptional_7","text":"Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"java/pdk_projen/API/#githuboptionsoptional_5","text":"Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"java/pdk_projen/API/#gitpodoptional_7","text":"Type: java.lang.Boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"java/pdk_projen/API/#mergifyoptional_5","text":"Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"java/pdk_projen/API/#mergifyoptionsoptional_5","text":"Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"java/pdk_projen/API/#projecttypeoptional_5","text":"Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"java/pdk_projen/API/#projentokensecretoptional_5","text":"Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"java/pdk_projen/API/#readmeoptional_5","text":"Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"java/pdk_projen/API/#staleoptional_5","text":"Type: java.lang.Boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"java/pdk_projen/API/#staleoptionsoptional_5","text":"Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"java/pdk_projen/API/#vscodeoptional_7","text":"Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"java/pdk_projen/API/#allowlibrarydependenciesoptional_3","text":"Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allowLibraryDependenciesOptional "},{"location":"java/pdk_projen/API/#authoremailoptional_3","text":"Type: java.lang.String Author's e-mail.","title":"authorEmailOptional "},{"location":"java/pdk_projen/API/#authornameoptional_3","text":"Type: java.lang.String Author's name.","title":"authorNameOptional "},{"location":"java/pdk_projen/API/#authororganizationoptional_3","text":"Type: java.lang.Boolean Author's Organization.","title":"authorOrganizationOptional "},{"location":"java/pdk_projen/API/#authorurloptional_3","text":"Type: java.lang.String Author's URL / Website.","title":"authorUrlOptional "},{"location":"java/pdk_projen/API/#autodetectbinoptional_3","text":"Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"autoDetectBinOptional "},{"location":"java/pdk_projen/API/#binoptional_3","text":"Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"java/pdk_projen/API/#bugsemailoptional_3","text":"Type: java.lang.String The email address to which issues should be reported.","title":"bugsEmailOptional "},{"location":"java/pdk_projen/API/#bugsurloptional_3","text":"Type: java.lang.String The url to your project's issue tracker.","title":"bugsUrlOptional "},{"location":"java/pdk_projen/API/#bundleddepsoptional_3","text":"Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundledDepsOptional "},{"location":"java/pdk_projen/API/#codeartifactoptionsoptional_3","text":"Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"codeArtifactOptionsOptional "},{"location":"java/pdk_projen/API/#depsoptional_5","text":"Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"java/pdk_projen/API/#descriptionoptional_5","text":"Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"java/pdk_projen/API/#devdepsoptional_5","text":"Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"devDepsOptional "},{"location":"java/pdk_projen/API/#entrypointoptional_3","text":"Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"java/pdk_projen/API/#homepageoptional_5","text":"Type: java.lang.String Package's Homepage / Website.","title":"homepageOptional "},{"location":"java/pdk_projen/API/#keywordsoptional_3","text":"Type: java.util.List Keywords to include in package.json .","title":"keywordsOptional "},{"location":"java/pdk_projen/API/#licenseoptional_5","text":"Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"java/pdk_projen/API/#licensedoptional_3","text":"Type: java.lang.Boolean Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"java/pdk_projen/API/#maxnodeversionoptional_4","text":"Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive).","title":"maxNodeVersionOptional "},{"location":"java/pdk_projen/API/#minnodeversionoptional_4","text":"Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"minNodeVersionOptional "},{"location":"java/pdk_projen/API/#npmaccessoptional_3","text":"Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npmAccessOptional "},{"location":"java/pdk_projen/API/#npmregistryoptional_3","text":"Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npmRegistry~~Optional "},{"location":"java/pdk_projen/API/#npmregistryurloptional_3","text":"Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npmRegistryUrlOptional "},{"location":"java/pdk_projen/API/#npmtokensecretoptional_3","text":"Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npmTokenSecretOptional "},{"location":"java/pdk_projen/API/#packagemanageroptional_3","text":"Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"packageManagerOptional "},{"location":"java/pdk_projen/API/#packagenameoptional_3","text":"Type: java.lang.String Default: defaults to project name The \"name\" in package.json.","title":"packageNameOptional "},{"location":"java/pdk_projen/API/#peerdependencyoptionsoptional_3","text":"Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peerDependencyOptionsOptional "},{"location":"java/pdk_projen/API/#peerdepsoptional_3","text":"Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peerDepsOptional "},{"location":"java/pdk_projen/API/#repositoryoptional_3","text":"Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"java/pdk_projen/API/#repositorydirectoryoptional_3","text":"Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repositoryDirectoryOptional "},{"location":"java/pdk_projen/API/#scriptsoptional_3","text":"Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"java/pdk_projen/API/#stabilityoptional_3","text":"Type: java.lang.String Package's Stability.","title":"stabilityOptional "},{"location":"java/pdk_projen/API/#jsiireleaseversionoptional_3","text":"Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsiiReleaseVersionOptional "},{"location":"java/pdk_projen/API/#majorversionoptional_3","text":"Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"majorVersionOptional "},{"location":"java/pdk_projen/API/#npmdisttagoptional_3","text":"Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npmDistTagOptional "},{"location":"java/pdk_projen/API/#postbuildstepsoptional_3","text":"Type: java.util.List Default: [] Steps to execute after build as part of the release workflow.","title":"postBuildStepsOptional "},{"location":"java/pdk_projen/API/#prereleaseoptional_3","text":"Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"java/pdk_projen/API/#publishdryrunoptional_3","text":"Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publishDryRunOptional "},{"location":"java/pdk_projen/API/#publishtasksoptional_3","text":"Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publishTasksOptional "},{"location":"java/pdk_projen/API/#releasebranchesoptional_3","text":"Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"releaseBranchesOptional "},{"location":"java/pdk_projen/API/#releaseeverycommitoptional_3","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~releaseEveryCommit~~Optional "},{"location":"java/pdk_projen/API/#releasefailureissueoptional_3","text":"Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task.","title":"releaseFailureIssueOptional "},{"location":"java/pdk_projen/API/#releasefailureissuelabeloptional_3","text":"Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"releaseFailureIssueLabelOptional "},{"location":"java/pdk_projen/API/#releasescheduleoptional_3","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~releaseSchedule~~Optional "},{"location":"java/pdk_projen/API/#releasetagprefixoptional_3","text":"Type: java.lang.String Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"releaseTagPrefixOptional "},{"location":"java/pdk_projen/API/#releasetriggeroptional_3","text":"Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"releaseTriggerOptional "},{"location":"java/pdk_projen/API/#releaseworkflownameoptional_3","text":"Type: java.lang.String Default: \"Release\" The name of the default release workflow.","title":"releaseWorkflowNameOptional "},{"location":"java/pdk_projen/API/#releaseworkflowsetupstepsoptional_3","text":"Type: java.util.List A set of workflow steps to execute in order to setup the workflow container.","title":"releaseWorkflowSetupStepsOptional "},{"location":"java/pdk_projen/API/#versionrcoptionsoptional_3","text":"Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrcOptionsOptional "},{"location":"java/pdk_projen/API/#workflowcontainerimageoptional_3","text":"Type: java.lang.String Default: default image Container image to use for GitHub workflows.","title":"workflowContainerImageOptional "},{"location":"java/pdk_projen/API/#workflowrunsonoptional_3","text":"Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflowRunsOnOptional "},{"location":"java/pdk_projen/API/#defaultreleasebranchrequired_3","text":"Type: java.lang.String Default: \"main\" The name of the main release branch.","title":"defaultReleaseBranchRequired "},{"location":"java/pdk_projen/API/#artifactsdirectoryoptional_3","text":"Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts.","title":"artifactsDirectoryOptional "},{"location":"java/pdk_projen/API/#autoapproveprojenupgradesoptional_3","text":"Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveProjenUpgradesOptional "},{"location":"java/pdk_projen/API/#autoapproveupgradesoptional_3","text":"Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveUpgradesOptional "},{"location":"java/pdk_projen/API/#buildworkflowoptional_4","text":"Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"buildWorkflowOptional "},{"location":"java/pdk_projen/API/#buildworkflowtriggersoptional_3","text":"Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"buildWorkflowTriggersOptional "},{"location":"java/pdk_projen/API/#bundleroptionsoptional_3","text":"Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler .","title":"bundlerOptionsOptional "},{"location":"java/pdk_projen/API/#codecovoptional_3","text":"Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"codeCovOptional "},{"location":"java/pdk_projen/API/#codecovtokensecretoptional_3","text":"Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"codeCovTokenSecretOptional "},{"location":"java/pdk_projen/API/#copyrightowneroptional_3","text":"Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyrightOwnerOptional "},{"location":"java/pdk_projen/API/#copyrightperiodoptional_3","text":"Type: java.lang.String Default: current year The copyright years to put in the LICENSE file.","title":"copyrightPeriodOptional "},{"location":"java/pdk_projen/API/#dependabotoptional_3","text":"Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"java/pdk_projen/API/#dependabotoptionsoptional_3","text":"Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabotOptionsOptional "},{"location":"java/pdk_projen/API/#depsupgradeoptional_3","text":"Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"depsUpgradeOptional "},{"location":"java/pdk_projen/API/#depsupgradeoptionsoptional_3","text":"Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"depsUpgradeOptionsOptional "},{"location":"java/pdk_projen/API/#gitignoreoptional_3","text":"Type: java.util.List Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"java/pdk_projen/API/#jestoptional_4","text":"Type: java.lang.Boolean Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"java/pdk_projen/API/#jestoptionsoptional_3","text":"Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options.","title":"jestOptionsOptional "},{"location":"java/pdk_projen/API/#mutablebuildoptional_3","text":"Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutableBuildOptional "},{"location":"java/pdk_projen/API/#npmignoreoptional_4","text":"Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"java/pdk_projen/API/#npmignoreenabledoptional_3","text":"Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignoreEnabledOptional "},{"location":"java/pdk_projen/API/#packageoptional_3","text":"Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"java/pdk_projen/API/#prettieroptional_4","text":"Type: java.lang.Boolean Default: false Setup prettier.","title":"prettierOptional "},{"location":"java/pdk_projen/API/#prettieroptionsoptional_3","text":"Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettierOptionsOptional "},{"location":"java/pdk_projen/API/#projendevdependencyoptional_3","text":"Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projenDevDependencyOptional "},{"location":"java/pdk_projen/API/#projenrcjsoptional_3","text":"Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrcJsOptional "},{"location":"java/pdk_projen/API/#projenrcjsoptionsoptional_3","text":"Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrcJsOptionsOptional "},{"location":"java/pdk_projen/API/#projenupgradeautomergeoptional_3","text":"Deprecated: use autoApproveProjenUpgrades . Type: java.lang.Boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projenUpgradeAutoMerge~~Optional "},{"location":"java/pdk_projen/API/#projenupgradescheduleoptional_3","text":"Type: java.util.List Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projenUpgradeScheduleOptional "},{"location":"java/pdk_projen/API/#projenupgradesecretoptional_3","text":"Deprecated: use githubTokenSecret instead. Type: java.lang.String Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projenUpgradeSecret~~Optional "},{"location":"java/pdk_projen/API/#projenversionoptional_3","text":"Type: java.lang.String Default: Defaults to the latest version. Version of projen to install.","title":"projenVersionOptional "},{"location":"java/pdk_projen/API/#pullrequesttemplateoptional_3","text":"Type: java.lang.Boolean Default: true Include a GitHub pull request template.","title":"pullRequestTemplateOptional "},{"location":"java/pdk_projen/API/#pullrequesttemplatecontentsoptional_3","text":"Type: java.util.List Default: default content The contents of the pull request template.","title":"pullRequestTemplateContentsOptional "},{"location":"java/pdk_projen/API/#releaseoptional_4","text":"Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"java/pdk_projen/API/#releasetonpmoptional_3","text":"Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced.","title":"releaseToNpmOptional "},{"location":"java/pdk_projen/API/#releaseworkflowoptional_3","text":"Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~releaseWorkflow~~Optional "},{"location":"java/pdk_projen/API/#workflowbootstrapstepsoptional_3","text":"Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflowBootstrapStepsOptional "},{"location":"java/pdk_projen/API/#workflowgitidentityoptional_3","text":"Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflowGitIdentityOptional "},{"location":"java/pdk_projen/API/#workflownodeversionoptional_3","text":"Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflowNodeVersionOptional "},{"location":"java/pdk_projen/API/#disabletsconfigoptional_3","text":"Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disableTsconfigOptional "},{"location":"java/pdk_projen/API/#docgenoptional_4","text":"Type: java.lang.Boolean Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"java/pdk_projen/API/#docsdirectoryoptional_3","text":"Type: java.lang.String Default: \"docs\" Docs directory.","title":"docsDirectoryOptional "},{"location":"java/pdk_projen/API/#entrypointtypesoptional_3","text":"Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypointTypesOptional "},{"location":"java/pdk_projen/API/#eslintoptional_4","text":"Type: java.lang.Boolean Default: true Setup eslint.","title":"eslintOptional "},{"location":"java/pdk_projen/API/#eslintoptionsoptional_3","text":"Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslintOptionsOptional "},{"location":"java/pdk_projen/API/#libdiroptional_3","text":"Type: java.lang.String Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"java/pdk_projen/API/#projenrctsoptional_3","text":"Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrcTsOptional "},{"location":"java/pdk_projen/API/#projenrctsoptionsoptional_3","text":"Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrcTsOptionsOptional "},{"location":"java/pdk_projen/API/#samplecodeoptional_3","text":"Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sampleCodeOptional "},{"location":"java/pdk_projen/API/#srcdiroptional_3","text":"Type: java.lang.String Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"java/pdk_projen/API/#testdiroptional_5","text":"Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"java/pdk_projen/API/#tsconfigoptional_4","text":"Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"java/pdk_projen/API/#tsconfigdevoptional_3","text":"Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfigDevOptional "},{"location":"java/pdk_projen/API/#tsconfigdevfileoptional_3","text":"Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfigDevFileOptional "},{"location":"java/pdk_projen/API/#typescriptversionoptional_3","text":"Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescriptVersionOptional "},{"location":"java/pdk_projen/API/#buildcommandoptional_3","text":"Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"buildCommandOptional "},{"location":"java/pdk_projen/API/#cdkoutoptional_3","text":"Type: java.lang.String Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"java/pdk_projen/API/#contextoptional_3","text":"Type: java.util.Map Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"java/pdk_projen/API/#featureflagsoptional_3","text":"Type: java.lang.Boolean Default: true Include all feature flags in cdk.json.","title":"featureFlagsOptional "},{"location":"java/pdk_projen/API/#requireapprovaloptional_3","text":"Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"requireApprovalOptional "},{"location":"java/pdk_projen/API/#watchexcludesoptional_3","text":"Type: java.util.List Default: [] Glob patterns to exclude from cdk watch .","title":"watchExcludesOptional "},{"location":"java/pdk_projen/API/#watchincludesoptional_3","text":"Type: java.util.List Default: [] Glob patterns to include in cdk watch .","title":"watchIncludesOptional "},{"location":"java/pdk_projen/API/#cdkversionrequired_4","text":"Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdkVersionRequired "},{"location":"java/pdk_projen/API/#cdkassertoptional_3","text":"Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdkAssert~~Optional "},{"location":"java/pdk_projen/API/#cdkassertionsoptional_3","text":"Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdkAssertionsOptional "},{"location":"java/pdk_projen/API/#cdkdependenciesoptional_3","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires.","title":"~~cdkDependencies~~Optional "},{"location":"java/pdk_projen/API/#cdkdependenciesasdepsoptional_3","text":"Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdkDependenciesAsDeps~~Optional "},{"location":"java/pdk_projen/API/#cdktestdependenciesoptional_3","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing.","title":"~~cdkTestDependencies~~Optional "},{"location":"java/pdk_projen/API/#cdkversionpinningoptional_3","text":"Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdkVersionPinningOptional "},{"location":"java/pdk_projen/API/#constructsversionoptional_3","text":"Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructsVersionOptional "},{"location":"java/pdk_projen/API/#appentrypointoptional_3","text":"Type: java.lang.String Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"appEntrypointOptional "},{"location":"java/pdk_projen/API/#integrationtestautodiscoveroptional_1","text":"Type: java.lang.Boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory.","title":"integrationTestAutoDiscoverOptional "},{"location":"java/pdk_projen/API/#lambdaautodiscoveroptional_1","text":"Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project.","title":"lambdaAutoDiscoverOptional "},{"location":"java/pdk_projen/API/#lambdaoptionsoptional_1","text":"Type: io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions.","title":"lambdaOptionsOptional "},{"location":"java/pdk_projen/API/#methods_2","text":"Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addCdkDependency Adds an AWS CDK module dependencies.","title":"Methods "},{"location":"java/pdk_projen/API/#addexcludefromcleanup_2","text":"public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"addExcludeFromCleanup "},{"location":"java/pdk_projen/API/#globsrequired_2","text":"Type: java.lang.String The glob patterns to match.","title":"globsRequired "},{"location":"java/pdk_projen/API/#addgitignore_2","text":"public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern.","title":"addGitIgnore "},{"location":"java/pdk_projen/API/#patternrequired_3","text":"Type: java.lang.String The glob pattern to ignore.","title":"patternRequired "},{"location":"java/pdk_projen/API/#addpackageignore_2","text":"public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"addPackageIgnore "},{"location":"java/pdk_projen/API/#patternrequired_4","text":"Type: java.lang.String","title":"patternRequired "},{"location":"java/pdk_projen/API/#addtask_2","text":"public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name.","title":"addTask "},{"location":"java/pdk_projen/API/#namerequired_15","text":"Type: java.lang.String The task name to add.","title":"nameRequired "},{"location":"java/pdk_projen/API/#propsoptional_2","text":"Type: io.github.cdklabs.projen.TaskOptions Task properties.","title":"propsOptional "},{"location":"java/pdk_projen/API/#addtip_2","text":"public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis.","title":"~~addTip~~ "},{"location":"java/pdk_projen/API/#messagerequired_2","text":"Type: java.lang.String The message.","title":"messageRequired "},{"location":"java/pdk_projen/API/#annotategenerated_2","text":"public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotateGenerated "},{"location":"java/pdk_projen/API/#globrequired_2","text":"Type: java.lang.String the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"java/pdk_projen/API/#postsynthesize_2","text":"public void postSynthesize () Called after all components are synthesized. Order is not guaranteed.","title":"postSynthesize "},{"location":"java/pdk_projen/API/#presynthesize_2","text":"public void preSynthesize () Called before all components are synthesized.","title":"preSynthesize "},{"location":"java/pdk_projen/API/#removetask_2","text":"public Task removeTask ( java . lang . String name ) Removes a task from a project.","title":"removeTask "},{"location":"java/pdk_projen/API/#namerequired_16","text":"Type: java.lang.String The name of the task to remove.","title":"nameRequired "},{"location":"java/pdk_projen/API/#runtaskcommand_2","text":"public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK .","title":"runTaskCommand "},{"location":"java/pdk_projen/API/#taskrequired_2","text":"Type: io.github.cdklabs.projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"java/pdk_projen/API/#synth_2","text":"public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"java/pdk_projen/API/#tryfindfile_2","text":"public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects.","title":"tryFindFile "},{"location":"java/pdk_projen/API/#filepathrequired_6","text":"Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project.","title":"filePathRequired "},{"location":"java/pdk_projen/API/#tryfindjsonfile_2","text":"public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name.","title":"~~tryFindJsonFile~~ "},{"location":"java/pdk_projen/API/#filepathrequired_7","text":"Type: java.lang.String The file path.","title":"filePathRequired "},{"location":"java/pdk_projen/API/#tryfindobjectfile_2","text":"public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"tryFindObjectFile "},{"location":"java/pdk_projen/API/#filepathrequired_8","text":"Type: java.lang.String The file path.","title":"filePathRequired "},{"location":"java/pdk_projen/API/#addbins_1","text":"public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins )","title":"addBins "},{"location":"java/pdk_projen/API/#binsrequired_1","text":"Type: java.util.Map","title":"binsRequired "},{"location":"java/pdk_projen/API/#addbundleddeps_1","text":"public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json .","title":"addBundledDeps "},{"location":"java/pdk_projen/API/#depsrequired_6","text":"Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"java/pdk_projen/API/#addcompilecommand_1","text":"public void addCompileCommand ( java . lang . String commands ) DEPRECATED.","title":"~~addCompileCommand~~ "},{"location":"java/pdk_projen/API/#commandsrequired_2","text":"Type: java.lang.String","title":"commandsRequired "},{"location":"java/pdk_projen/API/#adddeps_1","text":"public void addDeps ( java . lang . String deps ) Defines normal dependencies.","title":"addDeps "},{"location":"java/pdk_projen/API/#depsrequired_7","text":"Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"java/pdk_projen/API/#adddevdeps_1","text":"public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies.","title":"addDevDeps "},{"location":"java/pdk_projen/API/#depsrequired_8","text":"Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"java/pdk_projen/API/#addfields_1","text":"public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json .","title":"addFields "},{"location":"java/pdk_projen/API/#fieldsrequired_1","text":"Type: java.util.Map The fields to set.","title":"fieldsRequired "},{"location":"java/pdk_projen/API/#addkeywords_1","text":"public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated).","title":"addKeywords "},{"location":"java/pdk_projen/API/#keywordsrequired_1","text":"Type: java.lang.String The keywords to add.","title":"keywordsRequired "},{"location":"java/pdk_projen/API/#addpeerdeps_1","text":"public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers.","title":"addPeerDeps "},{"location":"java/pdk_projen/API/#depsrequired_9","text":"Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"java/pdk_projen/API/#addtestcommand_1","text":"public void addTestCommand ( java . lang . String commands ) DEPRECATED.","title":"~~addTestCommand~~ "},{"location":"java/pdk_projen/API/#commandsrequired_3","text":"Type: java.lang.String","title":"commandsRequired "},{"location":"java/pdk_projen/API/#hasscript_1","text":"public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined.","title":"hasScript "},{"location":"java/pdk_projen/API/#namerequired_17","text":"Type: java.lang.String The name of the script.","title":"nameRequired "},{"location":"java/pdk_projen/API/#removescript_1","text":"public void removeScript ( java . lang . String name ) Removes the npm script (always successful).","title":"removeScript "},{"location":"java/pdk_projen/API/#namerequired_18","text":"Type: java.lang.String The name of the script.","title":"nameRequired "},{"location":"java/pdk_projen/API/#renderworkflowsetup_1","text":"public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow.","title":"renderWorkflowSetup "},{"location":"java/pdk_projen/API/#optionsoptional_1","text":"Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options.","title":"optionsOptional "},{"location":"java/pdk_projen/API/#setscript_1","text":"public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script.","title":"setScript "},{"location":"java/pdk_projen/API/#namerequired_19","text":"Type: java.lang.String The script name.","title":"nameRequired "},{"location":"java/pdk_projen/API/#commandrequired_1","text":"Type: java.lang.String The command to execute.","title":"commandRequired "},{"location":"java/pdk_projen/API/#addcdkdependency","text":"public void addCdkDependency ( java . lang . String modules ) Adds an AWS CDK module dependencies.","title":"addCdkDependency "},{"location":"java/pdk_projen/API/#modulesrequired","text":"Type: java.lang.String The list of modules to depend on.","title":"modulesRequired "},{"location":"java/pdk_projen/API/#properties_6","text":"Name Type Description buildTask io.github.cdklabs.projen.Task No description. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Automatic PR merges. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this pacakge. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. appEntrypoint java.lang.String The CDK app entrypoint. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps No description. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion java.lang.String The CDK version this app is using.","title":"Properties "},{"location":"java/pdk_projen/API/#buildtaskrequired_2","text":"public Task getBuildTask (); Type: io.github.cdklabs.projen.Task","title":"buildTaskRequired "},{"location":"java/pdk_projen/API/#compiletaskrequired_2","text":"public Task getCompileTask (); Type: io.github.cdklabs.projen.Task","title":"compileTaskRequired "},{"location":"java/pdk_projen/API/#componentsrequired_2","text":"public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project.","title":"componentsRequired "},{"location":"java/pdk_projen/API/#depsrequired_10","text":"public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"java/pdk_projen/API/#ejectedrequired_2","text":"public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"java/pdk_projen/API/#filesrequired_2","text":"public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project.","title":"filesRequired "},{"location":"java/pdk_projen/API/#gitattributesrequired_2","text":"public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"java/pdk_projen/API/#gitignorerequired_2","text":"public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"java/pdk_projen/API/#loggerrequired_2","text":"public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"java/pdk_projen/API/#namerequired_20","text":"public java . lang . String getName (); Type: java.lang.String Project name.","title":"nameRequired "},{"location":"java/pdk_projen/API/#outdirrequired_2","text":"public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project.","title":"outdirRequired "},{"location":"java/pdk_projen/API/#packagetaskrequired_2","text":"public Task getPackageTask (); Type: io.github.cdklabs.projen.Task","title":"packageTaskRequired "},{"location":"java/pdk_projen/API/#postcompiletaskrequired_2","text":"public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task","title":"postCompileTaskRequired "},{"location":"java/pdk_projen/API/#precompiletaskrequired_2","text":"public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task","title":"preCompileTaskRequired "},{"location":"java/pdk_projen/API/#projectbuildrequired_2","text":"public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project.","title":"projectBuildRequired "},{"location":"java/pdk_projen/API/#projencommandrequired_2","text":"public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI.","title":"projenCommandRequired "},{"location":"java/pdk_projen/API/#rootrequired_2","text":"public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project.","title":"rootRequired "},{"location":"java/pdk_projen/API/#tasksrequired_2","text":"public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"java/pdk_projen/API/#testtaskrequired_2","text":"public Task getTestTask (); Type: io.github.cdklabs.projen.Task","title":"testTaskRequired "},{"location":"java/pdk_projen/API/#defaulttaskoptional_2","text":"public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"defaultTaskOptional "},{"location":"java/pdk_projen/API/#initprojectoptional_2","text":"public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"initProjectOptional "},{"location":"java/pdk_projen/API/#parentoptional_8","text":"public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"java/pdk_projen/API/#projecttyperequired_2","text":"public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType","title":"projectTypeRequired "},{"location":"java/pdk_projen/API/#autoapproveoptional_2","text":"public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project.","title":"autoApproveOptional "},{"location":"java/pdk_projen/API/#devcontaineroptional_8","text":"public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"devContainerOptional "},{"location":"java/pdk_projen/API/#githuboptional_8","text":"public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"java/pdk_projen/API/#gitpodoptional_8","text":"public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"java/pdk_projen/API/#vscodeoptional_8","text":"public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"java/pdk_projen/API/#allowlibrarydependenciesrequired_1","text":"Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean","title":"~~allowLibraryDependencies~~Required "},{"location":"java/pdk_projen/API/#artifactsdirectoryrequired_1","text":"public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg .","title":"artifactsDirectoryRequired "},{"location":"java/pdk_projen/API/#artifactsjavascriptdirectoryrequired_1","text":"public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ).","title":"artifactsJavascriptDirectoryRequired "},{"location":"java/pdk_projen/API/#bundlerrequired_1","text":"public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler","title":"bundlerRequired "},{"location":"java/pdk_projen/API/#entrypointrequired_1","text":"Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String","title":"~~entrypoint~~Required "},{"location":"java/pdk_projen/API/#manifestrequired_1","text":"Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object","title":"~~manifest~~Required "},{"location":"java/pdk_projen/API/#packagerequired_1","text":"public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package.","title":"packageRequired "},{"location":"java/pdk_projen/API/#packagemanagerrequired_1","text":"Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use.","title":"~~packageManager~~Required "},{"location":"java/pdk_projen/API/#runscriptcommandrequired_1","text":"public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager).","title":"runScriptCommandRequired "},{"location":"java/pdk_projen/API/#automergeoptional_1","text":"public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Automatic PR merges.","title":"autoMergeOptional "},{"location":"java/pdk_projen/API/#buildworkflowoptional_5","text":"public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled.","title":"buildWorkflowOptional "},{"location":"java/pdk_projen/API/#buildworkflowjobidoptional_1","text":"public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow.","title":"buildWorkflowJobIdOptional "},{"location":"java/pdk_projen/API/#jestoptional_5","text":"public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled).","title":"jestOptional "},{"location":"java/pdk_projen/API/#maxnodeversionoptional_5","text":"public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this pacakge.","title":"maxNodeVersionOptional "},{"location":"java/pdk_projen/API/#minnodeversionoptional_5","text":"public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package.","title":"minNodeVersionOptional "},{"location":"java/pdk_projen/API/#npmignoreoptional_5","text":"public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file.","title":"npmignoreOptional "},{"location":"java/pdk_projen/API/#prettieroptional_5","text":"public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier","title":"prettierOptional "},{"location":"java/pdk_projen/API/#publisheroptional_1","text":"Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow.","title":"~~publisher~~Optional "},{"location":"java/pdk_projen/API/#releaseoptional_5","text":"public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management.","title":"releaseOptional "},{"location":"java/pdk_projen/API/#upgradeworkflowoptional_1","text":"public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow.","title":"upgradeWorkflowOptional "},{"location":"java/pdk_projen/API/#docsdirectoryrequired_1","text":"public java . lang . String getDocsDirectory (); Type: java.lang.String","title":"docsDirectoryRequired "},{"location":"java/pdk_projen/API/#libdirrequired_1","text":"public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside.","title":"libdirRequired "},{"location":"java/pdk_projen/API/#srcdirrequired_1","text":"public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside.","title":"srcdirRequired "},{"location":"java/pdk_projen/API/#testdirrequired_2","text":"public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside.","title":"testdirRequired "},{"location":"java/pdk_projen/API/#tsconfigdevrequired_1","text":"public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen).","title":"tsconfigDevRequired "},{"location":"java/pdk_projen/API/#watchtaskrequired_1","text":"public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task.","title":"watchTaskRequired "},{"location":"java/pdk_projen/API/#docgenoptional_5","text":"public java . lang . Boolean getDocgen (); Type: java.lang.Boolean","title":"docgenOptional "},{"location":"java/pdk_projen/API/#eslintoptional_5","text":"public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint","title":"eslintOptional "},{"location":"java/pdk_projen/API/#tsconfigoptional_5","text":"public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig","title":"tsconfigOptional "},{"location":"java/pdk_projen/API/#tsconfigeslintoptional_1","text":"public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig","title":"tsconfigEslintOptional "},{"location":"java/pdk_projen/API/#appentrypointrequired_1","text":"public java . lang . String getAppEntrypoint (); Type: java.lang.String The CDK app entrypoint.","title":"appEntrypointRequired "},{"location":"java/pdk_projen/API/#cdkconfigrequired_1","text":"public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration.","title":"cdkConfigRequired "},{"location":"java/pdk_projen/API/#cdkdepsrequired_1","text":"public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps","title":"cdkDepsRequired "},{"location":"java/pdk_projen/API/#cdktasksrequired_1","text":"public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks.","title":"cdkTasksRequired "},{"location":"java/pdk_projen/API/#cdkversionrequired_5","text":"public java . lang . String getCdkVersion (); Type: java.lang.String The CDK version this app is using.","title":"cdkVersionRequired "},{"location":"java/pdk_projen/API/#constants_2","text":"Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"java/pdk_projen/API/#default_taskrequired_2","text":"public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"java/pdk_projen/API/#enums","text":"","title":"Enums "},{"location":"java/pdk_projen/API/#samplelanguage","text":"Name Description TYPESCRIPT No description. PYTHON No description. Supported languages to generate sample code.","title":"SampleLanguage "},{"location":"java/pdk_projen/API/#typescript","text":"","title":"TYPESCRIPT "},{"location":"java/pdk_projen/API/#python","text":"","title":"PYTHON "},{"location":"java/pdk_projen/API/#targetdependencyproject","text":"Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency.","title":"TargetDependencyProject "},{"location":"java/pdk_projen/API/#self","text":"Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages.","title":"SELF "},{"location":"java/pdk_projen/API/#dependencies","text":"Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"DEPENDENCIES "},{"location":"python/pdk_pipeline/API/","text":"pdk_pipeline TODO API Reference Constructs PDKPipeline An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals. Initializers from aws_prototyping_sdk import pdk_pipeline pdk_pipeline . PDKPipeline ( scope : Construct , id : str , synth : IFileSetProducer , asset_publishing_code_build_defaults : CodeBuildOptions = None , cli_version : str = None , code_build_defaults : CodeBuildOptions = None , code_pipeline : Pipeline = None , cross_account_keys : bool = None , docker_credentials : typing . List [ DockerCredential ] = None , docker_enabled_for_self_mutation : bool = None , docker_enabled_for_synth : bool = None , pipeline_name : str = None , publish_assets_in_parallel : bool = None , reuse_cross_region_support_stacks : bool = None , self_mutation : bool = None , self_mutation_code_build_defaults : CodeBuildOptions = None , synth_code_build_defaults : CodeBuildOptions = None , primary_synth_directory : str , repository_name : str , default_branch_name : str = None , pr_build_checker : bool = None , synth_shell_step_partial_props : ShellStepProps = None ) Name Type Description scope constructs.Construct No description. id str No description. synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. asset_publishing_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cli_version str CDK CLI version to use in self-mutation and asset publishing steps. code_build_defaults aws_cdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. code_pipeline aws_cdk.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. cross_account_keys bool Create KMS keys for the artifact buckets, allowing cross-account deployments. docker_credentials typing.List[aws_cdk.pipelines.DockerCredential] A list of credentials used to authenticate to Docker registries. docker_enabled_for_self_mutation bool Enable Docker for the self-mutate step. docker_enabled_for_synth bool Enable Docker for the 'synth' step. pipeline_name str The name of the CodePipeline pipeline. publish_assets_in_parallel bool Publish assets in multiple CodeBuild projects. reuse_cross_region_support_stacks bool Reuse the same cross region support stack for all pipelines in the App. self_mutation bool Whether the pipeline will update itself. self_mutation_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name str Name of the CodeCommit repository to create. default_branch_name str Branch to trigger the pipeline execution. pr_build_checker bool Enables a build job to trigger on PR merges to the defaultBranchName. synth_shell_step_partial_props aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. scope Required Type: constructs.Construct id Required Type: str synth Required Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . asset_publishing_code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cli_version Optional Type: str Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. code_pipeline Optional Type: aws_cdk.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] cross_account_keys Optional Type: bool Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. docker_credentials Optional Type: typing.List[aws_cdk.pipelines.DockerCredential] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. docker_enabled_for_self_mutation Optional Type: bool Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. docker_enabled_for_synth Optional Type: bool Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipeline_name Optional Type: str Default: Automatically generated The name of the CodePipeline pipeline. publish_assets_in_parallel Optional Type: bool Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuse_cross_region_support_stacks Optional Type: bool Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. self_mutation Optional Type: bool Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . self_mutation_code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory Required Type: str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name Required Type: str Name of the CodeCommit repository to create. default_branch_name Optional Type: str Default: mainline Branch to trigger the pipeline execution. pr_build_checker Optional Type: bool Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build. synth_shell_step_partial_props Optional Type: aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. Methods Name Description to_string Returns a string representation of this construct. add_stage Deploy a single Stage by itself. add_wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. build_pipeline Send the current pipeline definition to the engine, and construct the pipeline. to_string def to_string () -> str Returns a string representation of this construct. add_stage def add_stage ( stage : Stage , post : typing . List [ Step ] = None , pre : typing . List [ Step ] = None , stack_steps : typing . List [ StackSteps ] = None ) -> StageDeployment Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies. stage Required Type: aws_cdk.Stage post Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run after all of the stacks in the stage. pre Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run before any of the stacks in the stage. stack_steps Optional Type: typing.List[aws_cdk.pipelines.StackSteps] Default: No additional instructions Instructions for stack level steps. add_wave def add_wave ( id : str , post : typing . List [ Step ] = None , pre : typing . List [ Step ] = None ) -> Wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: ts declare const pipeline: pipelines.CodePipeline; const wave = pipeline.addWave('MyWave'); wave.addStage(new MyApplicationStage(this, 'Stage1')); wave.addStage(new MyApplicationStage(this, 'Stage2')); id Required Type: str post Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run after all of the stages in the wave. pre Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run before any of the stages in the wave. build_pipeline def build_pipeline () -> None Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method. Static Functions Name Description is_construct Checks if x is a construct. ~~ is_construct ~~ from aws_prototyping_sdk import pdk_pipeline pdk_pipeline . PDKPipeline . is_construct ( x : typing . Any ) Checks if x is a construct. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. cloud_assembly_file_set aws_cdk.pipelines.FileSet The FileSet tha contains the cloud assembly. synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves typing.List[aws_cdk.pipelines.Wave] The waves in this pipeline. pipeline aws_cdk.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. synth_project aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the Synth. code_repository aws_cdk.aws_codecommit.Repository No description. node Required node : Node Type: constructs.Node The tree node. cloud_assembly_file_set Required cloud_assembly_file_set : FileSet Type: aws_cdk.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step. synth Required synth : IFileSetProducer Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves Required waves : typing . List [ Wave ] Type: typing.List[aws_cdk.pipelines.Wave] The waves in this pipeline. pipeline Required pipeline : Pipeline Type: aws_cdk.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built. synth_project Required synth_project : IProject Type: aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built. code_repository Required code_repository : Repository Type: aws_cdk.aws_codecommit.Repository Structs PDKPipelineProps Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained. Initializer from aws_prototyping_sdk import pdk_pipeline pdk_pipeline . PDKPipelineProps ( synth : IFileSetProducer , asset_publishing_code_build_defaults : CodeBuildOptions = None , cli_version : str = None , code_build_defaults : CodeBuildOptions = None , code_pipeline : Pipeline = None , cross_account_keys : bool = None , docker_credentials : typing . List [ DockerCredential ] = None , docker_enabled_for_self_mutation : bool = None , docker_enabled_for_synth : bool = None , pipeline_name : str = None , publish_assets_in_parallel : bool = None , reuse_cross_region_support_stacks : bool = None , self_mutation : bool = None , self_mutation_code_build_defaults : CodeBuildOptions = None , synth_code_build_defaults : CodeBuildOptions = None , primary_synth_directory : str , repository_name : str , default_branch_name : str = None , pr_build_checker : bool = None , synth_shell_step_partial_props : ShellStepProps = None ) Properties Name Type Description synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. asset_publishing_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cli_version str CDK CLI version to use in self-mutation and asset publishing steps. code_build_defaults aws_cdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. code_pipeline aws_cdk.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. cross_account_keys bool Create KMS keys for the artifact buckets, allowing cross-account deployments. docker_credentials typing.List[aws_cdk.pipelines.DockerCredential] A list of credentials used to authenticate to Docker registries. docker_enabled_for_self_mutation bool Enable Docker for the self-mutate step. docker_enabled_for_synth bool Enable Docker for the 'synth' step. pipeline_name str The name of the CodePipeline pipeline. publish_assets_in_parallel bool Publish assets in multiple CodeBuild projects. reuse_cross_region_support_stacks bool Reuse the same cross region support stack for all pipelines in the App. self_mutation bool Whether the pipeline will update itself. self_mutation_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name str Name of the CodeCommit repository to create. default_branch_name str Branch to trigger the pipeline execution. pr_build_checker bool Enables a build job to trigger on PR merges to the defaultBranchName. synth_shell_step_partial_props aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. synth Required synth : IFileSetProducer Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . asset_publishing_code_build_defaults Optional asset_publishing_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cli_version Optional cli_version : str Type: str Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. code_build_defaults Optional code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. code_pipeline Optional code_pipeline : Pipeline Type: aws_cdk.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] cross_account_keys Optional cross_account_keys : bool Type: bool Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. docker_credentials Optional docker_credentials : typing . List [ DockerCredential ] Type: typing.List[aws_cdk.pipelines.DockerCredential] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. docker_enabled_for_self_mutation Optional docker_enabled_for_self_mutation : bool Type: bool Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. docker_enabled_for_synth Optional docker_enabled_for_synth : bool Type: bool Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipeline_name Optional pipeline_name : str Type: str Default: Automatically generated The name of the CodePipeline pipeline. publish_assets_in_parallel Optional publish_assets_in_parallel : bool Type: bool Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuse_cross_region_support_stacks Optional reuse_cross_region_support_stacks : bool Type: bool Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. self_mutation Optional self_mutation : bool Type: bool Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . self_mutation_code_build_defaults Optional self_mutation_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults Optional synth_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory Required primary_synth_directory : str Type: str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name Required repository_name : str Type: str Name of the CodeCommit repository to create. default_branch_name Optional default_branch_name : str Type: str Default: mainline Branch to trigger the pipeline execution. pr_build_checker Optional pr_build_checker : bool Type: bool Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build. synth_shell_step_partial_props Optional synth_shell_step_partial_props : ShellStepProps Type: aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps.","title":"API"},{"location":"python/pdk_pipeline/API/#pdk_pipeline","text":"TODO","title":"pdk_pipeline"},{"location":"python/pdk_pipeline/API/#api-reference","text":"","title":"API Reference "},{"location":"python/pdk_pipeline/API/#constructs","text":"","title":"Constructs "},{"location":"python/pdk_pipeline/API/#pdkpipeline","text":"An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals.","title":"PDKPipeline "},{"location":"python/pdk_pipeline/API/#initializers","text":"from aws_prototyping_sdk import pdk_pipeline pdk_pipeline . PDKPipeline ( scope : Construct , id : str , synth : IFileSetProducer , asset_publishing_code_build_defaults : CodeBuildOptions = None , cli_version : str = None , code_build_defaults : CodeBuildOptions = None , code_pipeline : Pipeline = None , cross_account_keys : bool = None , docker_credentials : typing . List [ DockerCredential ] = None , docker_enabled_for_self_mutation : bool = None , docker_enabled_for_synth : bool = None , pipeline_name : str = None , publish_assets_in_parallel : bool = None , reuse_cross_region_support_stacks : bool = None , self_mutation : bool = None , self_mutation_code_build_defaults : CodeBuildOptions = None , synth_code_build_defaults : CodeBuildOptions = None , primary_synth_directory : str , repository_name : str , default_branch_name : str = None , pr_build_checker : bool = None , synth_shell_step_partial_props : ShellStepProps = None ) Name Type Description scope constructs.Construct No description. id str No description. synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. asset_publishing_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cli_version str CDK CLI version to use in self-mutation and asset publishing steps. code_build_defaults aws_cdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. code_pipeline aws_cdk.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. cross_account_keys bool Create KMS keys for the artifact buckets, allowing cross-account deployments. docker_credentials typing.List[aws_cdk.pipelines.DockerCredential] A list of credentials used to authenticate to Docker registries. docker_enabled_for_self_mutation bool Enable Docker for the self-mutate step. docker_enabled_for_synth bool Enable Docker for the 'synth' step. pipeline_name str The name of the CodePipeline pipeline. publish_assets_in_parallel bool Publish assets in multiple CodeBuild projects. reuse_cross_region_support_stacks bool Reuse the same cross region support stack for all pipelines in the App. self_mutation bool Whether the pipeline will update itself. self_mutation_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name str Name of the CodeCommit repository to create. default_branch_name str Branch to trigger the pipeline execution. pr_build_checker bool Enables a build job to trigger on PR merges to the defaultBranchName. synth_shell_step_partial_props aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands.","title":"Initializers "},{"location":"python/pdk_pipeline/API/#scoperequired","text":"Type: constructs.Construct","title":"scopeRequired "},{"location":"python/pdk_pipeline/API/#idrequired","text":"Type: str","title":"idRequired "},{"location":"python/pdk_pipeline/API/#synthrequired","text":"Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out .","title":"synthRequired "},{"location":"python/pdk_pipeline/API/#asset_publishing_code_build_defaultsoptional","text":"Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects.","title":"asset_publishing_code_build_defaultsOptional "},{"location":"python/pdk_pipeline/API/#cli_versionoptional","text":"Type: str Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version.","title":"cli_versionOptional "},{"location":"python/pdk_pipeline/API/#code_build_defaultsoptional","text":"Type: aws_cdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline.","title":"code_build_defaultsOptional "},{"location":"python/pdk_pipeline/API/#code_pipelineoptional","text":"Type: aws_cdk.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface]","title":"code_pipelineOptional "},{"location":"python/pdk_pipeline/API/#cross_account_keysoptional","text":"Type: bool Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys.","title":"cross_account_keysOptional "},{"location":"python/pdk_pipeline/API/#docker_credentialsoptional","text":"Type: typing.List[aws_cdk.pipelines.DockerCredential] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets.","title":"docker_credentialsOptional "},{"location":"python/pdk_pipeline/API/#docker_enabled_for_self_mutationoptional","text":"Type: bool Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline.","title":"docker_enabled_for_self_mutationOptional "},{"location":"python/pdk_pipeline/API/#docker_enabled_for_synthoptional","text":"Type: bool Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset.","title":"docker_enabled_for_synthOptional "},{"location":"python/pdk_pipeline/API/#pipeline_nameoptional","text":"Type: str Default: Automatically generated The name of the CodePipeline pipeline.","title":"pipeline_nameOptional "},{"location":"python/pdk_pipeline/API/#publish_assets_in_paralleloptional","text":"Type: bool Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you.","title":"publish_assets_in_parallelOptional "},{"location":"python/pdk_pipeline/API/#reuse_cross_region_support_stacksoptional","text":"Type: bool Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App.","title":"reuse_cross_region_support_stacksOptional "},{"location":"python/pdk_pipeline/API/#self_mutationoptional","text":"Type: bool Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy .","title":"self_mutationOptional "},{"location":"python/pdk_pipeline/API/#self_mutation_code_build_defaultsoptional","text":"Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects.","title":"self_mutation_code_build_defaultsOptional "},{"location":"python/pdk_pipeline/API/#synth_code_build_defaultsoptional","text":"Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects.","title":"synth_code_build_defaultsOptional "},{"location":"python/pdk_pipeline/API/#primary_synth_directoryrequired","text":"Type: str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out.","title":"primary_synth_directoryRequired "},{"location":"python/pdk_pipeline/API/#repository_namerequired","text":"Type: str Name of the CodeCommit repository to create.","title":"repository_nameRequired "},{"location":"python/pdk_pipeline/API/#default_branch_nameoptional","text":"Type: str Default: mainline Branch to trigger the pipeline execution.","title":"default_branch_nameOptional "},{"location":"python/pdk_pipeline/API/#pr_build_checkeroptional","text":"Type: bool Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build.","title":"pr_build_checkerOptional "},{"location":"python/pdk_pipeline/API/#synth_shell_step_partial_propsoptional","text":"Type: aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps.","title":"synth_shell_step_partial_propsOptional "},{"location":"python/pdk_pipeline/API/#methods","text":"Name Description to_string Returns a string representation of this construct. add_stage Deploy a single Stage by itself. add_wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. build_pipeline Send the current pipeline definition to the engine, and construct the pipeline.","title":"Methods "},{"location":"python/pdk_pipeline/API/#to_string","text":"def to_string () -> str Returns a string representation of this construct.","title":"to_string "},{"location":"python/pdk_pipeline/API/#add_stage","text":"def add_stage ( stage : Stage , post : typing . List [ Step ] = None , pre : typing . List [ Step ] = None , stack_steps : typing . List [ StackSteps ] = None ) -> StageDeployment Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies.","title":"add_stage "},{"location":"python/pdk_pipeline/API/#stagerequired","text":"Type: aws_cdk.Stage","title":"stageRequired "},{"location":"python/pdk_pipeline/API/#postoptional","text":"Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run after all of the stacks in the stage.","title":"postOptional "},{"location":"python/pdk_pipeline/API/#preoptional","text":"Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run before any of the stacks in the stage.","title":"preOptional "},{"location":"python/pdk_pipeline/API/#stack_stepsoptional","text":"Type: typing.List[aws_cdk.pipelines.StackSteps] Default: No additional instructions Instructions for stack level steps.","title":"stack_stepsOptional "},{"location":"python/pdk_pipeline/API/#add_wave","text":"def add_wave ( id : str , post : typing . List [ Step ] = None , pre : typing . List [ Step ] = None ) -> Wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: ts declare const pipeline: pipelines.CodePipeline; const wave = pipeline.addWave('MyWave'); wave.addStage(new MyApplicationStage(this, 'Stage1')); wave.addStage(new MyApplicationStage(this, 'Stage2'));","title":"add_wave "},{"location":"python/pdk_pipeline/API/#idrequired_1","text":"Type: str","title":"idRequired "},{"location":"python/pdk_pipeline/API/#postoptional_1","text":"Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run after all of the stages in the wave.","title":"postOptional "},{"location":"python/pdk_pipeline/API/#preoptional_1","text":"Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run before any of the stages in the wave.","title":"preOptional "},{"location":"python/pdk_pipeline/API/#build_pipeline","text":"def build_pipeline () -> None Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method.","title":"build_pipeline "},{"location":"python/pdk_pipeline/API/#static-functions","text":"Name Description is_construct Checks if x is a construct.","title":"Static Functions "},{"location":"python/pdk_pipeline/API/#is_construct","text":"from aws_prototyping_sdk import pdk_pipeline pdk_pipeline . PDKPipeline . is_construct ( x : typing . Any ) Checks if x is a construct.","title":"~~is_construct~~ "},{"location":"python/pdk_pipeline/API/#xrequired","text":"Type: typing.Any Any object.","title":"xRequired "},{"location":"python/pdk_pipeline/API/#properties","text":"Name Type Description node constructs.Node The tree node. cloud_assembly_file_set aws_cdk.pipelines.FileSet The FileSet tha contains the cloud assembly. synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves typing.List[aws_cdk.pipelines.Wave] The waves in this pipeline. pipeline aws_cdk.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. synth_project aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the Synth. code_repository aws_cdk.aws_codecommit.Repository No description.","title":"Properties "},{"location":"python/pdk_pipeline/API/#noderequired","text":"node : Node Type: constructs.Node The tree node.","title":"nodeRequired "},{"location":"python/pdk_pipeline/API/#cloud_assembly_file_setrequired","text":"cloud_assembly_file_set : FileSet Type: aws_cdk.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step.","title":"cloud_assembly_file_setRequired "},{"location":"python/pdk_pipeline/API/#synthrequired_1","text":"synth : IFileSetProducer Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly.","title":"synthRequired "},{"location":"python/pdk_pipeline/API/#wavesrequired","text":"waves : typing . List [ Wave ] Type: typing.List[aws_cdk.pipelines.Wave] The waves in this pipeline.","title":"wavesRequired "},{"location":"python/pdk_pipeline/API/#pipelinerequired","text":"pipeline : Pipeline Type: aws_cdk.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built.","title":"pipelineRequired "},{"location":"python/pdk_pipeline/API/#synth_projectrequired","text":"synth_project : IProject Type: aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built.","title":"synth_projectRequired "},{"location":"python/pdk_pipeline/API/#code_repositoryrequired","text":"code_repository : Repository Type: aws_cdk.aws_codecommit.Repository","title":"code_repositoryRequired "},{"location":"python/pdk_pipeline/API/#structs","text":"","title":"Structs "},{"location":"python/pdk_pipeline/API/#pdkpipelineprops","text":"Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained.","title":"PDKPipelineProps "},{"location":"python/pdk_pipeline/API/#initializer","text":"from aws_prototyping_sdk import pdk_pipeline pdk_pipeline . PDKPipelineProps ( synth : IFileSetProducer , asset_publishing_code_build_defaults : CodeBuildOptions = None , cli_version : str = None , code_build_defaults : CodeBuildOptions = None , code_pipeline : Pipeline = None , cross_account_keys : bool = None , docker_credentials : typing . List [ DockerCredential ] = None , docker_enabled_for_self_mutation : bool = None , docker_enabled_for_synth : bool = None , pipeline_name : str = None , publish_assets_in_parallel : bool = None , reuse_cross_region_support_stacks : bool = None , self_mutation : bool = None , self_mutation_code_build_defaults : CodeBuildOptions = None , synth_code_build_defaults : CodeBuildOptions = None , primary_synth_directory : str , repository_name : str , default_branch_name : str = None , pr_build_checker : bool = None , synth_shell_step_partial_props : ShellStepProps = None )","title":"Initializer "},{"location":"python/pdk_pipeline/API/#properties_1","text":"Name Type Description synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. asset_publishing_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cli_version str CDK CLI version to use in self-mutation and asset publishing steps. code_build_defaults aws_cdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. code_pipeline aws_cdk.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. cross_account_keys bool Create KMS keys for the artifact buckets, allowing cross-account deployments. docker_credentials typing.List[aws_cdk.pipelines.DockerCredential] A list of credentials used to authenticate to Docker registries. docker_enabled_for_self_mutation bool Enable Docker for the self-mutate step. docker_enabled_for_synth bool Enable Docker for the 'synth' step. pipeline_name str The name of the CodePipeline pipeline. publish_assets_in_parallel bool Publish assets in multiple CodeBuild projects. reuse_cross_region_support_stacks bool Reuse the same cross region support stack for all pipelines in the App. self_mutation bool Whether the pipeline will update itself. self_mutation_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primary_synth_directory str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name str Name of the CodeCommit repository to create. default_branch_name str Branch to trigger the pipeline execution. pr_build_checker bool Enables a build job to trigger on PR merges to the defaultBranchName. synth_shell_step_partial_props aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands.","title":"Properties "},{"location":"python/pdk_pipeline/API/#synthrequired_2","text":"synth : IFileSetProducer Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out .","title":"synthRequired "},{"location":"python/pdk_pipeline/API/#asset_publishing_code_build_defaultsoptional_1","text":"asset_publishing_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects.","title":"asset_publishing_code_build_defaultsOptional "},{"location":"python/pdk_pipeline/API/#cli_versionoptional_1","text":"cli_version : str Type: str Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version.","title":"cli_versionOptional "},{"location":"python/pdk_pipeline/API/#code_build_defaultsoptional_1","text":"code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline.","title":"code_build_defaultsOptional "},{"location":"python/pdk_pipeline/API/#code_pipelineoptional_1","text":"code_pipeline : Pipeline Type: aws_cdk.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface]","title":"code_pipelineOptional "},{"location":"python/pdk_pipeline/API/#cross_account_keysoptional_1","text":"cross_account_keys : bool Type: bool Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys.","title":"cross_account_keysOptional "},{"location":"python/pdk_pipeline/API/#docker_credentialsoptional_1","text":"docker_credentials : typing . List [ DockerCredential ] Type: typing.List[aws_cdk.pipelines.DockerCredential] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets.","title":"docker_credentialsOptional "},{"location":"python/pdk_pipeline/API/#docker_enabled_for_self_mutationoptional_1","text":"docker_enabled_for_self_mutation : bool Type: bool Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline.","title":"docker_enabled_for_self_mutationOptional "},{"location":"python/pdk_pipeline/API/#docker_enabled_for_synthoptional_1","text":"docker_enabled_for_synth : bool Type: bool Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset.","title":"docker_enabled_for_synthOptional "},{"location":"python/pdk_pipeline/API/#pipeline_nameoptional_1","text":"pipeline_name : str Type: str Default: Automatically generated The name of the CodePipeline pipeline.","title":"pipeline_nameOptional "},{"location":"python/pdk_pipeline/API/#publish_assets_in_paralleloptional_1","text":"publish_assets_in_parallel : bool Type: bool Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you.","title":"publish_assets_in_parallelOptional "},{"location":"python/pdk_pipeline/API/#reuse_cross_region_support_stacksoptional_1","text":"reuse_cross_region_support_stacks : bool Type: bool Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App.","title":"reuse_cross_region_support_stacksOptional "},{"location":"python/pdk_pipeline/API/#self_mutationoptional_1","text":"self_mutation : bool Type: bool Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy .","title":"self_mutationOptional "},{"location":"python/pdk_pipeline/API/#self_mutation_code_build_defaultsoptional_1","text":"self_mutation_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects.","title":"self_mutation_code_build_defaultsOptional "},{"location":"python/pdk_pipeline/API/#synth_code_build_defaultsoptional_1","text":"synth_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects.","title":"synth_code_build_defaultsOptional "},{"location":"python/pdk_pipeline/API/#primary_synth_directoryrequired_1","text":"primary_synth_directory : str Type: str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out.","title":"primary_synth_directoryRequired "},{"location":"python/pdk_pipeline/API/#repository_namerequired_1","text":"repository_name : str Type: str Name of the CodeCommit repository to create.","title":"repository_nameRequired "},{"location":"python/pdk_pipeline/API/#default_branch_nameoptional_1","text":"default_branch_name : str Type: str Default: mainline Branch to trigger the pipeline execution.","title":"default_branch_nameOptional "},{"location":"python/pdk_pipeline/API/#pr_build_checkeroptional_1","text":"pr_build_checker : bool Type: bool Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build.","title":"pr_build_checkerOptional "},{"location":"python/pdk_pipeline/API/#synth_shell_step_partial_propsoptional_1","text":"synth_shell_step_partial_props : ShellStepProps Type: aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps.","title":"synth_shell_step_partial_propsOptional "},{"location":"python/pdk_projen/API/","text":"pdk_projen This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions. Prerequisites Ensure you have the following packages installed globally: node > 14 (or use nvm to install) Getting Started To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds. nx-monorepo The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc. Adding Subprojects Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website . Example 1 - Explicit dependencies NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time. Example 2 - Implicit dependencies Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order. FAQ How do I run a target just on a specific package? To run a package specific target, you can do the following: cd packages/<my-package> npx projen <target> How do I add a new target to a projen Sub Project? In your .projenrc.ts , do the following: const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); infra . addTask ( \"new-target\" , { exec : \"echo \\\"hi\\\"\" }); As usual, ensure you run npx projen in the root directory to synthesize your change. From here is it just a case of executing npx projen new-target in the package directory. I have added a project in .projenrc.ts but it isn't synthesizing? Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo. How do I visualize my dependencies? From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related. I have updated a dependency, however the build or graph viz is not detecting any changes. Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache . How do I build everything in my monorepo without a specific target package? npx nx run-many --target=build --all I am running a different target, however the dependencies are not being executed. By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects. My subproject is not caching even though I haven't changed anything. This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo. API Reference Structs NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer from aws_prototyping_sdk import pdk_projen pdk_projen . NxMonorepoProjectOptions ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , nx_ignore_patterns : typing . List [ str ] = None , sample_language : SampleLanguage = None , target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] = None ) Properties Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. nx_ignore_patterns typing.List[str] List of patterns to include in the .nxignore file. sample_language SampleLanguage Language to generate sample code on first synthesis. target_dependencies typing.Mapping[typing.List[ TargetDependency ]] Configuration for NX TargetDependencies. name Required name : str Type: str Default: $BASEDIR This is the name of your project. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_token_secret Optional projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional stale : bool Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Author's Organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_projen_upgrades Optional auto_approve_projen_upgrades : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projen_upgrade_auto_merge ~~ Optional Deprecated: use autoApproveProjenUpgrades . projen_upgrade_auto_merge : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projen_upgrade_schedule Optional projen_upgrade_schedule : typing . List [ str ] Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projen_upgrade_secret ~~ Optional Deprecated: use githubTokenSecret instead. projen_upgrade_secret : str Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ typing . Any ] Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). nx_ignore_patterns Optional nx_ignore_patterns : typing . List [ str ] Type: typing.List[str] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore sample_language Optional sample_language : SampleLanguage Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis. target_dependencies Optional target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] Type: typing.Mapping[typing.List[ TargetDependency ]] Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies PDKPipelinePyProjectOptions Configuration options for the PDKPipelinePyProject. Initializer from aws_prototyping_sdk import pdk_projen pdk_projen . PDKPipelinePyProjectOptions ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , testdir : str = None ) Properties Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_python bool Use projenrc in python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir str Python sources directory. name Required name : str Type: str Default: $BASEDIR This is the name of your project. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_token_secret Optional projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional stale : bool Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required author_email : str Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required author_name : str Type: str Default: $GIT_USER_NAME Author's name. version Required version : str Type: str Default: \"0.1.0\" Version of the package. classifiers Optional classifiers : typing . List [ str ] Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional description : str Type: str A short description of the package. homepage Optional homepage : str Type: str A URL to the website of the project. license Optional license : str Type: str License of this package as an SPDX identifier. poetry_options Optional poetry_options : PoetryPyprojectOptionsWithoutDeps Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional setup_config : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required module_name : str Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional pip : bool Type: bool Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional poetry : bool Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_python Optional projenrc_python : bool Type: bool Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py . projenrc_python_options Optional projenrc_python_options : ProjenrcOptions Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional pytest : bool Type: bool Default: true Include pytest tests. pytest_options Optional pytest_options : PytestOptions Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional setuptools : bool Type: bool Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional venv : bool Type: bool Default: true Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional venv_options : VenvOptions Type: projen.python.VenvOptions Default: defaults Venv options. build_command Optional build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional cdkout : str Type: str Default: \"cdk.out\" cdk.out directory. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional app_entrypoint : str Type: str Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional testdir : str Type: str Default: \"tests\" Python sources directory. PDKPipelineTsProjectOptions Configuration options for the PDKPipelineTsProject. Initializer from aws_prototyping_sdk import pdk_projen pdk_projen . PDKPipelineTsProjectOptions ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , integration_test_auto_discover : bool = None , lambda_auto_discover : bool = None , lambda_options : LambdaFunctionCommonOptions = None ) Properties Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integration_test_auto_discover bool Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover bool Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required name : str Type: str Default: $BASEDIR This is the name of your project. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_token_secret Optional projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional stale : bool Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Author's Organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_projen_upgrades Optional auto_approve_projen_upgrades : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projen_upgrade_auto_merge ~~ Optional Deprecated: use autoApproveProjenUpgrades . projen_upgrade_auto_merge : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projen_upgrade_schedule Optional projen_upgrade_schedule : typing . List [ str ] Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projen_upgrade_secret ~~ Optional Deprecated: use githubTokenSecret instead. projen_upgrade_secret : str Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ typing . Any ] Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). build_command Optional build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional cdkout : str Type: str Default: \"cdk.out\" cdk.out directory. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional app_entrypoint : str Type: str Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integration_test_auto_discover Optional integration_test_auto_discover : bool Type: bool Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover Optional lambda_auto_discover : bool Type: bool Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options Optional lambda_options : LambdaFunctionCommonOptions Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. TargetDependency Represents an NX Target Dependency. Initializer from aws_prototyping_sdk import pdk_projen pdk_projen . TargetDependency ( projects : TargetDependencyProject , target : str ) Properties Name Type Description projects TargetDependencyProject Target dependencies. target str Projen target i.e: build, test, etc. projects Required projects : TargetDependencyProject Type: TargetDependencyProject Target dependencies. target Required target : str Type: str Projen target i.e: build, test, etc. Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers from aws_prototyping_sdk import pdk_projen pdk_projen . NxMonorepoProject ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , nx_ignore_patterns : typing . List [ str ] = None , sample_language : SampleLanguage = None , target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] = None ) Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. nx_ignore_patterns typing.List[str] List of patterns to include in the .nxignore file. sample_language SampleLanguage Language to generate sample code on first synthesis. target_dependencies typing.Mapping[typing.List[ TargetDependency ]] Configuration for NX TargetDependencies. name Required Type: str Default: $BASEDIR This is the name of your project. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_token_secret Optional Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Author's Organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_projen_upgrades Optional Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projen_upgrade_auto_merge ~~ Optional Deprecated: use autoApproveProjenUpgrades . Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projen_upgrade_schedule Optional Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projen_upgrade_secret ~~ Optional Deprecated: use githubTokenSecret instead. Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). nx_ignore_patterns Optional Type: typing.List[str] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore sample_language Optional Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis. target_dependencies Optional Type: typing.Mapping[typing.List[ TargetDependency ]] Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_implicit_dependency Create an implicit dependency between two Project's. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. add_implicit_dependency def add_implicit_dependency ( dependent : Project , dependee : Project ) -> None Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: projen.Project project you want to have the dependency. dependee Required Type: projen.Project project you wish to depend on. Properties Name Type Description build_task projen.Task No description. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Automatic PR merges. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. build_task Required build_task : Task Type: projen.Task compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Automatic PR merges. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this pacakge. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PdkPipelinePyProject Synthesizes a Python Project with a CI/CD pipeline. Initializers from aws_prototyping_sdk import pdk_projen pdk_projen . PdkPipelinePyProject ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , testdir : str = None ) Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_python bool Use projenrc in python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir str Python sources directory. name Required Type: str Default: $BASEDIR This is the name of your project. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_token_secret Optional Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required Type: str Default: $GIT_USER_NAME Author's name. version Required Type: str Default: \"0.1.0\" Version of the package. classifiers Optional Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: str A short description of the package. homepage Optional Type: str A URL to the website of the project. license Optional Type: str License of this package as an SPDX identifier. poetry_options Optional Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: bool Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_python Optional Type: bool Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py . projenrc_python_options Optional Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: bool Default: true Include pytest tests. pytest_options Optional Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: bool Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: bool Default: true Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional Type: projen.python.VenvOptions Default: defaults Venv options. build_command Optional Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: str Default: \"cdk.out\" cdk.out directory. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional Type: str Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional Type: str Default: \"tests\" Python sources directory. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. add_dependency Adds a runtime dependency. add_dev_dependency Adds a dev dependency. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <module>@<semver> . add_dev_dependency def add_dev_dependency ( spec : str ) -> None Adds a dev dependency. spec Required Type: str Format <module>@<semver> . Properties Name Type Description build_task projen.Task No description. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. deps_manager projen.python.IPythonDeps API for managing dependencies. env_manager projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name str Python module name (the project name, with any hyphens or periods replaced with underscores). version str Version of the package for distribution (should follow semver). packaging_manager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. app_entrypoint str The CDK app entrypoint. cdk_config projen.awscdk.CdkConfig cdk.json configuration. cdk_deps projen.awscdk.AwsCdkDeps No description. cdk_tasks projen.awscdk.CdkTasks Common CDK tasks. cdk_version str The CDK version this app is using. testdir str The directory in which the python tests reside. build_task Required build_task : Task Type: projen.Task compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. deps_manager Required deps_manager : IPythonDeps Type: projen.python.IPythonDeps API for managing dependencies. env_manager Required env_manager : IPythonEnv Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name Required module_name : str Type: str Python module name (the project name, with any hyphens or periods replaced with underscores). version Required version : str Type: str Version of the package for distribution (should follow semver). packaging_manager Optional packaging_manager : IPythonPackaging Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional pytest : Pytest Type: projen.python.Pytest Pytest component. app_entrypoint Required app_entrypoint : str Type: str The CDK app entrypoint. cdk_config Required cdk_config : CdkConfig Type: projen.awscdk.CdkConfig cdk.json configuration. cdk_deps Required cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps cdk_tasks Required cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks Common CDK tasks. cdk_version Required cdk_version : str Type: str The CDK version this app is using. testdir Required testdir : str Type: str The directory in which the python tests reside. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelineTsProject Synthesizes a Typescript Project with a CI/CD pipeline. Initializers from aws_prototyping_sdk import pdk_projen pdk_projen . PDKPipelineTsProject ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , integration_test_auto_discover : bool = None , lambda_auto_discover : bool = None , lambda_options : LambdaFunctionCommonOptions = None ) Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integration_test_auto_discover bool Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover bool Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required Type: str Default: $BASEDIR This is the name of your project. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_token_secret Optional Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Author's Organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_projen_upgrades Optional Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projen_upgrade_auto_merge ~~ Optional Deprecated: use autoApproveProjenUpgrades . Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projen_upgrade_schedule Optional Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projen_upgrade_secret ~~ Optional Deprecated: use githubTokenSecret instead. Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). build_command Optional Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: str Default: \"cdk.out\" cdk.out directory. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional Type: str Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integration_test_auto_discover Optional Type: bool Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover Optional Type: bool Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options Optional Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_cdk_dependency Adds an AWS CDK module dependencies. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. add_cdk_dependency def add_cdk_dependency ( modules : str ) -> None Adds an AWS CDK module dependencies. modules Required Type: str The list of modules to depend on. Properties Name Type Description build_task projen.Task No description. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Automatic PR merges. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. app_entrypoint str The CDK app entrypoint. cdk_config projen.awscdk.CdkConfig cdk.json configuration. cdk_deps projen.awscdk.AwsCdkDeps No description. cdk_tasks projen.awscdk.CdkTasks Common CDK tasks. cdk_version str The CDK version this app is using. build_task Required build_task : Task Type: projen.Task compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Automatic PR merges. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this pacakge. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig app_entrypoint Required app_entrypoint : str Type: str The CDK app entrypoint. cdk_config Required cdk_config : CdkConfig Type: projen.awscdk.CdkConfig cdk.json configuration. cdk_deps Required cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps cdk_tasks Required cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks Common CDK tasks. cdk_version Required cdk_version : str Type: str The CDK version this app is using. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums SampleLanguage Name Description TYPESCRIPT No description. PYTHON No description. Supported languages to generate sample code. TYPESCRIPT PYTHON TargetDependencyProject Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency. SELF Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages. DEPENDENCIES Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"API"},{"location":"python/pdk_projen/API/#pdk_projen","text":"This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions.","title":"pdk_projen"},{"location":"python/pdk_projen/API/#prerequisites","text":"Ensure you have the following packages installed globally: node > 14 (or use nvm to install)","title":"Prerequisites"},{"location":"python/pdk_projen/API/#getting-started","text":"To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds.","title":"Getting Started"},{"location":"python/pdk_projen/API/#nx-monorepo","text":"The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc.","title":"nx-monorepo"},{"location":"python/pdk_projen/API/#adding-subprojects","text":"Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website .","title":"Adding Subprojects"},{"location":"python/pdk_projen/API/#example-1-explicit-dependencies","text":"NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time.","title":"Example 1 - Explicit dependencies"},{"location":"python/pdk_projen/API/#example-2-implicit-dependencies","text":"Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order.","title":"Example 2 - Implicit dependencies"},{"location":"python/pdk_projen/API/#faq","text":"","title":"FAQ"},{"location":"python/pdk_projen/API/#how-do-i-run-a-target-just-on-a-specific-package","text":"To run a package specific target, you can do the following: cd packages/<my-package> npx projen <target>","title":"How do I run a target just on a specific package?"},{"location":"python/pdk_projen/API/#how-do-i-add-a-new-target-to-a-projen-sub-project","text":"In your .projenrc.ts , do the following: const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); infra . addTask ( \"new-target\" , { exec : \"echo \\\"hi\\\"\" }); As usual, ensure you run npx projen in the root directory to synthesize your change. From here is it just a case of executing npx projen new-target in the package directory.","title":"How do I add a new target to a projen Sub Project?"},{"location":"python/pdk_projen/API/#i-have-added-a-project-in-projenrcts-but-it-isnt-synthesizing","text":"Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo.","title":"I have added a project in .projenrc.ts but it isn't synthesizing?"},{"location":"python/pdk_projen/API/#how-do-i-visualize-my-dependencies","text":"From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related.","title":"How do I visualize my dependencies?"},{"location":"python/pdk_projen/API/#i-have-updated-a-dependency-however-the-build-or-graph-viz-is-not-detecting-any-changes","text":"Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache .","title":"I have updated a dependency, however the build or graph viz is not detecting any changes."},{"location":"python/pdk_projen/API/#how-do-i-build-everything-in-my-monorepo-without-a-specific-target-package","text":"npx nx run-many --target=build --all","title":"How do I build everything in my monorepo without a specific target package?"},{"location":"python/pdk_projen/API/#i-am-running-a-different-target-however-the-dependencies-are-not-being-executed","text":"By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects.","title":"I am running a different target, however the dependencies are not being executed."},{"location":"python/pdk_projen/API/#my-subproject-is-not-caching-even-though-i-havent-changed-anything","text":"This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo.","title":"My subproject is not caching even though I haven't changed anything."},{"location":"python/pdk_projen/API/#api-reference","text":"","title":"API Reference "},{"location":"python/pdk_projen/API/#structs","text":"","title":"Structs "},{"location":"python/pdk_projen/API/#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"python/pdk_projen/API/#initializer","text":"from aws_prototyping_sdk import pdk_projen pdk_projen . NxMonorepoProjectOptions ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , nx_ignore_patterns : typing . List [ str ] = None , sample_language : SampleLanguage = None , target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] = None )","title":"Initializer "},{"location":"python/pdk_projen/API/#properties","text":"Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. nx_ignore_patterns typing.List[str] List of patterns to include in the .nxignore file. sample_language SampleLanguage Language to generate sample code on first synthesis. target_dependencies typing.Mapping[typing.List[ TargetDependency ]] Configuration for NX TargetDependencies.","title":"Properties "},{"location":"python/pdk_projen/API/#namerequired","text":"name : str Type: str Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"python/pdk_projen/API/#loggingoptional","text":"logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"python/pdk_projen/API/#outdiroptional","text":"outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"python/pdk_projen/API/#parentoptional","text":"parent : Project Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#projen_commandoptional","text":"projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projen_commandOptional "},{"location":"python/pdk_projen/API/#projenrc_jsonoptional","text":"projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrc_jsonOptional "},{"location":"python/pdk_projen/API/#projenrc_json_optionsoptional","text":"projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrc_json_optionsOptional "},{"location":"python/pdk_projen/API/#auto_approve_optionsoptional","text":"auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"auto_approve_optionsOptional "},{"location":"python/pdk_projen/API/#auto_merge_optionsoptional","text":"auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"auto_merge_optionsOptional "},{"location":"python/pdk_projen/API/#clobberoptional","text":"clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional","text":"dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional","text":"github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#github_optionsoptional","text":"github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"github_optionsOptional "},{"location":"python/pdk_projen/API/#gitpodoptional","text":"gitpod : bool Type: bool Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#mergifyoptional","text":"Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"python/pdk_projen/API/#mergify_optionsoptional","text":"Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergify_options~~Optional "},{"location":"python/pdk_projen/API/#project_typeoptional","text":"Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~project_type~~Optional "},{"location":"python/pdk_projen/API/#projen_token_secretoptional","text":"projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projen_token_secretOptional "},{"location":"python/pdk_projen/API/#readmeoptional","text":"readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"python/pdk_projen/API/#staleoptional","text":"stale : bool Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"python/pdk_projen/API/#stale_optionsoptional","text":"stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"stale_optionsOptional "},{"location":"python/pdk_projen/API/#vscodeoptional","text":"vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#allow_library_dependenciesoptional","text":"allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allow_library_dependenciesOptional "},{"location":"python/pdk_projen/API/#author_emailoptional","text":"author_email : str Type: str Author's e-mail.","title":"author_emailOptional "},{"location":"python/pdk_projen/API/#author_nameoptional","text":"author_name : str Type: str Author's name.","title":"author_nameOptional "},{"location":"python/pdk_projen/API/#author_organizationoptional","text":"author_organization : bool Type: bool Author's Organization.","title":"author_organizationOptional "},{"location":"python/pdk_projen/API/#author_urloptional","text":"author_url : str Type: str Author's URL / Website.","title":"author_urlOptional "},{"location":"python/pdk_projen/API/#auto_detect_binoptional","text":"auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"auto_detect_binOptional "},{"location":"python/pdk_projen/API/#binoptional","text":"bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"python/pdk_projen/API/#bugs_emailoptional","text":"bugs_email : str Type: str The email address to which issues should be reported.","title":"bugs_emailOptional "},{"location":"python/pdk_projen/API/#bugs_urloptional","text":"bugs_url : str Type: str The url to your project's issue tracker.","title":"bugs_urlOptional "},{"location":"python/pdk_projen/API/#bundled_depsoptional","text":"bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundled_depsOptional "},{"location":"python/pdk_projen/API/#code_artifact_optionsoptional","text":"code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"code_artifact_optionsOptional "},{"location":"python/pdk_projen/API/#depsoptional","text":"deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"python/pdk_projen/API/#descriptionoptional","text":"description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#dev_depsoptional","text":"dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"dev_depsOptional "},{"location":"python/pdk_projen/API/#entrypointoptional","text":"entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"python/pdk_projen/API/#homepageoptional","text":"homepage : str Type: str Package's Homepage / Website.","title":"homepageOptional "},{"location":"python/pdk_projen/API/#keywordsoptional","text":"keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"python/pdk_projen/API/#licenseoptional","text":"license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"python/pdk_projen/API/#licensedoptional","text":"licensed : bool Type: bool Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"python/pdk_projen/API/#max_node_versionoptional","text":"max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive).","title":"max_node_versionOptional "},{"location":"python/pdk_projen/API/#min_node_versionoptional","text":"min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"min_node_versionOptional "},{"location":"python/pdk_projen/API/#npm_accessoptional","text":"npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npm_accessOptional "},{"location":"python/pdk_projen/API/#npm_registryoptional","text":"Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npm_registry~~Optional "},{"location":"python/pdk_projen/API/#npm_registry_urloptional","text":"npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npm_registry_urlOptional "},{"location":"python/pdk_projen/API/#npm_token_secretoptional","text":"npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npm_token_secretOptional "},{"location":"python/pdk_projen/API/#package_manageroptional","text":"package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"package_managerOptional "},{"location":"python/pdk_projen/API/#package_nameoptional","text":"package_name : str Type: str Default: defaults to project name The \"name\" in package.json.","title":"package_nameOptional "},{"location":"python/pdk_projen/API/#peer_dependency_optionsoptional","text":"peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peer_dependency_optionsOptional "},{"location":"python/pdk_projen/API/#peer_depsoptional","text":"peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peer_depsOptional "},{"location":"python/pdk_projen/API/#repositoryoptional","text":"repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"python/pdk_projen/API/#repository_directoryoptional","text":"repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repository_directoryOptional "},{"location":"python/pdk_projen/API/#scriptsoptional","text":"scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"python/pdk_projen/API/#stabilityoptional","text":"stability : str Type: str Package's Stability.","title":"stabilityOptional "},{"location":"python/pdk_projen/API/#jsii_release_versionoptional","text":"jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsii_release_versionOptional "},{"location":"python/pdk_projen/API/#major_versionoptional","text":"major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"major_versionOptional "},{"location":"python/pdk_projen/API/#npm_dist_tagoptional","text":"npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npm_dist_tagOptional "},{"location":"python/pdk_projen/API/#post_build_stepsoptional","text":"post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow.","title":"post_build_stepsOptional "},{"location":"python/pdk_projen/API/#prereleaseoptional","text":"prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"python/pdk_projen/API/#publish_dry_runoptional","text":"publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publish_dry_runOptional "},{"location":"python/pdk_projen/API/#publish_tasksoptional","text":"publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publish_tasksOptional "},{"location":"python/pdk_projen/API/#release_branchesoptional","text":"release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"release_branchesOptional "},{"location":"python/pdk_projen/API/#release_every_commitoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~release_every_commit~~Optional "},{"location":"python/pdk_projen/API/#release_failure_issueoptional","text":"release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task.","title":"release_failure_issueOptional "},{"location":"python/pdk_projen/API/#release_failure_issue_labeloptional","text":"release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"release_failure_issue_labelOptional "},{"location":"python/pdk_projen/API/#release_scheduleoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~release_schedule~~Optional "},{"location":"python/pdk_projen/API/#release_tag_prefixoptional","text":"release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"release_tag_prefixOptional "},{"location":"python/pdk_projen/API/#release_triggeroptional","text":"release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"release_triggerOptional "},{"location":"python/pdk_projen/API/#release_workflow_nameoptional","text":"release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow.","title":"release_workflow_nameOptional "},{"location":"python/pdk_projen/API/#release_workflow_setup_stepsoptional","text":"release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container.","title":"release_workflow_setup_stepsOptional "},{"location":"python/pdk_projen/API/#versionrc_optionsoptional","text":"versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrc_optionsOptional "},{"location":"python/pdk_projen/API/#workflow_container_imageoptional","text":"workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows.","title":"workflow_container_imageOptional "},{"location":"python/pdk_projen/API/#workflow_runs_onoptional","text":"workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflow_runs_onOptional "},{"location":"python/pdk_projen/API/#default_release_branchrequired","text":"default_release_branch : str Type: str Default: \"main\" The name of the main release branch.","title":"default_release_branchRequired "},{"location":"python/pdk_projen/API/#artifacts_directoryoptional","text":"artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts.","title":"artifacts_directoryOptional "},{"location":"python/pdk_projen/API/#auto_approve_projen_upgradesoptional","text":"auto_approve_projen_upgrades : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_projen_upgradesOptional "},{"location":"python/pdk_projen/API/#auto_approve_upgradesoptional","text":"auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_upgradesOptional "},{"location":"python/pdk_projen/API/#build_workflowoptional","text":"build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"build_workflowOptional "},{"location":"python/pdk_projen/API/#build_workflow_triggersoptional","text":"build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"build_workflow_triggersOptional "},{"location":"python/pdk_projen/API/#bundler_optionsoptional","text":"bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundler_optionsOptional "},{"location":"python/pdk_projen/API/#code_covoptional","text":"code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"code_covOptional "},{"location":"python/pdk_projen/API/#code_cov_token_secretoptional","text":"code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"code_cov_token_secretOptional "},{"location":"python/pdk_projen/API/#copyright_owneroptional","text":"copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyright_ownerOptional "},{"location":"python/pdk_projen/API/#copyright_periodoptional","text":"copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file.","title":"copyright_periodOptional "},{"location":"python/pdk_projen/API/#dependabotoptional","text":"dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"python/pdk_projen/API/#dependabot_optionsoptional","text":"dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabot_optionsOptional "},{"location":"python/pdk_projen/API/#deps_upgradeoptional","text":"deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"deps_upgradeOptional "},{"location":"python/pdk_projen/API/#deps_upgrade_optionsoptional","text":"deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"deps_upgrade_optionsOptional "},{"location":"python/pdk_projen/API/#gitignoreoptional","text":"gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"python/pdk_projen/API/#jestoptional","text":"jest : bool Type: bool Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"python/pdk_projen/API/#jest_optionsoptional","text":"jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jest_optionsOptional "},{"location":"python/pdk_projen/API/#mutable_buildoptional","text":"mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutable_buildOptional "},{"location":"python/pdk_projen/API/#npmignoreoptional","text":"Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"python/pdk_projen/API/#npmignore_enabledoptional","text":"npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignore_enabledOptional "},{"location":"python/pdk_projen/API/#packageoptional","text":"package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"python/pdk_projen/API/#prettieroptional","text":"prettier : bool Type: bool Default: false Setup prettier.","title":"prettierOptional "},{"location":"python/pdk_projen/API/#prettier_optionsoptional","text":"prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettier_optionsOptional "},{"location":"python/pdk_projen/API/#projen_dev_dependencyoptional","text":"projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projen_dev_dependencyOptional "},{"location":"python/pdk_projen/API/#projenrc_jsoptional","text":"projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrc_jsOptional "},{"location":"python/pdk_projen/API/#projenrc_js_optionsoptional","text":"projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrc_js_optionsOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_auto_mergeoptional","text":"Deprecated: use autoApproveProjenUpgrades . projen_upgrade_auto_merge : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projen_upgrade_auto_merge~~Optional "},{"location":"python/pdk_projen/API/#projen_upgrade_scheduleoptional","text":"projen_upgrade_schedule : typing . List [ str ] Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projen_upgrade_scheduleOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_secretoptional","text":"Deprecated: use githubTokenSecret instead. projen_upgrade_secret : str Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projen_upgrade_secret~~Optional "},{"location":"python/pdk_projen/API/#projen_versionoptional","text":"projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install.","title":"projen_versionOptional "},{"location":"python/pdk_projen/API/#pull_request_templateoptional","text":"pull_request_template : bool Type: bool Default: true Include a GitHub pull request template.","title":"pull_request_templateOptional "},{"location":"python/pdk_projen/API/#pull_request_template_contentsoptional","text":"pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template.","title":"pull_request_template_contentsOptional "},{"location":"python/pdk_projen/API/#releaseoptional","text":"release : bool Type: bool Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"python/pdk_projen/API/#release_to_npmoptional","text":"release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced.","title":"release_to_npmOptional "},{"location":"python/pdk_projen/API/#release_workflowoptional","text":"Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~release_workflow~~Optional "},{"location":"python/pdk_projen/API/#workflow_bootstrap_stepsoptional","text":"workflow_bootstrap_steps : typing . List [ typing . Any ] Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflow_bootstrap_stepsOptional "},{"location":"python/pdk_projen/API/#workflow_git_identityoptional","text":"workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflow_git_identityOptional "},{"location":"python/pdk_projen/API/#workflow_node_versionoptional","text":"workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflow_node_versionOptional "},{"location":"python/pdk_projen/API/#disable_tsconfigoptional","text":"disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disable_tsconfigOptional "},{"location":"python/pdk_projen/API/#docgenoptional","text":"docgen : bool Type: bool Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"python/pdk_projen/API/#docs_directoryoptional","text":"docs_directory : str Type: str Default: \"docs\" Docs directory.","title":"docs_directoryOptional "},{"location":"python/pdk_projen/API/#entrypoint_typesoptional","text":"entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypoint_typesOptional "},{"location":"python/pdk_projen/API/#eslintoptional","text":"eslint : bool Type: bool Default: true Setup eslint.","title":"eslintOptional "},{"location":"python/pdk_projen/API/#eslint_optionsoptional","text":"eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslint_optionsOptional "},{"location":"python/pdk_projen/API/#libdiroptional","text":"libdir : str Type: str Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"python/pdk_projen/API/#projenrc_tsoptional","text":"projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrc_tsOptional "},{"location":"python/pdk_projen/API/#projenrc_ts_optionsoptional","text":"projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrc_ts_optionsOptional "},{"location":"python/pdk_projen/API/#sample_codeoptional","text":"sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sample_codeOptional "},{"location":"python/pdk_projen/API/#srcdiroptional","text":"srcdir : str Type: str Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"python/pdk_projen/API/#testdiroptional","text":"testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"python/pdk_projen/API/#tsconfigoptional","text":"tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"python/pdk_projen/API/#tsconfig_devoptional","text":"tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfig_devOptional "},{"location":"python/pdk_projen/API/#tsconfig_dev_fileoptional","text":"tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfig_dev_fileOptional "},{"location":"python/pdk_projen/API/#typescript_versionoptional","text":"typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescript_versionOptional "},{"location":"python/pdk_projen/API/#nx_ignore_patternsoptional","text":"nx_ignore_patterns : typing . List [ str ] Type: typing.List[str] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore","title":"nx_ignore_patternsOptional "},{"location":"python/pdk_projen/API/#sample_languageoptional","text":"sample_language : SampleLanguage Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis.","title":"sample_languageOptional "},{"location":"python/pdk_projen/API/#target_dependenciesoptional","text":"target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] Type: typing.Mapping[typing.List[ TargetDependency ]] Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies","title":"target_dependenciesOptional "},{"location":"python/pdk_projen/API/#pdkpipelinepyprojectoptions","text":"Configuration options for the PDKPipelinePyProject.","title":"PDKPipelinePyProjectOptions "},{"location":"python/pdk_projen/API/#initializer_1","text":"from aws_prototyping_sdk import pdk_projen pdk_projen . PDKPipelinePyProjectOptions ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , testdir : str = None )","title":"Initializer "},{"location":"python/pdk_projen/API/#properties_1","text":"Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_python bool Use projenrc in python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir str Python sources directory.","title":"Properties "},{"location":"python/pdk_projen/API/#namerequired_1","text":"name : str Type: str Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"python/pdk_projen/API/#loggingoptional_1","text":"logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"python/pdk_projen/API/#outdiroptional_1","text":"outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"python/pdk_projen/API/#parentoptional_1","text":"parent : Project Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#projen_commandoptional_1","text":"projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projen_commandOptional "},{"location":"python/pdk_projen/API/#projenrc_jsonoptional_1","text":"projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrc_jsonOptional "},{"location":"python/pdk_projen/API/#projenrc_json_optionsoptional_1","text":"projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrc_json_optionsOptional "},{"location":"python/pdk_projen/API/#auto_approve_optionsoptional_1","text":"auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"auto_approve_optionsOptional "},{"location":"python/pdk_projen/API/#auto_merge_optionsoptional_1","text":"auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"auto_merge_optionsOptional "},{"location":"python/pdk_projen/API/#clobberoptional_1","text":"clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_1","text":"dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_1","text":"github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#github_optionsoptional_1","text":"github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"github_optionsOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_1","text":"gitpod : bool Type: bool Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#mergifyoptional_1","text":"Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"python/pdk_projen/API/#mergify_optionsoptional_1","text":"Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergify_options~~Optional "},{"location":"python/pdk_projen/API/#project_typeoptional_1","text":"Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~project_type~~Optional "},{"location":"python/pdk_projen/API/#projen_token_secretoptional_1","text":"projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projen_token_secretOptional "},{"location":"python/pdk_projen/API/#readmeoptional_1","text":"readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"python/pdk_projen/API/#staleoptional_1","text":"stale : bool Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"python/pdk_projen/API/#stale_optionsoptional_1","text":"stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"stale_optionsOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_1","text":"vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#author_emailrequired","text":"author_email : str Type: str Default: $GIT_USER_EMAIL Author's e-mail.","title":"author_emailRequired "},{"location":"python/pdk_projen/API/#author_namerequired","text":"author_name : str Type: str Default: $GIT_USER_NAME Author's name.","title":"author_nameRequired "},{"location":"python/pdk_projen/API/#versionrequired","text":"version : str Type: str Default: \"0.1.0\" Version of the package.","title":"versionRequired "},{"location":"python/pdk_projen/API/#classifiersoptional","text":"classifiers : typing . List [ str ] Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/","title":"classifiersOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_1","text":"description : str Type: str A short description of the package.","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#homepageoptional_1","text":"homepage : str Type: str A URL to the website of the project.","title":"homepageOptional "},{"location":"python/pdk_projen/API/#licenseoptional_1","text":"license : str Type: str License of this package as an SPDX identifier.","title":"licenseOptional "},{"location":"python/pdk_projen/API/#poetry_optionsoptional","text":"poetry_options : PoetryPyprojectOptionsWithoutDeps Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry.","title":"poetry_optionsOptional "},{"location":"python/pdk_projen/API/#setup_configoptional","text":"setup_config : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools.","title":"setup_configOptional "},{"location":"python/pdk_projen/API/#module_namerequired","text":"module_name : str Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores.","title":"module_nameRequired "},{"location":"python/pdk_projen/API/#depsoptional_1","text":"deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() .","title":"depsOptional "},{"location":"python/pdk_projen/API/#dev_depsoptional_1","text":"dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() .","title":"dev_depsOptional "},{"location":"python/pdk_projen/API/#pipoptional","text":"pip : bool Type: bool Default: true Use pip with a requirements.txt file to track project dependencies.","title":"pipOptional "},{"location":"python/pdk_projen/API/#poetryoptional","text":"poetry : bool Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing.","title":"poetryOptional "},{"location":"python/pdk_projen/API/#projenrc_pythonoptional","text":"projenrc_python : bool Type: bool Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py .","title":"projenrc_pythonOptional "},{"location":"python/pdk_projen/API/#projenrc_python_optionsoptional","text":"projenrc_python_options : ProjenrcOptions Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python.","title":"projenrc_python_optionsOptional "},{"location":"python/pdk_projen/API/#pytestoptional","text":"pytest : bool Type: bool Default: true Include pytest tests.","title":"pytestOptional "},{"location":"python/pdk_projen/API/#pytest_optionsoptional","text":"pytest_options : PytestOptions Type: projen.python.PytestOptions Default: defaults pytest options.","title":"pytest_optionsOptional "},{"location":"python/pdk_projen/API/#sampleoptional","text":"sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist.","title":"sampleOptional "},{"location":"python/pdk_projen/API/#setuptoolsoptional","text":"setuptools : bool Type: bool Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing.","title":"setuptoolsOptional "},{"location":"python/pdk_projen/API/#venvoptional","text":"venv : bool Type: bool Default: true Use venv to manage a virtual environment for installing dependencies inside.","title":"venvOptional "},{"location":"python/pdk_projen/API/#venv_optionsoptional","text":"venv_options : VenvOptions Type: projen.python.VenvOptions Default: defaults Venv options.","title":"venv_optionsOptional "},{"location":"python/pdk_projen/API/#build_commandoptional","text":"build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"build_commandOptional "},{"location":"python/pdk_projen/API/#cdkoutoptional","text":"cdkout : str Type: str Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"python/pdk_projen/API/#contextoptional","text":"context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"python/pdk_projen/API/#feature_flagsoptional","text":"feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json.","title":"feature_flagsOptional "},{"location":"python/pdk_projen/API/#require_approvaloptional","text":"require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"require_approvalOptional "},{"location":"python/pdk_projen/API/#watch_excludesoptional","text":"watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch .","title":"watch_excludesOptional "},{"location":"python/pdk_projen/API/#watch_includesoptional","text":"watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch .","title":"watch_includesOptional "},{"location":"python/pdk_projen/API/#cdk_versionrequired","text":"cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdk_versionRequired "},{"location":"python/pdk_projen/API/#cdk_assertoptional","text":"Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdk_assert~~Optional "},{"location":"python/pdk_projen/API/#cdk_assertionsoptional","text":"cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdk_assertionsOptional "},{"location":"python/pdk_projen/API/#cdk_dependenciesoptional","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires.","title":"~~cdk_dependencies~~Optional "},{"location":"python/pdk_projen/API/#cdk_dependencies_as_depsoptional","text":"Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdk_dependencies_as_deps~~Optional "},{"location":"python/pdk_projen/API/#cdk_test_dependenciesoptional","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing.","title":"~~cdk_test_dependencies~~Optional "},{"location":"python/pdk_projen/API/#cdk_version_pinningoptional","text":"cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdk_version_pinningOptional "},{"location":"python/pdk_projen/API/#constructs_versionoptional","text":"constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructs_versionOptional "},{"location":"python/pdk_projen/API/#app_entrypointoptional","text":"app_entrypoint : str Type: str Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"app_entrypointOptional "},{"location":"python/pdk_projen/API/#testdiroptional_1","text":"testdir : str Type: str Default: \"tests\" Python sources directory.","title":"testdirOptional "},{"location":"python/pdk_projen/API/#pdkpipelinetsprojectoptions","text":"Configuration options for the PDKPipelineTsProject.","title":"PDKPipelineTsProjectOptions "},{"location":"python/pdk_projen/API/#initializer_2","text":"from aws_prototyping_sdk import pdk_projen pdk_projen . PDKPipelineTsProjectOptions ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , integration_test_auto_discover : bool = None , lambda_auto_discover : bool = None , lambda_options : LambdaFunctionCommonOptions = None )","title":"Initializer "},{"location":"python/pdk_projen/API/#properties_2","text":"Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integration_test_auto_discover bool Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover bool Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions.","title":"Properties "},{"location":"python/pdk_projen/API/#namerequired_2","text":"name : str Type: str Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"python/pdk_projen/API/#loggingoptional_2","text":"logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"python/pdk_projen/API/#outdiroptional_2","text":"outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"python/pdk_projen/API/#parentoptional_2","text":"parent : Project Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#projen_commandoptional_2","text":"projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projen_commandOptional "},{"location":"python/pdk_projen/API/#projenrc_jsonoptional_2","text":"projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrc_jsonOptional "},{"location":"python/pdk_projen/API/#projenrc_json_optionsoptional_2","text":"projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrc_json_optionsOptional "},{"location":"python/pdk_projen/API/#auto_approve_optionsoptional_2","text":"auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"auto_approve_optionsOptional "},{"location":"python/pdk_projen/API/#auto_merge_optionsoptional_2","text":"auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"auto_merge_optionsOptional "},{"location":"python/pdk_projen/API/#clobberoptional_2","text":"clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_2","text":"dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_2","text":"github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#github_optionsoptional_2","text":"github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"github_optionsOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_2","text":"gitpod : bool Type: bool Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#mergifyoptional_2","text":"Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"python/pdk_projen/API/#mergify_optionsoptional_2","text":"Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergify_options~~Optional "},{"location":"python/pdk_projen/API/#project_typeoptional_2","text":"Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~project_type~~Optional "},{"location":"python/pdk_projen/API/#projen_token_secretoptional_2","text":"projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projen_token_secretOptional "},{"location":"python/pdk_projen/API/#readmeoptional_2","text":"readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"python/pdk_projen/API/#staleoptional_2","text":"stale : bool Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"python/pdk_projen/API/#stale_optionsoptional_2","text":"stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"stale_optionsOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_2","text":"vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#allow_library_dependenciesoptional_1","text":"allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allow_library_dependenciesOptional "},{"location":"python/pdk_projen/API/#author_emailoptional_1","text":"author_email : str Type: str Author's e-mail.","title":"author_emailOptional "},{"location":"python/pdk_projen/API/#author_nameoptional_1","text":"author_name : str Type: str Author's name.","title":"author_nameOptional "},{"location":"python/pdk_projen/API/#author_organizationoptional_1","text":"author_organization : bool Type: bool Author's Organization.","title":"author_organizationOptional "},{"location":"python/pdk_projen/API/#author_urloptional_1","text":"author_url : str Type: str Author's URL / Website.","title":"author_urlOptional "},{"location":"python/pdk_projen/API/#auto_detect_binoptional_1","text":"auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"auto_detect_binOptional "},{"location":"python/pdk_projen/API/#binoptional_1","text":"bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"python/pdk_projen/API/#bugs_emailoptional_1","text":"bugs_email : str Type: str The email address to which issues should be reported.","title":"bugs_emailOptional "},{"location":"python/pdk_projen/API/#bugs_urloptional_1","text":"bugs_url : str Type: str The url to your project's issue tracker.","title":"bugs_urlOptional "},{"location":"python/pdk_projen/API/#bundled_depsoptional_1","text":"bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundled_depsOptional "},{"location":"python/pdk_projen/API/#code_artifact_optionsoptional_1","text":"code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"code_artifact_optionsOptional "},{"location":"python/pdk_projen/API/#depsoptional_2","text":"deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_2","text":"description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#dev_depsoptional_2","text":"dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"dev_depsOptional "},{"location":"python/pdk_projen/API/#entrypointoptional_1","text":"entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"python/pdk_projen/API/#homepageoptional_2","text":"homepage : str Type: str Package's Homepage / Website.","title":"homepageOptional "},{"location":"python/pdk_projen/API/#keywordsoptional_1","text":"keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"python/pdk_projen/API/#licenseoptional_2","text":"license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"python/pdk_projen/API/#licensedoptional_1","text":"licensed : bool Type: bool Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"python/pdk_projen/API/#max_node_versionoptional_1","text":"max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive).","title":"max_node_versionOptional "},{"location":"python/pdk_projen/API/#min_node_versionoptional_1","text":"min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"min_node_versionOptional "},{"location":"python/pdk_projen/API/#npm_accessoptional_1","text":"npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npm_accessOptional "},{"location":"python/pdk_projen/API/#npm_registryoptional_1","text":"Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npm_registry~~Optional "},{"location":"python/pdk_projen/API/#npm_registry_urloptional_1","text":"npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npm_registry_urlOptional "},{"location":"python/pdk_projen/API/#npm_token_secretoptional_1","text":"npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npm_token_secretOptional "},{"location":"python/pdk_projen/API/#package_manageroptional_1","text":"package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"package_managerOptional "},{"location":"python/pdk_projen/API/#package_nameoptional_1","text":"package_name : str Type: str Default: defaults to project name The \"name\" in package.json.","title":"package_nameOptional "},{"location":"python/pdk_projen/API/#peer_dependency_optionsoptional_1","text":"peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peer_dependency_optionsOptional "},{"location":"python/pdk_projen/API/#peer_depsoptional_1","text":"peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peer_depsOptional "},{"location":"python/pdk_projen/API/#repositoryoptional_1","text":"repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"python/pdk_projen/API/#repository_directoryoptional_1","text":"repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repository_directoryOptional "},{"location":"python/pdk_projen/API/#scriptsoptional_1","text":"scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"python/pdk_projen/API/#stabilityoptional_1","text":"stability : str Type: str Package's Stability.","title":"stabilityOptional "},{"location":"python/pdk_projen/API/#jsii_release_versionoptional_1","text":"jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsii_release_versionOptional "},{"location":"python/pdk_projen/API/#major_versionoptional_1","text":"major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"major_versionOptional "},{"location":"python/pdk_projen/API/#npm_dist_tagoptional_1","text":"npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npm_dist_tagOptional "},{"location":"python/pdk_projen/API/#post_build_stepsoptional_1","text":"post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow.","title":"post_build_stepsOptional "},{"location":"python/pdk_projen/API/#prereleaseoptional_1","text":"prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"python/pdk_projen/API/#publish_dry_runoptional_1","text":"publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publish_dry_runOptional "},{"location":"python/pdk_projen/API/#publish_tasksoptional_1","text":"publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publish_tasksOptional "},{"location":"python/pdk_projen/API/#release_branchesoptional_1","text":"release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"release_branchesOptional "},{"location":"python/pdk_projen/API/#release_every_commitoptional_1","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~release_every_commit~~Optional "},{"location":"python/pdk_projen/API/#release_failure_issueoptional_1","text":"release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task.","title":"release_failure_issueOptional "},{"location":"python/pdk_projen/API/#release_failure_issue_labeloptional_1","text":"release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"release_failure_issue_labelOptional "},{"location":"python/pdk_projen/API/#release_scheduleoptional_1","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~release_schedule~~Optional "},{"location":"python/pdk_projen/API/#release_tag_prefixoptional_1","text":"release_tag_prefix : str Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"release_tag_prefixOptional "},{"location":"python/pdk_projen/API/#release_triggeroptional_1","text":"release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"release_triggerOptional "},{"location":"python/pdk_projen/API/#release_workflow_nameoptional_1","text":"release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow.","title":"release_workflow_nameOptional "},{"location":"python/pdk_projen/API/#release_workflow_setup_stepsoptional_1","text":"release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container.","title":"release_workflow_setup_stepsOptional "},{"location":"python/pdk_projen/API/#versionrc_optionsoptional_1","text":"versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrc_optionsOptional "},{"location":"python/pdk_projen/API/#workflow_container_imageoptional_1","text":"workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows.","title":"workflow_container_imageOptional "},{"location":"python/pdk_projen/API/#workflow_runs_onoptional_1","text":"workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflow_runs_onOptional "},{"location":"python/pdk_projen/API/#default_release_branchrequired_1","text":"default_release_branch : str Type: str Default: \"main\" The name of the main release branch.","title":"default_release_branchRequired "},{"location":"python/pdk_projen/API/#artifacts_directoryoptional_1","text":"artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts.","title":"artifacts_directoryOptional "},{"location":"python/pdk_projen/API/#auto_approve_projen_upgradesoptional_1","text":"auto_approve_projen_upgrades : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_projen_upgradesOptional "},{"location":"python/pdk_projen/API/#auto_approve_upgradesoptional_1","text":"auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_upgradesOptional "},{"location":"python/pdk_projen/API/#build_workflowoptional_1","text":"build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"build_workflowOptional "},{"location":"python/pdk_projen/API/#build_workflow_triggersoptional_1","text":"build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"build_workflow_triggersOptional "},{"location":"python/pdk_projen/API/#bundler_optionsoptional_1","text":"bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundler_optionsOptional "},{"location":"python/pdk_projen/API/#code_covoptional_1","text":"code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"code_covOptional "},{"location":"python/pdk_projen/API/#code_cov_token_secretoptional_1","text":"code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"code_cov_token_secretOptional "},{"location":"python/pdk_projen/API/#copyright_owneroptional_1","text":"copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyright_ownerOptional "},{"location":"python/pdk_projen/API/#copyright_periodoptional_1","text":"copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file.","title":"copyright_periodOptional "},{"location":"python/pdk_projen/API/#dependabotoptional_1","text":"dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"python/pdk_projen/API/#dependabot_optionsoptional_1","text":"dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabot_optionsOptional "},{"location":"python/pdk_projen/API/#deps_upgradeoptional_1","text":"deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"deps_upgradeOptional "},{"location":"python/pdk_projen/API/#deps_upgrade_optionsoptional_1","text":"deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"deps_upgrade_optionsOptional "},{"location":"python/pdk_projen/API/#gitignoreoptional_1","text":"gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"python/pdk_projen/API/#jestoptional_1","text":"jest : bool Type: bool Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"python/pdk_projen/API/#jest_optionsoptional_1","text":"jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jest_optionsOptional "},{"location":"python/pdk_projen/API/#mutable_buildoptional_1","text":"mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutable_buildOptional "},{"location":"python/pdk_projen/API/#npmignoreoptional_1","text":"Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"python/pdk_projen/API/#npmignore_enabledoptional_1","text":"npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignore_enabledOptional "},{"location":"python/pdk_projen/API/#packageoptional_1","text":"package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"python/pdk_projen/API/#prettieroptional_1","text":"prettier : bool Type: bool Default: false Setup prettier.","title":"prettierOptional "},{"location":"python/pdk_projen/API/#prettier_optionsoptional_1","text":"prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettier_optionsOptional "},{"location":"python/pdk_projen/API/#projen_dev_dependencyoptional_1","text":"projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projen_dev_dependencyOptional "},{"location":"python/pdk_projen/API/#projenrc_jsoptional_1","text":"projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrc_jsOptional "},{"location":"python/pdk_projen/API/#projenrc_js_optionsoptional_1","text":"projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrc_js_optionsOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_auto_mergeoptional_1","text":"Deprecated: use autoApproveProjenUpgrades . projen_upgrade_auto_merge : bool Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projen_upgrade_auto_merge~~Optional "},{"location":"python/pdk_projen/API/#projen_upgrade_scheduleoptional_1","text":"projen_upgrade_schedule : typing . List [ str ] Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projen_upgrade_scheduleOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_secretoptional_1","text":"Deprecated: use githubTokenSecret instead. projen_upgrade_secret : str Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projen_upgrade_secret~~Optional "},{"location":"python/pdk_projen/API/#projen_versionoptional_1","text":"projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install.","title":"projen_versionOptional "},{"location":"python/pdk_projen/API/#pull_request_templateoptional_1","text":"pull_request_template : bool Type: bool Default: true Include a GitHub pull request template.","title":"pull_request_templateOptional "},{"location":"python/pdk_projen/API/#pull_request_template_contentsoptional_1","text":"pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template.","title":"pull_request_template_contentsOptional "},{"location":"python/pdk_projen/API/#releaseoptional_1","text":"release : bool Type: bool Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"python/pdk_projen/API/#release_to_npmoptional_1","text":"release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced.","title":"release_to_npmOptional "},{"location":"python/pdk_projen/API/#release_workflowoptional_1","text":"Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~release_workflow~~Optional "},{"location":"python/pdk_projen/API/#workflow_bootstrap_stepsoptional_1","text":"workflow_bootstrap_steps : typing . List [ typing . Any ] Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflow_bootstrap_stepsOptional "},{"location":"python/pdk_projen/API/#workflow_git_identityoptional_1","text":"workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflow_git_identityOptional "},{"location":"python/pdk_projen/API/#workflow_node_versionoptional_1","text":"workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflow_node_versionOptional "},{"location":"python/pdk_projen/API/#disable_tsconfigoptional_1","text":"disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disable_tsconfigOptional "},{"location":"python/pdk_projen/API/#docgenoptional_1","text":"docgen : bool Type: bool Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"python/pdk_projen/API/#docs_directoryoptional_1","text":"docs_directory : str Type: str Default: \"docs\" Docs directory.","title":"docs_directoryOptional "},{"location":"python/pdk_projen/API/#entrypoint_typesoptional_1","text":"entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypoint_typesOptional "},{"location":"python/pdk_projen/API/#eslintoptional_1","text":"eslint : bool Type: bool Default: true Setup eslint.","title":"eslintOptional "},{"location":"python/pdk_projen/API/#eslint_optionsoptional_1","text":"eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslint_optionsOptional "},{"location":"python/pdk_projen/API/#libdiroptional_1","text":"libdir : str Type: str Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"python/pdk_projen/API/#projenrc_tsoptional_1","text":"projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrc_tsOptional "},{"location":"python/pdk_projen/API/#projenrc_ts_optionsoptional_1","text":"projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrc_ts_optionsOptional "},{"location":"python/pdk_projen/API/#sample_codeoptional_1","text":"sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sample_codeOptional "},{"location":"python/pdk_projen/API/#srcdiroptional_1","text":"srcdir : str Type: str Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"python/pdk_projen/API/#testdiroptional_2","text":"testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"python/pdk_projen/API/#tsconfigoptional_1","text":"tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"python/pdk_projen/API/#tsconfig_devoptional_1","text":"tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfig_devOptional "},{"location":"python/pdk_projen/API/#tsconfig_dev_fileoptional_1","text":"tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfig_dev_fileOptional "},{"location":"python/pdk_projen/API/#typescript_versionoptional_1","text":"typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescript_versionOptional "},{"location":"python/pdk_projen/API/#build_commandoptional_1","text":"build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"build_commandOptional "},{"location":"python/pdk_projen/API/#cdkoutoptional_1","text":"cdkout : str Type: str Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"python/pdk_projen/API/#contextoptional_1","text":"context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"python/pdk_projen/API/#feature_flagsoptional_1","text":"feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json.","title":"feature_flagsOptional "},{"location":"python/pdk_projen/API/#require_approvaloptional_1","text":"require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"require_approvalOptional "},{"location":"python/pdk_projen/API/#watch_excludesoptional_1","text":"watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch .","title":"watch_excludesOptional "},{"location":"python/pdk_projen/API/#watch_includesoptional_1","text":"watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch .","title":"watch_includesOptional "},{"location":"python/pdk_projen/API/#cdk_versionrequired_1","text":"cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdk_versionRequired "},{"location":"python/pdk_projen/API/#cdk_assertoptional_1","text":"Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdk_assert~~Optional "},{"location":"python/pdk_projen/API/#cdk_assertionsoptional_1","text":"cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdk_assertionsOptional "},{"location":"python/pdk_projen/API/#cdk_dependenciesoptional_1","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires.","title":"~~cdk_dependencies~~Optional "},{"location":"python/pdk_projen/API/#cdk_dependencies_as_depsoptional_1","text":"Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdk_dependencies_as_deps~~Optional "},{"location":"python/pdk_projen/API/#cdk_test_dependenciesoptional_1","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing.","title":"~~cdk_test_dependencies~~Optional "},{"location":"python/pdk_projen/API/#cdk_version_pinningoptional_1","text":"cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdk_version_pinningOptional "},{"location":"python/pdk_projen/API/#constructs_versionoptional_1","text":"constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructs_versionOptional "},{"location":"python/pdk_projen/API/#app_entrypointoptional_1","text":"app_entrypoint : str Type: str Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"app_entrypointOptional "},{"location":"python/pdk_projen/API/#integration_test_auto_discoveroptional","text":"integration_test_auto_discover : bool Type: bool Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory.","title":"integration_test_auto_discoverOptional "},{"location":"python/pdk_projen/API/#lambda_auto_discoveroptional","text":"lambda_auto_discover : bool Type: bool Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project.","title":"lambda_auto_discoverOptional "},{"location":"python/pdk_projen/API/#lambda_optionsoptional","text":"lambda_options : LambdaFunctionCommonOptions Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions.","title":"lambda_optionsOptional "},{"location":"python/pdk_projen/API/#targetdependency","text":"Represents an NX Target Dependency.","title":"TargetDependency "},{"location":"python/pdk_projen/API/#initializer_3","text":"from aws_prototyping_sdk import pdk_projen pdk_projen . TargetDependency ( projects : TargetDependencyProject , target : str )","title":"Initializer "},{"location":"python/pdk_projen/API/#properties_3","text":"Name Type Description projects TargetDependencyProject Target dependencies. target str Projen target i.e: build, test, etc.","title":"Properties "},{"location":"python/pdk_projen/API/#projectsrequired","text":"projects : TargetDependencyProject Type: TargetDependencyProject Target dependencies.","title":"projectsRequired "},{"location":"python/pdk_projen/API/#targetrequired","text":"target : str Type: str Projen target i.e: build, test, etc.","title":"targetRequired "},{"location":"python/pdk_projen/API/#classes","text":"","title":"Classes "},{"location":"python/pdk_projen/API/#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"python/pdk_projen/API/#initializers","text":"from aws_prototyping_sdk import pdk_projen pdk_projen . NxMonorepoProject ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , nx_ignore_patterns : typing . List [ str ] = None , sample_language : SampleLanguage = None , target_dependencies : typing . Mapping [ typing . List [ TargetDependency ]] = None ) Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. nx_ignore_patterns typing.List[str] List of patterns to include in the .nxignore file. sample_language SampleLanguage Language to generate sample code on first synthesis. target_dependencies typing.Mapping[typing.List[ TargetDependency ]] Configuration for NX TargetDependencies.","title":"Initializers "},{"location":"python/pdk_projen/API/#namerequired_3","text":"Type: str Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"python/pdk_projen/API/#loggingoptional_3","text":"Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"python/pdk_projen/API/#outdiroptional_3","text":"Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"python/pdk_projen/API/#parentoptional_3","text":"Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#projen_commandoptional_3","text":"Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projen_commandOptional "},{"location":"python/pdk_projen/API/#projenrc_jsonoptional_3","text":"Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrc_jsonOptional "},{"location":"python/pdk_projen/API/#projenrc_json_optionsoptional_3","text":"Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrc_json_optionsOptional "},{"location":"python/pdk_projen/API/#auto_approve_optionsoptional_3","text":"Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"auto_approve_optionsOptional "},{"location":"python/pdk_projen/API/#auto_merge_optionsoptional_3","text":"Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"auto_merge_optionsOptional "},{"location":"python/pdk_projen/API/#clobberoptional_3","text":"Type: bool Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_3","text":"Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_3","text":"Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#github_optionsoptional_3","text":"Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"github_optionsOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_3","text":"Type: bool Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#mergifyoptional_3","text":"Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"python/pdk_projen/API/#mergify_optionsoptional_3","text":"Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergify_options~~Optional "},{"location":"python/pdk_projen/API/#project_typeoptional_3","text":"Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~project_type~~Optional "},{"location":"python/pdk_projen/API/#projen_token_secretoptional_3","text":"Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projen_token_secretOptional "},{"location":"python/pdk_projen/API/#readmeoptional_3","text":"Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"python/pdk_projen/API/#staleoptional_3","text":"Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"python/pdk_projen/API/#stale_optionsoptional_3","text":"Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"stale_optionsOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_3","text":"Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#allow_library_dependenciesoptional_2","text":"Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allow_library_dependenciesOptional "},{"location":"python/pdk_projen/API/#author_emailoptional_2","text":"Type: str Author's e-mail.","title":"author_emailOptional "},{"location":"python/pdk_projen/API/#author_nameoptional_2","text":"Type: str Author's name.","title":"author_nameOptional "},{"location":"python/pdk_projen/API/#author_organizationoptional_2","text":"Type: bool Author's Organization.","title":"author_organizationOptional "},{"location":"python/pdk_projen/API/#author_urloptional_2","text":"Type: str Author's URL / Website.","title":"author_urlOptional "},{"location":"python/pdk_projen/API/#auto_detect_binoptional_2","text":"Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"auto_detect_binOptional "},{"location":"python/pdk_projen/API/#binoptional_2","text":"Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"python/pdk_projen/API/#bugs_emailoptional_2","text":"Type: str The email address to which issues should be reported.","title":"bugs_emailOptional "},{"location":"python/pdk_projen/API/#bugs_urloptional_2","text":"Type: str The url to your project's issue tracker.","title":"bugs_urlOptional "},{"location":"python/pdk_projen/API/#bundled_depsoptional_2","text":"Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundled_depsOptional "},{"location":"python/pdk_projen/API/#code_artifact_optionsoptional_2","text":"Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"code_artifact_optionsOptional "},{"location":"python/pdk_projen/API/#depsoptional_3","text":"Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_3","text":"Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#dev_depsoptional_3","text":"Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"dev_depsOptional "},{"location":"python/pdk_projen/API/#entrypointoptional_2","text":"Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"python/pdk_projen/API/#homepageoptional_3","text":"Type: str Package's Homepage / Website.","title":"homepageOptional "},{"location":"python/pdk_projen/API/#keywordsoptional_2","text":"Type: typing.List[str] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"python/pdk_projen/API/#licenseoptional_3","text":"Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"python/pdk_projen/API/#licensedoptional_2","text":"Type: bool Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"python/pdk_projen/API/#max_node_versionoptional_2","text":"Type: str Default: no max Minimum node.js version to require via engines (inclusive).","title":"max_node_versionOptional "},{"location":"python/pdk_projen/API/#min_node_versionoptional_2","text":"Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"min_node_versionOptional "},{"location":"python/pdk_projen/API/#npm_accessoptional_2","text":"Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npm_accessOptional "},{"location":"python/pdk_projen/API/#npm_registryoptional_2","text":"Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npm_registry~~Optional "},{"location":"python/pdk_projen/API/#npm_registry_urloptional_2","text":"Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npm_registry_urlOptional "},{"location":"python/pdk_projen/API/#npm_token_secretoptional_2","text":"Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npm_token_secretOptional "},{"location":"python/pdk_projen/API/#package_manageroptional_2","text":"Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"package_managerOptional "},{"location":"python/pdk_projen/API/#package_nameoptional_2","text":"Type: str Default: defaults to project name The \"name\" in package.json.","title":"package_nameOptional "},{"location":"python/pdk_projen/API/#peer_dependency_optionsoptional_2","text":"Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peer_dependency_optionsOptional "},{"location":"python/pdk_projen/API/#peer_depsoptional_2","text":"Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peer_depsOptional "},{"location":"python/pdk_projen/API/#repositoryoptional_2","text":"Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"python/pdk_projen/API/#repository_directoryoptional_2","text":"Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repository_directoryOptional "},{"location":"python/pdk_projen/API/#scriptsoptional_2","text":"Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"python/pdk_projen/API/#stabilityoptional_2","text":"Type: str Package's Stability.","title":"stabilityOptional "},{"location":"python/pdk_projen/API/#jsii_release_versionoptional_2","text":"Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsii_release_versionOptional "},{"location":"python/pdk_projen/API/#major_versionoptional_2","text":"Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"major_versionOptional "},{"location":"python/pdk_projen/API/#npm_dist_tagoptional_2","text":"Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npm_dist_tagOptional "},{"location":"python/pdk_projen/API/#post_build_stepsoptional_2","text":"Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow.","title":"post_build_stepsOptional "},{"location":"python/pdk_projen/API/#prereleaseoptional_2","text":"Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"python/pdk_projen/API/#publish_dry_runoptional_2","text":"Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publish_dry_runOptional "},{"location":"python/pdk_projen/API/#publish_tasksoptional_2","text":"Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publish_tasksOptional "},{"location":"python/pdk_projen/API/#release_branchesoptional_2","text":"Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"release_branchesOptional "},{"location":"python/pdk_projen/API/#release_every_commitoptional_2","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~release_every_commit~~Optional "},{"location":"python/pdk_projen/API/#release_failure_issueoptional_2","text":"Type: bool Default: false Create a github issue on every failed publishing task.","title":"release_failure_issueOptional "},{"location":"python/pdk_projen/API/#release_failure_issue_labeloptional_2","text":"Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"release_failure_issue_labelOptional "},{"location":"python/pdk_projen/API/#release_scheduleoptional_2","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~release_schedule~~Optional "},{"location":"python/pdk_projen/API/#release_tag_prefixoptional_2","text":"Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"release_tag_prefixOptional "},{"location":"python/pdk_projen/API/#release_triggeroptional_2","text":"Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"release_triggerOptional "},{"location":"python/pdk_projen/API/#release_workflow_nameoptional_2","text":"Type: str Default: \"Release\" The name of the default release workflow.","title":"release_workflow_nameOptional "},{"location":"python/pdk_projen/API/#release_workflow_setup_stepsoptional_2","text":"Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container.","title":"release_workflow_setup_stepsOptional "},{"location":"python/pdk_projen/API/#versionrc_optionsoptional_2","text":"Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrc_optionsOptional "},{"location":"python/pdk_projen/API/#workflow_container_imageoptional_2","text":"Type: str Default: default image Container image to use for GitHub workflows.","title":"workflow_container_imageOptional "},{"location":"python/pdk_projen/API/#workflow_runs_onoptional_2","text":"Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflow_runs_onOptional "},{"location":"python/pdk_projen/API/#default_release_branchrequired_2","text":"Type: str Default: \"main\" The name of the main release branch.","title":"default_release_branchRequired "},{"location":"python/pdk_projen/API/#artifacts_directoryoptional_2","text":"Type: str Default: \"dist\" A directory which will contain build artifacts.","title":"artifacts_directoryOptional "},{"location":"python/pdk_projen/API/#auto_approve_projen_upgradesoptional_2","text":"Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_projen_upgradesOptional "},{"location":"python/pdk_projen/API/#auto_approve_upgradesoptional_2","text":"Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_upgradesOptional "},{"location":"python/pdk_projen/API/#build_workflowoptional_2","text":"Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"build_workflowOptional "},{"location":"python/pdk_projen/API/#build_workflow_triggersoptional_2","text":"Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"build_workflow_triggersOptional "},{"location":"python/pdk_projen/API/#bundler_optionsoptional_2","text":"Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundler_optionsOptional "},{"location":"python/pdk_projen/API/#code_covoptional_2","text":"Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"code_covOptional "},{"location":"python/pdk_projen/API/#code_cov_token_secretoptional_2","text":"Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"code_cov_token_secretOptional "},{"location":"python/pdk_projen/API/#copyright_owneroptional_2","text":"Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyright_ownerOptional "},{"location":"python/pdk_projen/API/#copyright_periodoptional_2","text":"Type: str Default: current year The copyright years to put in the LICENSE file.","title":"copyright_periodOptional "},{"location":"python/pdk_projen/API/#dependabotoptional_2","text":"Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"python/pdk_projen/API/#dependabot_optionsoptional_2","text":"Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabot_optionsOptional "},{"location":"python/pdk_projen/API/#deps_upgradeoptional_2","text":"Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"deps_upgradeOptional "},{"location":"python/pdk_projen/API/#deps_upgrade_optionsoptional_2","text":"Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"deps_upgrade_optionsOptional "},{"location":"python/pdk_projen/API/#gitignoreoptional_2","text":"Type: typing.List[str] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"python/pdk_projen/API/#jestoptional_2","text":"Type: bool Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"python/pdk_projen/API/#jest_optionsoptional_2","text":"Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jest_optionsOptional "},{"location":"python/pdk_projen/API/#mutable_buildoptional_2","text":"Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutable_buildOptional "},{"location":"python/pdk_projen/API/#npmignoreoptional_2","text":"Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"python/pdk_projen/API/#npmignore_enabledoptional_2","text":"Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignore_enabledOptional "},{"location":"python/pdk_projen/API/#packageoptional_2","text":"Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"python/pdk_projen/API/#prettieroptional_2","text":"Type: bool Default: false Setup prettier.","title":"prettierOptional "},{"location":"python/pdk_projen/API/#prettier_optionsoptional_2","text":"Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettier_optionsOptional "},{"location":"python/pdk_projen/API/#projen_dev_dependencyoptional_2","text":"Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projen_dev_dependencyOptional "},{"location":"python/pdk_projen/API/#projenrc_jsoptional_2","text":"Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrc_jsOptional "},{"location":"python/pdk_projen/API/#projenrc_js_optionsoptional_2","text":"Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrc_js_optionsOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_auto_mergeoptional_2","text":"Deprecated: use autoApproveProjenUpgrades . Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projen_upgrade_auto_merge~~Optional "},{"location":"python/pdk_projen/API/#projen_upgrade_scheduleoptional_2","text":"Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projen_upgrade_scheduleOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_secretoptional_2","text":"Deprecated: use githubTokenSecret instead. Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projen_upgrade_secret~~Optional "},{"location":"python/pdk_projen/API/#projen_versionoptional_2","text":"Type: str Default: Defaults to the latest version. Version of projen to install.","title":"projen_versionOptional "},{"location":"python/pdk_projen/API/#pull_request_templateoptional_2","text":"Type: bool Default: true Include a GitHub pull request template.","title":"pull_request_templateOptional "},{"location":"python/pdk_projen/API/#pull_request_template_contentsoptional_2","text":"Type: typing.List[str] Default: default content The contents of the pull request template.","title":"pull_request_template_contentsOptional "},{"location":"python/pdk_projen/API/#releaseoptional_2","text":"Type: bool Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"python/pdk_projen/API/#release_to_npmoptional_2","text":"Type: bool Default: false Automatically release to npm when new versions are introduced.","title":"release_to_npmOptional "},{"location":"python/pdk_projen/API/#release_workflowoptional_2","text":"Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~release_workflow~~Optional "},{"location":"python/pdk_projen/API/#workflow_bootstrap_stepsoptional_2","text":"Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflow_bootstrap_stepsOptional "},{"location":"python/pdk_projen/API/#workflow_git_identityoptional_2","text":"Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflow_git_identityOptional "},{"location":"python/pdk_projen/API/#workflow_node_versionoptional_2","text":"Type: str Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflow_node_versionOptional "},{"location":"python/pdk_projen/API/#disable_tsconfigoptional_2","text":"Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disable_tsconfigOptional "},{"location":"python/pdk_projen/API/#docgenoptional_2","text":"Type: bool Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"python/pdk_projen/API/#docs_directoryoptional_2","text":"Type: str Default: \"docs\" Docs directory.","title":"docs_directoryOptional "},{"location":"python/pdk_projen/API/#entrypoint_typesoptional_2","text":"Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypoint_typesOptional "},{"location":"python/pdk_projen/API/#eslintoptional_2","text":"Type: bool Default: true Setup eslint.","title":"eslintOptional "},{"location":"python/pdk_projen/API/#eslint_optionsoptional_2","text":"Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslint_optionsOptional "},{"location":"python/pdk_projen/API/#libdiroptional_2","text":"Type: str Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"python/pdk_projen/API/#projenrc_tsoptional_2","text":"Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrc_tsOptional "},{"location":"python/pdk_projen/API/#projenrc_ts_optionsoptional_2","text":"Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrc_ts_optionsOptional "},{"location":"python/pdk_projen/API/#sample_codeoptional_2","text":"Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sample_codeOptional "},{"location":"python/pdk_projen/API/#srcdiroptional_2","text":"Type: str Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"python/pdk_projen/API/#testdiroptional_3","text":"Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"python/pdk_projen/API/#tsconfigoptional_2","text":"Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"python/pdk_projen/API/#tsconfig_devoptional_2","text":"Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfig_devOptional "},{"location":"python/pdk_projen/API/#tsconfig_dev_fileoptional_2","text":"Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfig_dev_fileOptional "},{"location":"python/pdk_projen/API/#typescript_versionoptional_2","text":"Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescript_versionOptional "},{"location":"python/pdk_projen/API/#nx_ignore_patternsoptional_1","text":"Type: typing.List[str] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore","title":"nx_ignore_patternsOptional "},{"location":"python/pdk_projen/API/#sample_languageoptional_1","text":"Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis.","title":"sample_languageOptional "},{"location":"python/pdk_projen/API/#target_dependenciesoptional_1","text":"Type: typing.Mapping[typing.List[ TargetDependency ]] Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies","title":"target_dependenciesOptional "},{"location":"python/pdk_projen/API/#methods","text":"Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_implicit_dependency Create an implicit dependency between two Project's.","title":"Methods "},{"location":"python/pdk_projen/API/#add_exclude_from_cleanup","text":"def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"add_exclude_from_cleanup "},{"location":"python/pdk_projen/API/#globsrequired","text":"Type: str The glob patterns to match.","title":"globsRequired "},{"location":"python/pdk_projen/API/#add_git_ignore","text":"def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern.","title":"add_git_ignore "},{"location":"python/pdk_projen/API/#patternrequired","text":"Type: str The glob pattern to ignore.","title":"patternRequired "},{"location":"python/pdk_projen/API/#add_package_ignore","text":"def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"add_package_ignore "},{"location":"python/pdk_projen/API/#patternrequired_1","text":"Type: str","title":"patternRequired "},{"location":"python/pdk_projen/API/#add_task","text":"def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name.","title":"add_task "},{"location":"python/pdk_projen/API/#namerequired_4","text":"Type: str The task name to add.","title":"nameRequired "},{"location":"python/pdk_projen/API/#conditionoptional","text":"Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped.","title":"conditionOptional "},{"location":"python/pdk_projen/API/#cwdoptional","text":"Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step).","title":"cwdOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_4","text":"Type: str Default: the task name The description of this build command.","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#envoptional","text":"Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") .","title":"envOptional "},{"location":"python/pdk_projen/API/#required_envoptional","text":"Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined.","title":"required_envOptional "},{"location":"python/pdk_projen/API/#execoptional","text":"Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task.","title":"execOptional "},{"location":"python/pdk_projen/API/#add_tip","text":"def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis.","title":"~~add_tip~~ "},{"location":"python/pdk_projen/API/#messagerequired","text":"Type: str The message.","title":"messageRequired "},{"location":"python/pdk_projen/API/#annotate_generated","text":"def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotate_generated "},{"location":"python/pdk_projen/API/#globrequired","text":"Type: str the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"python/pdk_projen/API/#post_synthesize","text":"def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed.","title":"post_synthesize "},{"location":"python/pdk_projen/API/#pre_synthesize","text":"def pre_synthesize () -> None Called before all components are synthesized.","title":"pre_synthesize "},{"location":"python/pdk_projen/API/#remove_task","text":"def remove_task ( name : str ) -> Task Removes a task from a project.","title":"remove_task "},{"location":"python/pdk_projen/API/#namerequired_5","text":"Type: str The name of the task to remove.","title":"nameRequired "},{"location":"python/pdk_projen/API/#run_task_command","text":"def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK .","title":"run_task_command "},{"location":"python/pdk_projen/API/#taskrequired","text":"Type: projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"python/pdk_projen/API/#synth","text":"def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"python/pdk_projen/API/#try_find_file","text":"def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects.","title":"try_find_file "},{"location":"python/pdk_projen/API/#file_pathrequired","text":"Type: str The file path. If this path is relative, it will be resolved from the root of this project.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#try_find_json_file","text":"def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name.","title":"~~try_find_json_file~~ "},{"location":"python/pdk_projen/API/#file_pathrequired_1","text":"Type: str The file path.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#try_find_object_file","text":"def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"try_find_object_file "},{"location":"python/pdk_projen/API/#file_pathrequired_2","text":"Type: str The file path.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#add_bins","text":"def add_bins ( bins : typing . Mapping [ str ] ) -> None","title":"add_bins "},{"location":"python/pdk_projen/API/#binsrequired","text":"Type: typing.Mapping[str]","title":"binsRequired "},{"location":"python/pdk_projen/API/#add_bundled_deps","text":"def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json .","title":"add_bundled_deps "},{"location":"python/pdk_projen/API/#depsrequired","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_compile_command","text":"def add_compile_command ( commands : str ) -> None DEPRECATED.","title":"~~add_compile_command~~ "},{"location":"python/pdk_projen/API/#commandsrequired","text":"Type: str","title":"commandsRequired "},{"location":"python/pdk_projen/API/#add_deps","text":"def add_deps ( deps : str ) -> None Defines normal dependencies.","title":"add_deps "},{"location":"python/pdk_projen/API/#depsrequired_1","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_dev_deps","text":"def add_dev_deps ( deps : str ) -> None Defines development/test dependencies.","title":"add_dev_deps "},{"location":"python/pdk_projen/API/#depsrequired_2","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_fields","text":"def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json .","title":"add_fields "},{"location":"python/pdk_projen/API/#fieldsrequired","text":"Type: typing.Mapping[typing.Any] The fields to set.","title":"fieldsRequired "},{"location":"python/pdk_projen/API/#add_keywords","text":"def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated).","title":"add_keywords "},{"location":"python/pdk_projen/API/#keywordsrequired","text":"Type: str The keywords to add.","title":"keywordsRequired "},{"location":"python/pdk_projen/API/#add_peer_deps","text":"def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers.","title":"add_peer_deps "},{"location":"python/pdk_projen/API/#depsrequired_3","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_test_command","text":"def add_test_command ( commands : str ) -> None DEPRECATED.","title":"~~add_test_command~~ "},{"location":"python/pdk_projen/API/#commandsrequired_1","text":"Type: str","title":"commandsRequired "},{"location":"python/pdk_projen/API/#has_script","text":"def has_script ( name : str ) -> bool Indicates if a script by the name name is defined.","title":"has_script "},{"location":"python/pdk_projen/API/#namerequired_6","text":"Type: str The name of the script.","title":"nameRequired "},{"location":"python/pdk_projen/API/#remove_script","text":"def remove_script ( name : str ) -> None Removes the npm script (always successful).","title":"remove_script "},{"location":"python/pdk_projen/API/#namerequired_7","text":"Type: str The name of the script.","title":"nameRequired "},{"location":"python/pdk_projen/API/#render_workflow_setup","text":"def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow.","title":"render_workflow_setup "},{"location":"python/pdk_projen/API/#mutableoptional","text":"Type: bool Default: false Should the pacakge lockfile be updated?","title":"mutableOptional "},{"location":"python/pdk_projen/API/#set_script","text":"def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script.","title":"set_script "},{"location":"python/pdk_projen/API/#namerequired_8","text":"Type: str The script name.","title":"nameRequired "},{"location":"python/pdk_projen/API/#commandrequired","text":"Type: str The command to execute.","title":"commandRequired "},{"location":"python/pdk_projen/API/#add_implicit_dependency","text":"def add_implicit_dependency ( dependent : Project , dependee : Project ) -> None Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example.","title":"add_implicit_dependency "},{"location":"python/pdk_projen/API/#dependentrequired","text":"Type: projen.Project project you want to have the dependency.","title":"dependentRequired "},{"location":"python/pdk_projen/API/#dependeerequired","text":"Type: projen.Project project you wish to depend on.","title":"dependeeRequired "},{"location":"python/pdk_projen/API/#properties_4","text":"Name Type Description build_task projen.Task No description. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Automatic PR merges. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description.","title":"Properties "},{"location":"python/pdk_projen/API/#build_taskrequired","text":"build_task : Task Type: projen.Task","title":"build_taskRequired "},{"location":"python/pdk_projen/API/#compile_taskrequired","text":"compile_task : Task Type: projen.Task","title":"compile_taskRequired "},{"location":"python/pdk_projen/API/#componentsrequired","text":"components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project.","title":"componentsRequired "},{"location":"python/pdk_projen/API/#depsrequired_4","text":"deps : Dependencies Type: projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"python/pdk_projen/API/#ejectedrequired","text":"ejected : bool Type: bool Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"python/pdk_projen/API/#filesrequired","text":"files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project.","title":"filesRequired "},{"location":"python/pdk_projen/API/#gitattributesrequired","text":"gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"python/pdk_projen/API/#gitignorerequired","text":"gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"python/pdk_projen/API/#loggerrequired","text":"logger : Logger Type: projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"python/pdk_projen/API/#namerequired_9","text":"name : str Type: str Project name.","title":"nameRequired "},{"location":"python/pdk_projen/API/#outdirrequired","text":"outdir : str Type: str Absolute output directory of this project.","title":"outdirRequired "},{"location":"python/pdk_projen/API/#package_taskrequired","text":"package_task : Task Type: projen.Task","title":"package_taskRequired "},{"location":"python/pdk_projen/API/#post_compile_taskrequired","text":"post_compile_task : Task Type: projen.Task","title":"post_compile_taskRequired "},{"location":"python/pdk_projen/API/#pre_compile_taskrequired","text":"pre_compile_task : Task Type: projen.Task","title":"pre_compile_taskRequired "},{"location":"python/pdk_projen/API/#project_buildrequired","text":"project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project.","title":"project_buildRequired "},{"location":"python/pdk_projen/API/#projen_commandrequired","text":"projen_command : str Type: str The command to use in order to run the projen CLI.","title":"projen_commandRequired "},{"location":"python/pdk_projen/API/#rootrequired","text":"root : Project Type: projen.Project The root project.","title":"rootRequired "},{"location":"python/pdk_projen/API/#tasksrequired","text":"tasks : Tasks Type: projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"python/pdk_projen/API/#test_taskrequired","text":"test_task : Task Type: projen.Task","title":"test_taskRequired "},{"location":"python/pdk_projen/API/#default_taskoptional","text":"default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"default_taskOptional "},{"location":"python/pdk_projen/API/#init_projectoptional","text":"init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"init_projectOptional "},{"location":"python/pdk_projen/API/#parentoptional_4","text":"parent : Project Type: projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#project_typerequired","text":"project_type : ProjectType Type: projen.ProjectType","title":"project_typeRequired "},{"location":"python/pdk_projen/API/#auto_approveoptional","text":"auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project.","title":"auto_approveOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_4","text":"dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_4","text":"github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_4","text":"gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_4","text":"vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#allow_library_dependenciesrequired","text":"Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool","title":"~~allow_library_dependencies~~Required "},{"location":"python/pdk_projen/API/#artifacts_directoryrequired","text":"artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg .","title":"artifacts_directoryRequired "},{"location":"python/pdk_projen/API/#artifacts_javascript_directoryrequired","text":"artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ).","title":"artifacts_javascript_directoryRequired "},{"location":"python/pdk_projen/API/#bundlerrequired","text":"bundler : Bundler Type: projen.javascript.Bundler","title":"bundlerRequired "},{"location":"python/pdk_projen/API/#entrypointrequired","text":"Deprecated: use package.entrypoint entrypoint : str Type: str","title":"~~entrypoint~~Required "},{"location":"python/pdk_projen/API/#manifestrequired","text":"Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any","title":"~~manifest~~Required "},{"location":"python/pdk_projen/API/#packagerequired","text":"package : NodePackage Type: projen.javascript.NodePackage API for managing the node package.","title":"packageRequired "},{"location":"python/pdk_projen/API/#package_managerrequired","text":"Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use.","title":"~~package_manager~~Required "},{"location":"python/pdk_projen/API/#run_script_commandrequired","text":"run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager).","title":"run_script_commandRequired "},{"location":"python/pdk_projen/API/#auto_mergeoptional","text":"auto_merge : AutoMerge Type: projen.github.AutoMerge Automatic PR merges.","title":"auto_mergeOptional "},{"location":"python/pdk_projen/API/#build_workflowoptional_3","text":"build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled.","title":"build_workflowOptional "},{"location":"python/pdk_projen/API/#build_workflow_job_idoptional","text":"build_workflow_job_id : str Type: str The job ID of the build workflow.","title":"build_workflow_job_idOptional "},{"location":"python/pdk_projen/API/#jestoptional_3","text":"jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled).","title":"jestOptional "},{"location":"python/pdk_projen/API/#max_node_versionoptional_3","text":"max_node_version : str Type: str Maximum node version required by this pacakge.","title":"max_node_versionOptional "},{"location":"python/pdk_projen/API/#min_node_versionoptional_3","text":"min_node_version : str Type: str Minimum node.js version required by this package.","title":"min_node_versionOptional "},{"location":"python/pdk_projen/API/#npmignoreoptional_3","text":"npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file.","title":"npmignoreOptional "},{"location":"python/pdk_projen/API/#prettieroptional_3","text":"prettier : Prettier Type: projen.javascript.Prettier","title":"prettierOptional "},{"location":"python/pdk_projen/API/#publisheroptional","text":"Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow.","title":"~~publisher~~Optional "},{"location":"python/pdk_projen/API/#releaseoptional_3","text":"release : Release Type: projen.release.Release Release management.","title":"releaseOptional "},{"location":"python/pdk_projen/API/#upgrade_workflowoptional","text":"upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow.","title":"upgrade_workflowOptional "},{"location":"python/pdk_projen/API/#docs_directoryrequired","text":"docs_directory : str Type: str","title":"docs_directoryRequired "},{"location":"python/pdk_projen/API/#libdirrequired","text":"libdir : str Type: str The directory in which compiled .js files reside.","title":"libdirRequired "},{"location":"python/pdk_projen/API/#srcdirrequired","text":"srcdir : str Type: str The directory in which the .ts sources reside.","title":"srcdirRequired "},{"location":"python/pdk_projen/API/#testdirrequired","text":"testdir : str Type: str The directory in which tests reside.","title":"testdirRequired "},{"location":"python/pdk_projen/API/#tsconfig_devrequired","text":"tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen).","title":"tsconfig_devRequired "},{"location":"python/pdk_projen/API/#watch_taskrequired","text":"watch_task : Task Type: projen.Task The \"watch\" task.","title":"watch_taskRequired "},{"location":"python/pdk_projen/API/#docgenoptional_3","text":"docgen : bool Type: bool","title":"docgenOptional "},{"location":"python/pdk_projen/API/#eslintoptional_3","text":"eslint : Eslint Type: projen.javascript.Eslint","title":"eslintOptional "},{"location":"python/pdk_projen/API/#tsconfigoptional_3","text":"tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig","title":"tsconfigOptional "},{"location":"python/pdk_projen/API/#tsconfig_eslintoptional","text":"tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig","title":"tsconfig_eslintOptional "},{"location":"python/pdk_projen/API/#constants","text":"Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"python/pdk_projen/API/#default_taskrequired","text":"DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"python/pdk_projen/API/#pdkpipelinepyproject","text":"Synthesizes a Python Project with a CI/CD pipeline.","title":"PdkPipelinePyProject "},{"location":"python/pdk_projen/API/#initializers_1","text":"from aws_prototyping_sdk import pdk_projen pdk_projen . PdkPipelinePyProject ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , testdir : str = None ) Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_python bool Use projenrc in python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir str Python sources directory.","title":"Initializers "},{"location":"python/pdk_projen/API/#namerequired_10","text":"Type: str Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"python/pdk_projen/API/#loggingoptional_4","text":"Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"python/pdk_projen/API/#outdiroptional_4","text":"Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"python/pdk_projen/API/#parentoptional_5","text":"Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#projen_commandoptional_4","text":"Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projen_commandOptional "},{"location":"python/pdk_projen/API/#projenrc_jsonoptional_4","text":"Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrc_jsonOptional "},{"location":"python/pdk_projen/API/#projenrc_json_optionsoptional_4","text":"Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrc_json_optionsOptional "},{"location":"python/pdk_projen/API/#auto_approve_optionsoptional_4","text":"Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"auto_approve_optionsOptional "},{"location":"python/pdk_projen/API/#auto_merge_optionsoptional_4","text":"Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"auto_merge_optionsOptional "},{"location":"python/pdk_projen/API/#clobberoptional_4","text":"Type: bool Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_5","text":"Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_5","text":"Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#github_optionsoptional_4","text":"Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"github_optionsOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_5","text":"Type: bool Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#mergifyoptional_4","text":"Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"python/pdk_projen/API/#mergify_optionsoptional_4","text":"Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergify_options~~Optional "},{"location":"python/pdk_projen/API/#project_typeoptional_4","text":"Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~project_type~~Optional "},{"location":"python/pdk_projen/API/#projen_token_secretoptional_4","text":"Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projen_token_secretOptional "},{"location":"python/pdk_projen/API/#readmeoptional_4","text":"Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"python/pdk_projen/API/#staleoptional_4","text":"Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"python/pdk_projen/API/#stale_optionsoptional_4","text":"Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"stale_optionsOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_5","text":"Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#author_emailrequired_1","text":"Type: str Default: $GIT_USER_EMAIL Author's e-mail.","title":"author_emailRequired "},{"location":"python/pdk_projen/API/#author_namerequired_1","text":"Type: str Default: $GIT_USER_NAME Author's name.","title":"author_nameRequired "},{"location":"python/pdk_projen/API/#versionrequired_1","text":"Type: str Default: \"0.1.0\" Version of the package.","title":"versionRequired "},{"location":"python/pdk_projen/API/#classifiersoptional_1","text":"Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/","title":"classifiersOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_5","text":"Type: str A short description of the package.","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#homepageoptional_4","text":"Type: str A URL to the website of the project.","title":"homepageOptional "},{"location":"python/pdk_projen/API/#licenseoptional_4","text":"Type: str License of this package as an SPDX identifier.","title":"licenseOptional "},{"location":"python/pdk_projen/API/#poetry_optionsoptional_1","text":"Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry.","title":"poetry_optionsOptional "},{"location":"python/pdk_projen/API/#setup_configoptional_1","text":"Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools.","title":"setup_configOptional "},{"location":"python/pdk_projen/API/#module_namerequired_1","text":"Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores.","title":"module_nameRequired "},{"location":"python/pdk_projen/API/#depsoptional_4","text":"Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() .","title":"depsOptional "},{"location":"python/pdk_projen/API/#dev_depsoptional_4","text":"Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() .","title":"dev_depsOptional "},{"location":"python/pdk_projen/API/#pipoptional_1","text":"Type: bool Default: true Use pip with a requirements.txt file to track project dependencies.","title":"pipOptional "},{"location":"python/pdk_projen/API/#poetryoptional_1","text":"Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing.","title":"poetryOptional "},{"location":"python/pdk_projen/API/#projenrc_pythonoptional_1","text":"Type: bool Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py .","title":"projenrc_pythonOptional "},{"location":"python/pdk_projen/API/#projenrc_python_optionsoptional_1","text":"Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python.","title":"projenrc_python_optionsOptional "},{"location":"python/pdk_projen/API/#pytestoptional_1","text":"Type: bool Default: true Include pytest tests.","title":"pytestOptional "},{"location":"python/pdk_projen/API/#pytest_optionsoptional_1","text":"Type: projen.python.PytestOptions Default: defaults pytest options.","title":"pytest_optionsOptional "},{"location":"python/pdk_projen/API/#sampleoptional_1","text":"Type: bool Default: true Include sample code and test if the relevant directories don't exist.","title":"sampleOptional "},{"location":"python/pdk_projen/API/#setuptoolsoptional_1","text":"Type: bool Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing.","title":"setuptoolsOptional "},{"location":"python/pdk_projen/API/#venvoptional_1","text":"Type: bool Default: true Use venv to manage a virtual environment for installing dependencies inside.","title":"venvOptional "},{"location":"python/pdk_projen/API/#venv_optionsoptional_1","text":"Type: projen.python.VenvOptions Default: defaults Venv options.","title":"venv_optionsOptional "},{"location":"python/pdk_projen/API/#build_commandoptional_2","text":"Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"build_commandOptional "},{"location":"python/pdk_projen/API/#cdkoutoptional_2","text":"Type: str Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"python/pdk_projen/API/#contextoptional_2","text":"Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"python/pdk_projen/API/#feature_flagsoptional_2","text":"Type: bool Default: true Include all feature flags in cdk.json.","title":"feature_flagsOptional "},{"location":"python/pdk_projen/API/#require_approvaloptional_2","text":"Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"require_approvalOptional "},{"location":"python/pdk_projen/API/#watch_excludesoptional_2","text":"Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch .","title":"watch_excludesOptional "},{"location":"python/pdk_projen/API/#watch_includesoptional_2","text":"Type: typing.List[str] Default: [] Glob patterns to include in cdk watch .","title":"watch_includesOptional "},{"location":"python/pdk_projen/API/#cdk_versionrequired_2","text":"Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdk_versionRequired "},{"location":"python/pdk_projen/API/#cdk_assertoptional_2","text":"Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdk_assert~~Optional "},{"location":"python/pdk_projen/API/#cdk_assertionsoptional_2","text":"Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdk_assertionsOptional "},{"location":"python/pdk_projen/API/#cdk_dependenciesoptional_2","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires.","title":"~~cdk_dependencies~~Optional "},{"location":"python/pdk_projen/API/#cdk_dependencies_as_depsoptional_2","text":"Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdk_dependencies_as_deps~~Optional "},{"location":"python/pdk_projen/API/#cdk_test_dependenciesoptional_2","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing.","title":"~~cdk_test_dependencies~~Optional "},{"location":"python/pdk_projen/API/#cdk_version_pinningoptional_2","text":"Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdk_version_pinningOptional "},{"location":"python/pdk_projen/API/#constructs_versionoptional_2","text":"Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructs_versionOptional "},{"location":"python/pdk_projen/API/#app_entrypointoptional_2","text":"Type: str Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"app_entrypointOptional "},{"location":"python/pdk_projen/API/#testdiroptional_4","text":"Type: str Default: \"tests\" Python sources directory.","title":"testdirOptional "},{"location":"python/pdk_projen/API/#methods_1","text":"Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. add_dependency Adds a runtime dependency. add_dev_dependency Adds a dev dependency.","title":"Methods "},{"location":"python/pdk_projen/API/#add_exclude_from_cleanup_1","text":"def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"add_exclude_from_cleanup "},{"location":"python/pdk_projen/API/#globsrequired_1","text":"Type: str The glob patterns to match.","title":"globsRequired "},{"location":"python/pdk_projen/API/#add_git_ignore_1","text":"def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern.","title":"add_git_ignore "},{"location":"python/pdk_projen/API/#patternrequired_2","text":"Type: str The glob pattern to ignore.","title":"patternRequired "},{"location":"python/pdk_projen/API/#add_package_ignore_1","text":"def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"add_package_ignore "},{"location":"python/pdk_projen/API/#_patternrequired","text":"Type: str The glob pattern to exclude.","title":"_patternRequired "},{"location":"python/pdk_projen/API/#add_task_1","text":"def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name.","title":"add_task "},{"location":"python/pdk_projen/API/#namerequired_11","text":"Type: str The task name to add.","title":"nameRequired "},{"location":"python/pdk_projen/API/#conditionoptional_1","text":"Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped.","title":"conditionOptional "},{"location":"python/pdk_projen/API/#cwdoptional_1","text":"Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step).","title":"cwdOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_6","text":"Type: str Default: the task name The description of this build command.","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#envoptional_1","text":"Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") .","title":"envOptional "},{"location":"python/pdk_projen/API/#required_envoptional_1","text":"Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined.","title":"required_envOptional "},{"location":"python/pdk_projen/API/#execoptional_1","text":"Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task.","title":"execOptional "},{"location":"python/pdk_projen/API/#add_tip_1","text":"def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis.","title":"~~add_tip~~ "},{"location":"python/pdk_projen/API/#messagerequired_1","text":"Type: str The message.","title":"messageRequired "},{"location":"python/pdk_projen/API/#annotate_generated_1","text":"def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotate_generated "},{"location":"python/pdk_projen/API/#globrequired_1","text":"Type: str the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"python/pdk_projen/API/#post_synthesize_1","text":"def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed.","title":"post_synthesize "},{"location":"python/pdk_projen/API/#pre_synthesize_1","text":"def pre_synthesize () -> None Called before all components are synthesized.","title":"pre_synthesize "},{"location":"python/pdk_projen/API/#remove_task_1","text":"def remove_task ( name : str ) -> Task Removes a task from a project.","title":"remove_task "},{"location":"python/pdk_projen/API/#namerequired_12","text":"Type: str The name of the task to remove.","title":"nameRequired "},{"location":"python/pdk_projen/API/#run_task_command_1","text":"def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task>","title":"run_task_command "},{"location":"python/pdk_projen/API/#taskrequired_1","text":"Type: projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"python/pdk_projen/API/#synth_1","text":"def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"python/pdk_projen/API/#try_find_file_1","text":"def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects.","title":"try_find_file "},{"location":"python/pdk_projen/API/#file_pathrequired_3","text":"Type: str The file path. If this path is relative, it will be resolved from the root of this project.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#try_find_json_file_1","text":"def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name.","title":"~~try_find_json_file~~ "},{"location":"python/pdk_projen/API/#file_pathrequired_4","text":"Type: str The file path.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#try_find_object_file_1","text":"def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"try_find_object_file "},{"location":"python/pdk_projen/API/#file_pathrequired_5","text":"Type: str The file path.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#add_dependency","text":"def add_dependency ( spec : str ) -> None Adds a runtime dependency.","title":"add_dependency "},{"location":"python/pdk_projen/API/#specrequired","text":"Type: str Format <module>@<semver> .","title":"specRequired "},{"location":"python/pdk_projen/API/#add_dev_dependency","text":"def add_dev_dependency ( spec : str ) -> None Adds a dev dependency.","title":"add_dev_dependency "},{"location":"python/pdk_projen/API/#specrequired_1","text":"Type: str Format <module>@<semver> .","title":"specRequired "},{"location":"python/pdk_projen/API/#properties_5","text":"Name Type Description build_task projen.Task No description. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. deps_manager projen.python.IPythonDeps API for managing dependencies. env_manager projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name str Python module name (the project name, with any hyphens or periods replaced with underscores). version str Version of the package for distribution (should follow semver). packaging_manager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. app_entrypoint str The CDK app entrypoint. cdk_config projen.awscdk.CdkConfig cdk.json configuration. cdk_deps projen.awscdk.AwsCdkDeps No description. cdk_tasks projen.awscdk.CdkTasks Common CDK tasks. cdk_version str The CDK version this app is using. testdir str The directory in which the python tests reside.","title":"Properties "},{"location":"python/pdk_projen/API/#build_taskrequired_1","text":"build_task : Task Type: projen.Task","title":"build_taskRequired "},{"location":"python/pdk_projen/API/#compile_taskrequired_1","text":"compile_task : Task Type: projen.Task","title":"compile_taskRequired "},{"location":"python/pdk_projen/API/#componentsrequired_1","text":"components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project.","title":"componentsRequired "},{"location":"python/pdk_projen/API/#depsrequired_5","text":"deps : Dependencies Type: projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"python/pdk_projen/API/#ejectedrequired_1","text":"ejected : bool Type: bool Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"python/pdk_projen/API/#filesrequired_1","text":"files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project.","title":"filesRequired "},{"location":"python/pdk_projen/API/#gitattributesrequired_1","text":"gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"python/pdk_projen/API/#gitignorerequired_1","text":"gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"python/pdk_projen/API/#loggerrequired_1","text":"logger : Logger Type: projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"python/pdk_projen/API/#namerequired_13","text":"name : str Type: str Project name.","title":"nameRequired "},{"location":"python/pdk_projen/API/#outdirrequired_1","text":"outdir : str Type: str Absolute output directory of this project.","title":"outdirRequired "},{"location":"python/pdk_projen/API/#package_taskrequired_1","text":"package_task : Task Type: projen.Task","title":"package_taskRequired "},{"location":"python/pdk_projen/API/#post_compile_taskrequired_1","text":"post_compile_task : Task Type: projen.Task","title":"post_compile_taskRequired "},{"location":"python/pdk_projen/API/#pre_compile_taskrequired_1","text":"pre_compile_task : Task Type: projen.Task","title":"pre_compile_taskRequired "},{"location":"python/pdk_projen/API/#project_buildrequired_1","text":"project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project.","title":"project_buildRequired "},{"location":"python/pdk_projen/API/#projen_commandrequired_1","text":"projen_command : str Type: str The command to use in order to run the projen CLI.","title":"projen_commandRequired "},{"location":"python/pdk_projen/API/#rootrequired_1","text":"root : Project Type: projen.Project The root project.","title":"rootRequired "},{"location":"python/pdk_projen/API/#tasksrequired_1","text":"tasks : Tasks Type: projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"python/pdk_projen/API/#test_taskrequired_1","text":"test_task : Task Type: projen.Task","title":"test_taskRequired "},{"location":"python/pdk_projen/API/#default_taskoptional_1","text":"default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"default_taskOptional "},{"location":"python/pdk_projen/API/#init_projectoptional_1","text":"init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"init_projectOptional "},{"location":"python/pdk_projen/API/#parentoptional_6","text":"parent : Project Type: projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#project_typerequired_1","text":"project_type : ProjectType Type: projen.ProjectType","title":"project_typeRequired "},{"location":"python/pdk_projen/API/#auto_approveoptional_1","text":"auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project.","title":"auto_approveOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_6","text":"dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_6","text":"github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_6","text":"gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_6","text":"vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#deps_managerrequired","text":"deps_manager : IPythonDeps Type: projen.python.IPythonDeps API for managing dependencies.","title":"deps_managerRequired "},{"location":"python/pdk_projen/API/#env_managerrequired","text":"env_manager : IPythonEnv Type: projen.python.IPythonEnv API for mangaging the Python runtime environment.","title":"env_managerRequired "},{"location":"python/pdk_projen/API/#module_namerequired_2","text":"module_name : str Type: str Python module name (the project name, with any hyphens or periods replaced with underscores).","title":"module_nameRequired "},{"location":"python/pdk_projen/API/#versionrequired_2","text":"version : str Type: str Version of the package for distribution (should follow semver).","title":"versionRequired "},{"location":"python/pdk_projen/API/#packaging_manageroptional","text":"packaging_manager : IPythonPackaging Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB.","title":"packaging_managerOptional "},{"location":"python/pdk_projen/API/#pytestoptional_2","text":"pytest : Pytest Type: projen.python.Pytest Pytest component.","title":"pytestOptional "},{"location":"python/pdk_projen/API/#app_entrypointrequired","text":"app_entrypoint : str Type: str The CDK app entrypoint.","title":"app_entrypointRequired "},{"location":"python/pdk_projen/API/#cdk_configrequired","text":"cdk_config : CdkConfig Type: projen.awscdk.CdkConfig cdk.json configuration.","title":"cdk_configRequired "},{"location":"python/pdk_projen/API/#cdk_depsrequired","text":"cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps","title":"cdk_depsRequired "},{"location":"python/pdk_projen/API/#cdk_tasksrequired","text":"cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks Common CDK tasks.","title":"cdk_tasksRequired "},{"location":"python/pdk_projen/API/#cdk_versionrequired_3","text":"cdk_version : str Type: str The CDK version this app is using.","title":"cdk_versionRequired "},{"location":"python/pdk_projen/API/#testdirrequired_1","text":"testdir : str Type: str The directory in which the python tests reside.","title":"testdirRequired "},{"location":"python/pdk_projen/API/#constants_1","text":"Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"python/pdk_projen/API/#default_taskrequired_1","text":"DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"python/pdk_projen/API/#pdkpipelinetsproject","text":"Synthesizes a Typescript Project with a CI/CD pipeline.","title":"PDKPipelineTsProject "},{"location":"python/pdk_projen/API/#initializers_2","text":"from aws_prototyping_sdk import pdk_projen pdk_projen . PDKPipelineTsProject ( name : str , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , repository : str = None , repository_directory : str = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_projen_upgrades : bool = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_upgrade_auto_merge : bool = None , projen_upgrade_schedule : typing . List [ str ] = None , projen_upgrade_secret : str = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ typing . Any ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , integration_test_auto_discover : bool = None , lambda_auto_discover : bool = None , lambda_options : LambdaFunctionCommonOptions = None ) Name Type Description name str This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Author's Organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_projen_upgrades bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_upgrade_auto_merge bool Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projen_upgrade_schedule typing.List[str] Customize the projenUpgrade schedule in cron expression. projen_upgrade_secret str Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[typing.Any] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integration_test_auto_discover bool Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover bool Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions.","title":"Initializers "},{"location":"python/pdk_projen/API/#namerequired_14","text":"Type: str Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"python/pdk_projen/API/#loggingoptional_5","text":"Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"python/pdk_projen/API/#outdiroptional_5","text":"Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"python/pdk_projen/API/#parentoptional_7","text":"Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#projen_commandoptional_5","text":"Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projen_commandOptional "},{"location":"python/pdk_projen/API/#projenrc_jsonoptional_5","text":"Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrc_jsonOptional "},{"location":"python/pdk_projen/API/#projenrc_json_optionsoptional_5","text":"Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrc_json_optionsOptional "},{"location":"python/pdk_projen/API/#auto_approve_optionsoptional_5","text":"Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"auto_approve_optionsOptional "},{"location":"python/pdk_projen/API/#auto_merge_optionsoptional_5","text":"Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"auto_merge_optionsOptional "},{"location":"python/pdk_projen/API/#clobberoptional_5","text":"Type: bool Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_7","text":"Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_7","text":"Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#github_optionsoptional_5","text":"Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"github_optionsOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_7","text":"Type: bool Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#mergifyoptional_5","text":"Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"python/pdk_projen/API/#mergify_optionsoptional_5","text":"Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergify_options~~Optional "},{"location":"python/pdk_projen/API/#project_typeoptional_5","text":"Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~project_type~~Optional "},{"location":"python/pdk_projen/API/#projen_token_secretoptional_5","text":"Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projen_token_secretOptional "},{"location":"python/pdk_projen/API/#readmeoptional_5","text":"Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"python/pdk_projen/API/#staleoptional_5","text":"Type: bool Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"python/pdk_projen/API/#stale_optionsoptional_5","text":"Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"stale_optionsOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_7","text":"Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#allow_library_dependenciesoptional_3","text":"Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allow_library_dependenciesOptional "},{"location":"python/pdk_projen/API/#author_emailoptional_3","text":"Type: str Author's e-mail.","title":"author_emailOptional "},{"location":"python/pdk_projen/API/#author_nameoptional_3","text":"Type: str Author's name.","title":"author_nameOptional "},{"location":"python/pdk_projen/API/#author_organizationoptional_3","text":"Type: bool Author's Organization.","title":"author_organizationOptional "},{"location":"python/pdk_projen/API/#author_urloptional_3","text":"Type: str Author's URL / Website.","title":"author_urlOptional "},{"location":"python/pdk_projen/API/#auto_detect_binoptional_3","text":"Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"auto_detect_binOptional "},{"location":"python/pdk_projen/API/#binoptional_3","text":"Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"python/pdk_projen/API/#bugs_emailoptional_3","text":"Type: str The email address to which issues should be reported.","title":"bugs_emailOptional "},{"location":"python/pdk_projen/API/#bugs_urloptional_3","text":"Type: str The url to your project's issue tracker.","title":"bugs_urlOptional "},{"location":"python/pdk_projen/API/#bundled_depsoptional_3","text":"Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundled_depsOptional "},{"location":"python/pdk_projen/API/#code_artifact_optionsoptional_3","text":"Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"code_artifact_optionsOptional "},{"location":"python/pdk_projen/API/#depsoptional_5","text":"Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_7","text":"Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#dev_depsoptional_5","text":"Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"dev_depsOptional "},{"location":"python/pdk_projen/API/#entrypointoptional_3","text":"Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"python/pdk_projen/API/#homepageoptional_5","text":"Type: str Package's Homepage / Website.","title":"homepageOptional "},{"location":"python/pdk_projen/API/#keywordsoptional_3","text":"Type: typing.List[str] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"python/pdk_projen/API/#licenseoptional_5","text":"Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"python/pdk_projen/API/#licensedoptional_3","text":"Type: bool Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"python/pdk_projen/API/#max_node_versionoptional_4","text":"Type: str Default: no max Minimum node.js version to require via engines (inclusive).","title":"max_node_versionOptional "},{"location":"python/pdk_projen/API/#min_node_versionoptional_4","text":"Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"min_node_versionOptional "},{"location":"python/pdk_projen/API/#npm_accessoptional_3","text":"Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npm_accessOptional "},{"location":"python/pdk_projen/API/#npm_registryoptional_3","text":"Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npm_registry~~Optional "},{"location":"python/pdk_projen/API/#npm_registry_urloptional_3","text":"Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npm_registry_urlOptional "},{"location":"python/pdk_projen/API/#npm_token_secretoptional_3","text":"Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npm_token_secretOptional "},{"location":"python/pdk_projen/API/#package_manageroptional_3","text":"Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"package_managerOptional "},{"location":"python/pdk_projen/API/#package_nameoptional_3","text":"Type: str Default: defaults to project name The \"name\" in package.json.","title":"package_nameOptional "},{"location":"python/pdk_projen/API/#peer_dependency_optionsoptional_3","text":"Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peer_dependency_optionsOptional "},{"location":"python/pdk_projen/API/#peer_depsoptional_3","text":"Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peer_depsOptional "},{"location":"python/pdk_projen/API/#repositoryoptional_3","text":"Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"python/pdk_projen/API/#repository_directoryoptional_3","text":"Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repository_directoryOptional "},{"location":"python/pdk_projen/API/#scriptsoptional_3","text":"Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"python/pdk_projen/API/#stabilityoptional_3","text":"Type: str Package's Stability.","title":"stabilityOptional "},{"location":"python/pdk_projen/API/#jsii_release_versionoptional_3","text":"Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsii_release_versionOptional "},{"location":"python/pdk_projen/API/#major_versionoptional_3","text":"Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"major_versionOptional "},{"location":"python/pdk_projen/API/#npm_dist_tagoptional_3","text":"Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npm_dist_tagOptional "},{"location":"python/pdk_projen/API/#post_build_stepsoptional_3","text":"Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow.","title":"post_build_stepsOptional "},{"location":"python/pdk_projen/API/#prereleaseoptional_3","text":"Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"python/pdk_projen/API/#publish_dry_runoptional_3","text":"Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publish_dry_runOptional "},{"location":"python/pdk_projen/API/#publish_tasksoptional_3","text":"Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publish_tasksOptional "},{"location":"python/pdk_projen/API/#release_branchesoptional_3","text":"Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"release_branchesOptional "},{"location":"python/pdk_projen/API/#release_every_commitoptional_3","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~release_every_commit~~Optional "},{"location":"python/pdk_projen/API/#release_failure_issueoptional_3","text":"Type: bool Default: false Create a github issue on every failed publishing task.","title":"release_failure_issueOptional "},{"location":"python/pdk_projen/API/#release_failure_issue_labeloptional_3","text":"Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"release_failure_issue_labelOptional "},{"location":"python/pdk_projen/API/#release_scheduleoptional_3","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~release_schedule~~Optional "},{"location":"python/pdk_projen/API/#release_tag_prefixoptional_3","text":"Type: str Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"release_tag_prefixOptional "},{"location":"python/pdk_projen/API/#release_triggeroptional_3","text":"Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"release_triggerOptional "},{"location":"python/pdk_projen/API/#release_workflow_nameoptional_3","text":"Type: str Default: \"Release\" The name of the default release workflow.","title":"release_workflow_nameOptional "},{"location":"python/pdk_projen/API/#release_workflow_setup_stepsoptional_3","text":"Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container.","title":"release_workflow_setup_stepsOptional "},{"location":"python/pdk_projen/API/#versionrc_optionsoptional_3","text":"Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrc_optionsOptional "},{"location":"python/pdk_projen/API/#workflow_container_imageoptional_3","text":"Type: str Default: default image Container image to use for GitHub workflows.","title":"workflow_container_imageOptional "},{"location":"python/pdk_projen/API/#workflow_runs_onoptional_3","text":"Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflow_runs_onOptional "},{"location":"python/pdk_projen/API/#default_release_branchrequired_3","text":"Type: str Default: \"main\" The name of the main release branch.","title":"default_release_branchRequired "},{"location":"python/pdk_projen/API/#artifacts_directoryoptional_3","text":"Type: str Default: \"dist\" A directory which will contain build artifacts.","title":"artifacts_directoryOptional "},{"location":"python/pdk_projen/API/#auto_approve_projen_upgradesoptional_3","text":"Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_projen_upgradesOptional "},{"location":"python/pdk_projen/API/#auto_approve_upgradesoptional_3","text":"Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"auto_approve_upgradesOptional "},{"location":"python/pdk_projen/API/#build_workflowoptional_4","text":"Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"build_workflowOptional "},{"location":"python/pdk_projen/API/#build_workflow_triggersoptional_3","text":"Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"build_workflow_triggersOptional "},{"location":"python/pdk_projen/API/#bundler_optionsoptional_3","text":"Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundler_optionsOptional "},{"location":"python/pdk_projen/API/#code_covoptional_3","text":"Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"code_covOptional "},{"location":"python/pdk_projen/API/#code_cov_token_secretoptional_3","text":"Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"code_cov_token_secretOptional "},{"location":"python/pdk_projen/API/#copyright_owneroptional_3","text":"Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyright_ownerOptional "},{"location":"python/pdk_projen/API/#copyright_periodoptional_3","text":"Type: str Default: current year The copyright years to put in the LICENSE file.","title":"copyright_periodOptional "},{"location":"python/pdk_projen/API/#dependabotoptional_3","text":"Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"python/pdk_projen/API/#dependabot_optionsoptional_3","text":"Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabot_optionsOptional "},{"location":"python/pdk_projen/API/#deps_upgradeoptional_3","text":"Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"deps_upgradeOptional "},{"location":"python/pdk_projen/API/#deps_upgrade_optionsoptional_3","text":"Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"deps_upgrade_optionsOptional "},{"location":"python/pdk_projen/API/#gitignoreoptional_3","text":"Type: typing.List[str] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"python/pdk_projen/API/#jestoptional_4","text":"Type: bool Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"python/pdk_projen/API/#jest_optionsoptional_3","text":"Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jest_optionsOptional "},{"location":"python/pdk_projen/API/#mutable_buildoptional_3","text":"Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutable_buildOptional "},{"location":"python/pdk_projen/API/#npmignoreoptional_4","text":"Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"python/pdk_projen/API/#npmignore_enabledoptional_3","text":"Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignore_enabledOptional "},{"location":"python/pdk_projen/API/#packageoptional_3","text":"Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"python/pdk_projen/API/#prettieroptional_4","text":"Type: bool Default: false Setup prettier.","title":"prettierOptional "},{"location":"python/pdk_projen/API/#prettier_optionsoptional_3","text":"Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettier_optionsOptional "},{"location":"python/pdk_projen/API/#projen_dev_dependencyoptional_3","text":"Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projen_dev_dependencyOptional "},{"location":"python/pdk_projen/API/#projenrc_jsoptional_3","text":"Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrc_jsOptional "},{"location":"python/pdk_projen/API/#projenrc_js_optionsoptional_3","text":"Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrc_js_optionsOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_auto_mergeoptional_3","text":"Deprecated: use autoApproveProjenUpgrades . Type: bool Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projen_upgrade_auto_merge~~Optional "},{"location":"python/pdk_projen/API/#projen_upgrade_scheduleoptional_3","text":"Type: typing.List[str] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projen_upgrade_scheduleOptional "},{"location":"python/pdk_projen/API/#projen_upgrade_secretoptional_3","text":"Deprecated: use githubTokenSecret instead. Type: str Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projen_upgrade_secret~~Optional "},{"location":"python/pdk_projen/API/#projen_versionoptional_3","text":"Type: str Default: Defaults to the latest version. Version of projen to install.","title":"projen_versionOptional "},{"location":"python/pdk_projen/API/#pull_request_templateoptional_3","text":"Type: bool Default: true Include a GitHub pull request template.","title":"pull_request_templateOptional "},{"location":"python/pdk_projen/API/#pull_request_template_contentsoptional_3","text":"Type: typing.List[str] Default: default content The contents of the pull request template.","title":"pull_request_template_contentsOptional "},{"location":"python/pdk_projen/API/#releaseoptional_4","text":"Type: bool Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"python/pdk_projen/API/#release_to_npmoptional_3","text":"Type: bool Default: false Automatically release to npm when new versions are introduced.","title":"release_to_npmOptional "},{"location":"python/pdk_projen/API/#release_workflowoptional_3","text":"Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~release_workflow~~Optional "},{"location":"python/pdk_projen/API/#workflow_bootstrap_stepsoptional_3","text":"Type: typing.List[typing.Any] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflow_bootstrap_stepsOptional "},{"location":"python/pdk_projen/API/#workflow_git_identityoptional_3","text":"Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflow_git_identityOptional "},{"location":"python/pdk_projen/API/#workflow_node_versionoptional_3","text":"Type: str Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflow_node_versionOptional "},{"location":"python/pdk_projen/API/#disable_tsconfigoptional_3","text":"Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disable_tsconfigOptional "},{"location":"python/pdk_projen/API/#docgenoptional_4","text":"Type: bool Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"python/pdk_projen/API/#docs_directoryoptional_3","text":"Type: str Default: \"docs\" Docs directory.","title":"docs_directoryOptional "},{"location":"python/pdk_projen/API/#entrypoint_typesoptional_3","text":"Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypoint_typesOptional "},{"location":"python/pdk_projen/API/#eslintoptional_4","text":"Type: bool Default: true Setup eslint.","title":"eslintOptional "},{"location":"python/pdk_projen/API/#eslint_optionsoptional_3","text":"Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslint_optionsOptional "},{"location":"python/pdk_projen/API/#libdiroptional_3","text":"Type: str Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"python/pdk_projen/API/#projenrc_tsoptional_3","text":"Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrc_tsOptional "},{"location":"python/pdk_projen/API/#projenrc_ts_optionsoptional_3","text":"Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrc_ts_optionsOptional "},{"location":"python/pdk_projen/API/#sample_codeoptional_3","text":"Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sample_codeOptional "},{"location":"python/pdk_projen/API/#srcdiroptional_3","text":"Type: str Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"python/pdk_projen/API/#testdiroptional_5","text":"Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"python/pdk_projen/API/#tsconfigoptional_4","text":"Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"python/pdk_projen/API/#tsconfig_devoptional_3","text":"Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfig_devOptional "},{"location":"python/pdk_projen/API/#tsconfig_dev_fileoptional_3","text":"Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfig_dev_fileOptional "},{"location":"python/pdk_projen/API/#typescript_versionoptional_3","text":"Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescript_versionOptional "},{"location":"python/pdk_projen/API/#build_commandoptional_3","text":"Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"build_commandOptional "},{"location":"python/pdk_projen/API/#cdkoutoptional_3","text":"Type: str Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"python/pdk_projen/API/#contextoptional_3","text":"Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"python/pdk_projen/API/#feature_flagsoptional_3","text":"Type: bool Default: true Include all feature flags in cdk.json.","title":"feature_flagsOptional "},{"location":"python/pdk_projen/API/#require_approvaloptional_3","text":"Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"require_approvalOptional "},{"location":"python/pdk_projen/API/#watch_excludesoptional_3","text":"Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch .","title":"watch_excludesOptional "},{"location":"python/pdk_projen/API/#watch_includesoptional_3","text":"Type: typing.List[str] Default: [] Glob patterns to include in cdk watch .","title":"watch_includesOptional "},{"location":"python/pdk_projen/API/#cdk_versionrequired_4","text":"Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdk_versionRequired "},{"location":"python/pdk_projen/API/#cdk_assertoptional_3","text":"Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdk_assert~~Optional "},{"location":"python/pdk_projen/API/#cdk_assertionsoptional_3","text":"Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdk_assertionsOptional "},{"location":"python/pdk_projen/API/#cdk_dependenciesoptional_3","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires.","title":"~~cdk_dependencies~~Optional "},{"location":"python/pdk_projen/API/#cdk_dependencies_as_depsoptional_3","text":"Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdk_dependencies_as_deps~~Optional "},{"location":"python/pdk_projen/API/#cdk_test_dependenciesoptional_3","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing.","title":"~~cdk_test_dependencies~~Optional "},{"location":"python/pdk_projen/API/#cdk_version_pinningoptional_3","text":"Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdk_version_pinningOptional "},{"location":"python/pdk_projen/API/#constructs_versionoptional_3","text":"Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructs_versionOptional "},{"location":"python/pdk_projen/API/#app_entrypointoptional_3","text":"Type: str Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"app_entrypointOptional "},{"location":"python/pdk_projen/API/#integration_test_auto_discoveroptional_1","text":"Type: bool Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory.","title":"integration_test_auto_discoverOptional "},{"location":"python/pdk_projen/API/#lambda_auto_discoveroptional_1","text":"Type: bool Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project.","title":"lambda_auto_discoverOptional "},{"location":"python/pdk_projen/API/#lambda_optionsoptional_1","text":"Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions.","title":"lambda_optionsOptional "},{"location":"python/pdk_projen/API/#methods_2","text":"Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_cdk_dependency Adds an AWS CDK module dependencies.","title":"Methods "},{"location":"python/pdk_projen/API/#add_exclude_from_cleanup_2","text":"def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"add_exclude_from_cleanup "},{"location":"python/pdk_projen/API/#globsrequired_2","text":"Type: str The glob patterns to match.","title":"globsRequired "},{"location":"python/pdk_projen/API/#add_git_ignore_2","text":"def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern.","title":"add_git_ignore "},{"location":"python/pdk_projen/API/#patternrequired_3","text":"Type: str The glob pattern to ignore.","title":"patternRequired "},{"location":"python/pdk_projen/API/#add_package_ignore_2","text":"def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"add_package_ignore "},{"location":"python/pdk_projen/API/#patternrequired_4","text":"Type: str","title":"patternRequired "},{"location":"python/pdk_projen/API/#add_task_2","text":"def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name.","title":"add_task "},{"location":"python/pdk_projen/API/#namerequired_15","text":"Type: str The task name to add.","title":"nameRequired "},{"location":"python/pdk_projen/API/#conditionoptional_2","text":"Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped.","title":"conditionOptional "},{"location":"python/pdk_projen/API/#cwdoptional_2","text":"Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step).","title":"cwdOptional "},{"location":"python/pdk_projen/API/#descriptionoptional_8","text":"Type: str Default: the task name The description of this build command.","title":"descriptionOptional "},{"location":"python/pdk_projen/API/#envoptional_2","text":"Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") .","title":"envOptional "},{"location":"python/pdk_projen/API/#required_envoptional_2","text":"Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined.","title":"required_envOptional "},{"location":"python/pdk_projen/API/#execoptional_2","text":"Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task.","title":"execOptional "},{"location":"python/pdk_projen/API/#add_tip_2","text":"def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis.","title":"~~add_tip~~ "},{"location":"python/pdk_projen/API/#messagerequired_2","text":"Type: str The message.","title":"messageRequired "},{"location":"python/pdk_projen/API/#annotate_generated_2","text":"def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotate_generated "},{"location":"python/pdk_projen/API/#globrequired_2","text":"Type: str the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"python/pdk_projen/API/#post_synthesize_2","text":"def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed.","title":"post_synthesize "},{"location":"python/pdk_projen/API/#pre_synthesize_2","text":"def pre_synthesize () -> None Called before all components are synthesized.","title":"pre_synthesize "},{"location":"python/pdk_projen/API/#remove_task_2","text":"def remove_task ( name : str ) -> Task Removes a task from a project.","title":"remove_task "},{"location":"python/pdk_projen/API/#namerequired_16","text":"Type: str The name of the task to remove.","title":"nameRequired "},{"location":"python/pdk_projen/API/#run_task_command_2","text":"def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK .","title":"run_task_command "},{"location":"python/pdk_projen/API/#taskrequired_2","text":"Type: projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"python/pdk_projen/API/#synth_2","text":"def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"python/pdk_projen/API/#try_find_file_2","text":"def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects.","title":"try_find_file "},{"location":"python/pdk_projen/API/#file_pathrequired_6","text":"Type: str The file path. If this path is relative, it will be resolved from the root of this project.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#try_find_json_file_2","text":"def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name.","title":"~~try_find_json_file~~ "},{"location":"python/pdk_projen/API/#file_pathrequired_7","text":"Type: str The file path.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#try_find_object_file_2","text":"def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"try_find_object_file "},{"location":"python/pdk_projen/API/#file_pathrequired_8","text":"Type: str The file path.","title":"file_pathRequired "},{"location":"python/pdk_projen/API/#add_bins_1","text":"def add_bins ( bins : typing . Mapping [ str ] ) -> None","title":"add_bins "},{"location":"python/pdk_projen/API/#binsrequired_1","text":"Type: typing.Mapping[str]","title":"binsRequired "},{"location":"python/pdk_projen/API/#add_bundled_deps_1","text":"def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json .","title":"add_bundled_deps "},{"location":"python/pdk_projen/API/#depsrequired_6","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_compile_command_1","text":"def add_compile_command ( commands : str ) -> None DEPRECATED.","title":"~~add_compile_command~~ "},{"location":"python/pdk_projen/API/#commandsrequired_2","text":"Type: str","title":"commandsRequired "},{"location":"python/pdk_projen/API/#add_deps_1","text":"def add_deps ( deps : str ) -> None Defines normal dependencies.","title":"add_deps "},{"location":"python/pdk_projen/API/#depsrequired_7","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_dev_deps_1","text":"def add_dev_deps ( deps : str ) -> None Defines development/test dependencies.","title":"add_dev_deps "},{"location":"python/pdk_projen/API/#depsrequired_8","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_fields_1","text":"def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json .","title":"add_fields "},{"location":"python/pdk_projen/API/#fieldsrequired_1","text":"Type: typing.Mapping[typing.Any] The fields to set.","title":"fieldsRequired "},{"location":"python/pdk_projen/API/#add_keywords_1","text":"def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated).","title":"add_keywords "},{"location":"python/pdk_projen/API/#keywordsrequired_1","text":"Type: str The keywords to add.","title":"keywordsRequired "},{"location":"python/pdk_projen/API/#add_peer_deps_1","text":"def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers.","title":"add_peer_deps "},{"location":"python/pdk_projen/API/#depsrequired_9","text":"Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"python/pdk_projen/API/#add_test_command_1","text":"def add_test_command ( commands : str ) -> None DEPRECATED.","title":"~~add_test_command~~ "},{"location":"python/pdk_projen/API/#commandsrequired_3","text":"Type: str","title":"commandsRequired "},{"location":"python/pdk_projen/API/#has_script_1","text":"def has_script ( name : str ) -> bool Indicates if a script by the name name is defined.","title":"has_script "},{"location":"python/pdk_projen/API/#namerequired_17","text":"Type: str The name of the script.","title":"nameRequired "},{"location":"python/pdk_projen/API/#remove_script_1","text":"def remove_script ( name : str ) -> None Removes the npm script (always successful).","title":"remove_script "},{"location":"python/pdk_projen/API/#namerequired_18","text":"Type: str The name of the script.","title":"nameRequired "},{"location":"python/pdk_projen/API/#render_workflow_setup_1","text":"def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow.","title":"render_workflow_setup "},{"location":"python/pdk_projen/API/#mutableoptional_1","text":"Type: bool Default: false Should the pacakge lockfile be updated?","title":"mutableOptional "},{"location":"python/pdk_projen/API/#set_script_1","text":"def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script.","title":"set_script "},{"location":"python/pdk_projen/API/#namerequired_19","text":"Type: str The script name.","title":"nameRequired "},{"location":"python/pdk_projen/API/#commandrequired_1","text":"Type: str The command to execute.","title":"commandRequired "},{"location":"python/pdk_projen/API/#add_cdk_dependency","text":"def add_cdk_dependency ( modules : str ) -> None Adds an AWS CDK module dependencies.","title":"add_cdk_dependency "},{"location":"python/pdk_projen/API/#modulesrequired","text":"Type: str The list of modules to depend on.","title":"modulesRequired "},{"location":"python/pdk_projen/API/#properties_6","text":"Name Type Description build_task projen.Task No description. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Automatic PR merges. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this pacakge. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. app_entrypoint str The CDK app entrypoint. cdk_config projen.awscdk.CdkConfig cdk.json configuration. cdk_deps projen.awscdk.AwsCdkDeps No description. cdk_tasks projen.awscdk.CdkTasks Common CDK tasks. cdk_version str The CDK version this app is using.","title":"Properties "},{"location":"python/pdk_projen/API/#build_taskrequired_2","text":"build_task : Task Type: projen.Task","title":"build_taskRequired "},{"location":"python/pdk_projen/API/#compile_taskrequired_2","text":"compile_task : Task Type: projen.Task","title":"compile_taskRequired "},{"location":"python/pdk_projen/API/#componentsrequired_2","text":"components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project.","title":"componentsRequired "},{"location":"python/pdk_projen/API/#depsrequired_10","text":"deps : Dependencies Type: projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"python/pdk_projen/API/#ejectedrequired_2","text":"ejected : bool Type: bool Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"python/pdk_projen/API/#filesrequired_2","text":"files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project.","title":"filesRequired "},{"location":"python/pdk_projen/API/#gitattributesrequired_2","text":"gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"python/pdk_projen/API/#gitignorerequired_2","text":"gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"python/pdk_projen/API/#loggerrequired_2","text":"logger : Logger Type: projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"python/pdk_projen/API/#namerequired_20","text":"name : str Type: str Project name.","title":"nameRequired "},{"location":"python/pdk_projen/API/#outdirrequired_2","text":"outdir : str Type: str Absolute output directory of this project.","title":"outdirRequired "},{"location":"python/pdk_projen/API/#package_taskrequired_2","text":"package_task : Task Type: projen.Task","title":"package_taskRequired "},{"location":"python/pdk_projen/API/#post_compile_taskrequired_2","text":"post_compile_task : Task Type: projen.Task","title":"post_compile_taskRequired "},{"location":"python/pdk_projen/API/#pre_compile_taskrequired_2","text":"pre_compile_task : Task Type: projen.Task","title":"pre_compile_taskRequired "},{"location":"python/pdk_projen/API/#project_buildrequired_2","text":"project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project.","title":"project_buildRequired "},{"location":"python/pdk_projen/API/#projen_commandrequired_2","text":"projen_command : str Type: str The command to use in order to run the projen CLI.","title":"projen_commandRequired "},{"location":"python/pdk_projen/API/#rootrequired_2","text":"root : Project Type: projen.Project The root project.","title":"rootRequired "},{"location":"python/pdk_projen/API/#tasksrequired_2","text":"tasks : Tasks Type: projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"python/pdk_projen/API/#test_taskrequired_2","text":"test_task : Task Type: projen.Task","title":"test_taskRequired "},{"location":"python/pdk_projen/API/#default_taskoptional_2","text":"default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"default_taskOptional "},{"location":"python/pdk_projen/API/#init_projectoptional_2","text":"init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"init_projectOptional "},{"location":"python/pdk_projen/API/#parentoptional_8","text":"parent : Project Type: projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"python/pdk_projen/API/#project_typerequired_2","text":"project_type : ProjectType Type: projen.ProjectType","title":"project_typeRequired "},{"location":"python/pdk_projen/API/#auto_approveoptional_2","text":"auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project.","title":"auto_approveOptional "},{"location":"python/pdk_projen/API/#dev_containeroptional_8","text":"dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"dev_containerOptional "},{"location":"python/pdk_projen/API/#githuboptional_8","text":"github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"python/pdk_projen/API/#gitpodoptional_8","text":"gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"python/pdk_projen/API/#vscodeoptional_8","text":"vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"python/pdk_projen/API/#allow_library_dependenciesrequired_1","text":"Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool","title":"~~allow_library_dependencies~~Required "},{"location":"python/pdk_projen/API/#artifacts_directoryrequired_1","text":"artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg .","title":"artifacts_directoryRequired "},{"location":"python/pdk_projen/API/#artifacts_javascript_directoryrequired_1","text":"artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ).","title":"artifacts_javascript_directoryRequired "},{"location":"python/pdk_projen/API/#bundlerrequired_1","text":"bundler : Bundler Type: projen.javascript.Bundler","title":"bundlerRequired "},{"location":"python/pdk_projen/API/#entrypointrequired_1","text":"Deprecated: use package.entrypoint entrypoint : str Type: str","title":"~~entrypoint~~Required "},{"location":"python/pdk_projen/API/#manifestrequired_1","text":"Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any","title":"~~manifest~~Required "},{"location":"python/pdk_projen/API/#packagerequired_1","text":"package : NodePackage Type: projen.javascript.NodePackage API for managing the node package.","title":"packageRequired "},{"location":"python/pdk_projen/API/#package_managerrequired_1","text":"Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use.","title":"~~package_manager~~Required "},{"location":"python/pdk_projen/API/#run_script_commandrequired_1","text":"run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager).","title":"run_script_commandRequired "},{"location":"python/pdk_projen/API/#auto_mergeoptional_1","text":"auto_merge : AutoMerge Type: projen.github.AutoMerge Automatic PR merges.","title":"auto_mergeOptional "},{"location":"python/pdk_projen/API/#build_workflowoptional_5","text":"build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled.","title":"build_workflowOptional "},{"location":"python/pdk_projen/API/#build_workflow_job_idoptional_1","text":"build_workflow_job_id : str Type: str The job ID of the build workflow.","title":"build_workflow_job_idOptional "},{"location":"python/pdk_projen/API/#jestoptional_5","text":"jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled).","title":"jestOptional "},{"location":"python/pdk_projen/API/#max_node_versionoptional_5","text":"max_node_version : str Type: str Maximum node version required by this pacakge.","title":"max_node_versionOptional "},{"location":"python/pdk_projen/API/#min_node_versionoptional_5","text":"min_node_version : str Type: str Minimum node.js version required by this package.","title":"min_node_versionOptional "},{"location":"python/pdk_projen/API/#npmignoreoptional_5","text":"npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file.","title":"npmignoreOptional "},{"location":"python/pdk_projen/API/#prettieroptional_5","text":"prettier : Prettier Type: projen.javascript.Prettier","title":"prettierOptional "},{"location":"python/pdk_projen/API/#publisheroptional_1","text":"Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow.","title":"~~publisher~~Optional "},{"location":"python/pdk_projen/API/#releaseoptional_5","text":"release : Release Type: projen.release.Release Release management.","title":"releaseOptional "},{"location":"python/pdk_projen/API/#upgrade_workflowoptional_1","text":"upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow.","title":"upgrade_workflowOptional "},{"location":"python/pdk_projen/API/#docs_directoryrequired_1","text":"docs_directory : str Type: str","title":"docs_directoryRequired "},{"location":"python/pdk_projen/API/#libdirrequired_1","text":"libdir : str Type: str The directory in which compiled .js files reside.","title":"libdirRequired "},{"location":"python/pdk_projen/API/#srcdirrequired_1","text":"srcdir : str Type: str The directory in which the .ts sources reside.","title":"srcdirRequired "},{"location":"python/pdk_projen/API/#testdirrequired_2","text":"testdir : str Type: str The directory in which tests reside.","title":"testdirRequired "},{"location":"python/pdk_projen/API/#tsconfig_devrequired_1","text":"tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen).","title":"tsconfig_devRequired "},{"location":"python/pdk_projen/API/#watch_taskrequired_1","text":"watch_task : Task Type: projen.Task The \"watch\" task.","title":"watch_taskRequired "},{"location":"python/pdk_projen/API/#docgenoptional_5","text":"docgen : bool Type: bool","title":"docgenOptional "},{"location":"python/pdk_projen/API/#eslintoptional_5","text":"eslint : Eslint Type: projen.javascript.Eslint","title":"eslintOptional "},{"location":"python/pdk_projen/API/#tsconfigoptional_5","text":"tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig","title":"tsconfigOptional "},{"location":"python/pdk_projen/API/#tsconfig_eslintoptional_1","text":"tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig","title":"tsconfig_eslintOptional "},{"location":"python/pdk_projen/API/#app_entrypointrequired_1","text":"app_entrypoint : str Type: str The CDK app entrypoint.","title":"app_entrypointRequired "},{"location":"python/pdk_projen/API/#cdk_configrequired_1","text":"cdk_config : CdkConfig Type: projen.awscdk.CdkConfig cdk.json configuration.","title":"cdk_configRequired "},{"location":"python/pdk_projen/API/#cdk_depsrequired_1","text":"cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps","title":"cdk_depsRequired "},{"location":"python/pdk_projen/API/#cdk_tasksrequired_1","text":"cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks Common CDK tasks.","title":"cdk_tasksRequired "},{"location":"python/pdk_projen/API/#cdk_versionrequired_5","text":"cdk_version : str Type: str The CDK version this app is using.","title":"cdk_versionRequired "},{"location":"python/pdk_projen/API/#constants_2","text":"Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"python/pdk_projen/API/#default_taskrequired_2","text":"DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"python/pdk_projen/API/#enums","text":"","title":"Enums "},{"location":"python/pdk_projen/API/#samplelanguage","text":"Name Description TYPESCRIPT No description. PYTHON No description. Supported languages to generate sample code.","title":"SampleLanguage "},{"location":"python/pdk_projen/API/#typescript","text":"","title":"TYPESCRIPT "},{"location":"python/pdk_projen/API/#python","text":"","title":"PYTHON "},{"location":"python/pdk_projen/API/#targetdependencyproject","text":"Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency.","title":"TargetDependencyProject "},{"location":"python/pdk_projen/API/#self","text":"Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages.","title":"SELF "},{"location":"python/pdk_projen/API/#dependencies","text":"Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"DEPENDENCIES "},{"location":"typescript/pdk_pipeline/API/","text":"pdk_pipeline TODO API Reference Constructs PDKPipeline An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals. Initializers import { pdk_pipeline } from 'aws-prototyping-sdk' new pdk_pipeline . PDKPipeline ( scope : Construct , id : string , props : PDKPipelineProps ) Name Type Description scope constructs.Construct No description. id string No description. props PDKPipelineProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: PDKPipelineProps Methods Name Description toString Returns a string representation of this construct. addStage Deploy a single Stage by itself. addWave Add a Wave to the pipeline, for deploying multiple Stages in parallel. buildPipeline Send the current pipeline definition to the engine, and construct the pipeline. toString public toString () : string Returns a string representation of this construct. addStage public addStage ( stage : Stage , options? : AddStageOpts ) : StageDeployment Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies. stage Required Type: aws-cdk-lib.Stage options Optional Type: aws-cdk-lib.pipelines.AddStageOpts addWave public addWave ( id : string , options? : WaveOptions ) : Wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: ts declare const pipeline: pipelines.CodePipeline; const wave = pipeline.addWave('MyWave'); wave.addStage(new MyApplicationStage(this, 'Stage1')); wave.addStage(new MyApplicationStage(this, 'Stage2')); id Required Type: string options Optional Type: aws-cdk-lib.pipelines.WaveOptions buildPipeline public buildPipeline () : void Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method. Static Functions Name Description isConstruct Checks if x is a construct. ~~ isConstruct ~~ import { pdk_pipeline } from 'aws-prototyping-sdk' pdk_pipeline . PDKPipeline . isConstruct ( x : any ) Checks if x is a construct. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. cloudAssemblyFileSet aws-cdk-lib.pipelines.FileSet The FileSet tha contains the cloud assembly. synth aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves aws-cdk-lib.pipelines.Wave[] The waves in this pipeline. pipeline aws-cdk-lib.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. synthProject aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the Synth. codeRepository aws-cdk-lib.aws_codecommit.Repository No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. cloudAssemblyFileSet Required public readonly cloudAssemblyFileSet : FileSet ; Type: aws-cdk-lib.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step. synth Required public readonly synth : IFileSetProducer ; Type: aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves Required public readonly waves : Wave []; Type: aws-cdk-lib.pipelines.Wave[] The waves in this pipeline. pipeline Required public readonly pipeline : Pipeline ; Type: aws-cdk-lib.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built. synthProject Required public readonly synthProject : IProject ; Type: aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built. codeRepository Required public readonly codeRepository : Repository ; Type: aws-cdk-lib.aws_codecommit.Repository Structs PDKPipelineProps Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained. Initializer import { pdk_pipeline } from 'aws-prototyping-sdk' const pDKPipelineProps : pdk_pipeline.PDKPipelineProps = { ... } Properties Name Type Description synth aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion string CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline aws-cdk-lib.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials aws-cdk-lib.pipelines.DockerCredential[] A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation boolean Enable Docker for the self-mutate step. dockerEnabledForSynth boolean Enable Docker for the 'synth' step. pipelineName string The name of the CodePipeline pipeline. publishAssetsInParallel boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks boolean Reuse the same cross region support stack for all pipelines in the App. selfMutation boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory string Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName string Name of the CodeCommit repository to create. defaultBranchName string Branch to trigger the pipeline execution. prBuildChecker boolean Enables a build job to trigger on PR merges to the defaultBranchName. synthShellStepPartialProps aws-cdk-lib.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. synth Required public readonly synth : IFileSetProducer ; Type: aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . assetPublishingCodeBuildDefaults Optional public readonly assetPublishingCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion Optional public readonly cliVersion : string ; Type: string Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. codeBuildDefaults Optional public readonly codeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline. codePipeline Optional public readonly codePipeline : Pipeline ; Type: aws-cdk-lib.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] crossAccountKeys Optional public readonly crossAccountKeys : boolean ; Type: boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. dockerCredentials Optional public readonly dockerCredentials : DockerCredential []; Type: aws-cdk-lib.pipelines.DockerCredential[] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. dockerEnabledForSelfMutation Optional public readonly dockerEnabledForSelfMutation : boolean ; Type: boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. dockerEnabledForSynth Optional public readonly dockerEnabledForSynth : boolean ; Type: boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. pipelineName Optional public readonly pipelineName : string ; Type: string Default: Automatically generated The name of the CodePipeline pipeline. publishAssetsInParallel Optional public readonly publishAssetsInParallel : boolean ; Type: boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuseCrossRegionSupportStacks Optional public readonly reuseCrossRegionSupportStacks : boolean ; Type: boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. selfMutation Optional public readonly selfMutation : boolean ; Type: boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . selfMutationCodeBuildDefaults Optional public readonly selfMutationCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults Optional public readonly synthCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory Required public readonly primarySynthDirectory : string ; Type: string Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName Required public readonly repositoryName : string ; Type: string Name of the CodeCommit repository to create. defaultBranchName Optional public readonly defaultBranchName : string ; Type: string Default: mainline Branch to trigger the pipeline execution. prBuildChecker Optional public readonly prBuildChecker : boolean ; Type: boolean Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build. synthShellStepPartialProps Optional public readonly synthShellStepPartialProps : ShellStepProps ; Type: aws-cdk-lib.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps.","title":"API"},{"location":"typescript/pdk_pipeline/API/#pdk_pipeline","text":"TODO","title":"pdk_pipeline"},{"location":"typescript/pdk_pipeline/API/#api-reference","text":"","title":"API Reference "},{"location":"typescript/pdk_pipeline/API/#constructs","text":"","title":"Constructs "},{"location":"typescript/pdk_pipeline/API/#pdkpipeline","text":"An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals.","title":"PDKPipeline "},{"location":"typescript/pdk_pipeline/API/#initializers","text":"import { pdk_pipeline } from 'aws-prototyping-sdk' new pdk_pipeline . PDKPipeline ( scope : Construct , id : string , props : PDKPipelineProps ) Name Type Description scope constructs.Construct No description. id string No description. props PDKPipelineProps No description.","title":"Initializers "},{"location":"typescript/pdk_pipeline/API/#scoperequired","text":"Type: constructs.Construct","title":"scopeRequired "},{"location":"typescript/pdk_pipeline/API/#idrequired","text":"Type: string","title":"idRequired "},{"location":"typescript/pdk_pipeline/API/#propsrequired","text":"Type: PDKPipelineProps","title":"propsRequired "},{"location":"typescript/pdk_pipeline/API/#methods","text":"Name Description toString Returns a string representation of this construct. addStage Deploy a single Stage by itself. addWave Add a Wave to the pipeline, for deploying multiple Stages in parallel. buildPipeline Send the current pipeline definition to the engine, and construct the pipeline.","title":"Methods "},{"location":"typescript/pdk_pipeline/API/#tostring","text":"public toString () : string Returns a string representation of this construct.","title":"toString "},{"location":"typescript/pdk_pipeline/API/#addstage","text":"public addStage ( stage : Stage , options? : AddStageOpts ) : StageDeployment Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies.","title":"addStage "},{"location":"typescript/pdk_pipeline/API/#stagerequired","text":"Type: aws-cdk-lib.Stage","title":"stageRequired "},{"location":"typescript/pdk_pipeline/API/#optionsoptional","text":"Type: aws-cdk-lib.pipelines.AddStageOpts","title":"optionsOptional "},{"location":"typescript/pdk_pipeline/API/#addwave","text":"public addWave ( id : string , options? : WaveOptions ) : Wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: ts declare const pipeline: pipelines.CodePipeline; const wave = pipeline.addWave('MyWave'); wave.addStage(new MyApplicationStage(this, 'Stage1')); wave.addStage(new MyApplicationStage(this, 'Stage2'));","title":"addWave "},{"location":"typescript/pdk_pipeline/API/#idrequired_1","text":"Type: string","title":"idRequired "},{"location":"typescript/pdk_pipeline/API/#optionsoptional_1","text":"Type: aws-cdk-lib.pipelines.WaveOptions","title":"optionsOptional "},{"location":"typescript/pdk_pipeline/API/#buildpipeline","text":"public buildPipeline () : void Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method.","title":"buildPipeline "},{"location":"typescript/pdk_pipeline/API/#static-functions","text":"Name Description isConstruct Checks if x is a construct.","title":"Static Functions "},{"location":"typescript/pdk_pipeline/API/#isconstruct","text":"import { pdk_pipeline } from 'aws-prototyping-sdk' pdk_pipeline . PDKPipeline . isConstruct ( x : any ) Checks if x is a construct.","title":"~~isConstruct~~ "},{"location":"typescript/pdk_pipeline/API/#xrequired","text":"Type: any Any object.","title":"xRequired "},{"location":"typescript/pdk_pipeline/API/#properties","text":"Name Type Description node constructs.Node The tree node. cloudAssemblyFileSet aws-cdk-lib.pipelines.FileSet The FileSet tha contains the cloud assembly. synth aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves aws-cdk-lib.pipelines.Wave[] The waves in this pipeline. pipeline aws-cdk-lib.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. synthProject aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the Synth. codeRepository aws-cdk-lib.aws_codecommit.Repository No description.","title":"Properties "},{"location":"typescript/pdk_pipeline/API/#noderequired","text":"public readonly node : Node ; Type: constructs.Node The tree node.","title":"nodeRequired "},{"location":"typescript/pdk_pipeline/API/#cloudassemblyfilesetrequired","text":"public readonly cloudAssemblyFileSet : FileSet ; Type: aws-cdk-lib.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step.","title":"cloudAssemblyFileSetRequired "},{"location":"typescript/pdk_pipeline/API/#synthrequired","text":"public readonly synth : IFileSetProducer ; Type: aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly.","title":"synthRequired "},{"location":"typescript/pdk_pipeline/API/#wavesrequired","text":"public readonly waves : Wave []; Type: aws-cdk-lib.pipelines.Wave[] The waves in this pipeline.","title":"wavesRequired "},{"location":"typescript/pdk_pipeline/API/#pipelinerequired","text":"public readonly pipeline : Pipeline ; Type: aws-cdk-lib.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built.","title":"pipelineRequired "},{"location":"typescript/pdk_pipeline/API/#synthprojectrequired","text":"public readonly synthProject : IProject ; Type: aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built.","title":"synthProjectRequired "},{"location":"typescript/pdk_pipeline/API/#coderepositoryrequired","text":"public readonly codeRepository : Repository ; Type: aws-cdk-lib.aws_codecommit.Repository","title":"codeRepositoryRequired "},{"location":"typescript/pdk_pipeline/API/#structs","text":"","title":"Structs "},{"location":"typescript/pdk_pipeline/API/#pdkpipelineprops","text":"Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained.","title":"PDKPipelineProps "},{"location":"typescript/pdk_pipeline/API/#initializer","text":"import { pdk_pipeline } from 'aws-prototyping-sdk' const pDKPipelineProps : pdk_pipeline.PDKPipelineProps = { ... }","title":"Initializer "},{"location":"typescript/pdk_pipeline/API/#properties_1","text":"Name Type Description synth aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion string CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline aws-cdk-lib.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials aws-cdk-lib.pipelines.DockerCredential[] A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation boolean Enable Docker for the self-mutate step. dockerEnabledForSynth boolean Enable Docker for the 'synth' step. pipelineName string The name of the CodePipeline pipeline. publishAssetsInParallel boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks boolean Reuse the same cross region support stack for all pipelines in the App. selfMutation boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. primarySynthDirectory string Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName string Name of the CodeCommit repository to create. defaultBranchName string Branch to trigger the pipeline execution. prBuildChecker boolean Enables a build job to trigger on PR merges to the defaultBranchName. synthShellStepPartialProps aws-cdk-lib.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands.","title":"Properties "},{"location":"typescript/pdk_pipeline/API/#synthrequired_1","text":"public readonly synth : IFileSetProducer ; Type: aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out .","title":"synthRequired "},{"location":"typescript/pdk_pipeline/API/#assetpublishingcodebuilddefaultsoptional","text":"public readonly assetPublishingCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects.","title":"assetPublishingCodeBuildDefaultsOptional "},{"location":"typescript/pdk_pipeline/API/#cliversionoptional","text":"public readonly cliVersion : string ; Type: string Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version.","title":"cliVersionOptional "},{"location":"typescript/pdk_pipeline/API/#codebuilddefaultsoptional","text":"public readonly codeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0 Customize the CodeBuild projects created for this pipeline.","title":"codeBuildDefaultsOptional "},{"location":"typescript/pdk_pipeline/API/#codepipelineoptional","text":"public readonly codePipeline : Pipeline ; Type: aws-cdk-lib.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface]","title":"codePipelineOptional "},{"location":"typescript/pdk_pipeline/API/#crossaccountkeysoptional","text":"public readonly crossAccountKeys : boolean ; Type: boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys.","title":"crossAccountKeysOptional "},{"location":"typescript/pdk_pipeline/API/#dockercredentialsoptional","text":"public readonly dockerCredentials : DockerCredential []; Type: aws-cdk-lib.pipelines.DockerCredential[] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets.","title":"dockerCredentialsOptional "},{"location":"typescript/pdk_pipeline/API/#dockerenabledforselfmutationoptional","text":"public readonly dockerEnabledForSelfMutation : boolean ; Type: boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline.","title":"dockerEnabledForSelfMutationOptional "},{"location":"typescript/pdk_pipeline/API/#dockerenabledforsynthoptional","text":"public readonly dockerEnabledForSynth : boolean ; Type: boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset.","title":"dockerEnabledForSynthOptional "},{"location":"typescript/pdk_pipeline/API/#pipelinenameoptional","text":"public readonly pipelineName : string ; Type: string Default: Automatically generated The name of the CodePipeline pipeline.","title":"pipelineNameOptional "},{"location":"typescript/pdk_pipeline/API/#publishassetsinparalleloptional","text":"public readonly publishAssetsInParallel : boolean ; Type: boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you.","title":"publishAssetsInParallelOptional "},{"location":"typescript/pdk_pipeline/API/#reusecrossregionsupportstacksoptional","text":"public readonly reuseCrossRegionSupportStacks : boolean ; Type: boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App.","title":"reuseCrossRegionSupportStacksOptional "},{"location":"typescript/pdk_pipeline/API/#selfmutationoptional","text":"public readonly selfMutation : boolean ; Type: boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy .","title":"selfMutationOptional "},{"location":"typescript/pdk_pipeline/API/#selfmutationcodebuilddefaultsoptional","text":"public readonly selfMutationCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects.","title":"selfMutationCodeBuildDefaultsOptional "},{"location":"typescript/pdk_pipeline/API/#synthcodebuilddefaultsoptional","text":"public readonly synthCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects.","title":"synthCodeBuildDefaultsOptional "},{"location":"typescript/pdk_pipeline/API/#primarysynthdirectoryrequired","text":"public readonly primarySynthDirectory : string ; Type: string Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out.","title":"primarySynthDirectoryRequired "},{"location":"typescript/pdk_pipeline/API/#repositorynamerequired","text":"public readonly repositoryName : string ; Type: string Name of the CodeCommit repository to create.","title":"repositoryNameRequired "},{"location":"typescript/pdk_pipeline/API/#defaultbranchnameoptional","text":"public readonly defaultBranchName : string ; Type: string Default: mainline Branch to trigger the pipeline execution.","title":"defaultBranchNameOptional "},{"location":"typescript/pdk_pipeline/API/#prbuildcheckeroptional","text":"public readonly prBuildChecker : boolean ; Type: boolean Default: true Enables a build job to trigger on PR merges to the defaultBranchName. This will automatically build the codebase and add an Approval to the PR on successful build.","title":"prBuildCheckerOptional "},{"location":"typescript/pdk_pipeline/API/#synthshellsteppartialpropsoptional","text":"public readonly synthShellStepPartialProps : ShellStepProps ; Type: aws-cdk-lib.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps.","title":"synthShellStepPartialPropsOptional "},{"location":"typescript/pdk_projen/API/","text":"pdk_projen This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions. Prerequisites Ensure you have the following packages installed globally: node > 14 (or use nvm to install) Getting Started To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds. nx-monorepo The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc. Adding Subprojects Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website . Example 1 - Explicit dependencies NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time. Example 2 - Implicit dependencies Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order. FAQ How do I run a target just on a specific package? To run a package specific target, you can do the following: cd packages/<my-package> npx projen <target> How do I add a new target to a projen Sub Project? In your .projenrc.ts , do the following: const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); infra . addTask ( \"new-target\" , { exec : \"echo \\\"hi\\\"\" }); As usual, ensure you run npx projen in the root directory to synthesize your change. From here is it just a case of executing npx projen new-target in the package directory. I have added a project in .projenrc.ts but it isn't synthesizing? Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo. How do I visualize my dependencies? From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related. I have updated a dependency, however the build or graph viz is not detecting any changes. Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache . How do I build everything in my monorepo without a specific target package? npx nx run-many --target=build --all I am running a different target, however the dependencies are not being executed. By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects. My subproject is not caching even though I haven't changed anything. This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo. API Reference Structs NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer import { pdk_projen } from 'aws-prototyping-sdk' const nxMonorepoProjectOptions : pdk_projen.NxMonorepoProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveProjenUpgrades boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule string[] Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret string Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps any[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. nxIgnorePatterns string[] List of patterns to include in the .nxignore file. sampleLanguage SampleLanguage Language to generate sample code on first synthesis. targetDependencies {[ key: string ]: TargetDependency []} Configuration for NX TargetDependencies. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Author's Organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveProjenUpgrades Optional public readonly autoApproveProjenUpgrades : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projenUpgradeAutoMerge ~~ Optional Deprecated: use autoApproveProjenUpgrades . public readonly projenUpgradeAutoMerge : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projenUpgradeSchedule Optional public readonly projenUpgradeSchedule : string []; Type: string[] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projenUpgradeSecret ~~ Optional Deprecated: use githubTokenSecret instead. public readonly projenUpgradeSecret : string ; Type: string Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : any []; Type: any[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). nxIgnorePatterns Optional public readonly nxIgnorePatterns : string []; Type: string[] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore sampleLanguage Optional public readonly sampleLanguage : SampleLanguage ; Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis. targetDependencies Optional public readonly targetDependencies : {[ key : string ] : TargetDependency []}; Type: {[ key: string ]: TargetDependency []} Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies PDKPipelinePyProjectOptions Configuration options for the PDKPipelinePyProject. Initializer import { pdk_projen } from 'aws-prototyping-sdk' const pDKPipelinePyProjectOptions : pdk_projen.PDKPipelinePyProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. authorEmail string Author's e-mail. authorName string Author's name. version string Version of the package. classifiers string[] A list of PyPI trove classifiers that describe the project. description string A short description of the package. homepage string A URL to the website of the project. license string License of this package as an SPDX identifier. poetryOptions projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName string Name of the python package as used in imports and filenames. deps string[] List of runtime dependencies for this project. devDeps string[] List of dev dependencies for this project. pip boolean Use pip with a requirements.txt file to track project dependencies. poetry boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcPython boolean Use projenrc in python. projenrcPythonOptions projen.python.ProjenrcOptions Options related to projenrc in python. pytest boolean Include pytest tests. pytestOptions projen.python.PytestOptions pytest options. sample boolean Include sample code and test if the relevant directories don't exist. setuptools boolean Use setuptools with a setup.py script for packaging and publishing. venv boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions projen.python.VenvOptions Venv options. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. appEntrypoint string The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir string Python sources directory. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public readonly authorEmail : string ; Type: string Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public readonly authorName : string ; Type: string Default: $GIT_USER_NAME Author's name. version Required public readonly version : string ; Type: string Default: \"0.1.0\" Version of the package. classifiers Optional public readonly classifiers : string []; Type: string[] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public readonly description : string ; Type: string A short description of the package. homepage Optional public readonly homepage : string ; Type: string A URL to the website of the project. license Optional public readonly license : string ; Type: string License of this package as an SPDX identifier. poetryOptions Optional public readonly poetryOptions : PoetryPyprojectOptionsWithoutDeps ; Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public readonly setupConfig : {[ key : string ] : any }; Type: {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName Required public readonly module Name : string ; Type: string Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public readonly pip : boolean ; Type: boolean Default: true Use pip with a requirements.txt file to track project dependencies. poetry Optional public readonly poetry : boolean ; Type: boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcPython Optional public readonly projenrcPython : boolean ; Type: boolean Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public readonly projenrcPythonOptions : ProjenrcOptions ; Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public readonly pytest : boolean ; Type: boolean Default: true Include pytest tests. pytestOptions Optional public readonly pytestOptions : PytestOptions ; Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public readonly setuptools : boolean ; Type: boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing. venv Optional public readonly venv : boolean ; Type: boolean Default: true Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public readonly venvOptions : VenvOptions ; Type: projen.python.VenvOptions Default: defaults Venv options. buildCommand Optional public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json . featureFlags Optional public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch . cdkVersion Required public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing. cdkVersionPinning Optional public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public readonly appEntrypoint : string ; Type: string Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional public readonly testdir : string ; Type: string Default: \"tests\" Python sources directory. PDKPipelineTsProjectOptions Configuration options for the PDKPipelineTsProject. Initializer import { pdk_projen } from 'aws-prototyping-sdk' const pDKPipelineTsProjectOptions : pdk_projen.PDKPipelineTsProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveProjenUpgrades boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule string[] Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret string Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps any[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. appEntrypoint string The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integrationTestAutoDiscover boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Author's Organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveProjenUpgrades Optional public readonly autoApproveProjenUpgrades : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projenUpgradeAutoMerge ~~ Optional Deprecated: use autoApproveProjenUpgrades . public readonly projenUpgradeAutoMerge : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projenUpgradeSchedule Optional public readonly projenUpgradeSchedule : string []; Type: string[] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projenUpgradeSecret ~~ Optional Deprecated: use githubTokenSecret instead. public readonly projenUpgradeSecret : string ; Type: string Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : any []; Type: any[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). buildCommand Optional public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json . featureFlags Optional public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch . cdkVersion Required public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing. cdkVersionPinning Optional public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public readonly appEntrypoint : string ; Type: string Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integrationTestAutoDiscover Optional public readonly integrationTestAutoDiscover : boolean ; Type: boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover Optional public readonly lambdaAutoDiscover : boolean ; Type: boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions Optional public readonly lambdaOptions : LambdaFunctionCommonOptions ; Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. TargetDependency Represents an NX Target Dependency. Initializer import { pdk_projen } from 'aws-prototyping-sdk' const targetDependency : pdk_projen.TargetDependency = { ... } Properties Name Type Description projects TargetDependencyProject Target dependencies. target string Projen target i.e: build, test, etc. projects Required public readonly projects : TargetDependencyProject ; Type: TargetDependencyProject Target dependencies. target Required public readonly target : string ; Type: string Projen target i.e: build, test, etc. Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . NxMonorepoProject ( options : NxMonorepoProjectOptions ) Name Type Description options NxMonorepoProjectOptions No description. options Required Type: NxMonorepoProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. addImplicitDependency public addImplicitDependency ( dependent : Project , dependee : Project ) : void Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: projen.Project project you want to have the dependency. dependee Required Type: projen.Project project you wish to depend on. Properties Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Automatic PR merges. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. buildTask Required public readonly buildTask : Task ; Type: projen.Task compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Automatic PR merges. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PdkPipelinePyProject Synthesizes a Python Project with a CI/CD pipeline. Initializers import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . PdkPipelinePyProject ( options : PDKPipelinePyProjectOptions ) Name Type Description options PDKPipelinePyProjectOptions No description. options Required Type: PDKPipelinePyProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <module>@<semver> . addDevDependency public addDevDependency ( spec : string ) : void Adds a dev dependency. spec Required Type: string Format <module>@<semver> . Properties Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. depsManager projen.python.IPythonDeps API for managing dependencies. envManager projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName string Python module name (the project name, with any hyphens or periods replaced with underscores). version string Version of the package for distribution (should follow semver). packagingManager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. appEntrypoint string The CDK app entrypoint. cdkConfig projen.awscdk.CdkConfig cdk.json configuration. cdkDeps projen.awscdk.AwsCdkDeps No description. cdkTasks projen.awscdk.CdkTasks Common CDK tasks. cdkVersion string The CDK version this app is using. testdir string The directory in which the python tests reside. buildTask Required public readonly buildTask : Task ; Type: projen.Task compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public readonly depsManager : IPythonDeps ; Type: projen.python.IPythonDeps API for managing dependencies. envManager Required public readonly envManager : IPythonEnv ; Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public readonly module Name : string ; Type: string Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public readonly version : string ; Type: string Version of the package for distribution (should follow semver). packagingManager Optional public readonly packagingManager : IPythonPackaging ; Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public readonly pytest : Pytest ; Type: projen.python.Pytest Pytest component. appEntrypoint Required public readonly appEntrypoint : string ; Type: string The CDK app entrypoint. cdkConfig Required public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps cdkTasks Required public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public readonly cdkVersion : string ; Type: string The CDK version this app is using. testdir Required public readonly testdir : string ; Type: string The directory in which the python tests reside. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelineTsProject Synthesizes a Typescript Project with a CI/CD pipeline. Initializers import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . PDKPipelineTsProject ( options : PDKPipelineTsProjectOptions ) Name Type Description options PDKPipelineTsProjectOptions No description. options Required Type: PDKPipelineTsProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. addCdkDependency public addCdkDependency ( module s : string ) : void Adds an AWS CDK module dependencies. modules Required Type: string The list of modules to depend on. Properties Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Automatic PR merges. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. appEntrypoint string The CDK app entrypoint. cdkConfig projen.awscdk.CdkConfig cdk.json configuration. cdkDeps projen.awscdk.AwsCdkDeps No description. cdkTasks projen.awscdk.CdkTasks Common CDK tasks. cdkVersion string The CDK version this app is using. buildTask Required public readonly buildTask : Task ; Type: projen.Task compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Automatic PR merges. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig appEntrypoint Required public readonly appEntrypoint : string ; Type: string The CDK app entrypoint. cdkConfig Required public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps cdkTasks Required public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public readonly cdkVersion : string ; Type: string The CDK version this app is using. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums SampleLanguage Name Description TYPESCRIPT No description. PYTHON No description. Supported languages to generate sample code. TYPESCRIPT PYTHON TargetDependencyProject Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency. SELF Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages. DEPENDENCIES Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"API"},{"location":"typescript/pdk_projen/API/#pdk_projen","text":"This package contains a set of Projen project types which can be used to configure complex project configuration through code. These project types synthesize project configuration files such as package.json, .gitignore, nx.json, eslint, jest, etc from well-typed definitions.","title":"pdk_projen"},{"location":"typescript/pdk_projen/API/#prerequisites","text":"Ensure you have the following packages installed globally: node > 14 (or use nvm to install)","title":"Prerequisites"},{"location":"typescript/pdk_projen/API/#getting-started","text":"To create a new project, run the following command and follow the instructions for the specific project type below: mkdir my-project cd my-project npx projen new --from aws-prototyping-sdk <project-type> The following are the currently supported project types, along with instructions on how to get started: nx-monorepo - Vends a NX based monorepo with support for polygot builds.","title":"Getting Started"},{"location":"typescript/pdk_projen/API/#nx-monorepo","text":"The nx-monorepo project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. This project type does the heavy lifting of managing your packages/subprojects to be compatible with NX by performing the following actions: Generates an nx.json file in the root directory which is responsible for configuring project defaults including what targets should be cached, what implicit dependencies there are, etc. Generate a package.json for any non-node project. This is needed as a facade so that nx can call a target, regardless of language. All targets in this package.json file defer to projen tasks. Installs a plugin (owned by pdk) which handles polygot dependency linking. After running the npx projen new --from aws-prototyping-sdk nx-monorepo command, a .projenrc.ts will be created which looks like this: import { pdk_projen } from \"aws-prototyping-sdk\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); project . synth (); This will be the main mechanism for adding new subprojects, configuring/changing aspects of the generated packages, etc.","title":"nx-monorepo"},{"location":"typescript/pdk_projen/API/#adding-subprojects","text":"Now that you have a monorepo set up, it's time to add Subprojects. You can add Subprojects by simply instantiating new instances of classes which extend the native Projen's Project class, and providing the monorepo project as a parent . Examples of currently supported project types are listed on the Projen Github Website .","title":"Adding Subprojects"},{"location":"typescript/pdk_projen/API/#example-1-explicit-dependencies","text":"NX ships pre-configured to detect explicit dependencies within the package.json files of Sub projects. If your use case relies solely on Typescript then this example will apply to you. Let's create a sample application with two Subprojects: An Infrastructure project based on Typescript which creates some basic CDK infrastructure. A React webapp written in Typescript. import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); project . synth (); It is important to note that both the parent and outdir properties are mandatory. Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp The npx projen command would have also linked these two packages by adding a dev dependency to webapp in infra's package.json and also updating the workspace property in the root package.json. If we wanted to build infra, we can run the following command: npx nx build infra . npx nx build infra > NX Running target build for project infra and 1 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build webapp ... Done in 12 .06s. > nx build infra ... Done in 25 .59s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the webapp build target was executed first as this is a dependency of infra. NX will also cache builds, so if the same command is re-run (without modifying anything) you will notice the build completes in a fraction of the time.","title":"Example 1 - Explicit dependencies"},{"location":"typescript/pdk_projen/API/#example-2-implicit-dependencies","text":"Some project require implementing components in different languages and as such a mechanism must exist to declare implicit build dependencies between these various packages. Let's extend the previous example by adding an additional python based lambda as follows: import { pdk_projen } from \"aws-prototyping-sdk\" ; import { AwsCdkTypeScriptApp } from \"projen/lib/awscdk\" ; import { ReactTypeScriptProject } from \"projen/lib/web\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , }); const webapp = new ReactTypeScriptProject ({ defaultReleaseBranch : \"mainline\" , name : \"webapp\" , parent : project , outdir : \"packages/webapp\" , }); const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); const lambda = new PythonProject ({ authorEmail : \"foo@bar.com\" , authorName : \"foo bar\" , module Name : \"python_lambda\" , name : \"python_lambda\" , version : \"0.0.0\" , parent : project , outdir : \"packages/python_lambda\" , }); project . addImplicitDependency ( infra , lambda ); project . synth (); Now from the root directory, we will synthesize these packages by running npx projen . After running this command we will notice our directory will resemble the following: root |- packages |- infra |- webapp |- lambda If we wanted to build infra, we can run the following command: npx nx run infra:build . npx nx build infra > NX Running target build for project infra and 2 task ( s ) it depends on \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > nx build python_lambda ... Done in 0 .62s. > nx build webapp ... Done in 10 .79s. > nx build infra ... Done in 22 .65s. \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 > NX Successfully ran target build for project infra As you can see from the above logs, the build was executed sequentially for each package in the correct order.","title":"Example 2 - Implicit dependencies"},{"location":"typescript/pdk_projen/API/#faq","text":"","title":"FAQ"},{"location":"typescript/pdk_projen/API/#how-do-i-run-a-target-just-on-a-specific-package","text":"To run a package specific target, you can do the following: cd packages/<my-package> npx projen <target>","title":"How do I run a target just on a specific package?"},{"location":"typescript/pdk_projen/API/#how-do-i-add-a-new-target-to-a-projen-sub-project","text":"In your .projenrc.ts , do the following: const infra = new AwsCdkTypeScriptApp ({ cdkVersion : \"2.0.0\" , defaultReleaseBranch : \"mainline\" , name : \"infra\" , devDeps : [ webapp . package . packageName ], // CDK App depends on the webapp parent : project , outdir : \"packages/infra\" , }); infra . addTask ( \"new-target\" , { exec : \"echo \\\"hi\\\"\" }); As usual, ensure you run npx projen in the root directory to synthesize your change. From here is it just a case of executing npx projen new-target in the package directory.","title":"How do I add a new target to a projen Sub Project?"},{"location":"typescript/pdk_projen/API/#i-have-added-a-project-in-projenrcts-but-it-isnt-synthesizing","text":"Ensure that the parent property of the project is set to the monorepo project. Ensure that an outdir is configured i.e: packages/mypackage . run npx projen in the root of the monorepo.","title":"I have added a project in .projenrc.ts but it isn't synthesizing?"},{"location":"typescript/pdk_projen/API/#how-do-i-visualize-my-dependencies","text":"From the root of the monorepo run npx nx graph . This will open a browser showing how all your packages are related.","title":"How do I visualize my dependencies?"},{"location":"typescript/pdk_projen/API/#i-have-updated-a-dependency-however-the-build-or-graph-viz-is-not-detecting-any-changes","text":"Ensure you have run npx projen from the root of the monorepo. Sometimes the nx cache can become stale and can be cleared by running npx nx clear-cache .","title":"I have updated a dependency, however the build or graph viz is not detecting any changes."},{"location":"typescript/pdk_projen/API/#how-do-i-build-everything-in-my-monorepo-without-a-specific-target-package","text":"npx nx run-many --target=build --all","title":"How do I build everything in my monorepo without a specific target package?"},{"location":"typescript/pdk_projen/API/#i-am-running-a-different-target-however-the-dependencies-are-not-being-executed","text":"By default, only the build target is configured to rely on it's dependencies. To configure additional targets, update the NXMonorepoProject as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , targetDependencies : { test : [ { target : \"test\" , projects : \"dependencies\" , } ] } }); In this example, the test target will now wait until the test target has run successfully in all dependent projects.","title":"I am running a different target, however the dependencies are not being executed."},{"location":"typescript/pdk_projen/API/#my-subproject-is-not-caching-even-though-i-havent-changed-anything","text":"This can happen if NX detects changes in generated/compiled files. Examples of this include if your build target creates a zip file or generates test artifacts with timestamps. To resolve this, add an nxIgnore pattern as follows: const project = new pdk_projen . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-project\" , nxIgnorePatterns : [ \"generated-tst\" , \"dist\" ] }); As per the above configuration, NX will ignore anything within generated-tst or dist folders within any package in your monorepo.","title":"My subproject is not caching even though I haven't changed anything."},{"location":"typescript/pdk_projen/API/#api-reference","text":"","title":"API Reference "},{"location":"typescript/pdk_projen/API/#structs","text":"","title":"Structs "},{"location":"typescript/pdk_projen/API/#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"typescript/pdk_projen/API/#initializer","text":"import { pdk_projen } from 'aws-prototyping-sdk' const nxMonorepoProjectOptions : pdk_projen.NxMonorepoProjectOptions = { ... }","title":"Initializer "},{"location":"typescript/pdk_projen/API/#properties","text":"Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveProjenUpgrades boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule string[] Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret string Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps any[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. nxIgnorePatterns string[] List of patterns to include in the .nxignore file. sampleLanguage SampleLanguage Language to generate sample code on first synthesis. targetDependencies {[ key: string ]: TargetDependency []} Configuration for NX TargetDependencies.","title":"Properties "},{"location":"typescript/pdk_projen/API/#namerequired","text":"public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#loggingoptional","text":"public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"typescript/pdk_projen/API/#outdiroptional","text":"public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"typescript/pdk_projen/API/#parentoptional","text":"public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projencommandoptional","text":"public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptional","text":"public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptionsoptional","text":"public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"typescript/pdk_projen/API/#autoapproveoptionsoptional","text":"public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"typescript/pdk_projen/API/#automergeoptionsoptional","text":"public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"typescript/pdk_projen/API/#clobberoptional","text":"public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional","text":"public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional","text":"public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#githuboptionsoptional","text":"public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional","text":"public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#mergifyoptional","text":"Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"typescript/pdk_projen/API/#mergifyoptionsoptional","text":"Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"typescript/pdk_projen/API/#projecttypeoptional","text":"Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"typescript/pdk_projen/API/#projentokensecretoptional","text":"public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#readmeoptional","text":"public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"typescript/pdk_projen/API/#staleoptional","text":"public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"typescript/pdk_projen/API/#staleoptionsoptional","text":"public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional","text":"public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#allowlibrarydependenciesoptional","text":"public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allowLibraryDependenciesOptional "},{"location":"typescript/pdk_projen/API/#authoremailoptional","text":"public readonly authorEmail : string ; Type: string Author's e-mail.","title":"authorEmailOptional "},{"location":"typescript/pdk_projen/API/#authornameoptional","text":"public readonly authorName : string ; Type: string Author's name.","title":"authorNameOptional "},{"location":"typescript/pdk_projen/API/#authororganizationoptional","text":"public readonly authorOrganization : boolean ; Type: boolean Author's Organization.","title":"authorOrganizationOptional "},{"location":"typescript/pdk_projen/API/#authorurloptional","text":"public readonly authorUrl : string ; Type: string Author's URL / Website.","title":"authorUrlOptional "},{"location":"typescript/pdk_projen/API/#autodetectbinoptional","text":"public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"autoDetectBinOptional "},{"location":"typescript/pdk_projen/API/#binoptional","text":"public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"typescript/pdk_projen/API/#bugsemailoptional","text":"public readonly bugsEmail : string ; Type: string The email address to which issues should be reported.","title":"bugsEmailOptional "},{"location":"typescript/pdk_projen/API/#bugsurloptional","text":"public readonly bugsUrl : string ; Type: string The url to your project's issue tracker.","title":"bugsUrlOptional "},{"location":"typescript/pdk_projen/API/#bundleddepsoptional","text":"public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundledDepsOptional "},{"location":"typescript/pdk_projen/API/#codeartifactoptionsoptional","text":"public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"codeArtifactOptionsOptional "},{"location":"typescript/pdk_projen/API/#depsoptional","text":"public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"typescript/pdk_projen/API/#descriptionoptional","text":"public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"typescript/pdk_projen/API/#devdepsoptional","text":"public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"devDepsOptional "},{"location":"typescript/pdk_projen/API/#entrypointoptional","text":"public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"typescript/pdk_projen/API/#homepageoptional","text":"public readonly homepage : string ; Type: string Package's Homepage / Website.","title":"homepageOptional "},{"location":"typescript/pdk_projen/API/#keywordsoptional","text":"public readonly keywords : string []; Type: string[] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"typescript/pdk_projen/API/#licenseoptional","text":"public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"typescript/pdk_projen/API/#licensedoptional","text":"public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"typescript/pdk_projen/API/#maxnodeversionoptional","text":"public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive).","title":"maxNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#minnodeversionoptional","text":"public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"minNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#npmaccessoptional","text":"public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npmAccessOptional "},{"location":"typescript/pdk_projen/API/#npmregistryoptional","text":"Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npmRegistry~~Optional "},{"location":"typescript/pdk_projen/API/#npmregistryurloptional","text":"public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npmRegistryUrlOptional "},{"location":"typescript/pdk_projen/API/#npmtokensecretoptional","text":"public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npmTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#packagemanageroptional","text":"public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"packageManagerOptional "},{"location":"typescript/pdk_projen/API/#packagenameoptional","text":"public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json.","title":"packageNameOptional "},{"location":"typescript/pdk_projen/API/#peerdependencyoptionsoptional","text":"public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peerDependencyOptionsOptional "},{"location":"typescript/pdk_projen/API/#peerdepsoptional","text":"public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peerDepsOptional "},{"location":"typescript/pdk_projen/API/#repositoryoptional","text":"public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"typescript/pdk_projen/API/#repositorydirectoryoptional","text":"public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repositoryDirectoryOptional "},{"location":"typescript/pdk_projen/API/#scriptsoptional","text":"public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"typescript/pdk_projen/API/#stabilityoptional","text":"public readonly stability : string ; Type: string Package's Stability.","title":"stabilityOptional "},{"location":"typescript/pdk_projen/API/#jsiireleaseversionoptional","text":"public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsiiReleaseVersionOptional "},{"location":"typescript/pdk_projen/API/#majorversionoptional","text":"public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"majorVersionOptional "},{"location":"typescript/pdk_projen/API/#npmdisttagoptional","text":"public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npmDistTagOptional "},{"location":"typescript/pdk_projen/API/#postbuildstepsoptional","text":"public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow.","title":"postBuildStepsOptional "},{"location":"typescript/pdk_projen/API/#prereleaseoptional","text":"public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"typescript/pdk_projen/API/#publishdryrunoptional","text":"public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publishDryRunOptional "},{"location":"typescript/pdk_projen/API/#publishtasksoptional","text":"public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publishTasksOptional "},{"location":"typescript/pdk_projen/API/#releasebranchesoptional","text":"public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"releaseBranchesOptional "},{"location":"typescript/pdk_projen/API/#releaseeverycommitoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~releaseEveryCommit~~Optional "},{"location":"typescript/pdk_projen/API/#releasefailureissueoptional","text":"public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task.","title":"releaseFailureIssueOptional "},{"location":"typescript/pdk_projen/API/#releasefailureissuelabeloptional","text":"public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"releaseFailureIssueLabelOptional "},{"location":"typescript/pdk_projen/API/#releasescheduleoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~releaseSchedule~~Optional "},{"location":"typescript/pdk_projen/API/#releasetagprefixoptional","text":"public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"releaseTagPrefixOptional "},{"location":"typescript/pdk_projen/API/#releasetriggeroptional","text":"public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"releaseTriggerOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflownameoptional","text":"public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow.","title":"releaseWorkflowNameOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflowsetupstepsoptional","text":"public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container.","title":"releaseWorkflowSetupStepsOptional "},{"location":"typescript/pdk_projen/API/#versionrcoptionsoptional","text":"public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrcOptionsOptional "},{"location":"typescript/pdk_projen/API/#workflowcontainerimageoptional","text":"public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows.","title":"workflowContainerImageOptional "},{"location":"typescript/pdk_projen/API/#workflowrunsonoptional","text":"public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflowRunsOnOptional "},{"location":"typescript/pdk_projen/API/#defaultreleasebranchrequired","text":"public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch.","title":"defaultReleaseBranchRequired "},{"location":"typescript/pdk_projen/API/#artifactsdirectoryoptional","text":"public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts.","title":"artifactsDirectoryOptional "},{"location":"typescript/pdk_projen/API/#autoapproveprojenupgradesoptional","text":"public readonly autoApproveProjenUpgrades : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveProjenUpgradesOptional "},{"location":"typescript/pdk_projen/API/#autoapproveupgradesoptional","text":"public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveUpgradesOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowoptional","text":"public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"buildWorkflowOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowtriggersoptional","text":"public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"buildWorkflowTriggersOptional "},{"location":"typescript/pdk_projen/API/#bundleroptionsoptional","text":"public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundlerOptionsOptional "},{"location":"typescript/pdk_projen/API/#codecovoptional","text":"public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"codeCovOptional "},{"location":"typescript/pdk_projen/API/#codecovtokensecretoptional","text":"public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"codeCovTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#copyrightowneroptional","text":"public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyrightOwnerOptional "},{"location":"typescript/pdk_projen/API/#copyrightperiodoptional","text":"public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file.","title":"copyrightPeriodOptional "},{"location":"typescript/pdk_projen/API/#dependabotoptional","text":"public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"typescript/pdk_projen/API/#dependabotoptionsoptional","text":"public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabotOptionsOptional "},{"location":"typescript/pdk_projen/API/#depsupgradeoptional","text":"public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"depsUpgradeOptional "},{"location":"typescript/pdk_projen/API/#depsupgradeoptionsoptional","text":"public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"depsUpgradeOptionsOptional "},{"location":"typescript/pdk_projen/API/#gitignoreoptional","text":"public readonly gitignore : string []; Type: string[] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"typescript/pdk_projen/API/#jestoptional","text":"public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"typescript/pdk_projen/API/#jestoptionsoptional","text":"public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jestOptionsOptional "},{"location":"typescript/pdk_projen/API/#mutablebuildoptional","text":"public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutableBuildOptional "},{"location":"typescript/pdk_projen/API/#npmignoreoptional","text":"Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"typescript/pdk_projen/API/#npmignoreenabledoptional","text":"public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignoreEnabledOptional "},{"location":"typescript/pdk_projen/API/#packageoptional","text":"public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"typescript/pdk_projen/API/#prettieroptional","text":"public readonly prettier : boolean ; Type: boolean Default: false Setup prettier.","title":"prettierOptional "},{"location":"typescript/pdk_projen/API/#prettieroptionsoptional","text":"public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettierOptionsOptional "},{"location":"typescript/pdk_projen/API/#projendevdependencyoptional","text":"public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projenDevDependencyOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsoptional","text":"public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrcJsOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsoptionsoptional","text":"public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrcJsOptionsOptional "},{"location":"typescript/pdk_projen/API/#projenupgradeautomergeoptional","text":"Deprecated: use autoApproveProjenUpgrades . public readonly projenUpgradeAutoMerge : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projenUpgradeAutoMerge~~Optional "},{"location":"typescript/pdk_projen/API/#projenupgradescheduleoptional","text":"public readonly projenUpgradeSchedule : string []; Type: string[] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projenUpgradeScheduleOptional "},{"location":"typescript/pdk_projen/API/#projenupgradesecretoptional","text":"Deprecated: use githubTokenSecret instead. public readonly projenUpgradeSecret : string ; Type: string Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projenUpgradeSecret~~Optional "},{"location":"typescript/pdk_projen/API/#projenversionoptional","text":"public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install.","title":"projenVersionOptional "},{"location":"typescript/pdk_projen/API/#pullrequesttemplateoptional","text":"public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template.","title":"pullRequestTemplateOptional "},{"location":"typescript/pdk_projen/API/#pullrequesttemplatecontentsoptional","text":"public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template.","title":"pullRequestTemplateContentsOptional "},{"location":"typescript/pdk_projen/API/#releaseoptional","text":"public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"typescript/pdk_projen/API/#releasetonpmoptional","text":"public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced.","title":"releaseToNpmOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflowoptional","text":"Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~releaseWorkflow~~Optional "},{"location":"typescript/pdk_projen/API/#workflowbootstrapstepsoptional","text":"public readonly workflowBootstrapSteps : any []; Type: any[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflowBootstrapStepsOptional "},{"location":"typescript/pdk_projen/API/#workflowgitidentityoptional","text":"public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflowGitIdentityOptional "},{"location":"typescript/pdk_projen/API/#workflownodeversionoptional","text":"public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflowNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#disabletsconfigoptional","text":"public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disableTsconfigOptional "},{"location":"typescript/pdk_projen/API/#docgenoptional","text":"public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"typescript/pdk_projen/API/#docsdirectoryoptional","text":"public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory.","title":"docsDirectoryOptional "},{"location":"typescript/pdk_projen/API/#entrypointtypesoptional","text":"public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypointTypesOptional "},{"location":"typescript/pdk_projen/API/#eslintoptional","text":"public readonly eslint : boolean ; Type: boolean Default: true Setup eslint.","title":"eslintOptional "},{"location":"typescript/pdk_projen/API/#eslintoptionsoptional","text":"public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslintOptionsOptional "},{"location":"typescript/pdk_projen/API/#libdiroptional","text":"public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"typescript/pdk_projen/API/#projenrctsoptional","text":"public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrcTsOptional "},{"location":"typescript/pdk_projen/API/#projenrctsoptionsoptional","text":"public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrcTsOptionsOptional "},{"location":"typescript/pdk_projen/API/#samplecodeoptional","text":"public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sampleCodeOptional "},{"location":"typescript/pdk_projen/API/#srcdiroptional","text":"public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"typescript/pdk_projen/API/#testdiroptional","text":"public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"typescript/pdk_projen/API/#tsconfigoptional","text":"public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"typescript/pdk_projen/API/#tsconfigdevoptional","text":"public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfigDevOptional "},{"location":"typescript/pdk_projen/API/#tsconfigdevfileoptional","text":"public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfigDevFileOptional "},{"location":"typescript/pdk_projen/API/#typescriptversionoptional","text":"public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescriptVersionOptional "},{"location":"typescript/pdk_projen/API/#nxignorepatternsoptional","text":"public readonly nxIgnorePatterns : string []; Type: string[] Default: [] List of patterns to include in the .nxignore file. https://nx.dev/configuration/packagejson#nxignore","title":"nxIgnorePatternsOptional "},{"location":"typescript/pdk_projen/API/#samplelanguageoptional","text":"public readonly sampleLanguage : SampleLanguage ; Type: SampleLanguage Default: undefined Language to generate sample code on first synthesis.","title":"sampleLanguageOptional "},{"location":"typescript/pdk_projen/API/#targetdependenciesoptional","text":"public readonly targetDependencies : {[ key : string ] : TargetDependency []}; Type: {[ key: string ]: TargetDependency []} Default: {} Configuration for NX TargetDependencies. https://nx.dev/configuration/packagejson#target-dependencies","title":"targetDependenciesOptional "},{"location":"typescript/pdk_projen/API/#pdkpipelinepyprojectoptions","text":"Configuration options for the PDKPipelinePyProject.","title":"PDKPipelinePyProjectOptions "},{"location":"typescript/pdk_projen/API/#initializer_1","text":"import { pdk_projen } from 'aws-prototyping-sdk' const pDKPipelinePyProjectOptions : pdk_projen.PDKPipelinePyProjectOptions = { ... }","title":"Initializer "},{"location":"typescript/pdk_projen/API/#properties_1","text":"Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. authorEmail string Author's e-mail. authorName string Author's name. version string Version of the package. classifiers string[] A list of PyPI trove classifiers that describe the project. description string A short description of the package. homepage string A URL to the website of the project. license string License of this package as an SPDX identifier. poetryOptions projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName string Name of the python package as used in imports and filenames. deps string[] List of runtime dependencies for this project. devDeps string[] List of dev dependencies for this project. pip boolean Use pip with a requirements.txt file to track project dependencies. poetry boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcPython boolean Use projenrc in python. projenrcPythonOptions projen.python.ProjenrcOptions Options related to projenrc in python. pytest boolean Include pytest tests. pytestOptions projen.python.PytestOptions pytest options. sample boolean Include sample code and test if the relevant directories don't exist. setuptools boolean Use setuptools with a setup.py script for packaging and publishing. venv boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions projen.python.VenvOptions Venv options. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. appEntrypoint string The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir string Python sources directory.","title":"Properties "},{"location":"typescript/pdk_projen/API/#namerequired_1","text":"public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#loggingoptional_1","text":"public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"typescript/pdk_projen/API/#outdiroptional_1","text":"public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"typescript/pdk_projen/API/#parentoptional_1","text":"public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projencommandoptional_1","text":"public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptional_1","text":"public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptionsoptional_1","text":"public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"typescript/pdk_projen/API/#autoapproveoptionsoptional_1","text":"public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"typescript/pdk_projen/API/#automergeoptionsoptional_1","text":"public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"typescript/pdk_projen/API/#clobberoptional_1","text":"public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional_1","text":"public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional_1","text":"public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#githuboptionsoptional_1","text":"public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional_1","text":"public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#mergifyoptional_1","text":"Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"typescript/pdk_projen/API/#mergifyoptionsoptional_1","text":"Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"typescript/pdk_projen/API/#projecttypeoptional_1","text":"Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"typescript/pdk_projen/API/#projentokensecretoptional_1","text":"public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#readmeoptional_1","text":"public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"typescript/pdk_projen/API/#staleoptional_1","text":"public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"typescript/pdk_projen/API/#staleoptionsoptional_1","text":"public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional_1","text":"public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#authoremailrequired","text":"public readonly authorEmail : string ; Type: string Default: $GIT_USER_EMAIL Author's e-mail.","title":"authorEmailRequired "},{"location":"typescript/pdk_projen/API/#authornamerequired","text":"public readonly authorName : string ; Type: string Default: $GIT_USER_NAME Author's name.","title":"authorNameRequired "},{"location":"typescript/pdk_projen/API/#versionrequired","text":"public readonly version : string ; Type: string Default: \"0.1.0\" Version of the package.","title":"versionRequired "},{"location":"typescript/pdk_projen/API/#classifiersoptional","text":"public readonly classifiers : string []; Type: string[] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/","title":"classifiersOptional "},{"location":"typescript/pdk_projen/API/#descriptionoptional_1","text":"public readonly description : string ; Type: string A short description of the package.","title":"descriptionOptional "},{"location":"typescript/pdk_projen/API/#homepageoptional_1","text":"public readonly homepage : string ; Type: string A URL to the website of the project.","title":"homepageOptional "},{"location":"typescript/pdk_projen/API/#licenseoptional_1","text":"public readonly license : string ; Type: string License of this package as an SPDX identifier.","title":"licenseOptional "},{"location":"typescript/pdk_projen/API/#poetryoptionsoptional","text":"public readonly poetryOptions : PoetryPyprojectOptionsWithoutDeps ; Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry.","title":"poetryOptionsOptional "},{"location":"typescript/pdk_projen/API/#setupconfigoptional","text":"public readonly setupConfig : {[ key : string ] : any }; Type: {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools.","title":"setupConfigOptional "},{"location":"typescript/pdk_projen/API/#modulenamerequired","text":"public readonly module Name : string ; Type: string Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores.","title":"moduleNameRequired "},{"location":"typescript/pdk_projen/API/#depsoptional_1","text":"public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() .","title":"depsOptional "},{"location":"typescript/pdk_projen/API/#devdepsoptional_1","text":"public readonly devDeps : string []; Type: string[] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() .","title":"devDepsOptional "},{"location":"typescript/pdk_projen/API/#pipoptional","text":"public readonly pip : boolean ; Type: boolean Default: true Use pip with a requirements.txt file to track project dependencies.","title":"pipOptional "},{"location":"typescript/pdk_projen/API/#poetryoptional","text":"public readonly poetry : boolean ; Type: boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing.","title":"poetryOptional "},{"location":"typescript/pdk_projen/API/#projenrcpythonoptional","text":"public readonly projenrcPython : boolean ; Type: boolean Default: true Use projenrc in python. This will install projen as a python dependency and will add a synth task which will run .projenrc.py .","title":"projenrcPythonOptional "},{"location":"typescript/pdk_projen/API/#projenrcpythonoptionsoptional","text":"public readonly projenrcPythonOptions : ProjenrcOptions ; Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python.","title":"projenrcPythonOptionsOptional "},{"location":"typescript/pdk_projen/API/#pytestoptional","text":"public readonly pytest : boolean ; Type: boolean Default: true Include pytest tests.","title":"pytestOptional "},{"location":"typescript/pdk_projen/API/#pytestoptionsoptional","text":"public readonly pytestOptions : PytestOptions ; Type: projen.python.PytestOptions Default: defaults pytest options.","title":"pytestOptionsOptional "},{"location":"typescript/pdk_projen/API/#sampleoptional","text":"public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist.","title":"sampleOptional "},{"location":"typescript/pdk_projen/API/#setuptoolsoptional","text":"public readonly setuptools : boolean ; Type: boolean Default: true if the project type is library Use setuptools with a setup.py script for packaging and publishing.","title":"setuptoolsOptional "},{"location":"typescript/pdk_projen/API/#venvoptional","text":"public readonly venv : boolean ; Type: boolean Default: true Use venv to manage a virtual environment for installing dependencies inside.","title":"venvOptional "},{"location":"typescript/pdk_projen/API/#venvoptionsoptional","text":"public readonly venvOptions : VenvOptions ; Type: projen.python.VenvOptions Default: defaults Venv options.","title":"venvOptionsOptional "},{"location":"typescript/pdk_projen/API/#buildcommandoptional","text":"public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"buildCommandOptional "},{"location":"typescript/pdk_projen/API/#cdkoutoptional","text":"public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"typescript/pdk_projen/API/#contextoptional","text":"public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"typescript/pdk_projen/API/#featureflagsoptional","text":"public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json.","title":"featureFlagsOptional "},{"location":"typescript/pdk_projen/API/#requireapprovaloptional","text":"public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"requireApprovalOptional "},{"location":"typescript/pdk_projen/API/#watchexcludesoptional","text":"public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch .","title":"watchExcludesOptional "},{"location":"typescript/pdk_projen/API/#watchincludesoptional","text":"public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch .","title":"watchIncludesOptional "},{"location":"typescript/pdk_projen/API/#cdkversionrequired","text":"public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdkVersionRequired "},{"location":"typescript/pdk_projen/API/#cdkassertoptional","text":"Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdkAssert~~Optional "},{"location":"typescript/pdk_projen/API/#cdkassertionsoptional","text":"public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdkAssertionsOptional "},{"location":"typescript/pdk_projen/API/#cdkdependenciesoptional","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires.","title":"~~cdkDependencies~~Optional "},{"location":"typescript/pdk_projen/API/#cdkdependenciesasdepsoptional","text":"Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdkDependenciesAsDeps~~Optional "},{"location":"typescript/pdk_projen/API/#cdktestdependenciesoptional","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing.","title":"~~cdkTestDependencies~~Optional "},{"location":"typescript/pdk_projen/API/#cdkversionpinningoptional","text":"public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdkVersionPinningOptional "},{"location":"typescript/pdk_projen/API/#constructsversionoptional","text":"public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructsVersionOptional "},{"location":"typescript/pdk_projen/API/#appentrypointoptional","text":"public readonly appEntrypoint : string ; Type: string Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"appEntrypointOptional "},{"location":"typescript/pdk_projen/API/#testdiroptional_1","text":"public readonly testdir : string ; Type: string Default: \"tests\" Python sources directory.","title":"testdirOptional "},{"location":"typescript/pdk_projen/API/#pdkpipelinetsprojectoptions","text":"Configuration options for the PDKPipelineTsProject.","title":"PDKPipelineTsProjectOptions "},{"location":"typescript/pdk_projen/API/#initializer_2","text":"import { pdk_projen } from 'aws-prototyping-sdk' const pDKPipelineTsProjectOptions : pdk_projen.PDKPipelineTsProjectOptions = { ... }","title":"Initializer "},{"location":"typescript/pdk_projen/API/#properties_2","text":"Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveProjenUpgrades boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule string[] Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret string Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps any[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. appEntrypoint string The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). integrationTestAutoDiscover boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions.","title":"Properties "},{"location":"typescript/pdk_projen/API/#namerequired_2","text":"public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#loggingoptional_2","text":"public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"typescript/pdk_projen/API/#outdiroptional_2","text":"public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"typescript/pdk_projen/API/#parentoptional_2","text":"public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projencommandoptional_2","text":"public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptional_2","text":"public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptionsoptional_2","text":"public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"typescript/pdk_projen/API/#autoapproveoptionsoptional_2","text":"public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"typescript/pdk_projen/API/#automergeoptionsoptional_2","text":"public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"typescript/pdk_projen/API/#clobberoptional_2","text":"public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional_2","text":"public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional_2","text":"public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#githuboptionsoptional_2","text":"public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional_2","text":"public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#mergifyoptional_2","text":"Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"typescript/pdk_projen/API/#mergifyoptionsoptional_2","text":"Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"typescript/pdk_projen/API/#projecttypeoptional_2","text":"Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"typescript/pdk_projen/API/#projentokensecretoptional_2","text":"public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#readmeoptional_2","text":"public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"typescript/pdk_projen/API/#staleoptional_2","text":"public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"typescript/pdk_projen/API/#staleoptionsoptional_2","text":"public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional_2","text":"public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#allowlibrarydependenciesoptional_1","text":"public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allowLibraryDependenciesOptional "},{"location":"typescript/pdk_projen/API/#authoremailoptional_1","text":"public readonly authorEmail : string ; Type: string Author's e-mail.","title":"authorEmailOptional "},{"location":"typescript/pdk_projen/API/#authornameoptional_1","text":"public readonly authorName : string ; Type: string Author's name.","title":"authorNameOptional "},{"location":"typescript/pdk_projen/API/#authororganizationoptional_1","text":"public readonly authorOrganization : boolean ; Type: boolean Author's Organization.","title":"authorOrganizationOptional "},{"location":"typescript/pdk_projen/API/#authorurloptional_1","text":"public readonly authorUrl : string ; Type: string Author's URL / Website.","title":"authorUrlOptional "},{"location":"typescript/pdk_projen/API/#autodetectbinoptional_1","text":"public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"autoDetectBinOptional "},{"location":"typescript/pdk_projen/API/#binoptional_1","text":"public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"typescript/pdk_projen/API/#bugsemailoptional_1","text":"public readonly bugsEmail : string ; Type: string The email address to which issues should be reported.","title":"bugsEmailOptional "},{"location":"typescript/pdk_projen/API/#bugsurloptional_1","text":"public readonly bugsUrl : string ; Type: string The url to your project's issue tracker.","title":"bugsUrlOptional "},{"location":"typescript/pdk_projen/API/#bundleddepsoptional_1","text":"public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundledDepsOptional "},{"location":"typescript/pdk_projen/API/#codeartifactoptionsoptional_1","text":"public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"codeArtifactOptionsOptional "},{"location":"typescript/pdk_projen/API/#depsoptional_2","text":"public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"typescript/pdk_projen/API/#descriptionoptional_2","text":"public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"typescript/pdk_projen/API/#devdepsoptional_2","text":"public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"devDepsOptional "},{"location":"typescript/pdk_projen/API/#entrypointoptional_1","text":"public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"typescript/pdk_projen/API/#homepageoptional_2","text":"public readonly homepage : string ; Type: string Package's Homepage / Website.","title":"homepageOptional "},{"location":"typescript/pdk_projen/API/#keywordsoptional_1","text":"public readonly keywords : string []; Type: string[] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"typescript/pdk_projen/API/#licenseoptional_2","text":"public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"typescript/pdk_projen/API/#licensedoptional_1","text":"public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"typescript/pdk_projen/API/#maxnodeversionoptional_1","text":"public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive).","title":"maxNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#minnodeversionoptional_1","text":"public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"minNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#npmaccessoptional_1","text":"public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npmAccessOptional "},{"location":"typescript/pdk_projen/API/#npmregistryoptional_1","text":"Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npmRegistry~~Optional "},{"location":"typescript/pdk_projen/API/#npmregistryurloptional_1","text":"public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npmRegistryUrlOptional "},{"location":"typescript/pdk_projen/API/#npmtokensecretoptional_1","text":"public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npmTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#packagemanageroptional_1","text":"public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"packageManagerOptional "},{"location":"typescript/pdk_projen/API/#packagenameoptional_1","text":"public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json.","title":"packageNameOptional "},{"location":"typescript/pdk_projen/API/#peerdependencyoptionsoptional_1","text":"public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peerDependencyOptionsOptional "},{"location":"typescript/pdk_projen/API/#peerdepsoptional_1","text":"public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peerDepsOptional "},{"location":"typescript/pdk_projen/API/#repositoryoptional_1","text":"public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"typescript/pdk_projen/API/#repositorydirectoryoptional_1","text":"public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repositoryDirectoryOptional "},{"location":"typescript/pdk_projen/API/#scriptsoptional_1","text":"public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"typescript/pdk_projen/API/#stabilityoptional_1","text":"public readonly stability : string ; Type: string Package's Stability.","title":"stabilityOptional "},{"location":"typescript/pdk_projen/API/#jsiireleaseversionoptional_1","text":"public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsiiReleaseVersionOptional "},{"location":"typescript/pdk_projen/API/#majorversionoptional_1","text":"public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"majorVersionOptional "},{"location":"typescript/pdk_projen/API/#npmdisttagoptional_1","text":"public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npmDistTagOptional "},{"location":"typescript/pdk_projen/API/#postbuildstepsoptional_1","text":"public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow.","title":"postBuildStepsOptional "},{"location":"typescript/pdk_projen/API/#prereleaseoptional_1","text":"public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"typescript/pdk_projen/API/#publishdryrunoptional_1","text":"public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publishDryRunOptional "},{"location":"typescript/pdk_projen/API/#publishtasksoptional_1","text":"public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publishTasksOptional "},{"location":"typescript/pdk_projen/API/#releasebranchesoptional_1","text":"public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"releaseBranchesOptional "},{"location":"typescript/pdk_projen/API/#releaseeverycommitoptional_1","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~releaseEveryCommit~~Optional "},{"location":"typescript/pdk_projen/API/#releasefailureissueoptional_1","text":"public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task.","title":"releaseFailureIssueOptional "},{"location":"typescript/pdk_projen/API/#releasefailureissuelabeloptional_1","text":"public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"releaseFailureIssueLabelOptional "},{"location":"typescript/pdk_projen/API/#releasescheduleoptional_1","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~releaseSchedule~~Optional "},{"location":"typescript/pdk_projen/API/#releasetagprefixoptional_1","text":"public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"releaseTagPrefixOptional "},{"location":"typescript/pdk_projen/API/#releasetriggeroptional_1","text":"public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"releaseTriggerOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflownameoptional_1","text":"public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow.","title":"releaseWorkflowNameOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflowsetupstepsoptional_1","text":"public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container.","title":"releaseWorkflowSetupStepsOptional "},{"location":"typescript/pdk_projen/API/#versionrcoptionsoptional_1","text":"public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrcOptionsOptional "},{"location":"typescript/pdk_projen/API/#workflowcontainerimageoptional_1","text":"public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows.","title":"workflowContainerImageOptional "},{"location":"typescript/pdk_projen/API/#workflowrunsonoptional_1","text":"public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflowRunsOnOptional "},{"location":"typescript/pdk_projen/API/#defaultreleasebranchrequired_1","text":"public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch.","title":"defaultReleaseBranchRequired "},{"location":"typescript/pdk_projen/API/#artifactsdirectoryoptional_1","text":"public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts.","title":"artifactsDirectoryOptional "},{"location":"typescript/pdk_projen/API/#autoapproveprojenupgradesoptional_1","text":"public readonly autoApproveProjenUpgrades : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveProjenUpgradesOptional "},{"location":"typescript/pdk_projen/API/#autoapproveupgradesoptional_1","text":"public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveUpgradesOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowoptional_1","text":"public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"buildWorkflowOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowtriggersoptional_1","text":"public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"buildWorkflowTriggersOptional "},{"location":"typescript/pdk_projen/API/#bundleroptionsoptional_1","text":"public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundlerOptionsOptional "},{"location":"typescript/pdk_projen/API/#codecovoptional_1","text":"public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"codeCovOptional "},{"location":"typescript/pdk_projen/API/#codecovtokensecretoptional_1","text":"public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"codeCovTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#copyrightowneroptional_1","text":"public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyrightOwnerOptional "},{"location":"typescript/pdk_projen/API/#copyrightperiodoptional_1","text":"public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file.","title":"copyrightPeriodOptional "},{"location":"typescript/pdk_projen/API/#dependabotoptional_1","text":"public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"typescript/pdk_projen/API/#dependabotoptionsoptional_1","text":"public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabotOptionsOptional "},{"location":"typescript/pdk_projen/API/#depsupgradeoptional_1","text":"public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"depsUpgradeOptional "},{"location":"typescript/pdk_projen/API/#depsupgradeoptionsoptional_1","text":"public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"depsUpgradeOptionsOptional "},{"location":"typescript/pdk_projen/API/#gitignoreoptional_1","text":"public readonly gitignore : string []; Type: string[] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"typescript/pdk_projen/API/#jestoptional_1","text":"public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"typescript/pdk_projen/API/#jestoptionsoptional_1","text":"public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jestOptionsOptional "},{"location":"typescript/pdk_projen/API/#mutablebuildoptional_1","text":"public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutableBuildOptional "},{"location":"typescript/pdk_projen/API/#npmignoreoptional_1","text":"Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"typescript/pdk_projen/API/#npmignoreenabledoptional_1","text":"public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignoreEnabledOptional "},{"location":"typescript/pdk_projen/API/#packageoptional_1","text":"public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"typescript/pdk_projen/API/#prettieroptional_1","text":"public readonly prettier : boolean ; Type: boolean Default: false Setup prettier.","title":"prettierOptional "},{"location":"typescript/pdk_projen/API/#prettieroptionsoptional_1","text":"public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettierOptionsOptional "},{"location":"typescript/pdk_projen/API/#projendevdependencyoptional_1","text":"public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projenDevDependencyOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsoptional_1","text":"public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrcJsOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsoptionsoptional_1","text":"public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrcJsOptionsOptional "},{"location":"typescript/pdk_projen/API/#projenupgradeautomergeoptional_1","text":"Deprecated: use autoApproveProjenUpgrades . public readonly projenUpgradeAutoMerge : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projenUpgradeAutoMerge~~Optional "},{"location":"typescript/pdk_projen/API/#projenupgradescheduleoptional_1","text":"public readonly projenUpgradeSchedule : string []; Type: string[] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projenUpgradeScheduleOptional "},{"location":"typescript/pdk_projen/API/#projenupgradesecretoptional_1","text":"Deprecated: use githubTokenSecret instead. public readonly projenUpgradeSecret : string ; Type: string Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projenUpgradeSecret~~Optional "},{"location":"typescript/pdk_projen/API/#projenversionoptional_1","text":"public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install.","title":"projenVersionOptional "},{"location":"typescript/pdk_projen/API/#pullrequesttemplateoptional_1","text":"public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template.","title":"pullRequestTemplateOptional "},{"location":"typescript/pdk_projen/API/#pullrequesttemplatecontentsoptional_1","text":"public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template.","title":"pullRequestTemplateContentsOptional "},{"location":"typescript/pdk_projen/API/#releaseoptional_1","text":"public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"typescript/pdk_projen/API/#releasetonpmoptional_1","text":"public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced.","title":"releaseToNpmOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflowoptional_1","text":"Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~releaseWorkflow~~Optional "},{"location":"typescript/pdk_projen/API/#workflowbootstrapstepsoptional_1","text":"public readonly workflowBootstrapSteps : any []; Type: any[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflowBootstrapStepsOptional "},{"location":"typescript/pdk_projen/API/#workflowgitidentityoptional_1","text":"public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflowGitIdentityOptional "},{"location":"typescript/pdk_projen/API/#workflownodeversionoptional_1","text":"public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflowNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#disabletsconfigoptional_1","text":"public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disableTsconfigOptional "},{"location":"typescript/pdk_projen/API/#docgenoptional_1","text":"public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"typescript/pdk_projen/API/#docsdirectoryoptional_1","text":"public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory.","title":"docsDirectoryOptional "},{"location":"typescript/pdk_projen/API/#entrypointtypesoptional_1","text":"public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypointTypesOptional "},{"location":"typescript/pdk_projen/API/#eslintoptional_1","text":"public readonly eslint : boolean ; Type: boolean Default: true Setup eslint.","title":"eslintOptional "},{"location":"typescript/pdk_projen/API/#eslintoptionsoptional_1","text":"public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslintOptionsOptional "},{"location":"typescript/pdk_projen/API/#libdiroptional_1","text":"public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"typescript/pdk_projen/API/#projenrctsoptional_1","text":"public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrcTsOptional "},{"location":"typescript/pdk_projen/API/#projenrctsoptionsoptional_1","text":"public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrcTsOptionsOptional "},{"location":"typescript/pdk_projen/API/#samplecodeoptional_1","text":"public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sampleCodeOptional "},{"location":"typescript/pdk_projen/API/#srcdiroptional_1","text":"public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"typescript/pdk_projen/API/#testdiroptional_2","text":"public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"typescript/pdk_projen/API/#tsconfigoptional_1","text":"public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"typescript/pdk_projen/API/#tsconfigdevoptional_1","text":"public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfigDevOptional "},{"location":"typescript/pdk_projen/API/#tsconfigdevfileoptional_1","text":"public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfigDevFileOptional "},{"location":"typescript/pdk_projen/API/#typescriptversionoptional_1","text":"public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescriptVersionOptional "},{"location":"typescript/pdk_projen/API/#buildcommandoptional_1","text":"public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment.","title":"buildCommandOptional "},{"location":"typescript/pdk_projen/API/#cdkoutoptional_1","text":"public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory.","title":"cdkoutOptional "},{"location":"typescript/pdk_projen/API/#contextoptional_1","text":"public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json .","title":"contextOptional "},{"location":"typescript/pdk_projen/API/#featureflagsoptional_1","text":"public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json.","title":"featureFlagsOptional "},{"location":"typescript/pdk_projen/API/#requireapprovaloptional_1","text":"public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.","title":"requireApprovalOptional "},{"location":"typescript/pdk_projen/API/#watchexcludesoptional_1","text":"public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch .","title":"watchExcludesOptional "},{"location":"typescript/pdk_projen/API/#watchincludesoptional_1","text":"public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch .","title":"watchIncludesOptional "},{"location":"typescript/pdk_projen/API/#cdkversionrequired_1","text":"public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on.","title":"cdkVersionRequired "},{"location":"typescript/pdk_projen/API/#cdkassertoptional_1","text":"Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library?","title":"~~cdkAssert~~Optional "},{"location":"typescript/pdk_projen/API/#cdkassertionsoptional_1","text":"public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib'","title":"cdkAssertionsOptional "},{"location":"typescript/pdk_projen/API/#cdkdependenciesoptional_1","text":"Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires.","title":"~~cdkDependencies~~Optional "},{"location":"typescript/pdk_projen/API/#cdkdependenciesasdepsoptional_1","text":"Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects","title":"~~cdkDependenciesAsDeps~~Optional "},{"location":"typescript/pdk_projen/API/#cdktestdependenciesoptional_1","text":"Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing.","title":"~~cdkTestDependencies~~Optional "},{"location":"typescript/pdk_projen/API/#cdkversionpinningoptional_1","text":"public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes.","title":"cdkVersionPinningOptional "},{"location":"typescript/pdk_projen/API/#constructsversionoptional_1","text":"public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on.","title":"constructsVersionOptional "},{"location":"typescript/pdk_projen/API/#appentrypointoptional_1","text":"public readonly appEntrypoint : string ; Type: string Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default).","title":"appEntrypointOptional "},{"location":"typescript/pdk_projen/API/#integrationtestautodiscoveroptional","text":"public readonly integrationTestAutoDiscover : boolean ; Type: boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory.","title":"integrationTestAutoDiscoverOptional "},{"location":"typescript/pdk_projen/API/#lambdaautodiscoveroptional","text":"public readonly lambdaAutoDiscover : boolean ; Type: boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project.","title":"lambdaAutoDiscoverOptional "},{"location":"typescript/pdk_projen/API/#lambdaoptionsoptional","text":"public readonly lambdaOptions : LambdaFunctionCommonOptions ; Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions.","title":"lambdaOptionsOptional "},{"location":"typescript/pdk_projen/API/#targetdependency","text":"Represents an NX Target Dependency.","title":"TargetDependency "},{"location":"typescript/pdk_projen/API/#initializer_3","text":"import { pdk_projen } from 'aws-prototyping-sdk' const targetDependency : pdk_projen.TargetDependency = { ... }","title":"Initializer "},{"location":"typescript/pdk_projen/API/#properties_3","text":"Name Type Description projects TargetDependencyProject Target dependencies. target string Projen target i.e: build, test, etc.","title":"Properties "},{"location":"typescript/pdk_projen/API/#projectsrequired","text":"public readonly projects : TargetDependencyProject ; Type: TargetDependencyProject Target dependencies.","title":"projectsRequired "},{"location":"typescript/pdk_projen/API/#targetrequired","text":"public readonly target : string ; Type: string Projen target i.e: build, test, etc.","title":"targetRequired "},{"location":"typescript/pdk_projen/API/#classes","text":"","title":"Classes "},{"location":"typescript/pdk_projen/API/#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"typescript/pdk_projen/API/#initializers","text":"import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . NxMonorepoProject ( options : NxMonorepoProjectOptions ) Name Type Description options NxMonorepoProjectOptions No description.","title":"Initializers "},{"location":"typescript/pdk_projen/API/#optionsrequired","text":"Type: NxMonorepoProjectOptions","title":"optionsRequired "},{"location":"typescript/pdk_projen/API/#methods","text":"Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's.","title":"Methods "},{"location":"typescript/pdk_projen/API/#addexcludefromcleanup","text":"public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"addExcludeFromCleanup "},{"location":"typescript/pdk_projen/API/#globsrequired","text":"Type: string The glob patterns to match.","title":"globsRequired "},{"location":"typescript/pdk_projen/API/#addgitignore","text":"public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern.","title":"addGitIgnore "},{"location":"typescript/pdk_projen/API/#patternrequired","text":"Type: string The glob pattern to ignore.","title":"patternRequired "},{"location":"typescript/pdk_projen/API/#addpackageignore","text":"public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"addPackageIgnore "},{"location":"typescript/pdk_projen/API/#patternrequired_1","text":"Type: string","title":"patternRequired "},{"location":"typescript/pdk_projen/API/#addtask","text":"public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name.","title":"addTask "},{"location":"typescript/pdk_projen/API/#namerequired_3","text":"Type: string The task name to add.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#propsoptional","text":"Type: projen.TaskOptions Task properties.","title":"propsOptional "},{"location":"typescript/pdk_projen/API/#addtip","text":"public addTip ( message : string ) : void Prints a \"tip\" message during synthesis.","title":"~~addTip~~ "},{"location":"typescript/pdk_projen/API/#messagerequired","text":"Type: string The message.","title":"messageRequired "},{"location":"typescript/pdk_projen/API/#annotategenerated","text":"public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotateGenerated "},{"location":"typescript/pdk_projen/API/#globrequired","text":"Type: string the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"typescript/pdk_projen/API/#postsynthesize","text":"public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed.","title":"postSynthesize "},{"location":"typescript/pdk_projen/API/#presynthesize","text":"public preSynthesize () : void Called before all components are synthesized.","title":"preSynthesize "},{"location":"typescript/pdk_projen/API/#removetask","text":"public removeTask ( name : string ) : Task Removes a task from a project.","title":"removeTask "},{"location":"typescript/pdk_projen/API/#namerequired_4","text":"Type: string The name of the task to remove.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#runtaskcommand","text":"public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK .","title":"runTaskCommand "},{"location":"typescript/pdk_projen/API/#taskrequired","text":"Type: projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"typescript/pdk_projen/API/#synth","text":"public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"typescript/pdk_projen/API/#tryfindfile","text":"public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects.","title":"tryFindFile "},{"location":"typescript/pdk_projen/API/#filepathrequired","text":"Type: string The file path. If this path is relative, it will be resolved from the root of this project.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindjsonfile","text":"public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name.","title":"~~tryFindJsonFile~~ "},{"location":"typescript/pdk_projen/API/#filepathrequired_1","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindobjectfile","text":"public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"tryFindObjectFile "},{"location":"typescript/pdk_projen/API/#filepathrequired_2","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#addbins","text":"public addBins ( bins : {[ key : string ] : string }) : void","title":"addBins "},{"location":"typescript/pdk_projen/API/#binsrequired","text":"Type: {[ key: string ]: string}","title":"binsRequired "},{"location":"typescript/pdk_projen/API/#addbundleddeps","text":"public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json .","title":"addBundledDeps "},{"location":"typescript/pdk_projen/API/#depsrequired","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addcompilecommand","text":"public addCompileCommand ( commands : string ) : void DEPRECATED.","title":"~~addCompileCommand~~ "},{"location":"typescript/pdk_projen/API/#commandsrequired","text":"Type: string","title":"commandsRequired "},{"location":"typescript/pdk_projen/API/#adddeps","text":"public addDeps ( deps : string ) : void Defines normal dependencies.","title":"addDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_1","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#adddevdeps","text":"public addDevDeps ( deps : string ) : void Defines development/test dependencies.","title":"addDevDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_2","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addfields","text":"public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json .","title":"addFields "},{"location":"typescript/pdk_projen/API/#fieldsrequired","text":"Type: {[ key: string ]: any} The fields to set.","title":"fieldsRequired "},{"location":"typescript/pdk_projen/API/#addkeywords","text":"public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated).","title":"addKeywords "},{"location":"typescript/pdk_projen/API/#keywordsrequired","text":"Type: string The keywords to add.","title":"keywordsRequired "},{"location":"typescript/pdk_projen/API/#addpeerdeps","text":"public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers.","title":"addPeerDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_3","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addtestcommand","text":"public addTestCommand ( commands : string ) : void DEPRECATED.","title":"~~addTestCommand~~ "},{"location":"typescript/pdk_projen/API/#commandsrequired_1","text":"Type: string","title":"commandsRequired "},{"location":"typescript/pdk_projen/API/#hasscript","text":"public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined.","title":"hasScript "},{"location":"typescript/pdk_projen/API/#namerequired_5","text":"Type: string The name of the script.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#removescript","text":"public removeScript ( name : string ) : void Removes the npm script (always successful).","title":"removeScript "},{"location":"typescript/pdk_projen/API/#namerequired_6","text":"Type: string The name of the script.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#renderworkflowsetup","text":"public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow.","title":"renderWorkflowSetup "},{"location":"typescript/pdk_projen/API/#optionsoptional","text":"Type: projen.javascript.RenderWorkflowSetupOptions Options.","title":"optionsOptional "},{"location":"typescript/pdk_projen/API/#setscript","text":"public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script.","title":"setScript "},{"location":"typescript/pdk_projen/API/#namerequired_7","text":"Type: string The script name.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#commandrequired","text":"Type: string The command to execute.","title":"commandRequired "},{"location":"typescript/pdk_projen/API/#addimplicitdependency","text":"public addImplicitDependency ( dependent : Project , dependee : Project ) : void Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example.","title":"addImplicitDependency "},{"location":"typescript/pdk_projen/API/#dependentrequired","text":"Type: projen.Project project you want to have the dependency.","title":"dependentRequired "},{"location":"typescript/pdk_projen/API/#dependeerequired","text":"Type: projen.Project project you wish to depend on.","title":"dependeeRequired "},{"location":"typescript/pdk_projen/API/#properties_4","text":"Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Automatic PR merges. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description.","title":"Properties "},{"location":"typescript/pdk_projen/API/#buildtaskrequired","text":"public readonly buildTask : Task ; Type: projen.Task","title":"buildTaskRequired "},{"location":"typescript/pdk_projen/API/#compiletaskrequired","text":"public readonly compileTask : Task ; Type: projen.Task","title":"compileTaskRequired "},{"location":"typescript/pdk_projen/API/#componentsrequired","text":"public readonly components : Component []; Type: projen.Component[] Returns all the components within this project.","title":"componentsRequired "},{"location":"typescript/pdk_projen/API/#depsrequired_4","text":"public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#ejectedrequired","text":"public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"typescript/pdk_projen/API/#filesrequired","text":"public readonly files : FileBase []; Type: projen.FileBase[] All files in this project.","title":"filesRequired "},{"location":"typescript/pdk_projen/API/#gitattributesrequired","text":"public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"typescript/pdk_projen/API/#gitignorerequired","text":"public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"typescript/pdk_projen/API/#loggerrequired","text":"public readonly logger : Logger ; Type: projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"typescript/pdk_projen/API/#namerequired_8","text":"public readonly name : string ; Type: string Project name.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#outdirrequired","text":"public readonly outdir : string ; Type: string Absolute output directory of this project.","title":"outdirRequired "},{"location":"typescript/pdk_projen/API/#packagetaskrequired","text":"public readonly packageTask : Task ; Type: projen.Task","title":"packageTaskRequired "},{"location":"typescript/pdk_projen/API/#postcompiletaskrequired","text":"public readonly postCompileTask : Task ; Type: projen.Task","title":"postCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#precompiletaskrequired","text":"public readonly preCompileTask : Task ; Type: projen.Task","title":"preCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#projectbuildrequired","text":"public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project.","title":"projectBuildRequired "},{"location":"typescript/pdk_projen/API/#projencommandrequired","text":"public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI.","title":"projenCommandRequired "},{"location":"typescript/pdk_projen/API/#rootrequired","text":"public readonly root : Project ; Type: projen.Project The root project.","title":"rootRequired "},{"location":"typescript/pdk_projen/API/#tasksrequired","text":"public readonly tasks : Tasks ; Type: projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"typescript/pdk_projen/API/#testtaskrequired","text":"public readonly testTask : Task ; Type: projen.Task","title":"testTaskRequired "},{"location":"typescript/pdk_projen/API/#defaulttaskoptional","text":"public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"defaultTaskOptional "},{"location":"typescript/pdk_projen/API/#initprojectoptional","text":"public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"initProjectOptional "},{"location":"typescript/pdk_projen/API/#parentoptional_3","text":"public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projecttyperequired","text":"public readonly projectType : ProjectType ; Type: projen.ProjectType","title":"projectTypeRequired "},{"location":"typescript/pdk_projen/API/#autoapproveoptional","text":"public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project.","title":"autoApproveOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional_3","text":"public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional_3","text":"public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional_3","text":"public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional_3","text":"public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#allowlibrarydependenciesrequired","text":"Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean","title":"~~allowLibraryDependencies~~Required "},{"location":"typescript/pdk_projen/API/#artifactsdirectoryrequired","text":"public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg .","title":"artifactsDirectoryRequired "},{"location":"typescript/pdk_projen/API/#artifactsjavascriptdirectoryrequired","text":"public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ).","title":"artifactsJavascriptDirectoryRequired "},{"location":"typescript/pdk_projen/API/#bundlerrequired","text":"public readonly bundler : Bundler ; Type: projen.javascript.Bundler","title":"bundlerRequired "},{"location":"typescript/pdk_projen/API/#entrypointrequired","text":"Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string","title":"~~entrypoint~~Required "},{"location":"typescript/pdk_projen/API/#manifestrequired","text":"Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any","title":"~~manifest~~Required "},{"location":"typescript/pdk_projen/API/#packagerequired","text":"public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package.","title":"packageRequired "},{"location":"typescript/pdk_projen/API/#packagemanagerrequired","text":"Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use.","title":"~~packageManager~~Required "},{"location":"typescript/pdk_projen/API/#runscriptcommandrequired","text":"public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager).","title":"runScriptCommandRequired "},{"location":"typescript/pdk_projen/API/#automergeoptional","text":"public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Automatic PR merges.","title":"autoMergeOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowoptional_2","text":"public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled.","title":"buildWorkflowOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowjobidoptional","text":"public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow.","title":"buildWorkflowJobIdOptional "},{"location":"typescript/pdk_projen/API/#jestoptional_2","text":"public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled).","title":"jestOptional "},{"location":"typescript/pdk_projen/API/#maxnodeversionoptional_2","text":"public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge.","title":"maxNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#minnodeversionoptional_2","text":"public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package.","title":"minNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#npmignoreoptional_2","text":"public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file.","title":"npmignoreOptional "},{"location":"typescript/pdk_projen/API/#prettieroptional_2","text":"public readonly prettier : Prettier ; Type: projen.javascript.Prettier","title":"prettierOptional "},{"location":"typescript/pdk_projen/API/#publisheroptional","text":"Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow.","title":"~~publisher~~Optional "},{"location":"typescript/pdk_projen/API/#releaseoptional_2","text":"public readonly release : Release ; Type: projen.release.Release Release management.","title":"releaseOptional "},{"location":"typescript/pdk_projen/API/#upgradeworkflowoptional","text":"public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow.","title":"upgradeWorkflowOptional "},{"location":"typescript/pdk_projen/API/#docsdirectoryrequired","text":"public readonly docsDirectory : string ; Type: string","title":"docsDirectoryRequired "},{"location":"typescript/pdk_projen/API/#libdirrequired","text":"public readonly libdir : string ; Type: string The directory in which compiled .js files reside.","title":"libdirRequired "},{"location":"typescript/pdk_projen/API/#srcdirrequired","text":"public readonly srcdir : string ; Type: string The directory in which the .ts sources reside.","title":"srcdirRequired "},{"location":"typescript/pdk_projen/API/#testdirrequired","text":"public readonly testdir : string ; Type: string The directory in which tests reside.","title":"testdirRequired "},{"location":"typescript/pdk_projen/API/#tsconfigdevrequired","text":"public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen).","title":"tsconfigDevRequired "},{"location":"typescript/pdk_projen/API/#watchtaskrequired","text":"public readonly watchTask : Task ; Type: projen.Task The \"watch\" task.","title":"watchTaskRequired "},{"location":"typescript/pdk_projen/API/#docgenoptional_2","text":"public readonly docgen : boolean ; Type: boolean","title":"docgenOptional "},{"location":"typescript/pdk_projen/API/#eslintoptional_2","text":"public readonly eslint : Eslint ; Type: projen.javascript.Eslint","title":"eslintOptional "},{"location":"typescript/pdk_projen/API/#tsconfigoptional_2","text":"public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig","title":"tsconfigOptional "},{"location":"typescript/pdk_projen/API/#tsconfigeslintoptional","text":"public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig","title":"tsconfigEslintOptional "},{"location":"typescript/pdk_projen/API/#constants","text":"Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"typescript/pdk_projen/API/#default_taskrequired","text":"public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"typescript/pdk_projen/API/#pdkpipelinepyproject","text":"Synthesizes a Python Project with a CI/CD pipeline.","title":"PdkPipelinePyProject "},{"location":"typescript/pdk_projen/API/#initializers_1","text":"import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . PdkPipelinePyProject ( options : PDKPipelinePyProjectOptions ) Name Type Description options PDKPipelinePyProjectOptions No description.","title":"Initializers "},{"location":"typescript/pdk_projen/API/#optionsrequired_1","text":"Type: PDKPipelinePyProjectOptions","title":"optionsRequired "},{"location":"typescript/pdk_projen/API/#methods_1","text":"Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency.","title":"Methods "},{"location":"typescript/pdk_projen/API/#addexcludefromcleanup_1","text":"public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"addExcludeFromCleanup "},{"location":"typescript/pdk_projen/API/#globsrequired_1","text":"Type: string The glob patterns to match.","title":"globsRequired "},{"location":"typescript/pdk_projen/API/#addgitignore_1","text":"public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern.","title":"addGitIgnore "},{"location":"typescript/pdk_projen/API/#patternrequired_2","text":"Type: string The glob pattern to ignore.","title":"patternRequired "},{"location":"typescript/pdk_projen/API/#addpackageignore_1","text":"public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"addPackageIgnore "},{"location":"typescript/pdk_projen/API/#_patternrequired","text":"Type: string The glob pattern to exclude.","title":"_patternRequired "},{"location":"typescript/pdk_projen/API/#addtask_1","text":"public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name.","title":"addTask "},{"location":"typescript/pdk_projen/API/#namerequired_9","text":"Type: string The task name to add.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#propsoptional_1","text":"Type: projen.TaskOptions Task properties.","title":"propsOptional "},{"location":"typescript/pdk_projen/API/#addtip_1","text":"public addTip ( message : string ) : void Prints a \"tip\" message during synthesis.","title":"~~addTip~~ "},{"location":"typescript/pdk_projen/API/#messagerequired_1","text":"Type: string The message.","title":"messageRequired "},{"location":"typescript/pdk_projen/API/#annotategenerated_1","text":"public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotateGenerated "},{"location":"typescript/pdk_projen/API/#globrequired_1","text":"Type: string the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"typescript/pdk_projen/API/#postsynthesize_1","text":"public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed.","title":"postSynthesize "},{"location":"typescript/pdk_projen/API/#presynthesize_1","text":"public preSynthesize () : void Called before all components are synthesized.","title":"preSynthesize "},{"location":"typescript/pdk_projen/API/#removetask_1","text":"public removeTask ( name : string ) : Task Removes a task from a project.","title":"removeTask "},{"location":"typescript/pdk_projen/API/#namerequired_10","text":"Type: string The name of the task to remove.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#runtaskcommand_1","text":"public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task>","title":"runTaskCommand "},{"location":"typescript/pdk_projen/API/#taskrequired_1","text":"Type: projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"typescript/pdk_projen/API/#synth_1","text":"public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"typescript/pdk_projen/API/#tryfindfile_1","text":"public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects.","title":"tryFindFile "},{"location":"typescript/pdk_projen/API/#filepathrequired_3","text":"Type: string The file path. If this path is relative, it will be resolved from the root of this project.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindjsonfile_1","text":"public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name.","title":"~~tryFindJsonFile~~ "},{"location":"typescript/pdk_projen/API/#filepathrequired_4","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindobjectfile_1","text":"public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"tryFindObjectFile "},{"location":"typescript/pdk_projen/API/#filepathrequired_5","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#adddependency","text":"public addDependency ( spec : string ) : void Adds a runtime dependency.","title":"addDependency "},{"location":"typescript/pdk_projen/API/#specrequired","text":"Type: string Format <module>@<semver> .","title":"specRequired "},{"location":"typescript/pdk_projen/API/#adddevdependency","text":"public addDevDependency ( spec : string ) : void Adds a dev dependency.","title":"addDevDependency "},{"location":"typescript/pdk_projen/API/#specrequired_1","text":"Type: string Format <module>@<semver> .","title":"specRequired "},{"location":"typescript/pdk_projen/API/#properties_5","text":"Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. depsManager projen.python.IPythonDeps API for managing dependencies. envManager projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName string Python module name (the project name, with any hyphens or periods replaced with underscores). version string Version of the package for distribution (should follow semver). packagingManager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. appEntrypoint string The CDK app entrypoint. cdkConfig projen.awscdk.CdkConfig cdk.json configuration. cdkDeps projen.awscdk.AwsCdkDeps No description. cdkTasks projen.awscdk.CdkTasks Common CDK tasks. cdkVersion string The CDK version this app is using. testdir string The directory in which the python tests reside.","title":"Properties "},{"location":"typescript/pdk_projen/API/#buildtaskrequired_1","text":"public readonly buildTask : Task ; Type: projen.Task","title":"buildTaskRequired "},{"location":"typescript/pdk_projen/API/#compiletaskrequired_1","text":"public readonly compileTask : Task ; Type: projen.Task","title":"compileTaskRequired "},{"location":"typescript/pdk_projen/API/#componentsrequired_1","text":"public readonly components : Component []; Type: projen.Component[] Returns all the components within this project.","title":"componentsRequired "},{"location":"typescript/pdk_projen/API/#depsrequired_5","text":"public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#ejectedrequired_1","text":"public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"typescript/pdk_projen/API/#filesrequired_1","text":"public readonly files : FileBase []; Type: projen.FileBase[] All files in this project.","title":"filesRequired "},{"location":"typescript/pdk_projen/API/#gitattributesrequired_1","text":"public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"typescript/pdk_projen/API/#gitignorerequired_1","text":"public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"typescript/pdk_projen/API/#loggerrequired_1","text":"public readonly logger : Logger ; Type: projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"typescript/pdk_projen/API/#namerequired_11","text":"public readonly name : string ; Type: string Project name.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#outdirrequired_1","text":"public readonly outdir : string ; Type: string Absolute output directory of this project.","title":"outdirRequired "},{"location":"typescript/pdk_projen/API/#packagetaskrequired_1","text":"public readonly packageTask : Task ; Type: projen.Task","title":"packageTaskRequired "},{"location":"typescript/pdk_projen/API/#postcompiletaskrequired_1","text":"public readonly postCompileTask : Task ; Type: projen.Task","title":"postCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#precompiletaskrequired_1","text":"public readonly preCompileTask : Task ; Type: projen.Task","title":"preCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#projectbuildrequired_1","text":"public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project.","title":"projectBuildRequired "},{"location":"typescript/pdk_projen/API/#projencommandrequired_1","text":"public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI.","title":"projenCommandRequired "},{"location":"typescript/pdk_projen/API/#rootrequired_1","text":"public readonly root : Project ; Type: projen.Project The root project.","title":"rootRequired "},{"location":"typescript/pdk_projen/API/#tasksrequired_1","text":"public readonly tasks : Tasks ; Type: projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"typescript/pdk_projen/API/#testtaskrequired_1","text":"public readonly testTask : Task ; Type: projen.Task","title":"testTaskRequired "},{"location":"typescript/pdk_projen/API/#defaulttaskoptional_1","text":"public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"defaultTaskOptional "},{"location":"typescript/pdk_projen/API/#initprojectoptional_1","text":"public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"initProjectOptional "},{"location":"typescript/pdk_projen/API/#parentoptional_4","text":"public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projecttyperequired_1","text":"public readonly projectType : ProjectType ; Type: projen.ProjectType","title":"projectTypeRequired "},{"location":"typescript/pdk_projen/API/#autoapproveoptional_1","text":"public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project.","title":"autoApproveOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional_4","text":"public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional_4","text":"public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional_4","text":"public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional_4","text":"public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#depsmanagerrequired","text":"public readonly depsManager : IPythonDeps ; Type: projen.python.IPythonDeps API for managing dependencies.","title":"depsManagerRequired "},{"location":"typescript/pdk_projen/API/#envmanagerrequired","text":"public readonly envManager : IPythonEnv ; Type: projen.python.IPythonEnv API for mangaging the Python runtime environment.","title":"envManagerRequired "},{"location":"typescript/pdk_projen/API/#modulenamerequired_1","text":"public readonly module Name : string ; Type: string Python module name (the project name, with any hyphens or periods replaced with underscores).","title":"moduleNameRequired "},{"location":"typescript/pdk_projen/API/#versionrequired_1","text":"public readonly version : string ; Type: string Version of the package for distribution (should follow semver).","title":"versionRequired "},{"location":"typescript/pdk_projen/API/#packagingmanageroptional","text":"public readonly packagingManager : IPythonPackaging ; Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB.","title":"packagingManagerOptional "},{"location":"typescript/pdk_projen/API/#pytestoptional_1","text":"public readonly pytest : Pytest ; Type: projen.python.Pytest Pytest component.","title":"pytestOptional "},{"location":"typescript/pdk_projen/API/#appentrypointrequired","text":"public readonly appEntrypoint : string ; Type: string The CDK app entrypoint.","title":"appEntrypointRequired "},{"location":"typescript/pdk_projen/API/#cdkconfigrequired","text":"public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig cdk.json configuration.","title":"cdkConfigRequired "},{"location":"typescript/pdk_projen/API/#cdkdepsrequired","text":"public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps","title":"cdkDepsRequired "},{"location":"typescript/pdk_projen/API/#cdktasksrequired","text":"public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks Common CDK tasks.","title":"cdkTasksRequired "},{"location":"typescript/pdk_projen/API/#cdkversionrequired_2","text":"public readonly cdkVersion : string ; Type: string The CDK version this app is using.","title":"cdkVersionRequired "},{"location":"typescript/pdk_projen/API/#testdirrequired_1","text":"public readonly testdir : string ; Type: string The directory in which the python tests reside.","title":"testdirRequired "},{"location":"typescript/pdk_projen/API/#constants_1","text":"Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"typescript/pdk_projen/API/#default_taskrequired_1","text":"public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"typescript/pdk_projen/API/#pdkpipelinetsproject","text":"Synthesizes a Typescript Project with a CI/CD pipeline.","title":"PDKPipelineTsProject "},{"location":"typescript/pdk_projen/API/#initializers_2","text":"import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . PDKPipelineTsProject ( options : PDKPipelineTsProjectOptions ) Name Type Description options PDKPipelineTsProjectOptions No description.","title":"Initializers "},{"location":"typescript/pdk_projen/API/#optionsrequired_2","text":"Type: PDKPipelineTsProjectOptions","title":"optionsRequired "},{"location":"typescript/pdk_projen/API/#methods_2","text":"Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addCdkDependency Adds an AWS CDK module dependencies.","title":"Methods "},{"location":"typescript/pdk_projen/API/#addexcludefromcleanup_2","text":"public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"addExcludeFromCleanup "},{"location":"typescript/pdk_projen/API/#globsrequired_2","text":"Type: string The glob patterns to match.","title":"globsRequired "},{"location":"typescript/pdk_projen/API/#addgitignore_2","text":"public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern.","title":"addGitIgnore "},{"location":"typescript/pdk_projen/API/#patternrequired_3","text":"Type: string The glob pattern to ignore.","title":"patternRequired "},{"location":"typescript/pdk_projen/API/#addpackageignore_2","text":"public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"addPackageIgnore "},{"location":"typescript/pdk_projen/API/#patternrequired_4","text":"Type: string","title":"patternRequired "},{"location":"typescript/pdk_projen/API/#addtask_2","text":"public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name.","title":"addTask "},{"location":"typescript/pdk_projen/API/#namerequired_12","text":"Type: string The task name to add.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#propsoptional_2","text":"Type: projen.TaskOptions Task properties.","title":"propsOptional "},{"location":"typescript/pdk_projen/API/#addtip_2","text":"public addTip ( message : string ) : void Prints a \"tip\" message during synthesis.","title":"~~addTip~~ "},{"location":"typescript/pdk_projen/API/#messagerequired_2","text":"Type: string The message.","title":"messageRequired "},{"location":"typescript/pdk_projen/API/#annotategenerated_2","text":"public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotateGenerated "},{"location":"typescript/pdk_projen/API/#globrequired_2","text":"Type: string the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"typescript/pdk_projen/API/#postsynthesize_2","text":"public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed.","title":"postSynthesize "},{"location":"typescript/pdk_projen/API/#presynthesize_2","text":"public preSynthesize () : void Called before all components are synthesized.","title":"preSynthesize "},{"location":"typescript/pdk_projen/API/#removetask_2","text":"public removeTask ( name : string ) : Task Removes a task from a project.","title":"removeTask "},{"location":"typescript/pdk_projen/API/#namerequired_13","text":"Type: string The name of the task to remove.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#runtaskcommand_2","text":"public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK .","title":"runTaskCommand "},{"location":"typescript/pdk_projen/API/#taskrequired_2","text":"Type: projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"typescript/pdk_projen/API/#synth_2","text":"public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"typescript/pdk_projen/API/#tryfindfile_2","text":"public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects.","title":"tryFindFile "},{"location":"typescript/pdk_projen/API/#filepathrequired_6","text":"Type: string The file path. If this path is relative, it will be resolved from the root of this project.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindjsonfile_2","text":"public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name.","title":"~~tryFindJsonFile~~ "},{"location":"typescript/pdk_projen/API/#filepathrequired_7","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindobjectfile_2","text":"public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"tryFindObjectFile "},{"location":"typescript/pdk_projen/API/#filepathrequired_8","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#addbins_1","text":"public addBins ( bins : {[ key : string ] : string }) : void","title":"addBins "},{"location":"typescript/pdk_projen/API/#binsrequired_1","text":"Type: {[ key: string ]: string}","title":"binsRequired "},{"location":"typescript/pdk_projen/API/#addbundleddeps_1","text":"public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json .","title":"addBundledDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_6","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addcompilecommand_1","text":"public addCompileCommand ( commands : string ) : void DEPRECATED.","title":"~~addCompileCommand~~ "},{"location":"typescript/pdk_projen/API/#commandsrequired_2","text":"Type: string","title":"commandsRequired "},{"location":"typescript/pdk_projen/API/#adddeps_1","text":"public addDeps ( deps : string ) : void Defines normal dependencies.","title":"addDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_7","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#adddevdeps_1","text":"public addDevDeps ( deps : string ) : void Defines development/test dependencies.","title":"addDevDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_8","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addfields_1","text":"public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json .","title":"addFields "},{"location":"typescript/pdk_projen/API/#fieldsrequired_1","text":"Type: {[ key: string ]: any} The fields to set.","title":"fieldsRequired "},{"location":"typescript/pdk_projen/API/#addkeywords_1","text":"public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated).","title":"addKeywords "},{"location":"typescript/pdk_projen/API/#keywordsrequired_1","text":"Type: string The keywords to add.","title":"keywordsRequired "},{"location":"typescript/pdk_projen/API/#addpeerdeps_1","text":"public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers.","title":"addPeerDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_9","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addtestcommand_1","text":"public addTestCommand ( commands : string ) : void DEPRECATED.","title":"~~addTestCommand~~ "},{"location":"typescript/pdk_projen/API/#commandsrequired_3","text":"Type: string","title":"commandsRequired "},{"location":"typescript/pdk_projen/API/#hasscript_1","text":"public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined.","title":"hasScript "},{"location":"typescript/pdk_projen/API/#namerequired_14","text":"Type: string The name of the script.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#removescript_1","text":"public removeScript ( name : string ) : void Removes the npm script (always successful).","title":"removeScript "},{"location":"typescript/pdk_projen/API/#namerequired_15","text":"Type: string The name of the script.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#renderworkflowsetup_1","text":"public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow.","title":"renderWorkflowSetup "},{"location":"typescript/pdk_projen/API/#optionsoptional_1","text":"Type: projen.javascript.RenderWorkflowSetupOptions Options.","title":"optionsOptional "},{"location":"typescript/pdk_projen/API/#setscript_1","text":"public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script.","title":"setScript "},{"location":"typescript/pdk_projen/API/#namerequired_16","text":"Type: string The script name.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#commandrequired_1","text":"Type: string The command to execute.","title":"commandRequired "},{"location":"typescript/pdk_projen/API/#addcdkdependency","text":"public addCdkDependency ( module s : string ) : void Adds an AWS CDK module dependencies.","title":"addCdkDependency "},{"location":"typescript/pdk_projen/API/#modulesrequired","text":"Type: string The list of modules to depend on.","title":"modulesRequired "},{"location":"typescript/pdk_projen/API/#properties_6","text":"Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Automatic PR merges. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. appEntrypoint string The CDK app entrypoint. cdkConfig projen.awscdk.CdkConfig cdk.json configuration. cdkDeps projen.awscdk.AwsCdkDeps No description. cdkTasks projen.awscdk.CdkTasks Common CDK tasks. cdkVersion string The CDK version this app is using.","title":"Properties "},{"location":"typescript/pdk_projen/API/#buildtaskrequired_2","text":"public readonly buildTask : Task ; Type: projen.Task","title":"buildTaskRequired "},{"location":"typescript/pdk_projen/API/#compiletaskrequired_2","text":"public readonly compileTask : Task ; Type: projen.Task","title":"compileTaskRequired "},{"location":"typescript/pdk_projen/API/#componentsrequired_2","text":"public readonly components : Component []; Type: projen.Component[] Returns all the components within this project.","title":"componentsRequired "},{"location":"typescript/pdk_projen/API/#depsrequired_10","text":"public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#ejectedrequired_2","text":"public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"typescript/pdk_projen/API/#filesrequired_2","text":"public readonly files : FileBase []; Type: projen.FileBase[] All files in this project.","title":"filesRequired "},{"location":"typescript/pdk_projen/API/#gitattributesrequired_2","text":"public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"typescript/pdk_projen/API/#gitignorerequired_2","text":"public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"typescript/pdk_projen/API/#loggerrequired_2","text":"public readonly logger : Logger ; Type: projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"typescript/pdk_projen/API/#namerequired_17","text":"public readonly name : string ; Type: string Project name.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#outdirrequired_2","text":"public readonly outdir : string ; Type: string Absolute output directory of this project.","title":"outdirRequired "},{"location":"typescript/pdk_projen/API/#packagetaskrequired_2","text":"public readonly packageTask : Task ; Type: projen.Task","title":"packageTaskRequired "},{"location":"typescript/pdk_projen/API/#postcompiletaskrequired_2","text":"public readonly postCompileTask : Task ; Type: projen.Task","title":"postCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#precompiletaskrequired_2","text":"public readonly preCompileTask : Task ; Type: projen.Task","title":"preCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#projectbuildrequired_2","text":"public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project.","title":"projectBuildRequired "},{"location":"typescript/pdk_projen/API/#projencommandrequired_2","text":"public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI.","title":"projenCommandRequired "},{"location":"typescript/pdk_projen/API/#rootrequired_2","text":"public readonly root : Project ; Type: projen.Project The root project.","title":"rootRequired "},{"location":"typescript/pdk_projen/API/#tasksrequired_2","text":"public readonly tasks : Tasks ; Type: projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"typescript/pdk_projen/API/#testtaskrequired_2","text":"public readonly testTask : Task ; Type: projen.Task","title":"testTaskRequired "},{"location":"typescript/pdk_projen/API/#defaulttaskoptional_2","text":"public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"defaultTaskOptional "},{"location":"typescript/pdk_projen/API/#initprojectoptional_2","text":"public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"initProjectOptional "},{"location":"typescript/pdk_projen/API/#parentoptional_5","text":"public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projecttyperequired_2","text":"public readonly projectType : ProjectType ; Type: projen.ProjectType","title":"projectTypeRequired "},{"location":"typescript/pdk_projen/API/#autoapproveoptional_2","text":"public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project.","title":"autoApproveOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional_5","text":"public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional_5","text":"public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional_5","text":"public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional_5","text":"public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#allowlibrarydependenciesrequired_1","text":"Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean","title":"~~allowLibraryDependencies~~Required "},{"location":"typescript/pdk_projen/API/#artifactsdirectoryrequired_1","text":"public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg .","title":"artifactsDirectoryRequired "},{"location":"typescript/pdk_projen/API/#artifactsjavascriptdirectoryrequired_1","text":"public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ).","title":"artifactsJavascriptDirectoryRequired "},{"location":"typescript/pdk_projen/API/#bundlerrequired_1","text":"public readonly bundler : Bundler ; Type: projen.javascript.Bundler","title":"bundlerRequired "},{"location":"typescript/pdk_projen/API/#entrypointrequired_1","text":"Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string","title":"~~entrypoint~~Required "},{"location":"typescript/pdk_projen/API/#manifestrequired_1","text":"Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any","title":"~~manifest~~Required "},{"location":"typescript/pdk_projen/API/#packagerequired_1","text":"public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package.","title":"packageRequired "},{"location":"typescript/pdk_projen/API/#packagemanagerrequired_1","text":"Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use.","title":"~~packageManager~~Required "},{"location":"typescript/pdk_projen/API/#runscriptcommandrequired_1","text":"public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager).","title":"runScriptCommandRequired "},{"location":"typescript/pdk_projen/API/#automergeoptional_1","text":"public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Automatic PR merges.","title":"autoMergeOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowoptional_3","text":"public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled.","title":"buildWorkflowOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowjobidoptional_1","text":"public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow.","title":"buildWorkflowJobIdOptional "},{"location":"typescript/pdk_projen/API/#jestoptional_3","text":"public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled).","title":"jestOptional "},{"location":"typescript/pdk_projen/API/#maxnodeversionoptional_3","text":"public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge.","title":"maxNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#minnodeversionoptional_3","text":"public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package.","title":"minNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#npmignoreoptional_3","text":"public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file.","title":"npmignoreOptional "},{"location":"typescript/pdk_projen/API/#prettieroptional_3","text":"public readonly prettier : Prettier ; Type: projen.javascript.Prettier","title":"prettierOptional "},{"location":"typescript/pdk_projen/API/#publisheroptional_1","text":"Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow.","title":"~~publisher~~Optional "},{"location":"typescript/pdk_projen/API/#releaseoptional_3","text":"public readonly release : Release ; Type: projen.release.Release Release management.","title":"releaseOptional "},{"location":"typescript/pdk_projen/API/#upgradeworkflowoptional_1","text":"public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow.","title":"upgradeWorkflowOptional "},{"location":"typescript/pdk_projen/API/#docsdirectoryrequired_1","text":"public readonly docsDirectory : string ; Type: string","title":"docsDirectoryRequired "},{"location":"typescript/pdk_projen/API/#libdirrequired_1","text":"public readonly libdir : string ; Type: string The directory in which compiled .js files reside.","title":"libdirRequired "},{"location":"typescript/pdk_projen/API/#srcdirrequired_1","text":"public readonly srcdir : string ; Type: string The directory in which the .ts sources reside.","title":"srcdirRequired "},{"location":"typescript/pdk_projen/API/#testdirrequired_2","text":"public readonly testdir : string ; Type: string The directory in which tests reside.","title":"testdirRequired "},{"location":"typescript/pdk_projen/API/#tsconfigdevrequired_1","text":"public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen).","title":"tsconfigDevRequired "},{"location":"typescript/pdk_projen/API/#watchtaskrequired_1","text":"public readonly watchTask : Task ; Type: projen.Task The \"watch\" task.","title":"watchTaskRequired "},{"location":"typescript/pdk_projen/API/#docgenoptional_3","text":"public readonly docgen : boolean ; Type: boolean","title":"docgenOptional "},{"location":"typescript/pdk_projen/API/#eslintoptional_3","text":"public readonly eslint : Eslint ; Type: projen.javascript.Eslint","title":"eslintOptional "},{"location":"typescript/pdk_projen/API/#tsconfigoptional_3","text":"public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig","title":"tsconfigOptional "},{"location":"typescript/pdk_projen/API/#tsconfigeslintoptional_1","text":"public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig","title":"tsconfigEslintOptional "},{"location":"typescript/pdk_projen/API/#appentrypointrequired_1","text":"public readonly appEntrypoint : string ; Type: string The CDK app entrypoint.","title":"appEntrypointRequired "},{"location":"typescript/pdk_projen/API/#cdkconfigrequired_1","text":"public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig cdk.json configuration.","title":"cdkConfigRequired "},{"location":"typescript/pdk_projen/API/#cdkdepsrequired_1","text":"public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps","title":"cdkDepsRequired "},{"location":"typescript/pdk_projen/API/#cdktasksrequired_1","text":"public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks Common CDK tasks.","title":"cdkTasksRequired "},{"location":"typescript/pdk_projen/API/#cdkversionrequired_3","text":"public readonly cdkVersion : string ; Type: string The CDK version this app is using.","title":"cdkVersionRequired "},{"location":"typescript/pdk_projen/API/#constants_2","text":"Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"typescript/pdk_projen/API/#default_taskrequired_2","text":"public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "},{"location":"typescript/pdk_projen/API/#enums","text":"","title":"Enums "},{"location":"typescript/pdk_projen/API/#samplelanguage","text":"Name Description TYPESCRIPT No description. PYTHON No description. Supported languages to generate sample code.","title":"SampleLanguage "},{"location":"typescript/pdk_projen/API/#typescript","text":"","title":"TYPESCRIPT "},{"location":"typescript/pdk_projen/API/#python","text":"","title":"PYTHON "},{"location":"typescript/pdk_projen/API/#targetdependencyproject","text":"Name Description SELF Only rely on the package where the target is called. DEPENDENCIES Target relies on executing the target against all dependencies first. Supported enums for a TargetDependency.","title":"TargetDependencyProject "},{"location":"typescript/pdk_projen/API/#self","text":"Only rely on the package where the target is called. This is usually done for test like targets where you only want to run unit tests on the target packages without testing all dependent packages.","title":"SELF "},{"location":"typescript/pdk_projen/API/#dependencies","text":"Target relies on executing the target against all dependencies first. This is usually done for build like targets where you want to build all dependant projects first.","title":"DEPENDENCIES "}]}