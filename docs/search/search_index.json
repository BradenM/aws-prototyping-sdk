{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS-PDK Welcome!","title":"AWS-PDK"},{"location":"#aws-pdk","text":"Welcome!","title":"AWS-PDK"},{"location":"typescript/pdk_pipeline/API/","text":"pdk_pipeline TODO API Reference Structs GreeterProps Initializer import { pdk_pipeline } from 'aws-prototyping-sdk' const greeterProps : pdk_pipeline.GreeterProps = { ... } Properties Name Type Description greetee string No description. greetee Required public readonly greetee : string ; Type: string Classes Greeter Example class. Initializers import { pdk_pipeline } from 'aws-prototyping-sdk' new pdk_pipeline . Greeter ( props : GreeterProps ) Name Type Description props GreeterProps No description. props Required Type: GreeterProps Methods Name Description greet No description. greet public greet () : string","title":"API"},{"location":"typescript/pdk_pipeline/API/#pdk_pipeline","text":"TODO","title":"pdk_pipeline"},{"location":"typescript/pdk_pipeline/API/#api-reference","text":"","title":"API Reference "},{"location":"typescript/pdk_pipeline/API/#structs","text":"","title":"Structs "},{"location":"typescript/pdk_pipeline/API/#greeterprops","text":"","title":"GreeterProps "},{"location":"typescript/pdk_pipeline/API/#initializer","text":"import { pdk_pipeline } from 'aws-prototyping-sdk' const greeterProps : pdk_pipeline.GreeterProps = { ... }","title":"Initializer "},{"location":"typescript/pdk_pipeline/API/#properties","text":"Name Type Description greetee string No description.","title":"Properties "},{"location":"typescript/pdk_pipeline/API/#greeteerequired","text":"public readonly greetee : string ; Type: string","title":"greeteeRequired "},{"location":"typescript/pdk_pipeline/API/#classes","text":"","title":"Classes "},{"location":"typescript/pdk_pipeline/API/#greeter","text":"Example class.","title":"Greeter "},{"location":"typescript/pdk_pipeline/API/#initializers","text":"import { pdk_pipeline } from 'aws-prototyping-sdk' new pdk_pipeline . Greeter ( props : GreeterProps ) Name Type Description props GreeterProps No description.","title":"Initializers "},{"location":"typescript/pdk_pipeline/API/#propsrequired","text":"Type: GreeterProps","title":"propsRequired "},{"location":"typescript/pdk_pipeline/API/#methods","text":"Name Description greet No description.","title":"Methods "},{"location":"typescript/pdk_pipeline/API/#greet","text":"public greet () : string","title":"greet "},{"location":"typescript/pdk_projen/API/","text":"API Reference Structs NxMonorepoProjectOptions Initializer import { pdk_projen } from 'aws-prototyping-sdk' const nxMonorepoProjectOptions : pdk_projen.NxMonorepoProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveProjenUpgrades boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule string[] Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret string Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps any[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenTokenSecret Optional public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. stale Optional public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Author's Organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact. deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveProjenUpgrades Optional public readonly autoApproveProjenUpgrades : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade. gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. ~~ projenUpgradeAutoMerge ~~ Optional Deprecated: use autoApproveProjenUpgrades . public readonly projenUpgradeAutoMerge : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. projenUpgradeSchedule Optional public readonly projenUpgradeSchedule : string []; Type: string[] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression. ~~ projenUpgradeSecret ~~ Optional Deprecated: use githubTokenSecret instead. public readonly projenUpgradeSecret : string ; Type: string Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : any []; Type: any[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). Classes NxMonorepoProject Initializers import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . NxMonorepoProject ( options : NxMonorepoProjectOptions ) Name Type Description options NxMonorepoProjectOptions No description. options Required Type: NxMonorepoProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency No description. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. addImplicitDependency public addImplicitDependency ( dependent : Project , dependee : Project ) : void dependent Required Type: projen.Project dependee Required Type: projen.Project Properties Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Automatic PR merges. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. buildTask Required public readonly buildTask : Task ; Type: projen.Task compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Automatic PR merges. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"API Reference <a name=\"API Reference\" id=\"api-reference\"></a>"},{"location":"typescript/pdk_projen/API/#api-reference","text":"","title":"API Reference "},{"location":"typescript/pdk_projen/API/#structs","text":"","title":"Structs "},{"location":"typescript/pdk_projen/API/#nxmonorepoprojectoptions","text":"","title":"NxMonorepoProjectOptions "},{"location":"typescript/pdk_projen/API/#initializer","text":"import { pdk_projen } from 'aws-prototyping-sdk' const nxMonorepoProjectOptions : pdk_projen.NxMonorepoProjectOptions = { ... }","title":"Initializer "},{"location":"typescript/pdk_projen/API/#properties","text":"Name Type Description name string This is the name of your project. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Author's Organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for publishing npm package to AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveProjenUpgrades boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for depsUpgrade. gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenUpgradeAutoMerge boolean Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). projenUpgradeSchedule string[] Customize the projenUpgrade schedule in cron expression. projenUpgradeSecret string Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps any[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use.","title":"Properties "},{"location":"typescript/pdk_projen/API/#namerequired","text":"public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#loggingoptional","text":"public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity.","title":"loggingOptional "},{"location":"typescript/pdk_projen/API/#outdiroptional","text":"public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects.","title":"outdirOptional "},{"location":"typescript/pdk_projen/API/#parentoptional","text":"public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projencommandoptional","text":"public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments.","title":"projenCommandOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptional","text":"public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation.","title":"projenrcJsonOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsonoptionsoptional","text":"public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json.","title":"projenrcJsonOptionsOptional "},{"location":"typescript/pdk_projen/API/#autoapproveoptionsoptional","text":"public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow.","title":"autoApproveOptionsOptional "},{"location":"typescript/pdk_projen/API/#automergeoptionsoptional","text":"public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify is set to false.","title":"autoMergeOptionsOptional "},{"location":"typescript/pdk_projen/API/#clobberoptional","text":"public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin.","title":"clobberOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional","text":"public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces).","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional","text":"public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#githuboptionsoptional","text":"public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration.","title":"githubOptionsOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional","text":"public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment.","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#mergifyoptional","text":"Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not.","title":"~~mergify~~Optional "},{"location":"typescript/pdk_projen/API/#mergifyoptionsoptional","text":"Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify.","title":"~~mergifyOptions~~Optional "},{"location":"typescript/pdk_projen/API/#projecttypeoptional","text":"Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app).","title":"~~projectType~~Optional "},{"location":"typescript/pdk_projen/API/#projentokensecretoptional","text":"public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope.","title":"projenTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#readmeoptional","text":"public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup.","title":"readmeOptional "},{"location":"typescript/pdk_projen/API/#staleoptional","text":"public readonly stale : boolean ; Type: boolean Default: true Auto-close of stale issues and pull request. See staleOptions for options.","title":"staleOptional "},{"location":"typescript/pdk_projen/API/#staleoptionsoptional","text":"public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false .","title":"staleOptionsOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional","text":"public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#allowlibrarydependenciesoptional","text":"public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these.","title":"allowLibraryDependenciesOptional "},{"location":"typescript/pdk_projen/API/#authoremailoptional","text":"public readonly authorEmail : string ; Type: string Author's e-mail.","title":"authorEmailOptional "},{"location":"typescript/pdk_projen/API/#authornameoptional","text":"public readonly authorName : string ; Type: string Author's name.","title":"authorNameOptional "},{"location":"typescript/pdk_projen/API/#authororganizationoptional","text":"public readonly authorOrganization : boolean ; Type: boolean Author's Organization.","title":"authorOrganizationOptional "},{"location":"typescript/pdk_projen/API/#authorurloptional","text":"public readonly authorUrl : string ; Type: string Author's URL / Website.","title":"authorUrlOptional "},{"location":"typescript/pdk_projen/API/#autodetectbinoptional","text":"public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section.","title":"autoDetectBinOptional "},{"location":"typescript/pdk_projen/API/#binoptional","text":"public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section.","title":"binOptional "},{"location":"typescript/pdk_projen/API/#bugsemailoptional","text":"public readonly bugsEmail : string ; Type: string The email address to which issues should be reported.","title":"bugsEmailOptional "},{"location":"typescript/pdk_projen/API/#bugsurloptional","text":"public readonly bugsUrl : string ; Type: string The url to your project's issue tracker.","title":"bugsUrlOptional "},{"location":"typescript/pdk_projen/API/#bundleddepsoptional","text":"public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"bundledDepsOptional "},{"location":"typescript/pdk_projen/API/#codeartifactoptionsoptional","text":"public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for publishing npm package to AWS CodeArtifact.","title":"codeArtifactOptionsOptional "},{"location":"typescript/pdk_projen/API/#depsoptional","text":"public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"depsOptional "},{"location":"typescript/pdk_projen/API/#descriptionoptional","text":"public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description","title":"descriptionOptional "},{"location":"typescript/pdk_projen/API/#devdepsoptional","text":"public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include.","title":"devDepsOptional "},{"location":"typescript/pdk_projen/API/#entrypointoptional","text":"public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json","title":"entrypointOptional "},{"location":"typescript/pdk_projen/API/#homepageoptional","text":"public readonly homepage : string ; Type: string Package's Homepage / Website.","title":"homepageOptional "},{"location":"typescript/pdk_projen/API/#keywordsoptional","text":"public readonly keywords : string []; Type: string[] Keywords to include in package.json .","title":"keywordsOptional "},{"location":"typescript/pdk_projen/API/#licenseoptional","text":"public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified.","title":"licenseOptional "},{"location":"typescript/pdk_projen/API/#licensedoptional","text":"public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added.","title":"licensedOptional "},{"location":"typescript/pdk_projen/API/#maxnodeversionoptional","text":"public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive).","title":"maxNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#minnodeversionoptional","text":"public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive).","title":"minNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#npmaccessoptional","text":"public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package.","title":"npmAccessOptional "},{"location":"typescript/pdk_projen/API/#npmregistryoptional","text":"Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl .","title":"~~npmRegistry~~Optional "},{"location":"typescript/pdk_projen/API/#npmregistryurloptional","text":"public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\")","title":"npmRegistryUrlOptional "},{"location":"typescript/pdk_projen/API/#npmtokensecretoptional","text":"public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages.","title":"npmTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#packagemanageroptional","text":"public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts.","title":"packageManagerOptional "},{"location":"typescript/pdk_projen/API/#packagenameoptional","text":"public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json.","title":"packageNameOptional "},{"location":"typescript/pdk_projen/API/#peerdependencyoptionsoptional","text":"public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps .","title":"peerDependencyOptionsOptional "},{"location":"typescript/pdk_projen/API/#peerdepsoptional","text":"public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required.","title":"peerDepsOptional "},{"location":"typescript/pdk_projen/API/#repositoryoptional","text":"public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository","title":"repositoryOptional "},{"location":"typescript/pdk_projen/API/#repositorydirectoryoptional","text":"public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.","title":"repositoryDirectoryOptional "},{"location":"typescript/pdk_projen/API/#scriptsoptional","text":"public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten.","title":"scriptsOptional "},{"location":"typescript/pdk_projen/API/#stabilityoptional","text":"public readonly stability : string ; Type: string Package's Stability.","title":"stabilityOptional "},{"location":"typescript/pdk_projen/API/#jsiireleaseversionoptional","text":"public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm.","title":"jsiiReleaseVersionOptional "},{"location":"typescript/pdk_projen/API/#majorversionoptional","text":"public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version.","title":"majorVersionOptional "},{"location":"typescript/pdk_projen/API/#npmdisttagoptional","text":"public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch.","title":"npmDistTagOptional "},{"location":"typescript/pdk_projen/API/#postbuildstepsoptional","text":"public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow.","title":"postBuildStepsOptional "},{"location":"typescript/pdk_projen/API/#prereleaseoptional","text":"public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\").","title":"prereleaseOptional "},{"location":"typescript/pdk_projen/API/#publishdryrunoptional","text":"public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command.","title":"publishDryRunOptional "},{"location":"typescript/pdk_projen/API/#publishtasksoptional","text":"public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity.","title":"publishTasksOptional "},{"location":"typescript/pdk_projen/API/#releasebranchesoptional","text":"public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch.","title":"releaseBranchesOptional "},{"location":"typescript/pdk_projen/API/#releaseeverycommitoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches .","title":"~~releaseEveryCommit~~Optional "},{"location":"typescript/pdk_projen/API/#releasefailureissueoptional","text":"public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task.","title":"releaseFailureIssueOptional "},{"location":"typescript/pdk_projen/API/#releasefailureissuelabeloptional","text":"public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true.","title":"releaseFailureIssueLabelOptional "},{"location":"typescript/pdk_projen/API/#releasescheduleoptional","text":"Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases.","title":"~~releaseSchedule~~Optional "},{"location":"typescript/pdk_projen/API/#releasetagprefixoptional","text":"public readonly releaseTagPrefix : string ; Type: string Default: no prefix Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix.","title":"releaseTagPrefixOptional "},{"location":"typescript/pdk_projen/API/#releasetriggeroptional","text":"public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use.","title":"releaseTriggerOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflownameoptional","text":"public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow.","title":"releaseWorkflowNameOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflowsetupstepsoptional","text":"public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container.","title":"releaseWorkflowSetupStepsOptional "},{"location":"typescript/pdk_projen/API/#versionrcoptionsoptional","text":"public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it.","title":"versionrcOptionsOptional "},{"location":"typescript/pdk_projen/API/#workflowcontainerimageoptional","text":"public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows.","title":"workflowContainerImageOptional "},{"location":"typescript/pdk_projen/API/#workflowrunsonoptional","text":"public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels.","title":"workflowRunsOnOptional "},{"location":"typescript/pdk_projen/API/#defaultreleasebranchrequired","text":"public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch.","title":"defaultReleaseBranchRequired "},{"location":"typescript/pdk_projen/API/#artifactsdirectoryoptional","text":"public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts.","title":"artifactsDirectoryOptional "},{"location":"typescript/pdk_projen/API/#autoapproveprojenupgradesoptional","text":"public readonly autoApproveProjenUpgrades : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveProjenUpgradesOptional "},{"location":"typescript/pdk_projen/API/#autoapproveupgradesoptional","text":"public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"autoApproveUpgradesOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowoptional","text":"public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs.","title":"buildWorkflowOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowtriggersoptional","text":"public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers.","title":"buildWorkflowTriggersOptional "},{"location":"typescript/pdk_projen/API/#bundleroptionsoptional","text":"public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler .","title":"bundlerOptionsOptional "},{"location":"typescript/pdk_projen/API/#codecovoptional","text":"public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret .","title":"codeCovOptional "},{"location":"typescript/pdk_projen/API/#codecovtokensecretoptional","text":"public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.","title":"codeCovTokenSecretOptional "},{"location":"typescript/pdk_projen/API/#copyrightowneroptional","text":"public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner.","title":"copyrightOwnerOptional "},{"location":"typescript/pdk_projen/API/#copyrightperiodoptional","text":"public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file.","title":"copyrightPeriodOptional "},{"location":"typescript/pdk_projen/API/#dependabotoptional","text":"public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade .","title":"dependabotOptional "},{"location":"typescript/pdk_projen/API/#dependabotoptionsoptional","text":"public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot.","title":"dependabotOptionsOptional "},{"location":"typescript/pdk_projen/API/#depsupgradeoptional","text":"public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot .","title":"depsUpgradeOptional "},{"location":"typescript/pdk_projen/API/#depsupgradeoptionsoptional","text":"public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for depsUpgrade.","title":"depsUpgradeOptionsOptional "},{"location":"typescript/pdk_projen/API/#gitignoreoptional","text":"public readonly gitignore : string []; Type: string[] Additional entries to .gitignore.","title":"gitignoreOptional "},{"location":"typescript/pdk_projen/API/#jestoptional","text":"public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests.","title":"jestOptional "},{"location":"typescript/pdk_projen/API/#jestoptionsoptional","text":"public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options.","title":"jestOptionsOptional "},{"location":"typescript/pdk_projen/API/#mutablebuildoptional","text":"public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks.","title":"mutableBuildOptional "},{"location":"typescript/pdk_projen/API/#npmignoreoptional","text":"Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore.","title":"~~npmignore~~Optional "},{"location":"typescript/pdk_projen/API/#npmignoreenabledoptional","text":"public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.","title":"npmignoreEnabledOptional "},{"location":"typescript/pdk_projen/API/#packageoptional","text":"public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ).","title":"packageOptional "},{"location":"typescript/pdk_projen/API/#prettieroptional","text":"public readonly prettier : boolean ; Type: boolean Default: false Setup prettier.","title":"prettierOptional "},{"location":"typescript/pdk_projen/API/#prettieroptionsoptional","text":"public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options.","title":"prettierOptionsOptional "},{"location":"typescript/pdk_projen/API/#projendevdependencyoptional","text":"public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency.","title":"projenDevDependencyOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsoptional","text":"public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation.","title":"projenrcJsOptional "},{"location":"typescript/pdk_projen/API/#projenrcjsoptionsoptional","text":"public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js.","title":"projenrcJsOptionsOptional "},{"location":"typescript/pdk_projen/API/#projenupgradeautomergeoptional","text":"Deprecated: use autoApproveProjenUpgrades . public readonly projenUpgradeAutoMerge : boolean ; Type: boolean Default: false Automatically approve projen upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined.","title":"~~projenUpgradeAutoMerge~~Optional "},{"location":"typescript/pdk_projen/API/#projenupgradescheduleoptional","text":"public readonly projenUpgradeSchedule : string []; Type: string[] Default: [ \"0 6 * \" ] Customize the projenUpgrade schedule in cron expression.","title":"projenUpgradeScheduleOptional "},{"location":"typescript/pdk_projen/API/#projenupgradesecretoptional","text":"Deprecated: use githubTokenSecret instead. public readonly projenUpgradeSecret : string ; Type: string Default: no automatic projen upgrade pull requests Periodically submits a pull request for projen upgrades (executes yarn projen:upgrade ). This setting is a GitHub secret name which contains a GitHub Access Token with repo and workflow permissions. This token is used to submit the upgrade pull request, which will likely include workflow updates. To create a personal access token see https://github.com/settings/tokens","title":"~~projenUpgradeSecret~~Optional "},{"location":"typescript/pdk_projen/API/#projenversionoptional","text":"public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install.","title":"projenVersionOptional "},{"location":"typescript/pdk_projen/API/#pullrequesttemplateoptional","text":"public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template.","title":"pullRequestTemplateOptional "},{"location":"typescript/pdk_projen/API/#pullrequesttemplatecontentsoptional","text":"public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template.","title":"pullRequestTemplateContentsOptional "},{"location":"typescript/pdk_projen/API/#releaseoptional","text":"public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project.","title":"releaseOptional "},{"location":"typescript/pdk_projen/API/#releasetonpmoptional","text":"public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced.","title":"releaseToNpmOptional "},{"location":"typescript/pdk_projen/API/#releaseworkflowoptional","text":"Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release .","title":"~~releaseWorkflow~~Optional "},{"location":"typescript/pdk_projen/API/#workflowbootstrapstepsoptional","text":"public readonly workflowBootstrapSteps : any []; Type: any[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo.","title":"workflowBootstrapStepsOptional "},{"location":"typescript/pdk_projen/API/#workflowgitidentityoptional","text":"public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows.","title":"workflowGitIdentityOptional "},{"location":"typescript/pdk_projen/API/#workflownodeversionoptional","text":"public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows.","title":"workflowNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#disabletsconfigoptional","text":"public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler).","title":"disableTsconfigOptional "},{"location":"typescript/pdk_projen/API/#docgenoptional","text":"public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc.","title":"docgenOptional "},{"location":"typescript/pdk_projen/API/#docsdirectoryoptional","text":"public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory.","title":"docsDirectoryOptional "},{"location":"typescript/pdk_projen/API/#entrypointtypesoptional","text":"public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module.","title":"entrypointTypesOptional "},{"location":"typescript/pdk_projen/API/#eslintoptional","text":"public readonly eslint : boolean ; Type: boolean Default: true Setup eslint.","title":"eslintOptional "},{"location":"typescript/pdk_projen/API/#eslintoptionsoptional","text":"public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options.","title":"eslintOptionsOptional "},{"location":"typescript/pdk_projen/API/#libdiroptional","text":"public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory.","title":"libdirOptional "},{"location":"typescript/pdk_projen/API/#projenrctsoptional","text":"public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ).","title":"projenrcTsOptional "},{"location":"typescript/pdk_projen/API/#projenrctsoptionsoptional","text":"public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts.","title":"projenrcTsOptionsOptional "},{"location":"typescript/pdk_projen/API/#samplecodeoptional","text":"public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there.","title":"sampleCodeOptional "},{"location":"typescript/pdk_projen/API/#srcdiroptional","text":"public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory.","title":"srcdirOptional "},{"location":"typescript/pdk_projen/API/#testdiroptional","text":"public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory.","title":"testdirOptional "},{"location":"typescript/pdk_projen/API/#tsconfigoptional","text":"public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig.","title":"tsconfigOptional "},{"location":"typescript/pdk_projen/API/#tsconfigdevoptional","text":"public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing).","title":"tsconfigDevOptional "},{"location":"typescript/pdk_projen/API/#tsconfigdevfileoptional","text":"public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file.","title":"tsconfigDevFileOptional "},{"location":"typescript/pdk_projen/API/#typescriptversionoptional","text":"public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ).","title":"typescriptVersionOptional "},{"location":"typescript/pdk_projen/API/#classes","text":"","title":"Classes "},{"location":"typescript/pdk_projen/API/#nxmonorepoproject","text":"","title":"NxMonorepoProject "},{"location":"typescript/pdk_projen/API/#initializers","text":"import { pdk_projen } from 'aws-prototyping-sdk' new pdk_projen . NxMonorepoProject ( options : NxMonorepoProjectOptions ) Name Type Description options NxMonorepoProjectOptions No description.","title":"Initializers "},{"location":"typescript/pdk_projen/API/#optionsrequired","text":"Type: NxMonorepoProjectOptions","title":"optionsRequired "},{"location":"typescript/pdk_projen/API/#methods","text":"Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency No description.","title":"Methods "},{"location":"typescript/pdk_projen/API/#addexcludefromcleanup","text":"public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth.","title":"addExcludeFromCleanup "},{"location":"typescript/pdk_projen/API/#globsrequired","text":"Type: string The glob patterns to match.","title":"globsRequired "},{"location":"typescript/pdk_projen/API/#addgitignore","text":"public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern.","title":"addGitIgnore "},{"location":"typescript/pdk_projen/API/#patternrequired","text":"Type: string The glob pattern to ignore.","title":"patternRequired "},{"location":"typescript/pdk_projen/API/#addpackageignore","text":"public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore .","title":"addPackageIgnore "},{"location":"typescript/pdk_projen/API/#patternrequired_1","text":"Type: string","title":"patternRequired "},{"location":"typescript/pdk_projen/API/#addtask","text":"public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name.","title":"addTask "},{"location":"typescript/pdk_projen/API/#namerequired_1","text":"Type: string The task name to add.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#propsoptional","text":"Type: projen.TaskOptions Task properties.","title":"propsOptional "},{"location":"typescript/pdk_projen/API/#addtip","text":"public addTip ( message : string ) : void Prints a \"tip\" message during synthesis.","title":"~~addTip~~ "},{"location":"typescript/pdk_projen/API/#messagerequired","text":"Type: string The message.","title":"messageRequired "},{"location":"typescript/pdk_projen/API/#annotategenerated","text":"public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md","title":"annotateGenerated "},{"location":"typescript/pdk_projen/API/#globrequired","text":"Type: string the glob pattern to match (could be a file path).","title":"globRequired "},{"location":"typescript/pdk_projen/API/#postsynthesize","text":"public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed.","title":"postSynthesize "},{"location":"typescript/pdk_projen/API/#presynthesize","text":"public preSynthesize () : void Called before all components are synthesized.","title":"preSynthesize "},{"location":"typescript/pdk_projen/API/#removetask","text":"public removeTask ( name : string ) : Task Removes a task from a project.","title":"removeTask "},{"location":"typescript/pdk_projen/API/#namerequired_2","text":"Type: string The name of the task to remove.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#runtaskcommand","text":"public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK .","title":"runTaskCommand "},{"location":"typescript/pdk_projen/API/#taskrequired","text":"Type: projen.Task The task for which the command is required.","title":"taskRequired "},{"location":"typescript/pdk_projen/API/#synth","text":"public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" 2. Delete all generated files 3. Synthesize all sub-projects 4. Synthesize all components of this project 5. Call \"postSynthesize()\" for all components of this project 6. Call \"this.postSynthesize()\"","title":"synth "},{"location":"typescript/pdk_projen/API/#tryfindfile","text":"public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects.","title":"tryFindFile "},{"location":"typescript/pdk_projen/API/#filepathrequired","text":"Type: string The file path. If this path is relative, it will be resolved from the root of this project.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindjsonfile","text":"public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name.","title":"~~tryFindJsonFile~~ "},{"location":"typescript/pdk_projen/API/#filepathrequired_1","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#tryfindobjectfile","text":"public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name.","title":"tryFindObjectFile "},{"location":"typescript/pdk_projen/API/#filepathrequired_2","text":"Type: string The file path.","title":"filePathRequired "},{"location":"typescript/pdk_projen/API/#addbins","text":"public addBins ( bins : {[ key : string ] : string }) : void","title":"addBins "},{"location":"typescript/pdk_projen/API/#binsrequired","text":"Type: {[ key: string ]: string}","title":"binsRequired "},{"location":"typescript/pdk_projen/API/#addbundleddeps","text":"public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json .","title":"addBundledDeps "},{"location":"typescript/pdk_projen/API/#depsrequired","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addcompilecommand","text":"public addCompileCommand ( commands : string ) : void DEPRECATED.","title":"~~addCompileCommand~~ "},{"location":"typescript/pdk_projen/API/#commandsrequired","text":"Type: string","title":"commandsRequired "},{"location":"typescript/pdk_projen/API/#adddeps","text":"public addDeps ( deps : string ) : void Defines normal dependencies.","title":"addDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_1","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#adddevdeps","text":"public addDevDeps ( deps : string ) : void Defines development/test dependencies.","title":"addDevDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_2","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addfields","text":"public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json .","title":"addFields "},{"location":"typescript/pdk_projen/API/#fieldsrequired","text":"Type: {[ key: string ]: any} The fields to set.","title":"fieldsRequired "},{"location":"typescript/pdk_projen/API/#addkeywords","text":"public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated).","title":"addKeywords "},{"location":"typescript/pdk_projen/API/#keywordsrequired","text":"Type: string The keywords to add.","title":"keywordsRequired "},{"location":"typescript/pdk_projen/API/#addpeerdeps","text":"public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers.","title":"addPeerDeps "},{"location":"typescript/pdk_projen/API/#depsrequired_3","text":"Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 .","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#addtestcommand","text":"public addTestCommand ( commands : string ) : void DEPRECATED.","title":"~~addTestCommand~~ "},{"location":"typescript/pdk_projen/API/#commandsrequired_1","text":"Type: string","title":"commandsRequired "},{"location":"typescript/pdk_projen/API/#hasscript","text":"public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined.","title":"hasScript "},{"location":"typescript/pdk_projen/API/#namerequired_3","text":"Type: string The name of the script.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#removescript","text":"public removeScript ( name : string ) : void Removes the npm script (always successful).","title":"removeScript "},{"location":"typescript/pdk_projen/API/#namerequired_4","text":"Type: string The name of the script.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#renderworkflowsetup","text":"public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow.","title":"renderWorkflowSetup "},{"location":"typescript/pdk_projen/API/#optionsoptional","text":"Type: projen.javascript.RenderWorkflowSetupOptions Options.","title":"optionsOptional "},{"location":"typescript/pdk_projen/API/#setscript","text":"public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script.","title":"setScript "},{"location":"typescript/pdk_projen/API/#namerequired_5","text":"Type: string The script name.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#commandrequired","text":"Type: string The command to execute.","title":"commandRequired "},{"location":"typescript/pdk_projen/API/#addimplicitdependency","text":"public addImplicitDependency ( dependent : Project , dependee : Project ) : void","title":"addImplicitDependency "},{"location":"typescript/pdk_projen/API/#dependentrequired","text":"Type: projen.Project","title":"dependentRequired "},{"location":"typescript/pdk_projen/API/#dependeerequired","text":"Type: projen.Project","title":"dependeeRequired "},{"location":"typescript/pdk_projen/API/#properties_1","text":"Name Type Description buildTask projen.Task No description. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Automatic PR merges. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this pacakge. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description.","title":"Properties "},{"location":"typescript/pdk_projen/API/#buildtaskrequired","text":"public readonly buildTask : Task ; Type: projen.Task","title":"buildTaskRequired "},{"location":"typescript/pdk_projen/API/#compiletaskrequired","text":"public readonly compileTask : Task ; Type: projen.Task","title":"compileTaskRequired "},{"location":"typescript/pdk_projen/API/#componentsrequired","text":"public readonly components : Component []; Type: projen.Component[] Returns all the components within this project.","title":"componentsRequired "},{"location":"typescript/pdk_projen/API/#depsrequired_4","text":"public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies.","title":"depsRequired "},{"location":"typescript/pdk_projen/API/#ejectedrequired","text":"public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected.","title":"ejectedRequired "},{"location":"typescript/pdk_projen/API/#filesrequired","text":"public readonly files : FileBase []; Type: projen.FileBase[] All files in this project.","title":"filesRequired "},{"location":"typescript/pdk_projen/API/#gitattributesrequired","text":"public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository.","title":"gitattributesRequired "},{"location":"typescript/pdk_projen/API/#gitignorerequired","text":"public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore.","title":"gitignoreRequired "},{"location":"typescript/pdk_projen/API/#loggerrequired","text":"public readonly logger : Logger ; Type: projen.Logger Logging utilities.","title":"loggerRequired "},{"location":"typescript/pdk_projen/API/#namerequired_6","text":"public readonly name : string ; Type: string Project name.","title":"nameRequired "},{"location":"typescript/pdk_projen/API/#outdirrequired","text":"public readonly outdir : string ; Type: string Absolute output directory of this project.","title":"outdirRequired "},{"location":"typescript/pdk_projen/API/#packagetaskrequired","text":"public readonly packageTask : Task ; Type: projen.Task","title":"packageTaskRequired "},{"location":"typescript/pdk_projen/API/#postcompiletaskrequired","text":"public readonly postCompileTask : Task ; Type: projen.Task","title":"postCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#precompiletaskrequired","text":"public readonly preCompileTask : Task ; Type: projen.Task","title":"preCompileTaskRequired "},{"location":"typescript/pdk_projen/API/#projectbuildrequired","text":"public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project.","title":"projectBuildRequired "},{"location":"typescript/pdk_projen/API/#projencommandrequired","text":"public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI.","title":"projenCommandRequired "},{"location":"typescript/pdk_projen/API/#rootrequired","text":"public readonly root : Project ; Type: projen.Project The root project.","title":"rootRequired "},{"location":"typescript/pdk_projen/API/#tasksrequired","text":"public readonly tasks : Tasks ; Type: projen.Tasks Project tasks.","title":"tasksRequired "},{"location":"typescript/pdk_projen/API/#testtaskrequired","text":"public readonly testTask : Task ; Type: projen.Task","title":"testTaskRequired "},{"location":"typescript/pdk_projen/API/#defaulttaskoptional","text":"public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected.","title":"defaultTaskOptional "},{"location":"typescript/pdk_projen/API/#initprojectoptional","text":"public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type.","title":"initProjectOptional "},{"location":"typescript/pdk_projen/API/#parentoptional_1","text":"public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project.","title":"parentOptional "},{"location":"typescript/pdk_projen/API/#projecttyperequired","text":"public readonly projectType : ProjectType ; Type: projen.ProjectType","title":"projectTypeRequired "},{"location":"typescript/pdk_projen/API/#autoapproveoptional","text":"public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project.","title":"autoApproveOptional "},{"location":"typescript/pdk_projen/API/#devcontaineroptional_1","text":"public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false","title":"devContainerOptional "},{"location":"typescript/pdk_projen/API/#githuboptional_1","text":"public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects.","title":"githubOptional "},{"location":"typescript/pdk_projen/API/#gitpodoptional_1","text":"public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false","title":"gitpodOptional "},{"location":"typescript/pdk_projen/API/#vscodeoptional_1","text":"public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects.","title":"vscodeOptional "},{"location":"typescript/pdk_projen/API/#allowlibrarydependenciesrequired","text":"Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean","title":"~~allowLibraryDependencies~~Required "},{"location":"typescript/pdk_projen/API/#artifactsdirectoryrequired","text":"public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg .","title":"artifactsDirectoryRequired "},{"location":"typescript/pdk_projen/API/#artifactsjavascriptdirectoryrequired","text":"public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ).","title":"artifactsJavascriptDirectoryRequired "},{"location":"typescript/pdk_projen/API/#bundlerrequired","text":"public readonly bundler : Bundler ; Type: projen.javascript.Bundler","title":"bundlerRequired "},{"location":"typescript/pdk_projen/API/#entrypointrequired","text":"Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string","title":"~~entrypoint~~Required "},{"location":"typescript/pdk_projen/API/#manifestrequired","text":"Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any","title":"~~manifest~~Required "},{"location":"typescript/pdk_projen/API/#packagerequired","text":"public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package.","title":"packageRequired "},{"location":"typescript/pdk_projen/API/#packagemanagerrequired","text":"Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use.","title":"~~packageManager~~Required "},{"location":"typescript/pdk_projen/API/#runscriptcommandrequired","text":"public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager).","title":"runScriptCommandRequired "},{"location":"typescript/pdk_projen/API/#automergeoptional","text":"public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Automatic PR merges.","title":"autoMergeOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowoptional_1","text":"public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled.","title":"buildWorkflowOptional "},{"location":"typescript/pdk_projen/API/#buildworkflowjobidoptional","text":"public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow.","title":"buildWorkflowJobIdOptional "},{"location":"typescript/pdk_projen/API/#jestoptional_1","text":"public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled).","title":"jestOptional "},{"location":"typescript/pdk_projen/API/#maxnodeversionoptional_1","text":"public readonly maxNodeVersion : string ; Type: string Maximum node version required by this pacakge.","title":"maxNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#minnodeversionoptional_1","text":"public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package.","title":"minNodeVersionOptional "},{"location":"typescript/pdk_projen/API/#npmignoreoptional_1","text":"public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file.","title":"npmignoreOptional "},{"location":"typescript/pdk_projen/API/#prettieroptional_1","text":"public readonly prettier : Prettier ; Type: projen.javascript.Prettier","title":"prettierOptional "},{"location":"typescript/pdk_projen/API/#publisheroptional","text":"Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow.","title":"~~publisher~~Optional "},{"location":"typescript/pdk_projen/API/#releaseoptional_1","text":"public readonly release : Release ; Type: projen.release.Release Release management.","title":"releaseOptional "},{"location":"typescript/pdk_projen/API/#upgradeworkflowoptional","text":"public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow.","title":"upgradeWorkflowOptional "},{"location":"typescript/pdk_projen/API/#docsdirectoryrequired","text":"public readonly docsDirectory : string ; Type: string","title":"docsDirectoryRequired "},{"location":"typescript/pdk_projen/API/#libdirrequired","text":"public readonly libdir : string ; Type: string The directory in which compiled .js files reside.","title":"libdirRequired "},{"location":"typescript/pdk_projen/API/#srcdirrequired","text":"public readonly srcdir : string ; Type: string The directory in which the .ts sources reside.","title":"srcdirRequired "},{"location":"typescript/pdk_projen/API/#testdirrequired","text":"public readonly testdir : string ; Type: string The directory in which tests reside.","title":"testdirRequired "},{"location":"typescript/pdk_projen/API/#tsconfigdevrequired","text":"public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen).","title":"tsconfigDevRequired "},{"location":"typescript/pdk_projen/API/#watchtaskrequired","text":"public readonly watchTask : Task ; Type: projen.Task The \"watch\" task.","title":"watchTaskRequired "},{"location":"typescript/pdk_projen/API/#docgenoptional_1","text":"public readonly docgen : boolean ; Type: boolean","title":"docgenOptional "},{"location":"typescript/pdk_projen/API/#eslintoptional_1","text":"public readonly eslint : Eslint ; Type: projen.javascript.Eslint","title":"eslintOptional "},{"location":"typescript/pdk_projen/API/#tsconfigoptional_1","text":"public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig","title":"tsconfigOptional "},{"location":"typescript/pdk_projen/API/#tsconfigeslintoptional","text":"public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig","title":"tsconfigEslintOptional "},{"location":"typescript/pdk_projen/API/#constants","text":"Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments).","title":"Constants "},{"location":"typescript/pdk_projen/API/#default_taskrequired","text":"public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"DEFAULT_TASKRequired "}]}